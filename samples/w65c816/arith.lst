          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     65816
          0 :                            .include "w65c816.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                            .include "mos6502.inc"
(2)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :
(2)       0 :                    ;;; MOS6502
(2)       0 :                    ;;; Processor Status Register P
(2)       0 : =1                 P_CARRY         =       %00000001   ; set to 1 if carry occurred
(2)       0 : =2                 P_ZERO          =       %00000010   ; set to 1 if result is zero
(2)       0 : =4                 P_IRQ           =       %00000100   ; if 1, IRQ is disabled
(2)       0 : =8                 P_DECIMAL       =       %00001000   ; if 1, decimal mode
(2)       0 : =10                P_BRK           =       %00010000   ; if 1, BRK command
(2)       0 : =2                 P_OVERFLOW      =       %00000010   ; set to 1 if overflow occurred
(2)       0 : =8                 P_NEGATIVE      =       %00001000   ; set to 1 if result is negative
(2)       0 :
(2)       0 :                    ;;; Vector
(2)       0 : =FFFA              VEC_NMI         =       $FFFA  ; $FFFA: Non Maskable Interrupt
(2)       0 : =FFFC              VEC_RESET       =       $FFFC  ; $FFFE: Reset
(2)       0 : =FFFE              VEC_IRQ         =       $FFFE  ; $FFFE: Interrupt Request and BRK command
(1)       0 :
(1)       0 :                    ;;; W65C816S
(1)       0 :                    ;;; Processor Status Register P
(1)       0 : =10                P_X     =       %00010000       ; if 0, X and Y are 16 bit.
(1)       0 : =20                P_M     =       %00100000       ; if 0, A is 16 bit.
(1)       0 :
(1)       0 :                    ;;; Emulation Mode Vector Locations
(1)       0 : =FFF8              VEC_ABORT       =       $FFF8   ; $FFF8: Abort
(1)       0 : =FFF4              VEC_COP         =       $FFF4   ; $FFF4: COP command
(1)       0 :
(1)       0 :                    ;;; Native Mode Vector Locations
(1)       0 : =FFEE              NVEC_IRQ        =       $FFEE   ; $FFEE: Interrupt Request
(1)       0 : =FFEA              NVEC_NMI        =       $FFEA   ; $FFEA: Non Maskable Interrupt
(1)       0 : =FFE8              NVEC_ABORT      =       $FFE8   ; $FFE8: Abort
(1)       0 : =FFE6              NVEC_BRK        =       $FFE6   ; $FFE6: BRK command
(1)       0 : =FFE4              NVEC_COP        =       $FFE4   ; $FFE4: COP command
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA    =       $DF00
          0 :                            .include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control    =       ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm          =       %11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc     =       %00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc    =       %00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc    =       %00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc    =       %00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm          =       %00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc      =       %00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc      =       %00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc      =       %00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc      =       %00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc      =       %00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc      =       %00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc      =       %00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc      =       %00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm          =       %01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc       =       %00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc       =       %00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc      =       %01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc    =       %01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm         =       %10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status     =       ACIA+0
(1)       0 : =1                 RDRF_bm         =       %00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm         =       %00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm         =       %00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm         =       %00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm         =       %00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm         =       %00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm         =       %01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm         =       %10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data       =       ACIA+1          ; Data register
          0 :
       FFFC :                            *=      VEC_RESET
       FFFC : 00 10                      .word   initialize
       FFFE :
       1000 :                            *=      $1000
       1000 : =FFF               stack   =       *-1
       1000 :                    initialize:
       1000 : 18                         clc
       1001 : FB                         xce                     ; native mode
       1002 :                            longa   off
       1002 : C2 10                      rep     #P_X            ; 16-bit index
       1004 :                            longi   on
       1004 : A2 FF 0F                   ldx     #stack
       1007 : 9A                         txs
       1008 : D8                         cld                     ; clear decimal flag
       1009 : A9 03                      lda     #CDS_RESET_gc   ; Master reset
       100B : 8D 00 DF                   sta     ACIA_control
       100E : A9 14                      lda     #WSB_8N1_gc     ; 8 bits + No Parity + 1 Stop Bits
       1010 :                                                    ; Transmit, Receive interrupts disabled
       1010 : 8D 00 DF                   sta     ACIA_control
       1013 :
       1013 : 20 89 10                   jsr     arith
       1016 : 00                         brk
       1017 : 00                         .byte   0               ; halt to system
       1018 :
       1018 :                    ;;; Print out char
       1018 :                    ;;; @param A char
       1018 :                    ;;; @clobber A
       1018 :                    putchar:
       1018 : 08                         php
       1019 : E2 20                      sep     #P_M            ; 8-bit memory
       101B :                            longa   off
       101B : 20 20 10                   jsr     _putchar
       101E : 28                         plp
       101F : 60                         rts
       1020 :                    _putchar:
       1020 : 48                         pha
       1021 :                    _putchar_loop:
       1021 : AD 00 DF                   lda     ACIA_status
       1024 : 29 02                      and     #TDRE_bm
       1026 : F0 F9                      beq     _putchar_loop
       1028 : 68                         pla                     ; restore A
       1029 : 8D 01 DF                   sta     ACIA_data
       102C : 60                         rts
       102D :
       102D :                    newline:
       102D : 08                         php
       102E : E2 20                      sep     #P_M            ; 8-bit memory
       1030 :                            longa   off
       1030 : A9 0D                      lda     #$0D
       1032 : 20 20 10                   jsr     _putchar
       1035 : A9 0A                      lda     #$0A
       1037 : 20 20 10                   jsr     _putchar
       103A : 28                         plp
       103B : 60                         rts
       103C :
       103C :                    putspace:
       103C : 08                         php
       103D : E2 20                      sep     #P_M            ; 8-bit memory
       103F :                            longa   off
       103F : A9 20                      lda     #' '
       1041 : 20 20 10                   jsr     _putchar
       1044 : 28                         plp
       1045 : 60                         rts
       1046 :
       1046 :                    ;;; Print "X op Y"
       1046 :                    ;;; @params A op letter
       1046 :                    expr:
       1046 : 48                         pha                     ; save op letter
       1047 : 20 40 12                   jsr     print_int16     ; print X
       104A : 20 3C 10                   jsr     putspace
       104D : 68                         pla
       104E : 20 18 10                   jsr     putchar         ; print op
       1051 : 20 3C 10                   jsr     putspace
       1054 : DA                         phx
       1055 : BB                         tyx
       1056 : 20 40 12                   jsr     print_int16     ; print Y
       1059 : FA                         plx
       105A : 60                         rts
       105B :
       105B :                    ;;; Print " = X\n"
       105B :                    ;;; clobber A
       105B :                    answer:
       105B : 20 3C 10                   jsr     putspace
       105E : A9 3D                      lda     #'='
       1060 : 20 18 10                   jsr     putchar
       1063 : 20 3C 10                   jsr     putspace
       1066 : 20 40 12                   jsr     print_int16     ; print X
       1069 : 4C 2D 10                   jmp     newline
       106C :
       106C :                    ;;; Print "X rel Y"
       106C :                    ;;; @clobber A
       106C :                    comp:
       106C : 20 28 12                   jsr     cmpsi2
       106F : F0 0C                      beq     comp_eq
       1071 : 30 0E                      bmi     comp_lt
       1073 : 10 04                      bpl     comp_gt
       1075 : A9 3F                      lda     #'?'
       1077 : D0 0A                      bne     comp_out        ; always branch
       1079 :                    comp_gt:
       1079 : A9 3E                      lda     #'>'
       107B : D0 06                      bne     comp_out
       107D :                    comp_eq:
       107D : A9 3D                      lda     #'='
       107F : D0 02                      bne     comp_out
       1081 :                    comp_lt:
       1081 : A9 3C                      lda     #'<'
       1083 :                    comp_out:
       1083 : 20 46 10                   jsr     expr
       1086 : 4C 2D 10                   jmp     newline
       1089 :
       1089 :                    arith:
       1089 : A2 50 46                   ldx     #18000
       108C : A0 60 6D                   ldy     #28000
       108F : A9 2B                      lda     #'+'
       1091 : 20 46 10                   jsr     expr
       1094 : 20 10 12                   jsr     addsi2
       1097 : 20 5B 10                   jsr     answer          ; -19536
       109A :
       109A : A2 50 46                   ldx     #18000
       109D : A0 B0 B9                   ldy     #-18000
       10A0 : A9 2B                      lda     #'+'
       10A2 : 20 46 10                   jsr     expr
       10A5 : 20 10 12                   jsr     addsi2
       10A8 : 20 5B 10                   jsr     answer          ; 0
       10AB :
       10AB : A2 B0 B9                   ldx     #-18000
       10AE : A0 B0 B9                   ldy     #-18000
       10B1 : A9 2B                      lda     #'+'
       10B3 : 20 46 10                   jsr     expr
       10B6 : 20 10 12                   jsr     addsi2
       10B9 : 20 5B 10                   jsr     answer          ; 29536
       10BC :
       10BC : A2 B0 B9                   ldx     #-18000
       10BF : A0 A0 92                   ldy     #-28000
       10C2 : A9 2D                      lda     #'-'
       10C4 : 20 46 10                   jsr     expr
       10C7 : 20 1C 12                   jsr     subsi2
       10CA : 20 5B 10                   jsr     answer          ; -19536
       10CD :
       10CD : A2 50 46                   ldx     #18000
       10D0 : A0 B0 B9                   ldy     #-18000
       10D3 : A9 2D                      lda     #'-'
       10D5 : 20 46 10                   jsr     expr
       10D8 : 20 1C 12                   jsr     subsi2
       10DB : 20 5B 10                   jsr     answer          ; 29536
       10DE :
       10DE : A2 A0 92                   ldx     #-28000
       10E1 : A0 B0 B9                   ldy     #-18000
       10E4 : A9 2D                      lda     #'-'
       10E6 : 20 46 10                   jsr     expr
       10E9 : 20 1C 12                   jsr     subsi2
       10EC : 20 5B 10                   jsr     answer          ; -10000
       10EF :
       10EF : A2 64 00                   ldx     #100
       10F2 : A0 2C 01                   ldy     #300
       10F5 : A9 2A                      lda     #'*'
       10F7 : 20 46 10                   jsr     expr
       10FA : 20 30 12                   jsr     mulsi2
       10FD : 20 5B 10                   jsr     answer          ; 30000
       1100 :
       1100 : A2 C8 00                   ldx     #200
       1103 : A0 64 00                   ldy     #100
       1106 : A9 2A                      lda     #'*'
       1108 : 20 46 10                   jsr     expr
       110B : 20 30 12                   jsr     mulsi2
       110E : 20 5B 10                   jsr     answer          ; 20000
       1111 :
       1111 : A2 2C 01                   ldx     #300
       1114 : A0 38 FF                   ldy     #-200
       1117 : A9 2A                      lda     #'*'
       1119 : 20 46 10                   jsr     expr
       111C : 20 30 12                   jsr     mulsi2
       111F : 20 5B 10                   jsr     answer          ; 5536
       1122 :
       1122 : A2 64 00                   ldx     #100
       1125 : A0 D4 FE                   ldy     #-300
       1128 : A9 2A                      lda     #'*'
       112A : 20 46 10                   jsr     expr
       112D : 20 30 12                   jsr     mulsi2
       1130 : 20 5B 10                   jsr     answer          ; -30000
       1133 :
       1133 : A2 38 FF                   ldx     #-200
       1136 : A0 9C FF                   ldy     #-100
       1139 : A9 2A                      lda     #'*'
       113B : 20 46 10                   jsr     expr
       113E : 20 30 12                   jsr     mulsi2
       1141 : 20 5B 10                   jsr     answer          ; 20000
       1144 :
       1144 : A2 30 75                   ldx     #30000
       1147 : A0 64 00                   ldy     #100
       114A : A9 2F                      lda     #'/'
       114C : 20 46 10                   jsr     expr
       114F : 20 38 12                   jsr     divsi2
       1152 : 20 5B 10                   jsr     answer          ; 300
       1155 :
       1155 : A2 38 FF                   ldx     #-200
       1158 : A0 64 00                   ldy     #100
       115B : A9 2F                      lda     #'/'
       115D : 20 46 10                   jsr     expr
       1160 : 20 38 12                   jsr     divsi2
       1163 : 20 5B 10                   jsr     answer          ; -2
       1166 :
       1166 : A2 D0 8A                   ldx     #-30000
       1169 : A0 38 FF                   ldy     #-200
       116C : A9 2F                      lda     #'/'
       116E : 20 46 10                   jsr     expr
       1171 : 20 38 12                   jsr     divsi2
       1174 : 20 5B 10                   jsr     answer          ; 150
       1177 :
       1177 : A2 D0 8A                   ldx     #-30000
       117A : A0 4E 00                   ldy     #78
       117D : A9 2F                      lda     #'/'
       117F : 20 46 10                   jsr     expr
       1182 : 20 38 12                   jsr     divsi2
       1185 : 20 5B 10                   jsr     answer          ; -384
       1188 :
       1188 : A2 88 13                   ldx     #5000
       118B : A0 A0 0F                   ldy     #4000
       118E : 20 6C 10                   jsr     comp
       1191 :
       1191 : A2 88 13                   ldx     #5000
       1194 : A0 88 13                   ldy     #5000
       1197 : 20 6C 10                   jsr     comp
       119A :
       119A : A2 A0 0F                   ldx     #4000
       119D : A0 88 13                   ldy     #5000
       11A0 : 20 6C 10                   jsr     comp
       11A3 :
       11A3 : A2 78 EC                   ldx     #-5000
       11A6 : A0 60 F0                   ldy     #-4000
       11A9 : 20 6C 10                   jsr     comp
       11AC :
       11AC : A2 78 EC                   ldx     #-5000
       11AF : A0 78 EC                   ldy     #-5000
       11B2 : 20 6C 10                   jsr     comp
       11B5 :
       11B5 : A2 60 F0                   ldx     #-4000
       11B8 : A0 78 EC                   ldy     #-5000
       11BB : 20 6C 10                   jsr     comp
       11BE :
       11BE : A2 BC 7F                   ldx     #32700
       11C1 : A0 58 7F                   ldy     #32600
       11C4 : 20 6C 10                   jsr     comp
       11C7 :
       11C7 : A2 BC 7F                   ldx     #32700
       11CA : A0 BC 7F                   ldy     #32700
       11CD : 20 6C 10                   jsr     comp
       11D0 :
       11D0 : A2 58 7F                   ldx     #32600
       11D3 : A0 BC 7F                   ldy     #32700
       11D6 : 20 6C 10                   jsr     comp
       11D9 :
       11D9 : A2 44 80                   ldx     #-32700
       11DC : A0 A8 80                   ldy     #-32600
       11DF : 20 6C 10                   jsr     comp
       11E2 :
       11E2 : A2 44 80                   ldx     #-32700
       11E5 : A0 44 80                   ldy     #-32700
       11E8 : 20 6C 10                   jsr     comp
       11EB :
       11EB : A2 A8 80                   ldx     #-32600
       11EE : A0 44 80                   ldy     #-32700
       11F1 : 20 6C 10                   jsr     comp
       11F4 :
       11F4 : A2 50 46                   ldx     #18000
       11F7 : A0 A0 92                   ldy     #-28000
       11FA : 20 6C 10                   jsr     comp
       11FD :
       11FD : A2 A0 92                   ldx     #-28000
       1200 : A0 A0 92                   ldy     #-28000
       1203 : 20 6C 10                   jsr     comp
       1206 :
       1206 : A2 A0 92                   ldx     #-28000
       1209 : A0 50 46                   ldy     #18000
       120C : 20 6C 10                   jsr     comp
       120F :
       120F : 60                         rts
       1210 :
       1210 :                    ;;; Addition
       1210 :                    ;;; @param X summand
       1210 :                    ;;; @param Y addend
       1210 :                    ;;; @return X summand+addend
       1210 :                    ;;; @clobber C
       1210 :                            longa   off
       1210 :                    addsi2:
       1210 : 08                         php
       1211 : C2 20                      rep     #P_M            ; 16-bit memory
       1213 :                            longa   on
       1213 : 8A                         txa
       1214 : 5A                         phy
       1215 : 18                         clc
       1216 : 63 01                      adc     1,S
       1218 : AA                         tax
       1219 : 7A                         ply
       121A : 28                         plp
       121B :                            longa   off
       121B : 60                         rts
       121C :
       121C :                    ;;; Subtraction
       121C :                    ;;; @param X minuend
       121C :                    ;;; @param Y subtrahend
       121C :                    ;;; @return X minuend-subtrahend
       121C :                    ;;; @clobber C
       121C :                            longa   off
       121C :                    subsi2:
       121C : 08                         php
       121D : C2 20                      rep     #P_M            ; 16-bit memory
       121F : 8A                         txa
       1220 : 5A                         phy
       1221 : 38                         sec
       1222 : E3 01                      sbc     1,S
       1224 : AA                         tax
       1225 : 7A                         ply
       1226 : 28                         plp
       1227 :                            longa   off
       1227 : 60                         rts
       1228 :
       1228 :                    ;;; Signed compare
       1228 :                    ;;; @param X minuend
       1228 :                    ;;; @param Y subtrahend
       1228 :                    ;;; @return C minuend-subtrahend
       1228 :                    ;;; @return C=0;  BEQ (minuend == subtrahend)
       1228 :                    ;;;         C=1;  BPL (minuend > subtrahend)
       1228 :                    ;;;         C=-1; BMI (minuend < subtrahend)
       1228 :                            longa   off
       1228 :                    cmpsi2:
       1228 : 08                         php
       1229 : C2 20                      rep     #P_M            ; 16-bit memory
       122B : 20 73 12                   jsr     cmp16
       122E : 28                         plp
       122F : 60                         rts
       1230 :
       1230 :                    ;;; Multiply: result = multiplicand * multiplier
       1230 :                    ;;; @param X multiplicand
       1230 :                    ;;; @param Y multiplier
       1230 :                    ;;; @return X result
       1230 :                    ;;; @clobber C
       1230 :                            longa   off
       1230 :                    mulsi2:
       1230 : 08                         php
       1231 : C2 20                      rep     #P_M            ; 16-bit memory
       1233 : 20 A8 12                   jsr     mul16
       1236 : 28                         plp
       1237 : 60                         rts
       1238 :
       1238 :                    ;;; Division: dividend / divisor = quotient ... remainder
       1238 :                    ;;; @param X dividend
       1238 :                    ;;; @param Y divisor
       1238 :                    ;;; @return X quotient
       1238 :                    ;;; @return Y remainder
       1238 :                    ;;; @clobber C
       1238 :                            longa   off
       1238 :                    divsi2:
       1238 : 08                         php
       1239 : C2 20                      rep     #P_M            ; 16-bit memory
       123B : 20 F6 12                   jsr     div16
       123E : 28                         plp
       123F : 60                         rts
       1240 :
       1240 :                            .include "arith.inc"
(1)    1240 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    1240 :                            cpu     65816
(1)    1240 :
(1)    1240 :                    ;;; Print signed 16-bit integer as decimal
(1)    1240 :                    ;;; @param X value
(1)    1240 :                    ;;; @clobber C
(1)    1240 :                            longa   off
(1)    1240 :                    print_int16:
(1)    1240 : 08                         php
(1)    1241 : C2 20                      rep     #P_M            ; 16-bit memory
(1)    1243 :                            longa   on
(1)    1243 : 5A                         phy                     ; save Y
(1)    1244 : DA                         phx                     ; save X
(1)    1245 : 8A                         txa
(1)    1246 : 10 0C                      bpl     print_int16_print
(1)    1248 : A9 2D 00                   lda     #'-'
(1)    124B : 20 18 10                   jsr     putchar
(1)    124E : 8A                         txa
(1)    124F : 49 FF FF                   eor     #$FFFF
(1)    1252 : 1A                         inc     A
(1)    1253 : AA                         tax
(1)    1254 :                    print_int16_print:
(1)    1254 : 20 5B 12                   jsr     print_uint16
(1)    1257 : FA                         plx                     ; restore X
(1)    1258 : 7A                         ply                     ; restore Y
(1)    1259 : 28                         plp
(1)    125A : 60                         rts
(1)    125B :
(1)    125B :                    ;;; Print unsigned 16-bit integer as decimal
(1)    125B :                    ;;; @param X value
(1)    125B :                    ;;; @clobber C X Y
(1)    125B :                            longa   on
(1)    125B :                    print_uint16:
(1)    125B : 8A                         txa
(1)    125C : F0 0E                      beq     print_uint16_digit ; branch if value==0
(1)    125E :                    print_uint16_inner:
(1)    125E : 8A                         txa
(1)    125F : F0 11                      beq     print_uint16_exit
(1)    1261 : A0 0A 00                   ldy     #10
(1)    1264 : 20 CB 12                   jsr     udiv16
(1)    1267 : 5A                         phy                     ; push remainder
(1)    1268 : 20 5E 12                   jsr     print_uint16_inner
(1)    126B : 68                         pla                     ; pop remainder
(1)    126C :                    print_uint16_digit:
(1)    126C : 09 30 00                   ora     #'0'
(1)    126F : 4C 18 10                   jmp     putchar
(1)    1272 :                    print_uint16_exit:
(1)    1272 : 60                         rts
(1)    1273 :
(1)    1273 :                    ;;; Signed compare: minuend - subtrahend
(1)    1273 :                    ;;; @param X minuend
(1)    1273 :                    ;;; @param Y subtrahend
(1)    1273 :                    ;;; @return C=0;  BEQ (minuend == subtrahend)
(1)    1273 :                    ;;;         C=1;  BPL (minuend > subtrahend)
(1)    1273 :                    ;;;         C=-1; BMI (minuend < subtrahend)
(1)    1273 :                            longa   on
(1)    1273 :                    cmp16:
(1)    1273 : 8A                         txa                     ; C=minuend
(1)    1274 : 5A                         phy
(1)    1275 : 38                         sec
(1)    1276 : E3 01                      sbc     1,S             ; C=minuend-subtrahend
(1)    1278 : F0 10                      beq     cmp16_eq        ; C=0
(1)    127A : 70 07                      bvs     cmp16_ov        ; branch if V=1
(1)    127C : 30 07                      bmi     cmp16_lt        ; branch if V=0, N=1
(1)    127E :                    cmp16_gt:
(1)    127E : 7A                         ply
(1)    127F : A9 01 00                   lda     #1              ; N^V=0
(1)    1282 : 60                         rts
(1)    1283 :                    cmp16_ov:
(1)    1283 : 30 F9                      bmi     cmp16_gt        ; branch if V=1, N=1
(1)    1285 :                    cmp16_lt:
(1)    1285 : 7A                         ply
(1)    1286 : A9 FF FF                   lda     #-1             ; N^V=1
(1)    1289 : 60                         rts
(1)    128A :                    cmp16_eq:
(1)    128A : 7A                         ply
(1)    128B : A9 00 00                   lda     #0
(1)    128E : 60                         rts
(1)    128F :
(1)    128F :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)    128F :                    ;;; @param X multiplicand
(1)    128F :                    ;;; @param Y multiplier
(1)    128F :                    ;;; @return X result
(1)    128F :                    ;;; @clobber C Y
(1)    128F :                            longa   on
(1)    128F :                    umul16:
(1)    128F : A9 00 00                   lda     #0
(1)    1292 : 48                         pha                     ; result (1,S)
(1)    1293 : 80 0E                      bra     umul16_check
(1)    1295 :                    umul16_loop:
(1)    1295 : 98                         tya
(1)    1296 : 4A                         lsr     A               ; multiplier >>= 1
(1)    1297 : A8                         tay
(1)    1298 : 90 06                      bcc     umul16_sr
(1)    129A : 8A                         txa
(1)    129B : 18                         clc
(1)    129C : 63 01                      adc     1,S
(1)    129E : 83 01                      sta     1,S             ; result += multiplicand
(1)    12A0 :                    umul16_sr:
(1)    12A0 : 8A                         txa
(1)    12A1 : 0A                         asl     A               ; multiplicand <<= 1
(1)    12A2 : AA                         tax
(1)    12A3 :                    umul16_check:
(1)    12A3 : 98                         tya
(1)    12A4 : D0 EF                      bne     umul16_loop     ; while multiplier != 0
(1)    12A6 :                    umul16_end:
(1)    12A6 : FA                         plx                     ; X=result
(1)    12A7 : 60                         rts
(1)    12A8 :
(1)    12A8 :                    ;;; Multiply: result = multiplicand * multiplier
(1)    12A8 :                    ;;; @param X multiplicand
(1)    12A8 :                    ;;; @param Y multiplier
(1)    12A8 :                    ;;; @return X result
(1)    12A8 :                    ;;; @clobber C Y
(1)    12A8 :                            longa   on
(1)    12A8 :                    mul16:
(1)    12A8 : 5A                         phy                     ; save multiplier
(1)    12A9 : 8A                         txa
(1)    12AA : 43 01                      eor     1,S
(1)    12AC : 83 01                      sta     1,S             ; save (multiplicand^multiplier)
(1)    12AE : 98                         tya
(1)    12AF : 10 05                      bpl     mul16_multiplicand
(1)    12B1 : 49 FF FF                   eor     #$FFFF
(1)    12B4 : 1A                         inc     A
(1)    12B5 : A8                         tay                     ; negate multiplier
(1)    12B6 :                    mul16_multiplicand:
(1)    12B6 : 8A                         txa
(1)    12B7 : 10 05                      bpl     mul16_multiply
(1)    12B9 : 49 FF FF                   eor     #$FFFF
(1)    12BC : 1A                         inc     A
(1)    12BD : AA                         tax                     ; negate multiplicand
(1)    12BE :                    mul16_multiply:
(1)    12BE : 20 8F 12                   jsr     umul16          ; R0=result
(1)    12C1 : 68                         pla                     ; A=(multiplicand^multiplier)
(1)    12C2 : 10 06                      bpl     mul16_return
(1)    12C4 : 8A                         txa
(1)    12C5 : 49 FF FF                   eor     #$FFFF
(1)    12C8 : 1A                         inc     A
(1)    12C9 : AA                         tax                     ; negate result
(1)    12CA :                    mul16_return:
(1)    12CA : 60                         rts
(1)    12CB :
(1)    12CB :                    ;;; Unsigned division: dividend / divisor = quotient ... remainder
(1)    12CB :                    ;;; @praram X dividend
(1)    12CB :                    ;;; @praram Y divisor
(1)    12CB :                    ;;; @return X quotient
(1)    12CB :                    ;;; @return Y remainder
(1)    12CB :                    ;;; @clobber C
(1)    12CB :                            longa   on
(1)    12CB :                    udiv16:
(1)    12CB : 98                         tya                     ; C=divisor
(1)    12CC : F0 25                      beq     udiv16_return   ; branch if Y==0
(1)    12CE : A0 00 00                   ldy     #0              ; y=bits
(1)    12D1 :                    udiv16_prep_loop:
(1)    12D1 : C8                         iny
(1)    12D2 : 0A                         asl     A               ; divisor <<= 1
(1)    12D3 : 90 FC                      bcc     udiv16_prep_loop
(1)    12D5 : 38                         sec
(1)    12D6 : 6A                         ror     A               ; divisor >>= 1
(1)    12D7 : 48                         pha                     ; push divisor
(1)    12D8 : DA                         phx                     ; push dividend
(1)    12D9 : A2 00 00                   ldx     #0              ; X=quotient
(1)    12DC : 80 08                      bra     udiv16_enter_loop
(1)    12DE :                    udiv16_loop:
(1)    12DE : A3 03                      lda     3,S
(1)    12E0 : 4A                         lsr     A
(1)    12E1 : 83 03                      sta     3,S             ; divisor >>= 1
(1)    12E3 : 8A                         txa
(1)    12E4 : 0A                         asl     A
(1)    12E5 : AA                         tax                     ; quotient <<= 1
(1)    12E6 :                    udiv16_enter_loop:
(1)    12E6 : A3 01                      lda     1,S
(1)    12E8 : 38                         sec
(1)    12E9 : E3 03                      sbc     3,S             ; dividend -= divisor
(1)    12EB : 90 03                      bcc     udiv16_next     ; if dividend < divisor
(1)    12ED : 83 01                      sta     1,S
(1)    12EF : E8                         inx                     ; quotient |= 1
(1)    12F0 :                    udiv16_next:
(1)    12F0 : 88                         dey
(1)    12F1 : D0 EB                      bne     udiv16_loop     ; while bits != 0
(1)    12F3 :                    udiv16_return:
(1)    12F3 : 7A                         ply                     ; remainder
(1)    12F4 : 68                         pla                     ; discard divisor
(1)    12F5 : 60                         rts
(1)    12F6 :
(1)    12F6 :                    ;;; Division: dividend / divisor = quotient ... remainder
(1)    12F6 :                    ;;; @param X dividend
(1)    12F6 :                    ;;; @param Y divisor
(1)    12F6 :                    ;;; @return X quotient
(1)    12F6 :                    ;;; @return Y remainder
(1)    12F6 :                    ;;; @clobber C
(1)    12F6 :                            longa   on
(1)    12F6 :                    div16:
(1)    12F6 : 5A                         phy                     ; save divisor
(1)    12F7 : 8A                         txa
(1)    12F8 : 43 01                      eor     1,S
(1)    12FA : 83 01                      sta     1,S             ; save (dividend^divisor)
(1)    12FC : 98                         tya
(1)    12FD : 10 05                      bpl     div16_dividend
(1)    12FF : 49 FF FF                   eor     #$FFFF
(1)    1302 : 1A                         inc     A
(1)    1303 : A8                         tay                     ; negate divisor
(1)    1304 :                    div16_dividend:
(1)    1304 : 8A                         txa
(1)    1305 : 10 05                      bpl     div16_multiply
(1)    1307 : 49 FF FF                   eor     #$FFFF
(1)    130A : 1A                         inc     A
(1)    130B : AA                         tax                     ; negate dividend
(1)    130C :                    div16_multiply:
(1)    130C : 20 CB 12                   jsr     udiv16          ; R0=result
(1)    130F : 68                         pla                     ; A=(dividend^divisor)
(1)    1310 : 10 06                      bpl     div16_return
(1)    1312 : 8A                         txa
(1)    1313 : 49 FF FF                   eor     #$FFFF
(1)    1316 : 1A                         inc     A
(1)    1317 : AA                         tax                     ; negate result
(1)    1318 :                    div16_return:
(1)    1318 : 60                         rts
