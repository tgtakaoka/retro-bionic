          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     65816
          0 :                            .include "w65c816.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                            .include "mos6502.inc"
(2)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :
(2)       0 :                    ;;; MOS6502
(2)       0 :                    ;;; Processor Status Register P
(2)       0 : =1                 P_CARRY         =       %00000001   ; set to 1 if carry occurred
(2)       0 : =2                 P_ZERO          =       %00000010   ; set to 1 if result is zero
(2)       0 : =4                 P_IRQ           =       %00000100   ; if 1, IRQ is disabled
(2)       0 : =8                 P_DECIMAL       =       %00001000   ; if 1, decimal mode
(2)       0 : =10                P_BRK           =       %00010000   ; if 1, BRK command
(2)       0 : =2                 P_OVERFLOW      =       %00000010   ; set to 1 if overflow occurred
(2)       0 : =8                 P_NEGATIVE      =       %00001000   ; set to 1 if result is negative
(2)       0 :
(2)       0 :                    ;;; Vector
(2)       0 : =FFFA              VEC_NMI         =       $FFFA  ; $FFFA: Non Maskable Interrupt
(2)       0 : =FFFC              VEC_RESET       =       $FFFC  ; $FFFE: Reset
(2)       0 : =FFFE              VEC_IRQ         =       $FFFE  ; $FFFE: Interrupt Request and BRK command
(1)       0 :
(1)       0 :                    ;;; W65C816S
(1)       0 :                    ;;; Processor Status Register P
(1)       0 : =10                P_X     =       %00010000       ; if 0, X and Y are 16 bit.
(1)       0 : =20                P_M     =       %00100000       ; if 0, A is 16 bit.
(1)       0 :
(1)       0 :                    ;;; Emulation Mode Vector Locations
(1)       0 : =FFF8              VEC_ABORT       =       $FFF8   ; $FFF8: Abort
(1)       0 : =FFF4              VEC_COP         =       $FFF4   ; $FFF4: COP command
(1)       0 :
(1)       0 :                    ;;; Native Mode Vector Locations
(1)       0 : =FFEE              NVEC_IRQ        =       $FFEE   ; $FFEE: Interrupt Request
(1)       0 : =FFEA              NVEC_NMI        =       $FFEA   ; $FFEA: Non Maskable Interrupt
(1)       0 : =FFE8              NVEC_ABORT      =       $FFE8   ; $FFE8: Abort
(1)       0 : =FFE6              NVEC_BRK        =       $FFE6   ; $FFE6: BRK command
(1)       0 : =FFE4              NVEC_COP        =       $FFE4   ; $FFE4: COP command
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA    =       $DF00
          0 :                            .include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control    =       ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm          =       %11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc     =       %00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc    =       %00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc    =       %00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc    =       %00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm          =       %00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc      =       %00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc      =       %00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc      =       %00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc      =       %00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc      =       %00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc      =       %00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc      =       %00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc      =       %00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm          =       %01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc       =       %00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc       =       %00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc      =       %01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc    =       %01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm         =       %10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status     =       ACIA+0
(1)       0 : =1                 RDRF_bm         =       %00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm         =       %00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm         =       %00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm         =       %00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm         =       %00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm         =       %00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm         =       %01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm         =       %10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data       =       ACIA+1          ; Data register
          0 : =94                RX_INT_TX_NO    =       WSB_8N1_gc|RIEB_bm
          0 : =B4                RX_INT_TX_INT   =       WSB_8N1_gc|RIEB_bm|TCB_EI_gc
          0 :
       FFE4 :                            *=      NVEC_COP
       FFE4 : 3C 13                      .word   isr_ncop
       FFE6 :                            *=      NVEC_BRK
       FFE6 : 3E 13                      .word   isr_nbrk
       FFE8 :                            *=      NVEC_ABORT
       FFE8 : 40 13                      .word   isr_nabort
       FFEA :                            *=      NVEC_NMI
       FFEA : 42 13                      .word   isr_nnmi
       FFEE :                            *=      NVEC_IRQ        ; native vector
       FFEE : FD 12                      .word   isr_nirq
       FFF0 :
       FFF8 :                            *=      VEC_ABORT
       FFF8 : 36 13                      .word   isr_abort
       FFF4 :                            *=      VEC_COP
       FFF4 : 34 13                      .word   isr_cop
       FFFA :                            *=      VEC_NMI
       FFFA : 38 13                      .word   isr_nmi
       FFFE :                            *=      VEC_IRQ
       FFFE : 3A 13                      .word   isr_irq
       FFFC :                            *=      VEC_RESET
       FFFC : 00 10                      .word   initialize
       FFFE :
       2000 :                            *=      $2000
       2000 : =80                rx_queue_size   =       128
       2000 :                    rx_queue:
       2080 :                            *=      *+rx_queue_size
       2080 : =80                tx_queue_size   =       128
       2080 :                    tx_queue:
       2100 :                            *=      *+tx_queue_size
       2100 :
       2100 :                    ;;; Work area for mandelbrot.inc
         10 :                            *=      $10
         10 : =32                F       =       50
         10 : 00 00              vY:     .word   0
         12 : 00 00              vX:     .word   0
         14 : 00 00              vI:     .word   0
         16 : 00 00              vA:     .word   0
         18 : 00 00              vB:     .word   0
         1A : 00 00              vC:     .word   0
         1C : 00 00              vD:     .word   0
         1E : 00 00              vP:     .word   0
         20 : 00 00              vQ:     .word   0
         22 : 00 00              vS:     .word   0
         24 : 00 00              vT:     .word   0
         26 :
       1000 :                            *=      $1000
       1000 : =FFF               stack   =       *-1
       1000 :                    initialize:
       1000 : 18                         clc
       1001 : FB                         xce                     ; native mode
       1002 :                            longa   off
       1002 : C2 10                      rep     #P_X            ; 16-bit index
       1004 :                            longi   on
       1004 : A2 FF 0F                   ldx     #stack
       1007 : 9A                         txs
       1008 : D8                         cld                     ; clear decimal flag
       1009 : A2 00 20                   ldx     #rx_queue
       100C : A9 80                      lda     #rx_queue_size
       100E : 20 6E 10                   jsr     queue_init
       1011 : A2 80 20                   ldx     #tx_queue
       1014 : A9 80                      lda     #tx_queue_size
       1016 : 20 6E 10                   jsr     queue_init
       1019 :                            ;; initialize ACIA
       1019 : A9 03                      lda     #CDS_RESET_gc   ; master reset
       101B : 8D 00 DF                   sta     ACIA_control
       101E : A9 94                      lda     #RX_INT_TX_NO
       1020 : 8D 00 DF                   sta     ACIA_control
       1023 : 58                         cli                     ; enable IRQ
       1024 :
       1024 :                    loop:
       1024 : 20 F7 11                   jsr     mandelbrot
       1027 : 20 55 10                   jsr     newline
       102A : 4C 24 10                   jmp     loop
       102D :
       102D :                    ;;; Get character
       102D :                    ;;; @return A
       102D :                    ;;; @return P.C 1 if no character
       102D :                    ;;; @clobber X
       102D :                    getchar:
       102D : E2 20                      sep     #P_M            ; 8-bit memory
       102F :                            longa   off
       102F : A2 00 20                   ldx     #rx_queue
       1032 : 78                         sei                     ; disable IRQ
       1033 : 20 BD 10                   jsr     queue_remove
       1036 : C2 24                      rep     #P_M|P_IRQ      ; enable IRQ, 16-bit memory
       1038 : 60                         rts
       1039 :
       1039 :                    ;;; Put character
       1039 :                    ;;; @param A
       1039 :                    ;;; @clobber X
       1039 :                    putchar:
       1039 : 08                         php
       103A : E2 20                      sep     #P_M            ; 8-bit memory
       103C :                            longa   off
       103C : 20 41 10                   jsr     _putchar
       103F : 28                         plp
       1040 : 60                         rts
       1041 :                    _putchar:
       1041 : 48                         pha
       1042 : DA                         phx
       1043 :                    _putchar_retry:
       1043 : A2 80 20                   ldx     #tx_queue
       1046 : 78                         sei                     ; disable IRQ
       1047 : 20 85 10                   jsr     queue_add
       104A : 58                         cli                     ; enable IRQ
       104B : B0 F6                      bcs     _putchar_retry  ; queue is full
       104D : A9 B4                      lda     #RX_INT_TX_INT  ; enable Tx interrupt
       104F : 8D 00 DF                   sta     ACIA_control
       1052 : FA                         plx
       1053 : 68                         pla
       1054 : 60                         rts
       1055 :
       1055 :                    ;;; Put newline
       1055 :                    ;;; @clobber A
       1055 :                    newline:
       1055 : 08                         php
       1056 : E2 20                      sep     #P_M            ; 8-bit memory
       1058 :                            longa   off
       1058 : A9 0D                      lda     #$0D
       105A : 20 41 10                   jsr     _putchar
       105D : A9 0A                      lda     #$0A
       105F : 20 41 10                   jsr     _putchar
       1062 : 28                         plp
       1063 : 60                         rts
       1064 :
       1064 :                    ;;; Put space
       1064 :                    ;;; @clobber A
       1064 :                    putspace:
       1064 : 08                         php
       1065 : E2 20                      sep     #P_M            ; 8-bit memory
       1067 :                            longa   off
       1067 : A9 20                      lda     #' '
       1069 : 20 41 10                   jsr     _putchar
       106C : 28                         plp
       106D : 60                         rts
       106E :
       106E :                            .include "queue.inc"
(1)    106E :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    106E :                    ;;; [queue] queue structure
(1)    106E : =0                 queue_len       =       0       ; queue length
(1)    106E : =1                 queue_size      =       1       ; buffer size
(1)    106E : =2                 queue_put       =       2       ; queue put index
(1)    106E : =3                 queue_get       =       3       ; queue get index
(1)    106E : =4                 queue_buf       =       4       ; buffer start address
(1)    106E :
(1)    106E :                    ;;; [queue] Initialize queue
(1)    106E :                    ;;; @param X queue pointer
(1)    106E :                    ;;; @param A queue size
(1)    106E :                    ;;; @clobber A B X
(1)    106E :                    queue_init:
(1)    106E : 08                         php
(1)    106F : E2 20                      sep     #P_M            ; 8-bit memory
(1)    1071 :                            longa   off
(1)    1071 : 38                         sec
(1)    1072 : E9 04                      sbc     #queue_buf
(1)    1074 : 95 01                      sta     queue_size,X
(1)    1076 : EB                         xba
(1)    1077 : 74 00                      stz     queue_len,X
(1)    1079 : 74 02                      stz     queue_put,X
(1)    107B : 74 03                      stz     queue_get,X
(1)    107D :                    queue_init_loop:
(1)    107D : 74 04                      stz     queue_buf,X
(1)    107F : E8                         inx
(1)    1080 : 3A                         dec     A
(1)    1081 : D0 FA                      bne     queue_init_loop
(1)    1083 : 28                         plp
(1)    1084 : 60                         rts
(1)    1085 :
(1)    1085 :                    ;;; [queue] Add an element to queue
(1)    1085 :                    ;;; @param X queue pointer
(1)    1085 :                    ;;; @param A an element
(1)    1085 :                    ;;; @return P.C 1 if queue is full
(1)    1085 :                    queue_add:
(1)    1085 : 08                         php
(1)    1086 : E2 20                      sep     #P_M            ; 8-bit memory
(1)    1088 :                            longa   off
(1)    1088 : 48                         pha                     ; save an element
(1)    1089 : B5 00                      lda     queue_len,X
(1)    108B : D5 01                      cmp     queue_size,X
(1)    108D : 90 04                      bcc     queue_add_element  ; queue_len < queue_size
(1)    108F : 68                         pla
(1)    1090 : 28                         plp
(1)    1091 : 38                         sec                     ; C=1
(1)    1092 : 60                         rts
(1)    1093 :                    queue_add_element:      
(1)    1093 : 1A                         inc     A
(1)    1094 : 95 00                      sta     queue_len,X
(1)    1096 : 5A                         phy                     ; save Y
(1)    1097 : DA                         phx                     ; save queue pointer
(1)    1098 : B5 02                      lda     queue_put,X
(1)    109A : 18                         clc
(1)    109B : 63 01                      adc     1,S             ; lo(queue pointer)
(1)    109D : 83 01                      sta     1,S
(1)    109F : A3 02                      lda     2,S             ; hi(queue pointer)
(1)    10A1 : 69 00                      adc     #0
(1)    10A3 : 83 02                      sta     2,S
(1)    10A5 : A3 02                      lda     2,S
(1)    10A7 : 7A                         ply
(1)    10A8 : A3 03                      lda     3,S             ; restore an element
(1)    10AA : 99 04 00                   sta     queue_buf,Y     ; store an element
(1)    10AD : 7A                         ply                     ; restore Y
(1)    10AE : B5 02                      lda     queue_put,X
(1)    10B0 : 1A                         inc     A
(1)    10B1 : D5 01                      cmp     queue_size,X
(1)    10B3 : 90 02                      bcc     queue_add_return ; queue_put < queue_size
(1)    10B5 : A9 00                      lda     #0
(1)    10B7 :                    queue_add_return:
(1)    10B7 : 95 02                      sta     queue_put,X
(1)    10B9 : 68                         pla
(1)    10BA : 28                         plp
(1)    10BB : 18                         clc                     ;  C=0
(1)    10BC : 60                         rts
(1)    10BD :
(1)    10BD :                    ;;; [queue] Remove an element from queue
(1)    10BD :                    ;;; @param X queue pointer
(1)    10BD :                    ;;; @return A an element
(1)    10BD :                    ;;; @return P.C 1 if queue is empty
(1)    10BD :                    queue_remove:
(1)    10BD : 08                         php
(1)    10BE : E2 20                      sep     #P_M            ; 8-bit memory
(1)    10C0 :                            longa   off
(1)    10C0 : B5 00                      lda     queue_len,X
(1)    10C2 : D0 03                      bne     queue_remove_elem
(1)    10C4 : 28                         plp
(1)    10C5 : 38                         sec                     ; C=1
(1)    10C6 : 60                         rts
(1)    10C7 :                    queue_remove_elem:
(1)    10C7 : 3A                         dec     A
(1)    10C8 : 95 00                      sta     queue_len,X
(1)    10CA : 5A                         phy                     ; save Y
(1)    10CB : DA                         phx                     ; save queue pointer
(1)    10CC : B5 03                      lda     queue_get,X
(1)    10CE : 18                         clc
(1)    10CF : 63 01                      adc     1,S             ; lo(queue pointer)
(1)    10D1 : 83 01                      sta     1,S
(1)    10D3 : A3 02                      lda     2,S             ; hi(queue pointer)
(1)    10D5 : 69 00                      adc     #0
(1)    10D7 : 83 02                      sta     2,S
(1)    10D9 : 7A                         ply
(1)    10DA : B9 04 00                   lda     queue_buf,Y     ; read an element
(1)    10DD : 7A                         ply                     ; restore Y
(1)    10DE : 48                         pha                     ; save an element
(1)    10DF : B5 03                      lda     queue_get,X
(1)    10E1 : 1A                         inc     A
(1)    10E2 : D5 01                      cmp     queue_size,X
(1)    10E4 : 90 02                      bcc     queue_remove_return ; queue_get < queue_size
(1)    10E6 : A9 00                      lda     #0
(1)    10E8 :                    queue_remove_return:
(1)    10E8 : 95 03                      sta     queue_get,X
(1)    10EA : 68                         pla                     ; restore an element
(1)    10EB : 28                         plp
(1)    10EC : 18                         clc                     ; C=0
(1)    10ED : 60                         rts
       10EE :                            .include "arith.inc"
(1)    10EE :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    10EE :                            cpu     65816
(1)    10EE :
(1)    10EE :                    ;;; Print signed 16-bit integer as decimal
(1)    10EE :                    ;;; @param X value
(1)    10EE :                    ;;; @clobber C
(1)    10EE :                    print_int16:
(1)    10EE : 08                         php
(1)    10EF : E2 20                      sep     #P_M            ; 8-bit memory
(1)    10F1 :                            longa   off
(1)    10F1 : 5A                         phy                     ; save Y
(1)    10F2 : DA                         phx                     ; save X
(1)    10F3 : A3 02                      lda     2,S             ; hi(value)
(1)    10F5 : 10 0D                      bpl     print_int16_print
(1)    10F7 : A9 2D                      lda     #'-'
(1)    10F9 : 20 39 10                   jsr     putchar
(1)    10FC : C2 20                      rep     #P_M            ; 16-bit memory
(1)    10FE :                            longa   on
(1)    10FE : 8A                         txa
(1)    10FF : 49 FF FF                   eor     #$FFFF
(1)    1102 : 1A                         inc     A
(1)    1103 : AA                         tax
(1)    1104 :                    print_int16_print:
(1)    1104 : C2 20                      rep     #P_M            ; 16-bit memory
(1)    1106 :                            longa   off
(1)    1106 : 20 0D 11                   jsr     print_uint16
(1)    1109 : FA                         plx                     ; restore X
(1)    110A : 7A                         ply                     ; restore Y
(1)    110B : 28                         plp
(1)    110C : 60                         rts
(1)    110D :
(1)    110D :                    ;;; Print unsigned 16-bit integer as decimal
(1)    110D :                    ;;; @param X value
(1)    110D :                    ;;; @clobber C X Y
(1)    110D :                            longa   on
(1)    110D :                    print_uint16:
(1)    110D : E8                         inx
(1)    110E : CA                         dex
(1)    110F : F0 0F                      beq     print_uint16_digit ; branch if value==0
(1)    1111 :                    print_uint16_inner:
(1)    1111 : E8                         inx
(1)    1112 : CA                         dex
(1)    1113 : F0 11                      beq     print_uint16_exit
(1)    1115 : A0 0A 00                   ldy     #10
(1)    1118 : 20 94 11                   jsr     udiv16
(1)    111B : 5A                         phy                     ; push reminder
(1)    111C : 20 11 11                   jsr     print_uint16_inner
(1)    111F : 68                         pla                     ; pop reminder
(1)    1120 :                    print_uint16_digit:
(1)    1120 : 09 30 00                   ora     #'0'
(1)    1123 : 4C 39 10                   jmp     putchar
(1)    1126 :                    print_uint16_exit:
(1)    1126 : 60                         rts
(1)    1127 :
(1)    1127 :                    ;;; Addition: result = summand + addend
(1)    1127 :                    ;;; @param X summand
(1)    1127 :                    ;;; @param Y addend
(1)    1127 :                    ;;; @return X result
(1)    1127 :                    ;;; @clobber C
(1)    1127 :                            longa   on
(1)    1127 :                    add16:
(1)    1127 : 8A                         txa
(1)    1128 : 5A                         phy
(1)    1129 : 18                         clc
(1)    112A : 63 01                      adc     1,S
(1)    112C : AA                         tax
(1)    112D : 7A                         ply
(1)    112E : 60                         rts
(1)    112F :
(1)    112F :                    ;;; Subtraction: result = minuend - subtrahend
(1)    112F :                    ;;; @param X minuend
(1)    112F :                    ;;; @param Y subtrahend
(1)    112F :                    ;;; @return X result
(1)    112F :                    ;;; @clobber C
(1)    112F :                            longa   on
(1)    112F :                    sub16:
(1)    112F : 8A                         txa
(1)    1130 : 5A                         phy
(1)    1131 : 38                         sec
(1)    1132 : E3 01                      sbc     1,S
(1)    1134 : AA                         tax
(1)    1135 : 7A                         ply
(1)    1136 : 60                         rts
(1)    1137 :
(1)    1137 :                    ;;; Signed compare: minuend - subtrahend
(1)    1137 :                    ;;; @param X minuend
(1)    1137 :                    ;;; @param Y subtrahend
(1)    1137 :                    ;;; @return C=0;  BEQ (minuend == subtrahend)
(1)    1137 :                    ;;;         C=1;  BPL (minuend > subtrahend)
(1)    1137 :                    ;;;         C=-1; BMI (minuend < subtrahend)
(1)    1137 :                            longa   on
(1)    1137 :                    cmp16:
(1)    1137 : 8A                         txa                     ; C=minuend
(1)    1138 : 5A                         phy
(1)    1139 : 38                         sec
(1)    113A : E3 01                      sbc     1,S             ; C=minuend-subtrahend
(1)    113C : F0 10                      beq     cmp16_eq        ; C=0
(1)    113E : 70 07                      bvs     cmp16_ov        ; branch if V=1
(1)    1140 : 30 07                      bmi     cmp16_lt        ; branch if V=0, N=1
(1)    1142 :                    cmp16_gt:
(1)    1142 : 7A                         ply
(1)    1143 : A9 01 00                   lda     #1              ; N^V=0
(1)    1146 : 60                         rts
(1)    1147 :                    cmp16_ov:
(1)    1147 : 30 F9                      bmi     cmp16_gt        ; branch if V=1, N=1
(1)    1149 :                    cmp16_lt:
(1)    1149 : 7A                         ply
(1)    114A : A9 FF FF                   lda     #-1             ; N^V=1
(1)    114D : 60                         rts
(1)    114E :                    cmp16_eq:
(1)    114E : 7A                         ply
(1)    114F : A9 00 00                   lda     #0
(1)    1152 : 60                         rts
(1)    1153 :
(1)    1153 :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)    1153 :                    ;;; @param X multiplicand
(1)    1153 :                    ;;; @param Y multiplier
(1)    1153 :                    ;;; @return X result
(1)    1153 :                    ;;; @clobber C Y
(1)    1153 :                            longa   on
(1)    1153 :                    umul16:
(1)    1153 : A9 00 00                   lda     #0 
(1)    1156 : 48                         pha                     ; result (1,S)
(1)    1157 : 80 0E                      bra     umul16_check
(1)    1159 :                    umul16_loop:
(1)    1159 : 98                         tya
(1)    115A : 4A                         lsr     A               ; multiplier >>= 1
(1)    115B : A8                         tay
(1)    115C : 90 06                      bcc     umul16_sr
(1)    115E : 8A                         txa
(1)    115F : 18                         clc
(1)    1160 : 63 01                      adc     1,S
(1)    1162 : 83 01                      sta     1,S             ; result += multiplicand
(1)    1164 :                    umul16_sr:
(1)    1164 : 8A                         txa
(1)    1165 : 0A                         asl     A               ; multiplicand <<= 1
(1)    1166 : AA                         tax
(1)    1167 :                    umul16_check:   
(1)    1167 : C8                         iny
(1)    1168 : 88                         dey
(1)    1169 : D0 EE                      bne     umul16_loop     ; while multiplier != 0
(1)    116B :                    umul16_end:
(1)    116B : FA                         plx                     ; X=result
(1)    116C : 60                         rts
(1)    116D :
(1)    116D :                    ;;; Multiply: result = multiplicand * multiplier
(1)    116D :                    ;;; @param X multiplicand
(1)    116D :                    ;;; @param Y multiplier
(1)    116D :                    ;;; @return X result
(1)    116D :                    ;;; @clobber C Y
(1)    116D :                            longa   on
(1)    116D :                    mul16:
(1)    116D : 5A                         phy                     ; save multiplier
(1)    116E : 8A                         txa
(1)    116F : 43 01                      eor     1,S
(1)    1171 : 83 01                      sta     1,S             ; save (multiplicand^multiplier)
(1)    1173 : C8                         iny
(1)    1174 : 88                         dey
(1)    1175 : 10 06                      bpl     mul16_multiplicand
(1)    1177 : 98                         tya
(1)    1178 : 49 FF FF                   eor     #$FFFF
(1)    117B : 1A                         inc     A
(1)    117C : A8                         tay                     ; negate multiplier
(1)    117D :                    mul16_multiplicand:
(1)    117D : E8                         inx
(1)    117E : CA                         dex
(1)    117F : 10 06                      bpl     mul16_multiply
(1)    1181 : 8A                         txa
(1)    1182 : 49 FF FF                   eor     #$FFFF
(1)    1185 : 1A                         inc     A
(1)    1186 : AA                         tax                     ; negate multiplicand
(1)    1187 :                    mul16_multiply:
(1)    1187 : 20 53 11                   jsr     umul16          ; R0=result
(1)    118A : 68                         pla                     ; A=(multiplicand^multiplier)
(1)    118B : 10 06                      bpl     mul16_return
(1)    118D : 8A                         txa
(1)    118E : 49 FF FF                   eor     #$FFFF
(1)    1191 : 1A                         inc     A
(1)    1192 : AA                         tax                     ; negate result
(1)    1193 :                    mul16_return:
(1)    1193 : 60                         rts
(1)    1194 :
(1)    1194 :                    ;;; Unsigned division: dividend / divisor = quotient ... reminder
(1)    1194 :                    ;;; @praram X dividend
(1)    1194 :                    ;;; @praram Y divisor
(1)    1194 :                    ;;; @return X quotient
(1)    1194 :                    ;;; @return Y reminder
(1)    1194 :                    ;;; @clobber C
(1)    1194 :                            longa   on
(1)    1194 :                    udiv16:
(1)    1194 : C8                         iny
(1)    1195 : 88                         dey
(1)    1196 : F0 26                      beq     udiv16_return   ; branch if Y==0
(1)    1198 : 98                         tya                     ; C=divisor
(1)    1199 : A0 00 00                   ldy     #0              ; y=bits
(1)    119C :                    udiv16_prep_loop:
(1)    119C : C8                         iny
(1)    119D : 0A                         asl     A               ; divisor <<= 1
(1)    119E : 90 FC                      bcc     udiv16_prep_loop
(1)    11A0 : 38                         sec
(1)    11A1 : 6A                         ror     A               ; divisor >>= 1
(1)    11A2 : 48                         pha                     ; push divisor
(1)    11A3 : DA                         phx                     ; push dividend
(1)    11A4 : A2 00 00                   ldx     #0              ; X=quotient
(1)    11A7 : 80 08                      bra     udiv16_enter_loop
(1)    11A9 :                    udiv16_loop:
(1)    11A9 : A3 03                      lda     3,S
(1)    11AB : 4A                         lsr     A
(1)    11AC : 83 03                      sta     3,S             ; divisor >>= 1
(1)    11AE : 8A                         txa
(1)    11AF : 0A                         asl     A
(1)    11B0 : AA                         tax                     ; quotient <<= 1
(1)    11B1 :                    udiv16_enter_loop:
(1)    11B1 : A3 01                      lda     1,S
(1)    11B3 : 38                         sec
(1)    11B4 : E3 03                      sbc     3,S             ; dividend -= divisor
(1)    11B6 : 90 03                      bcc     udiv16_next     ; if dividend < divisor
(1)    11B8 : 83 01                      sta     1,S
(1)    11BA : E8                         inx                     ; quotient |= 1
(1)    11BB :                    udiv16_next:
(1)    11BB : 88                         dey
(1)    11BC : D0 EB                      bne     udiv16_loop     ; while bits != 0
(1)    11BE :                    udiv16_return:
(1)    11BE : 7A                         ply                     ; reminder
(1)    11BF : 68                         pla                     ; discard divisor
(1)    11C0 : 60                         rts
(1)    11C1 :
(1)    11C1 :                    ;;; Division: dividend / divisor = quotient ... reminder
(1)    11C1 :                    ;;; @param X dividend
(1)    11C1 :                    ;;; @param Y divisor
(1)    11C1 :                    ;;; @return X quotient
(1)    11C1 :                    ;;; @return Y reminder
(1)    11C1 :                    ;;; @clobber C
(1)    11C1 :                            longa   on
(1)    11C1 :                    div16:
(1)    11C1 : 5A                         phy                     ; save divisor
(1)    11C2 : 8A                         txa
(1)    11C3 : 43 01                      eor     1,S
(1)    11C5 : 83 01                      sta     1,S             ; save (dividend^divisor)
(1)    11C7 : C8                         iny
(1)    11C8 : 88                         dey
(1)    11C9 : 10 06                      bpl     div16_dividend
(1)    11CB : 98                         tya
(1)    11CC : 49 FF FF                   eor     #$FFFF
(1)    11CF : 1A                         inc     A
(1)    11D0 : A8                         tay                     ; negate divisor
(1)    11D1 :                    div16_dividend:
(1)    11D1 : E8                         inx
(1)    11D2 : CA                         dex
(1)    11D3 : 10 06                      bpl     div16_multiply
(1)    11D5 : 8A                         txa
(1)    11D6 : 49 FF FF                   eor     #$FFFF
(1)    11D9 : 1A                         inc     A
(1)    11DA : AA                         tax                     ; negate dividend
(1)    11DB :                    div16_multiply:
(1)    11DB : 20 94 11                   jsr     udiv16          ; R0=result
(1)    11DE : 68                         pla                     ; A=(dividend^divisor)
(1)    11DF : 10 06                      bpl     div16_return
(1)    11E1 : 8A                         txa
(1)    11E2 : 49 FF FF                   eor     #$FFFF
(1)    11E5 : 1A                         inc     A
(1)    11E6 : AA                         tax                     ; negate result
(1)    11E7 :                    div16_return:
(1)    11E7 : 60                         rts
       11E8 :                            .include "mandelbrot.inc"
(1)    11E8 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    11E8 :                            cpu     65816
(1)    11E8 :                            longa   on
(1)    11E8 :
(1)    11E8 :                    ;;; Print variable: "A=X "
(1)    11E8 :                    ;;; @param X variable
(1)    11E8 :                    ;;; @param A variable letter
(1)    11E8 :                    print:
(1)    11E8 : 20 39 10                   jsr     putchar         ; print variable letter
(1)    11EB : A9 3D 00                   lda     #'='
(1)    11EE : 20 39 10                   jsr     putchar         ; '='
(1)    11F1 : 20 EE 10                   jsr     print_int16
(1)    11F4 : 4C 64 10                   jmp     putspace
(1)    11F7 :
(1)    11F7 :                    mandelbrot:
(1)    11F7 : C2 20                      rep     #P_M            ; 16-bit memory
(1)    11F9 : A9 F4 FF                   lda     #-12
(1)    11FC : 85 10                      sta     vY
(1)    11FE :                    loop_y:
(1)    11FE : A9 CF FF                   lda     #-49
(1)    1201 : 85 12                      sta     vX
(1)    1203 :                    loop_x:
(1)    1203 : A6 12                      ldx     vX
(1)    1205 : A0 E5 00                   ldy     #229
(1)    1208 : 20 6D 11                   jsr     mul16           ; X*229
(1)    120B : A0 64 00                   ldy     #100
(1)    120E : 20 C1 11                   jsr     div16           ; X*229/100
(1)    1211 : 86 1A                      stx     vC              ; C=X*229/100
(1)    1213 : 86 16                      stx     vA              ; A=C
(1)    1215 : A6 10                      ldx     vY
(1)    1217 : A0 A0 01                   ldy     #416
(1)    121A : 20 6D 11                   jsr     mul16           ; Y*416
(1)    121D : A0 64 00                   ldy     #100
(1)    1220 : 20 C1 11                   jsr     div16           ; Y*416/100
(1)    1223 : 86 1C                      stx     vD              ; D=Y*416/100
(1)    1225 : 86 18                      stx     vB
(1)    1227 : 64 14                      stz     vI              ; I=0
(1)    1229 :
(1)    1229 :                            ;; ldx     vY
(1)    1229 :                            ;; lda     #'Y'
(1)    1229 :                            ;; jsr     print
(1)    1229 :                            ;; ldx     vX
(1)    1229 :                            ;; lda     #'X'
(1)    1229 :                            ;; jsr     print
(1)    1229 :                            ;; ldx     vC
(1)    1229 :                            ;; lda     #'C'
(1)    1229 :                            ;; jsr     print
(1)    1229 :                            ;; ldx     vD
(1)    1229 :                            ;; lda     #'D'
(1)    1229 :                            ;; jsr     print
(1)    1229 :                            ;; jsr     newline
(1)    1229 :
(1)    1229 :                    loop_i:
(1)    1229 : A6 18                      ldx     vB
(1)    122B : A0 32 00                   ldy     #F
(1)    122E : 20 C1 11                   jsr     div16           ; B/F
(1)    1231 : 86 20                      stx     vQ              ; Q=B/F
(1)    1233 : A0 32 00                   ldy     #F
(1)    1236 : 20 6D 11                   jsr     mul16           ; Q*F
(1)    1239 : DA                         phx                     ; push Q*F
(1)    123A : A5 18                      lda     vB
(1)    123C : 38                         sec
(1)    123D : E3 01                      sbc     1,S             ; B-Q*F
(1)    123F : 7A                         ply                     ; discard Q*F
(1)    1240 : 85 22                      sta     vS              ; S=B-Q*F
(1)    1242 : A6 18                      ldx     vB
(1)    1244 : 9B                         txy
(1)    1245 : 20 6D 11                   jsr     mul16           ; B*B
(1)    1248 : DA                         phx                     ; push B*B
(1)    1249 : A6 16                      ldx     vA
(1)    124B : 9B                         txy
(1)    124C : 20 6D 11                   jsr     mul16           ; A*A
(1)    124F : 8A                         txa
(1)    1250 : 38                         sec
(1)    1251 : E3 01                      sbc     1,S             ; A*A-B*B
(1)    1253 : 7A                         ply                     ; discard B*B
(1)    1254 : AA                         tax
(1)    1255 : A0 32 00                   ldy     #F
(1)    1258 : 20 C1 11                   jsr     div16           ; (A*A-B*B)/F
(1)    125B : 8A                         txa
(1)    125C : 18                         clc
(1)    125D : 65 1A                      adc     vC
(1)    125F : 85 24                      sta     vT              ; T=(A*A-B*B)/F+C
(1)    1261 : A6 16                      ldx     vA
(1)    1263 : A4 20                      ldy     vQ
(1)    1265 : 20 6D 11                   jsr     mul16           ; A*Q
(1)    1268 : DA                         phx                     ; push A*Q
(1)    1269 : A6 16                      ldx     vA
(1)    126B : A4 22                      ldy     vS
(1)    126D : 20 6D 11                   jsr     mul16           ; A*S
(1)    1270 : A0 32 00                   ldy     #F
(1)    1273 : 20 C1 11                   jsr     div16           ; A*S/F
(1)    1276 : 8A                         txa
(1)    1277 : 18                         clc
(1)    1278 : 63 01                      adc     1,S             ; A*Q+A*S/F
(1)    127A : 7A                         ply                     ; discard A*Q+A*S/F
(1)    127B : 0A                         asl     A               ; 2*(A*Q+A*S/F)
(1)    127C : 18                         clc
(1)    127D : 65 1C                      adc     vD              ; 2*(A*Q+A*S/F)+D
(1)    127F : 85 18                      sta     vB              ; B=2*(A*Q+A*S/F)+D
(1)    1281 : A6 24                      ldx     vT
(1)    1283 : 86 16                      stx     vA
(1)    1285 : A0 32 00                   ldy     #F
(1)    1288 : 20 C1 11                   jsr     div16           ; A/F
(1)    128B : 86 1E                      stx     vP              ; P=A/F
(1)    128D : 9B                         txy
(1)    128E : 20 6D 11                   jsr     mul16           ; P*P
(1)    1291 : DA                         phx                     ; push P*P
(1)    1292 : A6 18                      ldx     vB
(1)    1294 : A0 32 00                   ldy     #F
(1)    1297 : 20 C1 11                   jsr     div16           ; B/F
(1)    129A : 86 20                      stx     vQ              ; Q=B/F
(1)    129C : 9B                         txy
(1)    129D : 20 6D 11                   jsr     mul16           ; Q*Q
(1)    12A0 : 8A                         txa
(1)    12A1 : 18                         clc
(1)    12A2 : 63 01                      adc     1,S             ; P*P+Q*Q
(1)    12A4 : 85 24                      sta     vT              ; T=P*P+Q*Q
(1)    12A6 : 7A                         ply                     ; discard P*P
(1)    12A7 :
(1)    12A7 :                            ;; pha
(1)    12A7 :                            ;; jsr     putspace
(1)    12A7 :                            ;; ldx     vI
(1)    12A7 :                            ;; lda     #'I'
(1)    12A7 :                            ;; jsr     print
(1)    12A7 :                            ;; ldx     vA
(1)    12A7 :                            ;; lda     #'A'
(1)    12A7 :                            ;; jsr     print
(1)    12A7 :                            ;; ldx     vB
(1)    12A7 :                            ;; lda     #'B'
(1)    12A7 :                            ;; jsr     print
(1)    12A7 :                            ;; ldx     vP
(1)    12A7 :                            ;; lda     #'P'
(1)    12A7 :                            ;; jsr     print
(1)    12A7 :                            ;; ldx     vQ
(1)    12A7 :                            ;; lda     #'Q'
(1)    12A7 :                            ;; jsr     print
(1)    12A7 :                            ;; ldx     vT
(1)    12A7 :                            ;; lda     #'T'
(1)    12A7 :                            ;; jsr     print
(1)    12A7 :                            ;; jsr     newline
(1)    12A7 :                            ;; pla
(1)    12A7 :
(1)    12A7 : C9 05 00                   cmp     #5              ; P*P+Q*Q-4
(1)    12AA : 10 12                      bpl     print_i         ; if P*P+Q*Q>=5
(1)    12AC : A5 14                      lda     vI
(1)    12AE : 1A                         inc     A
(1)    12AF : 85 14                      sta     vI              ; I+=1
(1)    12B1 : C9 10 00                   cmp     #16
(1)    12B4 : 10 03                      bpl     print_space     ; if I>=16
(1)    12B6 : 4C 29 12                   jmp     loop_i          ; if I<16 loop_i
(1)    12B9 :                    print_space:
(1)    12B9 : A9 20 00                   lda     #' '
(1)    12BC : 80 12                      bra     print_char
(1)    12BE :                    print_i:
(1)    12BE : A5 14                      lda     vI
(1)    12C0 : 38                         sec
(1)    12C1 : E9 0A 00                   sbc     #10
(1)    12C4 : 10 06                      bpl     print_hex
(1)    12C6 : 18                         clc
(1)    12C7 : 69 3A 00                   adc     #10+'0'
(1)    12CA : 80 04                      bra     print_char
(1)    12CC :                    print_hex:
(1)    12CC : 18                         clc
(1)    12CD : 69 41 00                   adc     #'A'
(1)    12D0 :                    print_char:
(1)    12D0 : 20 39 10                   jsr     putchar
(1)    12D3 :
(1)    12D3 :                            ;; pha
(1)    12D3 :                            ;; lda     #'@'
(1)    12D3 :                            ;; jsr     putchar
(1)    12D3 :                            ;; lda     #'='
(1)    12D3 :                            ;; jsr     putchar
(1)    12D3 :                            ;; pla
(1)    12D3 :                            ;; jsr     putchar
(1)    12D3 :                            ;; jsr     newline
(1)    12D3 :
(1)    12D3 : 20 2D 10                   jsr     getchar
(1)    12D6 : B0 07                      bcs     next_x
(1)    12D8 : 29 FF 00                   and     #$FF
(1)    12DB : D0 02                      bne     next_x
(1)    12DD : 00                         brk
(1)    12DE : 00                         .byte   0
(1)    12DF :                    next_x:
(1)    12DF : A5 12                      lda     vX
(1)    12E1 : 1A                         inc     A
(1)    12E2 : 85 12                      sta     vX              ; X+=1
(1)    12E4 : C9 1E 00                   cmp     #30
(1)    12E7 : 10 03                      bpl     next_y          ; if X>=30
(1)    12E9 : 4C 03 12                   jmp     loop_x
(1)    12EC :                    next_y:
(1)    12EC : 20 55 10                   jsr     newline
(1)    12EF : A5 10                      lda     vY
(1)    12F1 : 1A                         inc     A
(1)    12F2 : 85 10                      sta     vY              ; Y+=1
(1)    12F4 : C9 0D 00                   cmp     #13
(1)    12F7 : 10 03                      bpl     mandelbrot_end  ; if Y>=13
(1)    12F9 : 4C FE 11                   jmp     loop_y
(1)    12FC :                    mandelbrot_end:
(1)    12FC : 60                         rts
       12FD :
       12FD :                    isr_nirq:
       12FD :                            ;; P_D is cleared on interrupt
       12FD : E2 20                      sep     #P_M            ; 8-bit memory
       12FF :                            longa   off
       12FF : 48                         pha                     ; save A
       1300 : DA                         phx                     ; save X
       1301 : AD 00 DF                   lda     ACIA_status
       1304 : 29 80                      and     #IRQF_bm
       1306 : F0 22                      beq     isr_nirq_exit
       1308 : AD 00 DF                   lda     ACIA_status
       130B : 29 01                      and     #RDRF_bm
       130D : F0 09                      beq     isr_nirq_send
       130F : AD 01 DF                   lda     ACIA_data       ; receive character
       1312 : A2 00 20                   ldx     #rx_queue
       1315 : 20 85 10                   jsr     queue_add
       1318 :                    isr_nirq_send:
       1318 : AD 00 DF                   lda     ACIA_status
       131B : 29 02                      and     #TDRE_bm
       131D : F0 0B                      beq     isr_nirq_exit
       131F : A2 80 20                   ldx     #tx_queue
       1322 : 20 BD 10                   jsr     queue_remove
       1325 : B0 06                      bcs     isr_nirq_send_empty
       1327 : 8D 01 DF                   sta     ACIA_data       ; send character
       132A :                    isr_nirq_exit:
       132A : FA                         plx                     ; restore X
       132B : 68                         pla                     ; restore Y
       132C : 40                         rti                     ; restore P and PC
       132D :                    isr_nirq_send_empty:
       132D : A9 94                      lda     #RX_INT_TX_NO
       132F : 8D 00 DF                   sta     ACIA_control    ; disable Tx interrupt
       1332 : 80 F6                      bra     isr_nirq_exit
       1334 :
       1334 :                    isr_cop:
       1334 : 00                         brk
       1335 : 00                         .byte   0
       1336 :
       1336 :                    isr_abort:
       1336 : 00                         brk
       1337 : 00                         .byte   0
       1338 :
       1338 :                    isr_nmi:
       1338 : 00                         brk
       1339 : 00                         .byte   0
       133A :
       133A :                    isr_irq:
       133A : 00                         brk
       133B : 00                         .byte   0
       133C :
       133C :                    isr_ncop:
       133C : 00                         brk
       133D : 00                         .byte   0
       133E :
       133E :                    isr_nbrk:
       133E : 00                         brk
       133F : 00                         .byte   0
       1340 :
       1340 :                    isr_nabort:
       1340 : 00                         brk
       1341 : 00                         .byte   0
       1342 :
       1342 :                    isr_nnmi:
       1342 : 00                         brk
       1343 : 00                         .byte   0
