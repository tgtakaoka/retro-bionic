          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     65816
          0 :                            .include "w65c816.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                            .include "mos6502.inc"
(2)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :
(2)       0 :                    ;;; MOS6502
(2)       0 :                    ;;; Processor Status Register P
(2)       0 : =1                 P_CARRY         =       %00000001   ; set to 1 if carry occurred
(2)       0 : =2                 P_ZERO          =       %00000010   ; set to 1 if result is zero
(2)       0 : =4                 P_IRQ           =       %00000100   ; if 1, IRQ is disabled
(2)       0 : =8                 P_DECIMAL       =       %00001000   ; if 1, decimal mode
(2)       0 : =10                P_BRK           =       %00010000   ; if 1, BRK command
(2)       0 : =2                 P_OVERFLOW      =       %00000010   ; set to 1 if overflow occurred
(2)       0 : =8                 P_NEGATIVE      =       %00001000   ; set to 1 if result is negative
(2)       0 :
(2)       0 :                    ;;; Vector
(2)       0 : =FFFA              VEC_NMI         =       $FFFA  ; $FFFA: Non Maskable Interrupt
(2)       0 : =FFFC              VEC_RESET       =       $FFFC  ; $FFFE: Reset
(2)       0 : =FFFE              VEC_IRQ         =       $FFFE  ; $FFFE: Interrupt Request and BRK command
(1)       0 :
(1)       0 :                    ;;; W65C816S
(1)       0 :                    ;;; Processor Status Register P
(1)       0 : =10                P_X     =       %00010000       ; if 0, X and Y are 16 bit.
(1)       0 : =20                P_M     =       %00100000       ; if 0, A is 16 bit.
(1)       0 :
(1)       0 :                    ;;; Emulation Mode Vector Locations
(1)       0 : =FFF8              VEC_ABORT       =       $FFF8   ; $FFF8: Abort
(1)       0 : =FFF4              VEC_COP         =       $FFF4   ; $FFF4: COP command
(1)       0 :
(1)       0 :                    ;;; Native Mode Vector Locations
(1)       0 : =FFEE              NVEC_IRQ        =       $FFEE   ; $FFEE: Interrupt Request
(1)       0 : =FFEA              NVEC_NMI        =       $FFEA   ; $FFEA: Non Maskable Interrupt
(1)       0 : =FFE8              NVEC_ABORT      =       $FFE8   ; $FFE8: Abort
(1)       0 : =FFE6              NVEC_BRK        =       $FFE6   ; $FFE6: BRK command
(1)       0 : =FFE4              NVEC_COP        =       $FFE4   ; $FFE4: COP command
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA    =       $DF00
          0 :                            .include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control    =       ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm          =       %11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc     =       %00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc    =       %00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc    =       %00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc    =       %00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm          =       %00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc      =       %00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc      =       %00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc      =       %00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc      =       %00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc      =       %00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc      =       %00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc      =       %00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc      =       %00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm          =       %01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc       =       %00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc       =       %00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc      =       %01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc    =       %01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm         =       %10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status     =       ACIA+0
(1)       0 : =1                 RDRF_bm         =       %00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm         =       %00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm         =       %00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm         =       %00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm         =       %00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm         =       %00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm         =       %01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm         =       %10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data       =       ACIA+1          ; Data register
          0 : =94                RX_INT_TX_NO    =       WSB_8N1_gc|RIEB_bm
          0 : =B4                RX_INT_TX_INT   =       WSB_8N1_gc|RIEB_bm|TCB_EI_gc
          0 :
       FFEE :                            *=      NVEC_IRQ
       FFEE : 36 11                      .word   isr_irq
       FFF0 :
       FFFC :                            *=      VEC_RESET
       FFFC : 00 10                      .word   initialize
       FFFE :
       2000 :                            *=      $2000
       2000 : =80                rx_queue_size   =       128
       2000 :                    rx_queue:
       2080 :                            *=      *+rx_queue_size
       2080 : =80                tx_queue_size   =       128
       2080 :                    tx_queue:
       2100 :                            *=      *+tx_queue_size
       2100 :
       1000 :                            *=      $1000
       1000 : =1FF               stack   =       $01ff
       1000 :                    initialize:
       1000 : 18                         clc
       1001 : FB                         xce                     ; native mode
       1002 : C2 10                      rep     #P_X            ; 16-bit index
       1004 :                            longi   on
       1004 : A2 FF 01                   ldx     #stack
       1007 : 9A                         txs
       1008 : D8                         cld                     ; clear decimal flag
       1009 : A2 00 20                   ldx     #rx_queue
       100C : A9 80                      lda     #rx_queue_size
       100E : 20 B6 10                   jsr     queue_init
       1011 : A2 80 20                   ldx     #tx_queue
       1014 : A9 80                      lda     #tx_queue_size
       1016 : 20 B6 10                   jsr     queue_init
       1019 :                            ;; initialize ACIA
       1019 : A9 03                      lda     #CDS_RESET_gc   ; master reset
       101B : 8D 00 DF                   sta     ACIA_control
       101E : A9 94                      lda     #RX_INT_TX_NO
       1020 : 8D 00 DF                   sta     ACIA_control
       1023 : 58                         cli                     ; enable IRQ
       1024 :
       1024 :                    receive_loop:
       1024 : 20 9B 10                   jsr     getchar
       1027 : B0 FB                      bcs     receive_loop
       1029 : 09 00                      ora     #0
       102B : F0 1C                      beq     halt_to_system
       102D :                    echo_back:
       102D : 48                         pha
       102E : 20 A4 10                   jsr     putchar         ; echo
       1031 : A9 20                      lda     #' '            ; space
       1033 : 20 A4 10                   jsr     putchar
       1036 : A3 01                      lda     1,S
       1038 : 20 54 10                   jsr     put_hex8        ; print in hex
       103B : A9 20                      lda     #' '            ; space
       103D : 20 A4 10                   jsr     putchar
       1040 : 68                         pla
       1041 : 20 77 10                   jsr     put_bin8        ; print in binary
       1044 : 20 4B 10                   jsr     newline
       1047 : 80 DB                      bra     receive_loop
       1049 :                    halt_to_system:
       1049 : 00                         brk
       104A : 00                         .byte    0              ; halt to system
       104B :
       104B :                    ;;; Put newline
       104B :                    ;;; @clobber A
       104B :                    newline:
       104B : A9 0D                      lda     #$0D
       104D : 20 A4 10                   jsr     putchar
       1050 : A9 0A                      lda     #$0A
       1052 : 80 50                      bra     putchar
       1054 :
       1054 :                    ;;; Print uint8_t in hex
       1054 :                    ;;; @param A uint8_t value to be printed in hex.
       1054 :                    ;;; @clobber A
       1054 :                    put_hex8:
       1054 : 48                         pha
       1055 : A9 30                      lda     #'0'
       1057 : 20 A4 10                   jsr     putchar
       105A : A9 78                      lda     #'x'
       105C : 20 A4 10                   jsr    putchar
       105F : A3 01                      lda     1,S
       1061 : 4A                         lsr     a
       1062 : 4A                         lsr     a
       1063 : 4A                         lsr     a
       1064 : 4A                         lsr     a
       1065 : 20 69 10                   jsr     put_hex4
       1068 : 68                         pla
       1069 :                    put_hex4:
       1069 : 29 0F                      and     #$0F
       106B : C9 0A                      cmp     #10
       106D : 90 04                      bcc     put_hex8_dec    ; <10
       106F : 69 36                      adc     #'A'-10-1       ; C=1
       1071 : 80 31                      bra     putchar
       1073 :                    put_hex8_dec:
       1073 : 69 30                      adc     #'0'
       1075 : 80 2D                      bra     putchar
       1077 :
       1077 :                    ;;; Print uint8_t in binary
       1077 :                    ;;; @param A uint8_t value to be printed in binary.
       1077 :                    ;;; @clobber A
       1077 :                    put_bin8:
       1077 : 48                         pha
       1078 : A9 30                      lda     #'0'
       107A : 20 A4 10                   jsr     putchar
       107D : A9 62                      lda     #'b'
       107F : 20 A4 10                   jsr     putchar
       1082 : 68                         pla
       1083 : 20 86 10                   jsr     put_bin4
       1086 :                    put_bin4:
       1086 : 20 89 10                   jsr     put_bin2
       1089 :                    put_bin2:
       1089 : 20 8C 10                   jsr     put_bin1
       108C :                    put_bin1:
       108C : 0A                         asl     a               ; C=MSB
       108D : 48                         pha
       108E : 90 04                      bcc     put_bin0
       1090 : A9 31                      lda     #'1'
       1092 : 80 02                      bra     put_binchar
       1094 :                    put_bin0:
       1094 : A9 30                      lda     #'0'
       1096 :                    put_binchar:
       1096 : 20 A4 10                   jsr     putchar
       1099 : 68                         pla
       109A : 60                         rts
       109B :
       109B :                    ;;; Get character
       109B :                    ;;; @return A
       109B :                    ;;; @return P.C 1 if no character
       109B :                    ;;; @clobber X
       109B :                    getchar:
       109B : A2 00 20                   ldx     #rx_queue
       109E : 78                         sei                     ; disable IRQ
       109F : 20 05 11                   jsr     queue_remove
       10A2 : 58                         cli
       10A3 : 60                         rts
       10A4 :
       10A4 :                    ;;; Put character
       10A4 :                    ;;; @param A
       10A4 :                    ;;; @clobber X
       10A4 :                    putchar:
       10A4 : 48                         pha
       10A5 :                    putchar_retry:
       10A5 : A2 80 20                   ldx     #tx_queue
       10A8 : 78                         sei                     ; disable IRQ
       10A9 : 20 CD 10                   jsr     queue_add
       10AC : 58                         cli                     ; enable IRQ
       10AD : B0 F6                      bcs     putchar_retry   ; queue is full
       10AF : A9 B4                      lda     #RX_INT_TX_INT  ; enable Tx interrupt
       10B1 : 8D 00 DF                   sta     ACIA_control
       10B4 : 68                         pla
       10B5 : 60                         rts
       10B6 :
       10B6 :                            .include "queue.inc"
(1)    10B6 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    10B6 :                    ;;; [queue] queue structure
(1)    10B6 : =0                 queue_len       =       0       ; queue length
(1)    10B6 : =1                 queue_size      =       1       ; buffer size
(1)    10B6 : =2                 queue_put       =       2       ; queue put index
(1)    10B6 : =3                 queue_get       =       3       ; queue get index
(1)    10B6 : =4                 queue_buf       =       4       ; buffer start address
(1)    10B6 :
(1)    10B6 :                    ;;; [queue] Initialize queue
(1)    10B6 :                    ;;; @param X queue pointer
(1)    10B6 :                    ;;; @param A queue size
(1)    10B6 :                    ;;; @clobber A B X
(1)    10B6 :                    queue_init:
(1)    10B6 : 08                         php
(1)    10B7 : E2 20                      sep     #P_M            ; 8-bit memory
(1)    10B9 :                            longa   off
(1)    10B9 : 38                         sec
(1)    10BA : E9 04                      sbc     #queue_buf
(1)    10BC : 95 01                      sta     queue_size,X
(1)    10BE : EB                         xba
(1)    10BF : 74 00                      stz     queue_len,X
(1)    10C1 : 74 02                      stz     queue_put,X
(1)    10C3 : 74 03                      stz     queue_get,X
(1)    10C5 :                    queue_init_loop:
(1)    10C5 : 74 04                      stz     queue_buf,X
(1)    10C7 : E8                         inx
(1)    10C8 : 3A                         dec     A
(1)    10C9 : D0 FA                      bne     queue_init_loop
(1)    10CB : 28                         plp
(1)    10CC : 60                         rts
(1)    10CD :
(1)    10CD :                    ;;; [queue] Add an element to queue
(1)    10CD :                    ;;; @param X queue pointer
(1)    10CD :                    ;;; @param A an element
(1)    10CD :                    ;;; @return P.C 1 if queue is full
(1)    10CD :                    queue_add:
(1)    10CD : 08                         php
(1)    10CE : E2 20                      sep     #P_M            ; 8-bit memory
(1)    10D0 :                            longa   off
(1)    10D0 : 48                         pha                     ; save an element
(1)    10D1 : B5 00                      lda     queue_len,X
(1)    10D3 : D5 01                      cmp     queue_size,X
(1)    10D5 : 90 04                      bcc     queue_add_element  ; queue_len < queue_size
(1)    10D7 : 68                         pla
(1)    10D8 : 28                         plp
(1)    10D9 : 38                         sec                     ; C=1
(1)    10DA : 60                         rts
(1)    10DB :                    queue_add_element:      
(1)    10DB : 1A                         inc     A
(1)    10DC : 95 00                      sta     queue_len,X
(1)    10DE : 5A                         phy                     ; save Y
(1)    10DF : DA                         phx                     ; save queue pointer
(1)    10E0 : B5 02                      lda     queue_put,X
(1)    10E2 : 18                         clc
(1)    10E3 : 63 01                      adc     1,S             ; lo(queue pointer)
(1)    10E5 : 83 01                      sta     1,S
(1)    10E7 : A3 02                      lda     2,S             ; hi(queue pointer)
(1)    10E9 : 69 00                      adc     #0
(1)    10EB : 83 02                      sta     2,S
(1)    10ED : A3 02                      lda     2,S
(1)    10EF : 7A                         ply
(1)    10F0 : A3 03                      lda     3,S             ; restore an element
(1)    10F2 : 99 04 00                   sta     queue_buf,Y     ; store an element
(1)    10F5 : 7A                         ply                     ; restore Y
(1)    10F6 : B5 02                      lda     queue_put,X
(1)    10F8 : 1A                         inc     A
(1)    10F9 : D5 01                      cmp     queue_size,X
(1)    10FB : 90 02                      bcc     queue_add_return ; queue_put < queue_size
(1)    10FD : A9 00                      lda     #0
(1)    10FF :                    queue_add_return:
(1)    10FF : 95 02                      sta     queue_put,X
(1)    1101 : 68                         pla
(1)    1102 : 28                         plp
(1)    1103 : 18                         clc                     ;  C=0
(1)    1104 : 60                         rts
(1)    1105 :
(1)    1105 :                    ;;; [queue] Remove an element from queue
(1)    1105 :                    ;;; @param X queue pointer
(1)    1105 :                    ;;; @return A an element
(1)    1105 :                    ;;; @return P.C 1 if queue is empty
(1)    1105 :                    queue_remove:
(1)    1105 : 08                         php
(1)    1106 : E2 20                      sep     #P_M            ; 8-bit memory
(1)    1108 :                            longa   off
(1)    1108 : B5 00                      lda     queue_len,X
(1)    110A : D0 03                      bne     queue_remove_elem
(1)    110C : 28                         plp
(1)    110D : 38                         sec                     ; C=1
(1)    110E : 60                         rts
(1)    110F :                    queue_remove_elem:
(1)    110F : 3A                         dec     A
(1)    1110 : 95 00                      sta     queue_len,X
(1)    1112 : 5A                         phy                     ; save Y
(1)    1113 : DA                         phx                     ; save queue pointer
(1)    1114 : B5 03                      lda     queue_get,X
(1)    1116 : 18                         clc
(1)    1117 : 63 01                      adc     1,S             ; lo(queue pointer)
(1)    1119 : 83 01                      sta     1,S
(1)    111B : A3 02                      lda     2,S             ; hi(queue pointer)
(1)    111D : 69 00                      adc     #0
(1)    111F : 83 02                      sta     2,S
(1)    1121 : 7A                         ply
(1)    1122 : B9 04 00                   lda     queue_buf,Y     ; read an element
(1)    1125 : 7A                         ply                     ; restore Y
(1)    1126 : 48                         pha                     ; save an element
(1)    1127 : B5 03                      lda     queue_get,X
(1)    1129 : 1A                         inc     A
(1)    112A : D5 01                      cmp     queue_size,X
(1)    112C : 90 02                      bcc     queue_remove_return ; queue_get < queue_size
(1)    112E : A9 00                      lda     #0
(1)    1130 :                    queue_remove_return:
(1)    1130 : 95 03                      sta     queue_get,X
(1)    1132 : 68                         pla                     ; restore an element
(1)    1133 : 28                         plp
(1)    1134 : 18                         clc                     ; C=0
(1)    1135 : 60                         rts
       1136 :
       1136 :                    isr_irq:
       1136 :                            ;; P_D is cleared on interrupt
       1136 : E2 20                      sep     #P_M            ; 8-bit memory
       1138 : 48                         pha                     ; save A
       1139 : DA                         phx                     ; save X
       113A : AD 00 DF                   lda     ACIA_status
       113D : 29 80                      and     #IRQF_bm
       113F : F0 22                      beq     isr_irq_exit
       1141 : AD 00 DF                   lda     ACIA_status
       1144 : 29 01                      and     #RDRF_bm
       1146 : F0 09                      beq     isr_irq_send
       1148 : AD 01 DF                   lda     ACIA_data       ; receive character
       114B : A2 00 20                   ldx     #rx_queue
       114E : 20 CD 10                   jsr     queue_add
       1151 :                    isr_irq_send:
       1151 : AD 00 DF                   lda     ACIA_status
       1154 : 29 02                      and     #TDRE_bm
       1156 : F0 0B                      beq     isr_irq_exit
       1158 : A2 80 20                   ldx     #tx_queue
       115B : 20 05 11                   jsr     queue_remove
       115E : B0 06                      bcs     isr_irq_send_empty
       1160 : 8D 01 DF                   sta     ACIA_data       ; send character
       1163 :                    isr_irq_exit:
       1163 : FA                         plx                     ; restore X
       1164 : 68                         pla                     ; restore Y
       1165 : 40                         rti                     ; restore P and PC
       1166 :                    isr_irq_send_empty:
       1166 : A9 94                      lda     #RX_INT_TX_NO
       1168 : 8D 00 DF                   sta     ACIA_control    ; disable Tx interrupt
       116B : 80 F6                      bra     isr_irq_exit
