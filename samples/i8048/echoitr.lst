          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     8048
          0 :                            include "i8048.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; i8048
(1)       0 :                    ;;; PSW Register
(1)       0 : =80                PSW_CY:         equ     10000000B ; set to 1 if carry
(1)       0 : =40                PSW_AC:         equ     01000000B ; set to 1 if auxillary carry
(1)       0 : =10                PSW_F0:         equ     00010000B ; flag 0
(1)       0 : =4                 PSW_BS:         equ     00000100B ; register bank select
(1)       0 : =7                 PSW_SP:         equ     00000111B ; stack pointer (grow upward)
(1)       0 :                    ;;; Interrupt origin
(1)       0 : =0                 ORG_RESET:      equ     000H    ; RESET
(1)       0 : =3                 ORG_INT:        equ     003H    ; #INT
(1)       0 :                    ;;; Register bank and stack
(1)       0 : =0                 BASE_BANK0:     equ     00H     ; R0-R7
(1)       0 : =8                 BASE_STACK:     equ     08H     ; PSW:PC
(1)       0 : =18                BASE_BANK1:     equ     18H     ; R0-R7
(1)       0 : =20                BASE_MEMORY:    equ     20H     ; general purpose memory
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =FC                USART:          equ     0FCH
          0 : =FC                USARTD:         equ     USART+0 ; Receive/Transmit data
          0 : =FD                USARTS:         equ     USART+1 ; Srtatus register
          0 : =FD                USARTC:         equ     USART+1 ; Control register
          0 : =FE                USARTRV:        equ     USART+2 ; Receive interrupt vector (ORG_*)
          0 : =FF                USARTTV:        equ     USART+3 ; Transmit interrupt vector (ORG_*)
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     11000000B
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 << MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 << MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 << MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     00100000B
(1)       0 : =10                MODE_PARITY_bm: equ     00010000B
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     00001100B
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 << MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 << MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 << MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 << MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     00000011B
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 << MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ (2 << MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ (3 << MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     10000000B   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     01000000B   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     00100000B   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     00010000B   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     00001000B   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     00000100B   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     00000010B   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     00000001B   ; Transmit enable
(1)       0 :
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     10000000B   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     01000000B   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     00100000B   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     00010000B   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     00001000B   ; Parity Error
(1)       0 : =4                 ST_TxEMPTY_bm:  equ     00000100B   ; Transmitter empty
(1)       0 : =2                 ST_RxRDY_bm:    equ     00000010B   ; Receiver ready
(1)       0 : =1                 ST_TxRDY_bm:    equ     00000001B   ; Transmitter ready
(1)       0 : =1                 ST_RxRDY_bp:    equ     1           ; Receiver ready
(1)       0 : =0                 ST_TxRDY_bp:    equ     0           ; Transmitter ready
          0 :                    ;;; Async 1stop 8data x16
          0 : =4E                ASYNC_MODE:     equ     MODE_STOP1_gc|MODE_LEN8_gc|MODE_BAUD_X16
          0 :                    ;;; RTS/DTR, error reset, Rx enable, Tx enable
          0 : =37                RX_EN_TX_EN:    equ     CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm|CMD_TxEN_bm
          0 : =36                RX_EN_TX_DIS:   equ     CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm
          0 :
          0 :                    ;;; External data memory
          0 :                            org     00H
          0 : =8                 rx_queue_size:  equ     8
          0 :                    rx_queue_buf:   ds      rx_queue_size
          8 : =38                tx_queue_size:  equ     56
          8 :                    tx_queue_buf:   ds      tx_queue_size
         FC :                            org     USART
         FC :                    ;;;  Software stack; pre-decrement, post-increment pointed by R1 on
         FC :                    ;;;  external data memory
         FC : =FC                stack:          equ     $
         FC :
         FC :                    ;;; Internal data memory
         20 :                            org     BASE_MEMORY
         20 :                    rx_queue:       ds      queue_work_size
         25 :                    tx_queue:       ds      queue_work_size
         2A :
          0 :                            org     ORG_RESET
          0 : 04 05                      jmp     init
          3 :                            org     ORG_INT
          3 : 24 20                      jmp     isr_intr
          5 :                    init:
          5 : B9 FC                      mov     R1, #stack
          7 : B8 20                      mov     R0, #rx_queue
          9 : BA 00                      mov     R2, #rx_queue_buf
          B : 23 08                      mov     A, #rx_queue_size
          D : 14 B5                      call    queue_init
          F : B8 25                      mov     R0, #tx_queue
         11 : BA 08                      mov     R2, #tx_queue_buf
         13 : 23 38                      mov     A, #tx_queue_size
         15 : 14 B5                      call    queue_init
         17 :                    init_usart:
         17 : B8 FD                      mov     R0, #USARTC
         19 : 27                         clr     A
         1A : 90                         movx    @R0, A
         1B : 90                         movx    @R0, A
         1C : 90                         movx    @R0, A          ; safest way to sync mode
         1D : 23 40                      mov     a, #CMD_IR_bm
         1F : 90                         movx    @R0, A          ; reset
         20 : 00                         nop
         21 : 00                         nop
         22 : 23 4E                      mov     a, #ASYNC_MODE
         24 : 90                         movx    @R0, A
         25 : 00                         nop
         26 : 00                         nop
         27 : 23 37                      mov     a, #RX_EN_TX_EN
         29 : 90                         movx    @R0, A
         2A : 23 03                      mov     a, #ORG_INT
         2C : B8 FE                      mov     R0, #USARTRV
         2E : 90                         movx    @R0, A          ; enable RxRDY interrupt
         2F : 18                         inc     R0
         30 : 90                         movx    @R0, A          ; enable TxRDY interrupt
         31 : 05                         en      I
         32 :
         32 :                    receive_loop:
         32 : 14 88                      call    getchar
         34 : E6 32                      jnc     receive_loop
         36 : C6 47                      jz      halt_to_system
         38 : AB                         mov     R3, A           ; save letter
         39 : 14 A0                      call    putchar         ; echo
         3B : 14 96                      call    putspace
         3D : 14 48                      call    put_hex8        ; print in hex
         3F : 14 96                      call    putspace
         41 : 14 61                      call    put_bin8        ; print in binary
         43 : 14 9A                      call    newline
         45 : 04 32                      jmp     receive_loop
         47 :                    halt_to_system:
         47 : 01                         db      01H
         48 :
         48 :                    ;;; Print uint8_t in hex
         48 :                    ;;; @param R3 uint8_t value to be printed in hex.
         48 :                    ;;; @clobber A
         48 :                    put_hex8:
         48 : 23 30                      mov     A, #'0'
         4A : 14 A0                      call    putchar
         4C : 23 78                      mov     A, #'x'
         4E : 14 A0                      call    putchar
         50 : FB                         mov     A, R3
         51 : 47                         swap    A
         52 : 14 55                      call    put_hex4
         54 : FB                         mov     A, R3
         55 :                    put_hex4:
         55 : 53 0F                      anl     A, #0FH
         57 : 03 F6                      add     A, #-10
         59 : E6 5D                      jnc     put_hex8_dec    ; A<10
         5B : 03 07                      add     A, #'A'-('0'+10)
         5D :                    put_hex8_dec:
         5D : 03 3A                      add     A, #'0'+10
         5F : 04 A0                      jmp     putchar
         61 :
         61 :                    ;;; Print uint8_t in binary
         61 :                    ;;; @param R3 uint8_t value to be printed in binary.
         61 :                    ;;; @clobber A R2
         61 :                    put_bin8:
         61 : 23 30                      mov     A, #'0'
         63 : 14 A0                      call    putchar
         65 : 23 62                      mov     A, #'b'
         67 : 14 A0                      call    putchar
         69 : FB                         mov     A, R3
         6A : 47                         swap    A
         6B : AA                         mov     R2, A
         6C : 14 73                      call    put_bin4
         6E : FB                         mov     A, R3
         6F : AA                         mov     R2, A
         70 : 14 73                      call    put_bin4
         72 : 83                         ret
         73 :                    put_bin4:
         73 : FA                         mov     A, R2
         74 : 77                         rr      A
         75 : 77                         rr      A
         76 : AA                         mov     R2, A
         77 : 14 7D                      call    put_bin2
         79 : FA                         mov     A, R2
         7A : E7                         rl      A
         7B : E7                         rl      A
         7C : AA                         mov     R2, A
         7D :                    put_bin2:
         7D : FA                         mov     A, R2
         7E : 77                         rr      A
         7F : 14 82                      call    put_bin1
         81 : FA                         mov     A, R2
         82 :                    put_bin1:
         82 : 53 01                      anl     A, #1
         84 : 03 30                      add     A, #'0'
         86 : 04 A0                      jmp     putchar
         88 :                            
         88 :                    ;;; Get character
         88 :                    ;;; @return A
         88 :                    ;;; @return PSW.C 0 if no character
         88 :                    getchar:
         88 : F8                         mov     A, R0
         89 : C9                         dec     R1
         8A : 91                         movx    @R1, A          ; save R0
         8B : B8 20                      mov     R0, #rx_queue
         8D : 15                         dis     I
         8E : 14 F8                      call    queue_remove
         90 : 05                         en      I
         91 : 28                         xch     A, R0           ; save character
         92 : 81                         movx    A, @R1          ; restore R0
         93 : 19                         inc     R1
         94 : 28                         xch     A, R0           ; restore character
         95 : 83                         ret
         96 :
         96 :                    ;;; Put space
         96 :                    ;;; @clobber A
         96 :                    putspace:
         96 : 23 20                      mov     A, #' '
         98 : 04 A0                      jmp     putchar
         9A :
         9A :                    ;;; Put newline
         9A :                    ;;; @clobber A
         9A :                    newline:
         9A : 23 0D                      mov     A, #0DH
         9C : 14 A0                      call    putchar
         9E : 23 0A                      mov     A, #0AH
         A0 :
         A0 :                    ;;; Put character
         A0 :                    ;;; @param A
         A0 :                    ;;; @clobber A
         A0 :                    putchar:
         A0 : 28                         xch     A, R0           ; save character
         A1 : C9                         dec     R1
         A2 : 91                         movx    @R1, A          ; save R0
         A3 : F8                         mov     A, R0           ; restore character
         A4 :                    putchar_loop:
         A4 : B8 25                      mov     R0, #tx_queue
         A6 : 15                         dis     I
         A7 : 14 CB                      call    queue_add
         A9 : 05                         en      I
         AA : E6 A4                      jnc     putchar_loop    ; branch if queue is full
         AC : B8 FD                      mov     R0, #USARTC
         AE : 23 37                      mov     A, #RX_EN_TX_EN ; enable Tx
         B0 : 90                         movx    @R0, A
         B1 : 81                         movx    A, @R1
         B2 : 19                         inc     R1
         B3 : A8                         mov     R0, A           ; restore R0
         B4 : 83                         ret
         B5 :
         B5 :                            include "queue.inc"
(1)      B5 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)      B5 :                    ;;; [queue] queue structure on internal data memory
(1)      B5 : =0                 queue_len:      equ     0       ; queue length
(1)      B5 : =1                 queue_size:     equ     1       ; buffer size
(1)      B5 : =2                 queue_buf:      equ     2       ; buffer pointer to external data memory
(1)      B5 : =3                 queue_put:      equ     3       ; queue put index
(1)      B5 : =4                 queue_get:      equ     4       ; queue get index
(1)      B5 : =5                 queue_work_size:        equ     5
(1)      B5 :
(1)      B5 :                    ;;; [queue] Initialize queue
(1)      B5 :                    ;;; @param R0 queue work space pointer
(1)      B5 :                    ;;; @param R2 queue buffer pointer
(1)      B5 :                    ;;; @param A queue buffer size
(1)      B5 :                    ;;; @clobber A R0
(1)      B5 :                    queue_init:
(1)      B5 : AF                         mov     R7, A
(1)      B6 : B0 00                      mov     @R0, #0         ; queue_len
(1)      B8 : 18                         inc     R0
(1)      B9 : A0                         mov     @R0, A          ; queue_size
(1)      BA : 18                         inc     R0
(1)      BB : FA                         mov     A, R2
(1)      BC : A0                         mov     @R0, A          ; queue_buffer
(1)      BD : 18                         inc     R0
(1)      BE : B0 00                      mov     @R0, #0         ; queue_put
(1)      C0 : 18                         inc     R0
(1)      C1 : B0 00                      mov     @R0, #0         ; queue_get
(1)      C3 : FA                         mov     A, R2
(1)      C4 : A8                         mov     R0, A           ; R0=queue_buffer
(1)      C5 : 27                         clr     A
(1)      C6 :                    queue_init_loop:
(1)      C6 : 90                         movx    @R0, A
(1)      C7 : 18                         inc     R0
(1)      C8 : EF C6                      djnz    R7, queue_init_loop
(1)      CA : 83                         ret
(1)      CB :
(1)      CB :                    ;;; [queue] Add an element to queue
(1)      CB :                    ;;; @param R0 queue work space pointer
(1)      CB :                    ;;; @param A an element
(1)      CB :                    ;;; @return PSW.C 0 if queue is full
(1)      CB :                    ;;; @clobber R0
(1)      CB :                    queue_add:
(1)      CB : C9                         dec     R1
(1)      CC : 91                         movx    @R1, A          ; save A
(1)      CD : F0                         mov     A, @R0          ; queue_len
(1)      CE : 18                         inc     R0
(1)      CF : D0                         xrl     A, @R0          ; queue_size
(1)      D0 : 96 D6                      jnz     queue_add_store
(1)      D2 : 81                         movx    A, @R1          ; restore A
(1)      D3 : 19                         inc     R1
(1)      D4 : 97                         clr     C               ; PSW.C=0
(1)      D5 : 83                         ret
(1)      D6 :                    queue_add_store:
(1)      D6 : 81                         movx    A, @R1          ; restore A
(1)      D7 : 2F                         xch     A, R7           ; R7=an element
(1)      D8 : C9                         dec     R1
(1)      D9 : 91                         movx    @R1, A          ; save R7
(1)      DA : C8                         dec     R0
(1)      DB : 10                         inc     @R0             ; queue_len++
(1)      DC : 18                         inc     R0
(1)      DD : 18                         inc     R0
(1)      DE : F0                         mov     A, @R0          ; A=queue_buf
(1)      DF : 18                         inc     R0
(1)      E0 : 60                         add     A, @R0          ; A=queue_buf+queue_put
(1)      E1 : 29                         xch     A, R1           ; A=R1, R0=&queue_buf[queue_put]
(1)      E2 : 2F                         xch     A, R7           ; A=an element, R7=R1
(1)      E3 : 91                         movx    @R1, A          ; add an element
(1)      E4 : FF                         mov     A, R7           ; A=R1
(1)      E5 : A9                         mov     R1, A           ; restore R1
(1)      E6 : C8                         dec     R0
(1)      E7 : C8                         dec     R0
(1)      E8 : F0                         mov     A, @R0          ; A=queue_size
(1)      E9 : 18                         inc     R0
(1)      EA : 18                         inc     R0
(1)      EB : 10                         inc     @R0             ; queue_put++
(1)      EC : D0                         xrl     A, @R0
(1)      ED : 96 F0                      jnz     queue_add_end
(1)      EF : A0                         mov     @R0, A          ; queue_put=0
(1)      F0 :                    queue_add_end:
(1)      F0 : 81                         movx    A, @R1
(1)      F1 : 19                         inc     R1
(1)      F2 : AF                         mov     R7, A           ; restore R7
(1)      F3 : 81                         movx    A, @R1          ; restore A
(1)      F4 : 19                         inc     R1
(1)      F5 : 97                         clr     C
(1)      F6 : A7                         cpl     C
(1)      F7 : 83                         ret
(1)      F8 :
(1)      F8 :                    ;;; [queue] Remove an element from queue
(1)      F8 :                    ;;; @param R0 queue work space pointer
(1)      F8 :                    ;;; @return A an element
(1)      F8 :                    ;;; @return PSW.C 0 if queue is empty
(1)      F8 :                    ;;; @clobber R0
(1)      F8 :                    queue_remove:
(1)      F8 : F0                         mov     A, @R0            ; queue_len
(1)      F9 : 96 FD                      jnz     queue_remove_elem ; queue_len > 0
(1)      FB : 97                         clr     C                 ; PSW.C=0
(1)      FC : 83                         ret
(1)      FD :                    queue_remove_elem:
(1)      FD : FF                         mov     A, R7
(1)      FE : C9                         dec     R1
(1)      FF : 91                         movx    @R1, A          ; save R7
(1)     100 : F0                         mov     A, @R0          ; queue_len--
(1)     101 : 07                         dec     A
(1)     102 : A0                         mov     @R0, A
(1)     103 : 18                         inc     R0
(1)     104 : 18                         inc     R0
(1)     105 : F0                         mov     A, @R0          ; A=queue_buf
(1)     106 : 18                         inc     R0
(1)     107 : 18                         inc     R0
(1)     108 : 60                         add     A, @R0          ; A=queue_buf+queue_get
(1)     109 : 29                         xch     A, R1           ; A=R1
(1)     10A : 2F                         xch     A, R7           ; R7=R1
(1)     10B : 81                         movx    A, @R1
(1)     10C : 2F                         xch     A, R7           ; A=R1, R7=an element
(1)     10D : A9                         mov     R1, A           ; restore R1
(1)     10E : C8                         dec     R0
(1)     10F : C8                         dec     R0
(1)     110 : C8                         dec     R0
(1)     111 : F0                         mov     A, @R0          ; A=queue_size
(1)     112 : 18                         inc     R0
(1)     113 : 18                         inc     R0
(1)     114 : 18                         inc     R0
(1)     115 : 10                         inc     @R0             ; queue_get++
(1)     116 : D0                         xrl     A, @R0          ; queue_get
(1)     117 : 96 1A                      jnz     queue_remove_end
(1)     119 : A0                         mov     @R0, A          ; queue_get=0
(1)     11A :                    queue_remove_end:
(1)     11A : 81                         movx    A, @R1          ; restore R7
(1)     11B : 19                         inc     R1
(1)     11C : 2F                         xch     A, R7           ; A=an element
(1)     11D : 97                         clr     C
(1)     11E : A7                         cpl     C
(1)     11F : 83                         ret
        120 :
        120 :                    isr_intr:
        120 : D5                         sel     RB1             ; switch context
        121 : AA                         mov     R2, A           ; save A
        122 : B8 FD                      mov     R0, #USARTS
        124 : 80                         movx    A, @R0
        125 : 37                         cpl     A
        126 : 32 2F                      jb      ST_RxRDY_bp, isr_intr_tx
        128 : B8 FC                      mov     R0, #USARTD
        12A : 80                         movx    A, @R0
        12B : B8 20                      mov     R0, #rx_queue
        12D : 14 CB                      call    queue_add
        12F :                    isr_intr_tx:    
        12F : B8 FD                      mov     R0, #USARTS
        131 : 80                         movx    A, @R0
        132 : 37                         cpl     A
        133 : 12 43                      jb      ST_TxRDY_bp, isr_intr_exit
        135 : B8 25                      mov     R0, #tx_queue
        137 : 14 F8                      call    queue_remove
        139 : E6 45                      jnc     isr_intr_empty
        13B : B8 FC                      mov     R0, #USARTD
        13D : 90                         movx    @R0, A          ; send character
        13E : D3 26                      xrl     A, #'&'
        140 : 96 43                      jnz     isr_intr_exit
        142 : 01                         db      01H
        143 :                    isr_intr_exit:
        143 : FA                         mov     A, R2           ; restore A
        144 : 93                         retr
        145 :                    isr_intr_empty:
        145 : B8 FD                      mov     R0, #USARTC
        147 : 23 36                      mov     A, #RX_EN_TX_DIS
        149 : 90                         movx    @R0, A          ; disable Tx
        14A : FA                         mov     A, R2           ; restore A
        14B : 93                         retr
        14C :
        14C :                            end
