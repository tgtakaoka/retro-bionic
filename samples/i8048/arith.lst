          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     8048
          0 :                            include "i8048.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; i8048
(1)       0 :                    ;;; PSW Register
(1)       0 : =80                PSW_CY:         equ     10000000B ; set to 1 if carry
(1)       0 : =40                PSW_AC:         equ     01000000B ; set to 1 if auxillary carry
(1)       0 : =10                PSW_F0:         equ     00010000B ; flag 0
(1)       0 : =4                 PSW_BS:         equ     00000100B ; register bank select
(1)       0 : =7                 PSW_SP:         equ     00000111B ; stack pointer (grow upward)
(1)       0 :                    ;;; Interrupt origin
(1)       0 : =0                 ORG_RESET:      equ     000H    ; RESET
(1)       0 : =3                 ORG_INT:        equ     003H    ; #INT
(1)       0 :                    ;;; Register bank and stack
(1)       0 : =0                 BASE_BANK0:     equ     00H     ; R0-R7
(1)       0 : =8                 BASE_STACK:     equ     08H     ; PSW:PC
(1)       0 : =18                BASE_BANK1:     equ     18H     ; R0-R7
(1)       0 : =20                BASE_MEMORY:    equ     20H     ; general purpose memory
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =FC                USART:  equ     0FCH
          0 : =FC                USARTD: equ     USART+0         ; Data register
          0 : =FD                USARTS: equ     USART+1         ; Status register
          0 : =FD                USARTC: equ     USART+1         ; Control register
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     11000000B
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 << MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 << MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 << MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     00100000B
(1)       0 : =10                MODE_PARITY_bm: equ     00010000B
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     00001100B
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 << MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 << MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 << MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 << MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     00000011B
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 << MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ (2 << MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ (3 << MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     10000000B   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     01000000B   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     00100000B   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     00010000B   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     00001000B   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     00000100B   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     00000010B   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     00000001B   ; Transmit enable
(1)       0 :
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     10000000B   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     01000000B   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     00100000B   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     00010000B   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     00001000B   ; Parity Error
(1)       0 : =4                 ST_TxEMPTY_bm:  equ     00000100B   ; Transmitter empty
(1)       0 : =2                 ST_RxRDY_bm:    equ     00000010B   ; Receiver ready
(1)       0 : =1                 ST_TxRDY_bm:    equ     00000001B   ; Transmitter ready
(1)       0 : =1                 ST_RxRDY_bp:    equ     1           ; Receiver ready
(1)       0 : =0                 ST_TxRDY_bp:    equ     0           ; Transmitter ready
          0 :                    ;;; Async 1stop 8data x16
          0 : =4E                ASYNC_MODE:     equ     MODE_STOP1_gc|MODE_LEN8_gc|MODE_BAUD_X16
          0 :                    ;;; RTS/DTR, error reset, Rx enable, Tx enable
          0 : =37                RX_EN_TX_EN:    equ     CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm|CMD_TxEN_bm
          0 :
          0 :                    ;;; External data memory
          0 :                            org     0
          0 :                    print_uint16_buf:
          0 :                            ds      8
         FC :                            org     USART
         FC :                    ;;;  Software stack; pre-decrement, post-increment pointed by R1 on
         FC :                    ;;;  external data memory
         FC : =FC                stack:          equ     $
         FC :
         FC :                    ;;; Internal data memory
         20 :                            org     BASE_MEMORY
         20 :                    vA:     ds      2
         22 :                    vB:     ds      2
         24 :
          0 :                            org     ORG_RESET
          0 : 04 05                      jmp     init
          3 :                            org     ORG_INT
          3 : 04 05                      jmp     init
          5 :                    init:
          5 : B9 FC                      mov     R1, #stack
          7 : B8 FD                      mov     R0, #USARTC
          9 : 27                         clr     A
          A : 90                         movx    @R0, A
          B : 90                         movx    @R0, A
          C : 90                         movx    @R0, A          ; safest way to sync mode
          D : 23 40                      mov     A, #CMD_IR_bm   ; reset
          F : 90                         movx    @R0, A
         10 : 00                         nop
         11 : 00                         nop
         12 : 23 4E                      mov     A, #ASYNC_MODE
         14 : 90                         movx    @R0, A
         15 : 00                         nop
         16 : 00                         nop
         17 : 23 37                      mov     A, #RX_EN_TX_EN
         19 : 90                         movx    @R0, A
         1A :
         1A : 04 A6                      jmp     arith
         1C :
         1C :                    ;;; Get character
         1C :                    ;;; @return A received character (PSW.C=1)
         1C :                    ;;; @return PSW.C=0 no character
         1C :                    getchar:
         1C : F8                         mov     A, R0
         1D : C9                         dec     R1
         1E : 91                         movx    @R1, A          ; save R0
         1F : B8 FD                      mov     R0, #USARTS
         21 : 80                         movx    A, @R0
         22 : 97                         clr     C
         23 : 37                         cpl     A
         24 : 32 29                      jb      ST_RxRDY_bp, getchar_exit
         26 : C8                         dec     R0
         27 : 80                         movx    A, @R0
         28 : A7                         cpl     C
         29 :                    getchar_exit:
         29 : 28                         xch     A, R0           ; save character
         2A : 81                         movx    A, @R1          ; restore R0
         2B : 19                         inc     R1
         2C : 28                         xch     A, R0           ; restore character
         2D : 83                         ret
         2E :
         2E :                    putspace:
         2E : 23 20                      mov     A, #' '
         30 :
         30 :                    ;;; Put character
         30 :                    ;;; @param A Sending character
         30 :                    ;;; @clobber A
         30 :                    putchar:
         30 : 28                         xch     A, R0           ; save character
         31 : C9                         dec     R1
         32 : 91                         movx    @R1, A          ; save R0
         33 : 23 FD                      mov     A, #USARTS
         35 : 28                         xch     A, R0           ; restore character
         36 : 2A                         xch     A, R2           ; save character
         37 : C9                         dec     R1
         38 : 91                         movx    @R1, A          ; save R2
         39 :                    putchar_loop:
         39 : 80                         movx    A, @R0
         3A : 37                         cpl     A
         3B : 12 39                      jb      ST_TxRDY_bp, putchar_loop
         3D : FA                         mov     A, R2           ; restore character
         3E : C8                         dec     R0
         3F : 90                         movx    @R0, A          ; send character
         40 : 81                         movx    A, @R1
         41 : 19                         inc     R1
         42 : AA                         mov     R2, A           ; restore R2
         43 : 81                         movx    A, @R1
         44 : 19                         inc     R1
         45 : A8                         mov     R0, A           ; restore R0
         46 : 83                         ret
         47 :
         47 :                    ;;; Print "v1 op v2"
         47 :                    ;;; @param R3:R2 v1
         47 :                    ;;; @param R5:R4 v2
         47 :                    ;;; @param A op
         47 :                    ;;; @return R2 &vA
         47 :                    ;;; @return R3 &vB
         47 :                    ;;; @clobber A
         47 :                    expr:
         47 : C9                         dec     R1
         48 : 91                         movx    @R1, A          ; save op
         49 : B8 20                      mov     R0, #vA
         4B : FA                         mov     A, R2
         4C : A0                         mov     @R0, A
         4D : FB                         mov     A, R3
         4E : 18                         inc     R0
         4F : A0                         mov     @R0, A          ; vA=v1
         50 : FC                         mov     A, R4
         51 : 18                         inc     R0
         52 : A0                         mov     @R0, A
         53 : FD                         mov     A, R5
         54 : 18                         inc     R0
         55 : A0                         mov     @R0, A          ; vB=v2
         56 :                    expr_out:
         56 : B8 20                      mov     R0, #vA
         58 : 54 2F                      call    print_int16     ; print v1
         5A : 14 2E                      call    putspace
         5C : 81                         movx    A, @R1          ; restore op
         5D : 19                         inc     R1
         5E : 14 30                      call    putchar         ; print op
         60 : 14 2E                      call    putspace
         62 : B8 22                      mov     R0, #vB
         64 : 54 2F                      call    print_int16
         66 : BA 20                      mov     R2, #vA
         68 : BB 22                      mov     R3, #vB
         6A : 83                         ret
         6B :
         6B :                    ;;; Print " = val\n"
         6B :                    ;;; @param vA val
         6B :                    ;;; @clobber A
         6B :                    answer:
         6B : 14 2E                      call    putspace
         6D : 23 3D                      mov     A, #'='
         6F : 14 30                      call    putchar
         71 : 14 2E                      call    putspace
         73 : B8 20                      mov     R0, #vA
         75 : 54 2F                      call    print_int16
         77 :                    newline:
         77 : 23 0D                      mov     A, #0DH
         79 : 14 30                      call    putchar
         7B : 23 0A                      mov     A, #0AH
         7D : 04 30                      jmp     putchar
         7F :
         7F :                    ;;; Print "v1 rel v2\n"
         7F :                    ;;; @param R2:R3 v1
         7F :                    ;;; @param R4:R5 v2
         7F :                    comp:
         7F : FA                         mov     A, R2
         80 : B8 20                      mov     R0, #vA
         82 : A0                         mov     @R0, A
         83 : FB                         mov     A, R3
         84 : 18                         inc     R0
         85 : A0                         mov     @R0, A          ; vA=v1
         86 : FC                         mov     A, R4
         87 : 18                         inc     R0
         88 : A0                         mov     @R0, A
         89 : FD                         mov     A, R5
         8A : 18                         inc     R0
         8B : A0                         mov     @R0, A          ; vB=v2
         8C : BA 20                      mov     R2, #vA
         8E : BB 22                      mov     R3, #vB
         90 : 74 50                      call    cmpsi2
         92 : C6 9E                      jz      comp_eq
         94 : F2 A2                      jb      7, comp_lt
         96 :                    comp_gt:
         96 : 23 3E                      mov     A, #'>'
         98 :                    comp_out:
         98 : C9                         dec     R1
         99 : 91                         movx    @R1, A          ; save rel
         9A : 14 56                      call    expr_out
         9C : 04 77                      jmp     newline
         9E :                    comp_eq:
         9E : 23 3D                      mov     A, #'='
         A0 : 04 98                      jmp     comp_out
         A2 :                    comp_lt:
         A2 : 23 3C                      mov     A, #'<'
         A4 : 04 98                      jmp     comp_out
         A6 :
         A6 :                    arith:
         A6 : BA 00                      mov     R2, #LOW(0)
         A8 : BB 00                      mov     R3, #HIGH(0)
         AA : BC A0                      mov     R4, #LOW(-28000)
         AC : BD 92                      mov     R5, #HIGH(-28000)
         AE : 23 2D                      mov     A, #'-'
         B0 : 14 47                      call    expr
         B2 : 74 16                      call    negsi2
         B4 : 14 6B                      call    answer          ; 28000
         B6 :
         B6 : BA 00                      mov     R2, #LOW(0)
         B8 : BB 00                      mov     R3, #HIGH(0)
         BA : BC 60                      mov     R4, #LOW(28000)
         BC : BD 6D                      mov     R5, #HIGH(28000)
         BE : 23 2D                      mov     A, #'-'
         C0 : 14 47                      call    expr
         C2 : 74 16                      call    negsi2
         C4 : 14 6B                      call    answer          ; -28000
         C6 :
         C6 : BA 50                      mov     R2, #LOW(18000)
         C8 : BB 46                      mov     R3, #HIGH(18000)
         CA : BC 60                      mov     R4, #LOW(28000)
         CC : BD 6D                      mov     R5, #HIGH(28000)
         CE : 23 2B                      mov     A, #'+'
         D0 : 14 47                      call    expr
         D2 : 74 2A                      call    addsi2
         D4 : 14 6B                      call    answer          ; -19536
         D6 :
         D6 : BA 50                      mov     R2, #LOW(18000)
         D8 : BB 46                      mov     R3, #HIGH(18000)
         DA : BC B0                      mov     R4, #LOW(-18000)
         DC : BD B9                      mov     R5, #HIGH(-18000)
         DE : 23 2B                      mov     A, #'+'
         E0 : 14 47                      call    expr
         E2 : 74 2A                      call    addsi2
         E4 : 14 6B                      call    answer          ; 0
         E6 :
         E6 : BA A0                      mov     R2, #LOW(-28000)
         E8 : BB 92                      mov     R3, #HIGH(-28000)
         EA : BC B0                      mov     R4, #LOW(-18000)
         EC : BD B9                      mov     R5, #HIGH(-18000)
         EE : 23 2B                      mov     A, #'+'
         F0 : 14 47                      call    expr
         F2 : 74 2A                      call    addsi2
         F4 : 14 6B                      call    answer          ; 19536
         F6 :
         F6 : BA B0                      mov     R2, #LOW(-18000)
         F8 : BB B9                      mov     R3, #HIGH(-18000)
         FA : BC A0                      mov     R4, #LOW(-28000)
         FC : BD 92                      mov     R5, #HIGH(-28000)
         FE : 23 2D                      mov     A, #'-'
        100 : 14 47                      call    expr
        102 : 74 3A                      call    subsi2
        104 : 14 6B                      call    answer          ; 10000
        106 :
        106 : BA 50                      mov     R2, #LOW(18000)
        108 : BB 46                      mov     R3, #HIGH(18000)
        10A : BC B0                      mov     R4, #LOW(-18000)
        10C : BD B9                      mov     R5, #HIGH(-18000)
        10E : 23 2D                      mov     A, #'-'
        110 : 14 47                      call    expr
        112 : 74 3A                      call    subsi2
        114 : 14 6B                      call    answer          ; -29536
        116 :
        116 : BA A0                      mov     R2, #LOW(-28000)
        118 : BB 92                      mov     R3, #HIGH(-28000)
        11A : BC B0                      mov     R4, #LOW(-18000)
        11C : BD B9                      mov     R5, #HIGH(-18000)
        11E : 23 2D                      mov     A, #'-'
        120 : 14 47                      call    expr
        122 : 74 3A                      call    subsi2
        124 : 14 6B                      call    answer          ; -10000
        126 :
        126 : BA 2C                      mov     R2, #LOW(300)
        128 : BB 01                      mov     R3, #HIGH(300)
        12A : BC 38                      mov     R4, #LOW(-200)
        12C : BD FF                      mov     R5, #HIGH(-200)
        12E : 23 2A                      mov     A, #'*'
        130 : 14 47                      call    expr
        132 : 74 A2                      call    mulsi2
        134 : 14 6B                      call    answer          ; 5536
        136 :
        136 : BA 64                      mov     R2, #LOW(100)
        138 : BB 00                      mov     R3, #HIGH(100)
        13A : BC D4                      mov     R4, #LOW(-300)
        13C : BD FE                      mov     R5, #HIGH(-300)
        13E : 23 2A                      mov     A, #'*'
        140 : 14 47                      call    expr
        142 : 74 A2                      call    mulsi2
        144 : 14 6B                      call    answer          ; -30000
        146 :
        146 : BA 38                      mov     R2, #LOW(-200)
        148 : BB FF                      mov     R3, #HIGH(-200)
        14A : BC 9C                      mov     R4, #LOW(-100)
        14C : BD FF                      mov     R5, #HIGH(-100)
        14E : 23 2A                      mov     A, #'*'
        150 : 14 47                      call    expr
        152 : 74 A2                      call    mulsi2
        154 : 14 6B                      call    answer          ; 20000
        156 :
        156 : BA 38                      mov     R2, #LOW(-200)
        158 : BB FF                      mov     R3, #HIGH(-200)
        15A : BC 64                      mov     R4, #LOW(100)
        15C : BD 00                      mov     R5, #HIGH(100)
        15E : 23 2F                      mov     A, #'/'
        160 : 14 47                      call    expr
        162 : 94 3A                      call    divsi2
        164 : 14 6B                      call    answer          ; -2
        166 :
        166 : BA 30                      mov     R2, #LOW(30000)
        168 : BB 75                      mov     R3, #HIGH(30000)
        16A : BC 64                      mov     R4, #LOW(100)
        16C : BD 00                      mov     R5, #HIGH(100)
        16E : 23 2F                      mov     A, #'/'
        170 : 14 47                      call    expr
        172 : 94 3A                      call    divsi2
        174 : 14 6B                      call    answer          ; 30
        176 :
        176 : BA D0                      mov     R2, #LOW(-30000)
        178 : BB 8A                      mov     R3, #HIGH(-30000)
        17A : BC 38                      mov     R4, #LOW(-200)
        17C : BD FF                      mov     R5, #HIGH(-200)
        17E : 23 2F                      mov     A, #'/'
        180 : 14 47                      call    expr
        182 : 94 3A                      call    divsi2
        184 : 14 6B                      call    answer          ; 150
        186 :
        186 : BA D0                      mov     R2, #LOW(-30000)
        188 : BB 8A                      mov     R3, #HIGH(-30000)
        18A : BC 4E                      mov     R4, #LOW(78)
        18C : BD 00                      mov     R5, #HIGH(78)
        18E : 23 2F                      mov     A, #'/'
        190 : 14 47                      call    expr
        192 : 94 3A                      call    divsi2
        194 : 14 6B                      call    answer          ; -384
        196 :
        196 : BA 88                      mov     R2, #LOW(5000)
        198 : BB 13                      mov     R3, #HIGH(5000)
        19A : BC A0                      mov     R4, #LOW(4000)
        19C : BD 0F                      mov     R5, #HIGH(4000)
        19E : 14 7F                      call    comp
        1A0 :
        1A0 : BA 88                      mov     R2, #LOW(5000)
        1A2 : BB 13                      mov     R3, #HIGH(5000)
        1A4 : BC 88                      mov     R4, #LOW(5000)
        1A6 : BD 13                      mov     R5, #HIGH(5000)
        1A8 : 14 7F                      call    comp
        1AA :
        1AA : BA A0                      mov     R2, #LOW(4000)
        1AC : BB 0F                      mov     R3, #HIGH(4000)
        1AE : BC 88                      mov     R4, #LOW(5000)
        1B0 : BD 13                      mov     R5, #HIGH(5000)
        1B2 : 14 7F                      call    comp
        1B4 :
        1B4 : BA 78                      mov     R2, #LOW(-5000)
        1B6 : BB EC                      mov     R3, #HIGH(-5000)
        1B8 : BC 60                      mov     R4, #LOW(-4000)
        1BA : BD F0                      mov     R5, #HIGH(-4000)
        1BC : 14 7F                      call    comp
        1BE :
        1BE : BA 78                      mov     R2, #LOW(-5000)
        1C0 : BB EC                      mov     R3, #HIGH(-5000)
        1C2 : BC 78                      mov     R4, #LOW(-5000)
        1C4 : BD EC                      mov     R5, #HIGH(-5000)
        1C6 : 14 7F                      call    comp
        1C8 :
        1C8 : BA 60                      mov     R2, #LOW(-4000)
        1CA : BB F0                      mov     R3, #HIGH(-4000)
        1CC : BC 78                      mov     R4, #LOW(-5000)
        1CE : BD EC                      mov     R5, #HIGH(-5000)
        1D0 : 14 7F                      call    comp
        1D2 :
        1D2 : BA BC                      mov     R2, #LOW(32700)
        1D4 : BB 7F                      mov     R3, #HIGH(32700)
        1D6 : BC 58                      mov     R4, #LOW(32600)
        1D8 : BD 7F                      mov     R5, #HIGH(32600)
        1DA : 14 7F                      call    comp
        1DC :
        1DC : BA BC                      mov     R2, #LOW(32700)
        1DE : BB 7F                      mov     R3, #HIGH(32700)
        1E0 : BC BC                      mov     R4, #LOW(32700)
        1E2 : BD 7F                      mov     R5, #HIGH(32700)
        1E4 : 14 7F                      call    comp
        1E6 :
        1E6 : BA 58                      mov     R2, #LOW(32600)
        1E8 : BB 7F                      mov     R3, #HIGH(32600)
        1EA : BC BC                      mov     R4, #LOW(32700)
        1EC : BD 7F                      mov     R5, #HIGH(32700)
        1EE : 14 7F                      call    comp
        1F0 :
        1F0 : BA 44                      mov     R2, #LOW(-32700)
        1F2 : BB 80                      mov     R3, #HIGH(-32700)
        1F4 : BC A8                      mov     R4, #LOW(-32600)
        1F6 : BD 80                      mov     R5, #HIGH(-32600)
        1F8 : 14 7F                      call    comp
        1FA :
        1FA : BA 44                      mov     R2, #LOW(-32700)
        1FC : BB 80                      mov     R3, #HIGH(-32700)
        1FE : BC 44                      mov     R4, #LOW(-32700)
        200 : BD 80                      mov     R5, #HIGH(-32700)
        202 : 14 7F                      call    comp
        204 :
        204 : BA A8                      mov     R2, #LOW(-32600)
        206 : BB 80                      mov     R3, #HIGH(-32600)
        208 : BC 44                      mov     R4, #LOW(-32700)
        20A : BD 80                      mov     R5, #HIGH(-32700)
        20C : 14 7F                      call    comp
        20E :
        20E : BA 50                      mov     R2, #LOW(18000)
        210 : BB 46                      mov     R3, #HIGH(18000)
        212 : BC B0                      mov     R4, #LOW(-18000)
        214 : BD B9                      mov     R5, #HIGH(-18000)
        216 : 14 7F                      call    comp
        218 :
        218 : BA 50                      mov     R2, #LOW(18000)
        21A : BB 46                      mov     R3, #HIGH(18000)
        21C : BC 50                      mov     R4, #LOW(18000)
        21E : BD 46                      mov     R5, #HIGH(18000)
        220 : 14 7F                      call    comp
        222 :
        222 : BA B0                      mov     R2, #LOW(-18000)
        224 : BB B9                      mov     R3, #HIGH(-18000)
        226 : BC 50                      mov     R4, #LOW(18000)
        228 : BD 46                      mov     R5, #HIGH(18000)
        22A : 14 7F                      call    comp
        22C :
        22C : 14 77                      call    newline
        22E : 01                         db      01H             ; halt to system
        22F :
        22F :                            include "arith.inc"
(1)     22F :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     22F :                            cpu     8048
(1)     22F :
(1)     22F :                    ;;; Print signed 16-bit integer as decimal
(1)     22F :                    ;;; @param R0 &value
(1)     22F :                    ;;; @clobber A
(1)     22F :                    print_int16:
(1)     22F : F8                         mov     A, R0
(1)     230 : C9                         dec     R1
(1)     231 : 91                         movx    @R1, A          ; save R0
(1)     232 : F0                         mov     A, @R0
(1)     233 : 2A                         xch     A, R2
(1)     234 : C9                         dec     R1
(1)     235 : 91                         movx    @R1, A          ; save R2
(1)     236 : 18                         inc     R0
(1)     237 : F0                         mov     A, @R0
(1)     238 : 2B                         xch     A, R3
(1)     239 : C9                         dec     R1
(1)     23A : 91                         movx    @R1, A          ; save R3
(1)     23B : FB                         mov     A, R3
(1)     23C : 37                         cpl     A
(1)     23D : F2 45                      jb      7, print_uint16
(1)     23F : 23 2D                      mov     A, #'-'
(1)     241 : 14 30                      call    putchar         ; print '-'
(1)     243 : 74 00                      call    neg_R3R2        ; negate value
(1)     245 :                    ;;; Print unsigned 16-bit integer as decimal
(1)     245 :                    ;;; @param R2:R3: value
(1)     245 :                    ;;; @param print_uint16_buf external data memory
(1)     245 :                    ;;; @clobber A
(1)     245 :                    print_uint16:
(1)     245 : 23 00                      mov     A, #print_uint16_buf
(1)     247 : C9                         dec     R1
(1)     248 : 91                         movx    @R1, A          ; save buffer pointer
(1)     249 : A8                         mov     R0, A
(1)     24A : 27                         clr     A
(1)     24B : 90                         movx    @R0, A          ; mark EOS
(1)     24C :                    print_uint16_loop:
(1)     24C : BC 0A                      mov     R4, #LOW(10)
(1)     24E : BD 00                      mov     R5, #HIGH(10)
(1)     250 : 74 D8                      call    udiv16
(1)     252 : 81                         movx    A, @R1
(1)     253 : A8                         mov     R0, A           ; restore buffer pointer
(1)     254 : FC                         mov     A, R4           ; lo(remainder)
(1)     255 : 03 30                      add     A, #'0'
(1)     257 : 18                         inc     R0
(1)     258 : 90                         movx    @R0, A          ; write to buffer
(1)     259 : F8                         mov     A, R0
(1)     25A : 91                         movx    @R1, A          ; save buffer pointer
(1)     25B : FA                         mov     A, R2
(1)     25C : 4B                         orl     A, R3
(1)     25D : 96 4C                      jnz     print_uint16_loop ; until value == 0
(1)     25F :                    print_uint16_out:
(1)     25F : 80                         movx    A, @R0
(1)     260 : C6 67                      jz      print_uint16_end
(1)     262 : 14 30                      call    putchar
(1)     264 : C8                         dec     R0
(1)     265 : 44 5F                      jmp     print_uint16_out
(1)     267 :                    print_uint16_end:
(1)     267 : 19                         inc     R1              ; discard buffer pointer
(1)     268 : 81                         movx    A, @R1
(1)     269 : 19                         inc     R1
(1)     26A : AB                         mov     R3, A           ; restore R3
(1)     26B : 81                         movx    A, @R1
(1)     26C : 19                         inc     R1
(1)     26D : AA                         mov     R2, A           ; restore R2
(1)     26E : 81                         movx    A, @R1
(1)     26F : 19                         inc     R1
(1)     270 : A8                         mov     R0, A           ; restore R0
(1)     271 : 83                         ret
(1)     272 :
(1)     300 :                            org     $+(256-LOW($))
(1)     300 :
(1)     300 :                    ;;; Negation; result = -result
(1)     300 :                    ;;; @param R3:R2 result
(1)     300 :                    ;;; @clobber A
(1)     300 :                    neg_R3R2:
(1)     300 : FA                         mov     A, R2
(1)     301 : 37                         cpl     A
(1)     302 : 03 01                      add     A, #1
(1)     304 : AA                         mov     R2, A
(1)     305 : FB                         mov     A, R3
(1)     306 : 37                         cpl     A
(1)     307 : 13 00                      addc    A, #0
(1)     309 : AB                         mov     R3, A
(1)     30A : 83                         ret
(1)     30B :
(1)     30B :                    ;;; Negation; result = -result
(1)     30B :                    ;;; @param R5:R4 result
(1)     30B :                    ;;; @clobber A
(1)     30B :                    neg_R5R4:
(1)     30B : FC                         mov     A, R4
(1)     30C : 37                         cpl     A
(1)     30D : 03 01                      add     A, #1
(1)     30F : AC                         mov     R4, A
(1)     310 : FD                         mov     A, R5
(1)     311 : 37                         cpl     A
(1)     312 : 13 00                      addc    A, #0
(1)     314 : AD                         mov     R5, A
(1)     315 : 83                         ret
(1)     316 :
(1)     316 :                    ;;; Negation; result = -value
(1)     316 :                    ;;; @param R2: &result
(1)     316 :                    ;;; @param R3: &value
(1)     316 :                    ;;; @clobber A R0 R2 R3
(1)     316 :                    negsi2:
(1)     316 : FB                         mov     A, R3
(1)     317 : A8                         mov     R0, A           ; R0=&value
(1)     318 : F0                         mov     A, @R0          ; A=lo(value)
(1)     319 : 37                         cpl     A
(1)     31A : 03 01                      add     A, #1
(1)     31C : AB                         mov     R3, A           ; R3=lo(-value)
(1)     31D : 18                         inc     R0
(1)     31E : F0                         mov     A, @R0          ; A=hi(value)
(1)     31F : 37                         cpl     A
(1)     320 : 13 00                      addc    A, #0           ; A=hi(-value)
(1)     322 : 2A                         xch     A, R2           ; R2=hi(-value)
(1)     323 : A8                         mov     R0, A           ; R0=&result
(1)     324 : FB                         mov     A, R3
(1)     325 : A0                         mov     @R0, A          ; store lo(-value)
(1)     326 : 18                         inc     R0
(1)     327 : FA                         mov     A, R2
(1)     328 : A0                         mov     @R0, A          ; store hi(-value)
(1)     329 : 83                         ret
(1)     32A :
(1)     32A :                    ;;; Signed addition: summand += addend
(1)     32A :                    ;;; @param R2: &summand
(1)     32A :                    ;;; @param R3: &addend
(1)     32A :                    ;;; @clobber A R2 R3
(1)     32A :                    addsi2:
(1)     32A : FB                         mov     A, R3
(1)     32B : A8                         mov     R0, A           ; R0=&addend
(1)     32C : F0                         mov     A, @R0          ; A=lo(addend)
(1)     32D : AB                         mov     R3, A           ; R3=lo(addend)
(1)     32E : 18                         inc     R0
(1)     32F : F0                         mov     A, @R0          ; A=hi(addend)
(1)     330 : 2A                         xch     A, R2           ; R2=hi(addend)
(1)     331 : A8                         mov     R0, A           ; R0=&summand
(1)     332 : F0                         mov     A, @R0          ; A=lo(summand)
(1)     333 : 6B                         add     A, R3           ; A=lo(summand+addend)
(1)     334 : A0                         mov     @R0, A
(1)     335 : 18                         inc     R0
(1)     336 : F0                         mov     A, @R0          ; A=hi(summand)
(1)     337 : 7A                         addc    A, R2           ; A=hi(summand+addend)
(1)     338 : A0                         mov     @R0, A
(1)     339 : 83                         ret
(1)     33A :
(1)     33A :                    ;;; Singed subtraction: minuend -= subtrahend
(1)     33A :                    ;;; @param R2: &minuend
(1)     33A :                    ;;; @param R3: &subtrahend
(1)     33A :                    ;;; @clobber A R0 R2 R3
(1)     33A :                    subsi2:
(1)     33A : FB                         mov     A, R3
(1)     33B : A8                         mov     R0, A           ; R0=&subtrahend
(1)     33C : F0                         mov     A, @R0          ; A=lo(subtrahend)
(1)     33D : 37                         cpl     A
(1)     33E : 03 01                      add     A, #1           ; A=lo(-subtrahend)
(1)     340 : AB                         mov     R3, A           ; R3=lo(-subtrahend)
(1)     341 : 18                         inc     R0
(1)     342 : F0                         mov     A, @R0          ; A=hi(subtrahend)
(1)     343 : 37                         cpl     A
(1)     344 : 13 00                      addc    A, #0           ; A=hi(-subtrahend)
(1)     346 : 2A                         xch     A, R2           ; R2=hi(-subtrahend)
(1)     347 : A8                         mov     R0, A           ; R0=&minuend
(1)     348 : F0                         mov     A, @R0          ; A=lo(minuend)
(1)     349 : 6B                         add     A, R3           ; A=lo(minuend-subtrahend)
(1)     34A : A0                         mov     @R0, A
(1)     34B : 18                         inc     R0
(1)     34C : F0                         mov     A, @R0          ; A=hi(minuend)
(1)     34D : 7A                         addc    A, R2           ; A=hi(minuend-subtrahend)
(1)     34E : A0                         mov     @R0, A
(1)     34F : 83                         ret
(1)     350 :
(1)     350 :                    ;;; Signed comparison: minuend - subtrahend
(1)     350 :                    ;;; @param R2: &minuend
(1)     350 :                    ;;; @param R3: &subtrahend
(1)     350 :                    ;;; @return A  0: minuend == subtrahend
(1)     350 :                    ;;;         A  1: minuend >  subtrahend
(1)     350 :                    ;;;         A -1: minuend <  subtrahend
(1)     350 :                    ;;; @clobber A R0 R2 R3
(1)     350 :                    cmpsi2:
(1)     350 : FB                         mov     A, R3
(1)     351 : A8                         mov     R0, A           ; R0=&subtrahend
(1)     352 : F0                         mov     A, @R0          ; A=lo(subtrahend)
(1)     353 : 37                         cpl     A
(1)     354 : 03 01                      add     A, #1           ; A=lo(-subtrahend)
(1)     356 : AB                         mov     R3, A           ; R3=lo(-subtrahend)
(1)     357 : 18                         inc     R0
(1)     358 : F0                         mov     A, @R0          ; A=hi(subtrahend)
(1)     359 : C9                         dec     R1
(1)     35A : 91                         movx    @R1, A          ; save hi(subtrahend)
(1)     35B : 37                         cpl     A
(1)     35C : 13 00                      addc    A, #0           ; A=hi(-subtrahend)
(1)     35E : 2A                         xch     A, R2           ; R2=hi(-subtrahend)
(1)     35F : A8                         mov     R0, A           ; R0=&minuend
(1)     360 : F0                         mov     A, @R0          ; A=lo(minuend)
(1)     361 : 6B                         add     A, R3
(1)     362 : AB                         mov     R3, A           ; A=lo(minuend-subtrahend)
(1)     363 : 18                         inc     R0
(1)     364 : 81                         movx    A, @R1          ; restore hi(subtrahend)
(1)     365 : D0                         xrl     A, @R0          ; A=hi(minuend^subtrahend)
(1)     366 : 91                         movx    @R1, A          ; save hi(minuend^subtrahend)
(1)     367 : F0                         mov     A, @R0          ; A=hi(minuend)
(1)     368 : 7A                         addc    A, R2
(1)     369 : AA                         mov     R2, A           ; R2=hi(minuend-subtrahend)
(1)     36A : 4B                         orl     A, R3
(1)     36B : C6 7C                      jz      cmpsi2_eq       ; branch if minuend-subtrahend==0
(1)     36D : FA                         mov     A, R2
(1)     36E : D0                         xrl     A, @R0
(1)     36F : AB                         mov     R3, A           ; R3=hi(minuend-subtrahend)^minuend
(1)     370 : 81                         movx    A, @R1          ; restore hi(minuend^subtrahend)
(1)     371 : 19                         inc     R1
(1)     372 : 5B                         anl     A, R3           ; overflow flag
(1)     373 : DA                         xrl     A, R2
(1)     374 : F2 79                      jb      7, cmpsi2_lt
(1)     376 :                    cmpsi2_gt:
(1)     376 : 23 01                      mov     A, #1
(1)     378 : 83                         ret
(1)     379 :                    cmpsi2_lt:
(1)     379 : 23 FF                      mov     A, #-1
(1)     37B : 83                         ret
(1)     37C :                    cmpsi2_eq:
(1)     37C : 19                         inc     R1              ; discard hi(subtrahend)
(1)     37D : 83                         ret
(1)     37E :
(1)     37E :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)     37E :                    ;;; @param R3:R2 multiplicand
(1)     37E :                    ;;; @param R5:R4 multiplier
(1)     37E :                    ;;; @return R3:R2 result
(1)     37E :                    ;;; @clobber A R2 R3 R4 R5 R6 R7
(1)     37E :                    umul16:
(1)     37E : 27                         clr     A
(1)     37F : AE                         mov     R6, A
(1)     380 : AF                         mov     R7, A           ; R7:R6=result
(1)     381 : 64 99                      jmp     umul16_check
(1)     383 :                    umul16_loop:
(1)     383 : 97                         clr     C
(1)     384 : FD                         mov     A, R5
(1)     385 : 67                         rrc     A
(1)     386 : AD                         mov     R5, A
(1)     387 : FC                         mov     A, R4
(1)     388 : 67                         rrc     A
(1)     389 : AC                         mov     R4, A           ; multiplier >>= 1
(1)     38A : E6 92                      jnc     umul16_next     ; branch if lsb(multiplier)==0
(1)     38C : FE                         mov     A, R6
(1)     38D : 6A                         add     A, R2
(1)     38E : AE                         mov     R6, A
(1)     38F : FF                         mov     A, R7
(1)     390 : 7B                         addc    A, R3
(1)     391 : AF                         mov     R7, A           ; result += multiplicand
(1)     392 :                    umul16_next:
(1)     392 : 97                         clr     C
(1)     393 : FA                         mov     A, R2
(1)     394 : F7                         rlc     A
(1)     395 : AA                         mov     R2, A
(1)     396 : FB                         mov     A, R3
(1)     397 : F7                         rlc     A
(1)     398 : AB                         mov     R3, A           ; multiplicand <<= 1
(1)     399 :                    umul16_check:
(1)     399 : FC                         mov     A, R4
(1)     39A : 4D                         orl     A, R5
(1)     39B : 96 83                      jnz     umul16_loop     ; branch if multiplier != 0
(1)     39D :                    umul16_end:
(1)     39D : FE                         mov     A, R6
(1)     39E : AA                         mov     R2, A
(1)     39F : FF                         mov     A, R7
(1)     3A0 : AB                         mov     R3, A
(1)     3A1 : 83                         ret
(1)     3A2 :
(1)     3A2 :                    ;;; Signed multiplication: multiplicand *= multiplier
(1)     3A2 :                    ;;; @param R2: &multiplicand
(1)     3A2 :                    ;;; @param R3: &multiplier
(1)     3A2 :                    ;;; @clobber A R0 R2 R3 R4 R5 R6 R7
(1)     3A2 :                    mulsi2:
(1)     3A2 : FA                         mov     A, R2
(1)     3A3 : C9                         dec     R1
(1)     3A4 : 91                         movx    @R1, A          ; save &multiplicand
(1)     3A5 : FB                         mov     A, R3
(1)     3A6 : C9                         dec     R1
(1)     3A7 : 91                         movx    @R1, A          ; save &multiplier
(1)     3A8 : A8                         mov     R0, A           ; R0=&multiplier
(1)     3A9 : F0                         mov     A, @R0
(1)     3AA : AC                         mov     R4, A
(1)     3AB : 18                         inc     R0
(1)     3AC : F0                         mov     A, @R0
(1)     3AD : AD                         mov     R5, A           ; R5:R4=multiplier
(1)     3AE : 37                         cpl     A
(1)     3AF : F2 B3                      jb      7, mulsi2_multiplicand
(1)     3B1 : 74 0B                      call    neg_R5R4
(1)     3B3 :                    mulsi2_multiplicand:
(1)     3B3 : FA                         mov     A, R2
(1)     3B4 : A8                         mov     R0, A           ; R0=&multiplicand
(1)     3B5 : F0                         mov     A, @R0
(1)     3B6 : AA                         mov     R2, A
(1)     3B7 : 18                         inc     R0
(1)     3B8 : F0                         mov     A, @R0
(1)     3B9 : AB                         mov     R3, A
(1)     3BA : 37                         cpl     A
(1)     3BB : F2 BF                      jb      7, mulsi2_multiply
(1)     3BD : 74 00                      call    neg_R3R2
(1)     3BF :                    mulsi2_multiply:
(1)     3BF : 74 7E                      call    umul16
(1)     3C1 : 81                         movx    A, @R1
(1)     3C2 : 19                         inc     R1
(1)     3C3 : A8                         mov     R0, A           ; R0=&multiplier
(1)     3C4 : 18                         inc     R0
(1)     3C5 : F0                         mov     A, @R0          ; A=hi(multiplier)
(1)     3C6 : AD                         mov     R5, A           ; R5=hi(multiplier)
(1)     3C7 : 81                         movx    A, @R1
(1)     3C8 : 19                         inc     R1
(1)     3C9 : A8                         mov     R0, A           ; R0=&multiplicand
(1)     3CA : 18                         inc     R0
(1)     3CB : F0                         mov     A, @R0          ; A=hi(multiplicand)
(1)     3CC : DD                         xrl     A, R5           ; A=hi(multiplicand^multiplier)
(1)     3CD : 37                         cpl     A
(1)     3CE : F2 D2                      jb      7, mulsi2_store
(1)     3D0 : 74 00                      call    neg_R3R2
(1)     3D2 :                    mulsi2_store:
(1)     3D2 : FB                         mov     A, R3
(1)     3D3 : A0                         mov     @R0, A
(1)     3D4 : C8                         dec     R0
(1)     3D5 : FA                         mov     A, R2
(1)     3D6 : A0                         mov     @R0, A
(1)     3D7 : 83                         ret
(1)     3D8 :
(1)     3D8 :                    ;;; Unsigned division: dividend / divisor = quotient ... remainder
(1)     3D8 :                    ;;; @praram R3:R2 dividend
(1)     3D8 :                    ;;; @praram R5:R4 divisor
(1)     3D8 :                    ;;; @return R3:R2 quotient
(1)     3D8 :                    ;;; @return R5:R4 remainder
(1)     3D8 :                    ;;; @clobber A R0 R2 R3 R4 R5 R6 R7
(1)     3D8 :                    udiv16:
(1)     3D8 : FC                         mov     A, R4
(1)     3D9 : 4D                         orl     A, R5
(1)     3DA : 96 DD                      jnz     udiv16_calc     ; branch if divisor != 0
(1)     3DC : 83                         ret
(1)     3DD :                    udiv16_calc:
(1)     3DD : B8 01                      mov     R0, #1          ; R0=bits
(1)     3DF : 64 E9                      jmp     udiv16_prep
(1)     3E1 :                    udiv16_prep_loop:
(1)     3E1 : 97                         clr     C
(1)     3E2 : FC                         mov     A, R4
(1)     3E3 : F7                         rlc     A
(1)     3E4 : AC                         mov     R4, A
(1)     3E5 : FD                         mov     A, R5
(1)     3E6 : F7                         rlc     A
(1)     3E7 : AD                         mov     R5, A           ; divisor <<= 1
(1)     3E8 : 18                         inc     R0              ; bits++
(1)     3E9 :                    udiv16_prep:
(1)     3E9 : FD                         mov     A, R5
(1)     3EA : 37                         cpl     A
(1)     3EB : F2 E1                      jb      7, udiv16_prep_loop ; while msb(divisor) == 0
(1)     3ED : 27                         clr     A
(1)     3EE : C9                         dec     R1
(1)     3EF : 91                         movx    @R1, A
(1)     3F0 : C9                         dec     R1
(1)     3F1 : 91                         movx    @R1, A          ; R1[2:1]=quotient
(1)     3F2 : F9                         mov     A, R1           ; A=&quotient
(1)     3F3 : 28                         xch     A, R0           ; R0=&quotient, A=bits
(1)     3F4 : C9                         dec     R1
(1)     3F5 : 91                         movx    @R1, A          ; R=&bits
(1)     3F6 : 84 08                      jmp     udiv16_enter_loop
(1)     3F8 :                    udiv16_loop:
(1)     3F8 : 97                         clr     C
(1)     3F9 : FD                         mov     A, R5
(1)     3FA : 67                         rrc     A
(1)     3FB : AD                         mov     R5, A
(1)     3FC : FC                         mov     A, R4
(1)     3FD : 67                         rrc     A
(1)     3FE : AC                         mov     R4, A           ; divisor >>= 1
(1)     3FF : 97                         clr     C
(1)     400 : 80                         movx    A, @R0
(1)     401 : F7                         rlc     A
(1)     402 : 90                         movx    @R0, A
(1)     403 : 18                         inc     R0
(1)     404 : 80                         movx    A, @R0
(1)     405 : F7                         rlc     A
(1)     406 : 90                         movx    @R0, A          ; quotient <<= 1
(1)     407 : C8                         dec     R0
(1)     408 :                    udiv16_enter_loop:
(1)     408 : FC                         mov     A, R4
(1)     409 : 37                         cpl     A
(1)     40A : 03 01                      add     A, #1
(1)     40C : AE                         mov     R6, A
(1)     40D : FD                         mov     A, R5
(1)     40E : 37                         cpl     A
(1)     40F : 13 00                      addc    A, #0
(1)     411 : AF                         mov     R7, A           ; R7:R6=-divisor
(1)     412 : FA                         mov     A, R2
(1)     413 : 6E                         add     A, R6
(1)     414 : AA                         mov     R2, A
(1)     415 : FB                         mov     A, R3
(1)     416 : 7F                         addc    A, R7
(1)     417 : AB                         mov     R3, A           ; divident -= divisor
(1)     418 : E6 1F                      jnc     udiv16_readd    ; branch if dividend < 0
(1)     41A : 80                         movx    A, @R0
(1)     41B : 17                         inc     A               ; quotient |= 1
(1)     41C : 90                         movx    @R0, A
(1)     41D : 84 25                      jmp     udiv16_next
(1)     41F :                    udiv16_readd:
(1)     41F : FC                         mov     A, R4
(1)     420 : 6A                         add     A, R2
(1)     421 : AA                         mov     R2, A
(1)     422 : FD                         mov     A, R5
(1)     423 : 7B                         addc    A, R3
(1)     424 : AB                         mov     R3, A           ; dividend += divisor
(1)     425 :                    udiv16_next:
(1)     425 : 81                         movx    A, @R1
(1)     426 : 07                         dec     A
(1)     427 : 91                         movx    @R1, A          ; bits -= 1
(1)     428 : C6 2C                      jz      udiv16_store
(1)     42A : 64 F8                      jmp     udiv16_loop
(1)     42C :                    udiv16_store:
(1)     42C : FA                         mov     A, R2
(1)     42D : AC                         mov     R4, A
(1)     42E : FB                         mov     A, R3
(1)     42F : AD                         mov     R5, A           ; store remainder
(1)     430 : 80                         movx    A, @R0
(1)     431 : AA                         mov     R2, A
(1)     432 : 18                         inc     R0
(1)     433 : 80                         movx    A, @R0
(1)     434 : AB                         mov     R3, A           ; store quotient
(1)     435 : 19                         inc     R1
(1)     436 : 19                         inc     R1
(1)     437 : 19                         inc     R1              ; discard bits and quotient
(1)     438 : F1                         mov     A, @R1
(1)     439 : 83                         ret
(1)     43A :
(1)     43A :
(1)     43A :                    ;;; Signed division: dividend /= divisor
(1)     43A :                    ;;; @param R2: &dividend
(1)     43A :                    ;;; @param R3: &divisor
(1)     43A :                    ;;; @clobber A R0 R2 R3 R4 R5 R6 R7
(1)     43A :                    divsi2:
(1)     43A : FA                         mov     A, R2
(1)     43B : C9                         dec     R1
(1)     43C : 91                         movx    @R1, A          ; save &dividend
(1)     43D : FB                         mov     A, R3
(1)     43E : C9                         dec     R1
(1)     43F : 91                         movx    @R1, A          ; save &divisor
(1)     440 : A8                         mov     R0, A           ; R0=&divisor
(1)     441 : F0                         mov     A, @R0
(1)     442 : AC                         mov     R4, A
(1)     443 : 18                         inc     R0
(1)     444 : F0                         mov     A, @R0
(1)     445 : AD                         mov     R5, A           ; R5:R4=divisor
(1)     446 : 37                         cpl     A
(1)     447 : F2 4B                      jb      7, divsi2_dividend
(1)     449 : 74 0B                      call    neg_R5R4
(1)     44B :                    divsi2_dividend:
(1)     44B : FA                         mov     A, R2
(1)     44C : A8                         mov     R0, A           ; R0=&dividend
(1)     44D : F0                         mov     A, @R0
(1)     44E : AA                         mov     R2, A
(1)     44F : 18                         inc     R0
(1)     450 : F0                         mov     A, @R0
(1)     451 : AB                         mov     R3, A
(1)     452 : 37                         cpl     A
(1)     453 : F2 57                      jb      7, divsi2_divide
(1)     455 : 74 00                      call    neg_R3R2
(1)     457 :                    divsi2_divide:
(1)     457 : 74 D8                      call    udiv16
(1)     459 : 81                         movx    A, @R1
(1)     45A : 19                         inc     R1
(1)     45B : A8                         mov     R0, A           ; R0=&divisor
(1)     45C : 18                         inc     R0
(1)     45D : F0                         mov     A, @R0          ; A=hi(divisor)
(1)     45E : AD                         mov     R5, A           ; R5=hi(divisor)
(1)     45F : 81                         movx    A, @R1
(1)     460 : 19                         inc     R1
(1)     461 : A8                         mov     R0, A           ; R0=&dividend
(1)     462 : 18                         inc     R0
(1)     463 : F0                         mov     A, @R0          ; A=hi(dividend)
(1)     464 : DD                         xrl     A, R5           ; A=hi(dividend^divisor)
(1)     465 : 37                         cpl     A
(1)     466 : F2 6A                      jb      7, divsi2_store
(1)     468 : 74 00                      call    neg_R3R2
(1)     46A :                    divsi2_store:
(1)     46A : FB                         mov     A, R3
(1)     46B : A0                         mov     @R0, A
(1)     46C : C8                         dec     R0
(1)     46D : FA                         mov     A, R2
(1)     46E : A0                         mov     @R0, A
(1)     46F : 83                         ret
