          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     1802
          0 :                            option  "smart-branch", "on"
          0 :                            include "cdp1802.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; CDP1802 register alias
(1)       0 : =0                 R0:     equ     0
(1)       0 : =1                 R1:     equ     1
(1)       0 : =2                 R2:     equ     2
(1)       0 : =3                 R3:     equ     3
(1)       0 : =4                 R4:     equ     4
(1)       0 : =5                 R5:     equ     5
(1)       0 : =6                 R6:     equ     6
(1)       0 : =7                 R7:     equ     7
(1)       0 : =8                 R8:     equ     8
(1)       0 : =9                 R9:     equ     9
(1)       0 : =A                 R10:    equ     10
(1)       0 : =B                 R11:    equ     11
(1)       0 : =C                 R12:    equ     12
(1)       0 : =D                 R13:    equ     13
(1)       0 : =E                 R14:    equ     14
(1)       0 : =F                 R15:    equ     15
(1)       0 :
(1)       0 :                    ;;; Transfer locations
(1)       0 : =0                 ORG_RESET:      equ     0000H   ; Reset transfer location
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =4                 ACIA:   equ     4
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =4                 ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     11b    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     00000000B ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     00000001B ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     00000010B ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     00000011B ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     00011100B ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     00000000B ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     00000100B ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     00001000B ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     00001100B ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     00010000B ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     00010100B ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     00011000B ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     00011100B ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     01100000B ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     00000000B ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     00100000B ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     01000000B ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     01100000B ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     10000000B ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =4                 ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     00000001B ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     00000010B ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     00000100B ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     00001000B ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     00010000B ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     00100000B ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     01000000B ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     10000000B ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =5                 ACIA_data:      equ     ACIA+1          ; Data register
          0 :
       2000 :                            org     X'2000'
       2000 :
       2000 : =80                rx_queue_size:  equ     128
       2000 : =80                tx_queue_size:  equ     128
       2000 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
       2000 : =B4                RX_INT_TX_INT:  equ     WSB_8N1_gc|RIEB_bm|TCB_EI_gc
       2000 :
       2000 :                    rx_queue:
       2080 :                            org     *+rx_queue_size
       2080 :                    tx_queue:
       2100 :                            org     *+tx_queue_size
       2100 :
       2100 : =FFF               stack:  equ     X'1000'-1
       2100 :
        100 :                            org     X'0100'
        100 :                    main:
        100 : D5                         sep     R5
        101 : 03 00                      dc      A(queue_init)   ; call queue_init
        103 : 20 00                      dc      A(rx_queue)
        105 : 80                         dc      rx_queue_size
        106 : D5                         sep     R5
        107 : 03 00                      dc      A(queue_init)   ; call queue_init
        109 : 20 80                      dc      A(tx_queue)
        10B : 80                         dc      tx_queue_size
        10C :                            ;; initialize ACIA
        10C : F8 01                      ldi     A.1(ACIA_config)
        10E : B8                         phi     R8
        10F : F8 1B                      ldi     A.0(ACIA_config)
        111 : A8                         plo     R8
        112 : E8                         sex     R8              ; R8 for inp/out
        113 : 64                         out     ACIA_control    ; Master reset
        114 : 64                         out     ACIA_control    ; Set mode
        115 : E3                         sex     R3
        116 : 70                         ret
        117 : 33                         dc      X'33'           ; enable interrupt
        118 : E2                         sex     R2
        119 : 30 1D                      br      loop
        11B :
        11B :                    ACIA_config:
        11B : 03                         dc      CDS_RESET_gc    ; Master reset
        11C : 94                         dc      RX_INT_TX_NO
        11D :
        11D :                    loop:
        11D : D5                         sep     R5              ; call getchar
        11E : 01 9F                      dc      A(getchar)
        120 : 32 1D                      bz      loop
        122 : 87                         glo     R7
        123 : 3A 26                      bnz     echo_back
        125 : 00                         idl
        126 :                    echo_back:
        126 : D5                         sep     R5              ; call putchar
        127 : 01 AD                      dc      A(putchar)
        129 : F8 20                      ldi     ' '
        12B : D5                         sep     R5              ; call putchar
        12C : 01 AD                      dc      A(putchar)
        12E : 87                         glo     R7
        12F : D5                         sep     R5              ; call put_hex8
        130 : 01 47                      dc      A(put_hex8)
        132 : F8 20                      ldi     ' '
        134 : D5                         sep     R5              ; call putchar
        135 : 01 AD                      dc      A(putchar)
        137 : 87                         glo     R7
        138 : D5                         sep     R5              ; call put_bin8
        139 : 01 75                      dc      A(put_bin8)
        13B : F8 0D                      ldi     x'0d'
        13D : D5                         sep     R5              ; call putchar
        13E : 01 AD                      dc      A(putchar)
        140 : F8 0A                      ldi     x'0a'
        142 : D5                         sep     R5              ; call putchar
        143 : 01 AD                      dc      A(putchar)
        145 : 30 1D                      br      loop
        147 :
        147 :                    ;;; Print uint8_t in hex
        147 :                    ;;; @param D uint8_t value to be printed in binary.
        147 :                    put_hex8:
        147 : AF                         plo     R15             ; save D to scratch pad
        148 : 87                         glo     R7              ; save R7.0
        149 : 73                         stxd
        14A : 8F                         glo     R15             ; restore D
        14B :                            ;;
        14B : A7                         plo     R7              ; R7.0=data
        14C : F8 30                      ldi     '0'
        14E : D5                         sep     R5              ; call putchar
        14F : 01 AD                      dc      A(putchar)
        151 : F8 78                      ldi     'x'
        153 : D5                         sep     R5              ; call putchar
        154 : 01 AD                      dc      A(putchar)
        156 : 87                         glo     R7
        157 : F6                         shr
        158 : F6                         shr
        159 : F6                         shr
        15A : F6                         shr
        15B : D5                         sep     R5              ; call put_hex4
        15C : 01 66                      dc      A(put_hex4)
        15E : 87                         glo     R7
        15F : D5                         sep     R5              ; call put_hex4
        160 : 01 66                      dc      A(put_hex4)
        162 :                            ;;
        162 : 60                         irx
        163 : F0                         ldx                     ; restore R7.0
        164 : A7                         plo     R7
        165 : D6                         sep     R6              ; return
        166 :
        166 :                    ;;; Print hexadecimal digit
        166 :                    ;;; @param D nibble
        166 :                    ;;; @clobber D
        166 :                    put_hex4:
        166 : FA 0F                      ani     0Fh
        168 : FF 0A                      smi     10
        16A : 3B 6F                      bnf     put_hex4_dec    ; branch if D < 10
        16C : FC 41                      adi     'A'
        16E : C8                         lskp
        16F :                    put_hex4_dec:
        16F : FC 3A                      adi     '0'+10
        171 : D5                         sep     R5              ; call putchar
        172 : 01 AD                      dc      A(putchar)
        174 : D6                         sep     R6              ; return
        175 :
        175 :                    ;;; Print uint8_t in binary
        175 :                    ;;; @param D uint8_t value to be printed in binary.
        175 :                    ;;; @clobber D
        175 :                    put_bin8:
        175 : AF                         plo     R15             ; save D to scratch pad
        176 : 87                         glo     R7              ; save R7.0
        177 : 73                         stxd
        178 : 8F                         glo     R15             ; restore D
        179 : A7                         plo     R7              ; R7.0=data
        17A :                            ;;
        17A : F8 30                      ldi     '0'
        17C : D5                         sep     R5
        17D : 01 AD                      dc      A(putchar)
        17F : F8 62                      ldi     'b'
        181 : D5                         sep     R5
        182 : 01 AD                      dc      A(putchar)
        184 :                            ;;
        184 : D5                         sep     R5
        185 : 01 8E                      dc      A(put_bin4)
        187 : D5                         sep     R5
        188 : 01 8E                      dc      A(put_bin4)
        18A :                            ;;
        18A : 60                         irx
        18B : F0                         ldx
        18C : A7                         plo     R7              ; restore R7
        18D : D6                         sep     R6              ; return
        18E :                    put_bin4:
        18E : D5                         sep     R5
        18F : 01 91                      dc      A(put_bin2)
        191 :                    put_bin2:
        191 : D5                         sep     R5
        192 : 01 94                      dc      A(put_bin1)
        194 :                    put_bin1:
        194 : 87                         glo     R7
        195 : 7E                         shlc                    ; DF=MSB
        196 : A7                         plo     R7
        197 : F8 30                      ldi     '0'
        199 : 3B AD                      bnf     putchar         ; MSB=0
        19B : F8 31                      ldi     '1'
        19D : 30 AD                      br      putchar
        19F :
        19F :                    ;;; Get character
        19F :                    ;;; @return R7.0 char
        19F :                    ;;; @return A 0 if no char received
        19F :                    getchar:
        19F : E3                         sex     R3
        1A0 : 71                         dis                     ; disable interrupt
        1A1 : 33                         dc      X'33'
        1A2 : E2                         sex     R2
        1A3 : D5                         sep     R5              ; call queue_remove
        1A4 : 03 5A                      dc      A(queue_remove)
        1A6 : 20 00                      dc      A(rx_queue)
        1A8 : E3                         sex     R3
        1A9 : 70                         ret                     ; enable interrupt
        1AA : 33                         dc      X'33'
        1AB : E2                         sex     R2
        1AC : D6                         sep     R6              ; return
        1AD :
        1AD :                    ;;; Put character
        1AD :                    ;;; @param D char
        1AD :                    ;;; @unchanged D
        1AD :                    ;;; @clobber R15
        1AD :                    putchar:
        1AD : 73                         stxd                    ; save D
        1AE : AF                         plo     R15             ; save D to scratch pad
        1AF : 87                         glo     R7              ; save R7.0
        1B0 : 73                         stxd
        1B1 : 8F                         glo     R15             ; restore D
        1B2 :                            ;;
        1B2 : A7                         plo     R7              ; R7.0=char
        1B3 :                    putchar_loop:
        1B3 : E3                         sex     R3
        1B4 : 71                         dis                     ; disable interrupt
        1B5 : 33                         dc      X'33'
        1B6 : E2                         sex     R2
        1B7 : D5                         sep     R5              ; call queue_add
        1B8 : 03 1F                      dc      A(queue_add)
        1BA : 20 80                      dc      A(tx_queue)
        1BC : E3                         sex     R3
        1BD : 70                         ret                     ; enable interrupt
        1BE : 33                         dc      X'33'
        1BF : E2                         sex     R2
        1C0 : 32 B3                      bz      putchar_loop    ; retry if queue is full
        1C2 : F8 01                      ldi     A.1(putchar_txint)
        1C4 : BF                         phi     R15
        1C5 : F8 D0                      ldi     A.0(putchar_txint)
        1C7 : AF                         plo     R15
        1C8 : EF                         sex     R15             ; R15 out output
        1C9 : 64                         out     ACIA_control
        1CA :                    putchar_exit:
        1CA : E2                         sex     R2
        1CB : 60                         irx
        1CC : 72                         ldxa                    ; restore R7.0
        1CD : A7                         plo     R7
        1CE : F0                         ldx                     ; restore D
        1CF : D6                         sep     R6              ; return
        1D0 :                    putchar_txint:
        1D0 : B4                         dc      RX_INT_TX_INT
        1D1 :
        300 :                            org     X'0300'
        300 :                            include "queue.inc"
(1)     300 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     300 :                    ;;; [queue] queue structure
(1)     300 : =0                 queue_len:      equ     0       ; queue length
(1)     300 : =1                 queue_size:     equ     1       ; buffer size
(1)     300 : =2                 queue_put:      equ     2       ; queue put index
(1)     300 : =3                 queue_get:      equ     3       ; queue get index
(1)     300 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     300 :
(1)     300 :                    ;;; [queue] Initialize queue
(1)     300 :                    ;;; @param R4+0 queue work space pointer
(1)     300 :                    ;;; @param R4+2 queue work space size
(1)     300 :                    ;;; @clobber D, R15
(1)     300 :                    queue_init:
(1)     300 : 8E                         glo     R14             ; save R14.0
(1)     301 : 73                         stxd
(1)     302 :                            ;;
(1)     302 : 44                         lda     R4
(1)     303 : BF                         phi     R15
(1)     304 : 44                         lda     R4
(1)     305 : AF                         plo     R15             ; R15=queue space pointer
(1)     306 : F8 00                      ldi     0
(1)     308 : 5F                         str     R15             ; clear queue_len
(1)     309 : 1F                         inc     R15
(1)     30A : 44                         lda     R4              ; queue space size
(1)     30B : FF 04                      smi     queue_buf       ; calculate queue size
(1)     30D : 5F                         str     R15             ; store queue_size
(1)     30E : FC 02                      adi     2               ; for queue_put and queue_get
(1)     310 : AE                         plo     R14             ; R14.0: byte counter
(1)     311 :                    queue_init_clear:
(1)     311 : F8 00                      ldi     0
(1)     313 : 1F                         inc     R15
(1)     314 : 5F                         str     R15             ; clear memory
(1)     315 : 8E                         glo     R14
(1)     316 : FF 01                      smi     1
(1)     318 : AE                         plo     R14             ; decrement byte counter
(1)     319 : 3A 11                      bnz     queue_init_clear
(1)     31B :                            ;;
(1)     31B : 60                         irx
(1)     31C : F0                         ldx                     ; restore R14.0
(1)     31D : AE                         plo     R14
(1)     31E : D6                         sep     R6              ; return
(1)     31F :
(1)     31F :                    ;;; [queue] Add an element to queue
(1)     31F :                    ;;; @param R4+0 queue work space pointer
(1)     31F :                    ;;; @param R7.0 an element
(1)     31F :                    ;;; @return D 0 if queue is full
(1)     31F :                    queue_add:
(1)     31F : 8E                         glo     R14             ; save R14
(1)     320 : 73                         stxd
(1)     321 : 9E                         ghi     R14
(1)     322 : 73                         stxd
(1)     323 :                            ;;
(1)     323 : 44                         lda     R4
(1)     324 : BF                         phi     R15
(1)     325 : 44                         lda     R4
(1)     326 : AF                         plo     R15             ; R15=queue space pointer
(1)     327 : EF                         sex     R15
(1)     328 : 72                         ldxa                    ; load queue_len
(1)     329 : F3                         xor                     ; queue_len ^ queue_size
(1)     32A : 32 51                      bz      queue_add_return ; branch if D=0
(1)     32C : 2F                         dec     R15
(1)     32D : 8F                         glo     R15
(1)     32E : FC 04                      adi     queue_buf
(1)     330 : AE                         plo     R14
(1)     331 : 9F                         ghi     R15
(1)     332 : 7C 00                      adci    0
(1)     334 : BE                         phi     R14             ; R14=&queue_buf[0]
(1)     335 : 0F                         ldn     R15
(1)     336 : FC 01                      adi     1
(1)     338 : 5F                         str     R15             ; queue_len++
(1)     339 : 8E                         glo     R14
(1)     33A : 1F                         inc     R15
(1)     33B : 1F                         inc     R15
(1)     33C : EF                         sex     R15
(1)     33D : F4                         add                     ; add queue_put
(1)     33E : AE                         plo     R14
(1)     33F : 9E                         ghi     R14
(1)     340 : 7C 00                      adci    0
(1)     342 : BE                         phi     R14             ; R14=&queue_buf[queue_put]
(1)     343 : 87                         glo     R7              ; R7.0=an element
(1)     344 : 5E                         str     R14             ; store an element
(1)     345 : 0F                         ldn     R15             ; load queue_put
(1)     346 : FC 01                      adi     1
(1)     348 : 5F                         str     R15             ; update queue_put
(1)     349 : 2F                         dec     R15
(1)     34A : F3                         xor                      ; queue_put ^ queue_size
(1)     34B : 3A 51                      bnz     queue_add_return ; branch if D!=0
(1)     34D : 1F                         inc     R15
(1)     34E : 5F                         str     R15             ; queue_put=0
(1)     34F : F8 01                      ldi     1
(1)     351 :                    queue_add_return:
(1)     351 : AF                         plo     R15             ; return flag
(1)     352 : E2                         sex     R2
(1)     353 : 60                         irx
(1)     354 : 72                         ldxa                    ; restore R14
(1)     355 : BE                         phi     R14
(1)     356 : F0                         ldx
(1)     357 : AE                         plo     R14
(1)     358 : 8F                         glo     R15
(1)     359 : D6                         sep     R6              ; return
(1)     35A :
(1)     35A :                    ;;; [queue] Remove an element from queue
(1)     35A :                    ;;; @param R4+0 queue work space pointer
(1)     35A :                    ;;; @return R7.0 an element
(1)     35A :                    ;;; @return D 0 if queue is empty
(1)     35A :                    ;;; @clobber R15
(1)     35A :                    queue_remove:
(1)     35A : 8E                         glo     R14             ; save R14
(1)     35B : 73                         stxd
(1)     35C : 9E                         ghi     R14
(1)     35D : 73                         stxd
(1)     35E :                            ;;
(1)     35E : 44                         lda     R4
(1)     35F : BF                         phi     R15
(1)     360 : 44                         lda     R4
(1)     361 : AF                         plo     R15             ; R15=queue space pointer
(1)     362 : 0F                         ldn     R15             ; load queue_len
(1)     363 : 32 8B                      bz      queue_remove_return ; branch if D=0
(1)     365 : FF 01                      smi     1
(1)     367 : 5F                         str     R15             ; queue_len--
(1)     368 : 8F                         glo     R15
(1)     369 : FC 04                      adi     queue_buf
(1)     36B : AE                         plo     R14
(1)     36C : 9F                         ghi     R15
(1)     36D : 7C 00                      adci    0
(1)     36F : BE                         phi     R14             ; R14=&queue_buf[0]
(1)     370 : 8E                         glo     R14
(1)     371 : 1F                         inc     R15
(1)     372 : 1F                         inc     R15
(1)     373 : 1F                         inc     R15
(1)     374 : EF                         sex     R15
(1)     375 : F4                         add                     ; add queue_get
(1)     376 : AE                         plo     R14
(1)     377 : 9E                         ghi     R14
(1)     378 : 7C 00                      adci    0
(1)     37A : BE                         phi     R14             ; R14=&queue_buf[queue_get]
(1)     37B : 0E                         ldn     R14             ; load an alement
(1)     37C : A7                         plo     R7              ; R7.0=an element
(1)     37D : 0F                         ldn     R15             ; load queue_get
(1)     37E : FC 01                      adi     1
(1)     380 : 5F                         str     R15             ; update queue_get
(1)     381 : 2F                         dec     R15
(1)     382 : 2F                         dec     R15
(1)     383 : F3                         xor                     ; queue_get ^ queue_size
(1)     384 : 3A 8B                      bnz     queue_remove_return ; brnach if D!=0
(1)     386 : 1F                         inc     R15
(1)     387 : 1F                         inc     R15
(1)     388 : 5F                         str     R15             ; queue_get=0
(1)     389 : F8 01                      ldi     1
(1)     38B :                    queue_remove_return:
(1)     38B : AF                         plo     R15             ; return flag
(1)     38C : E2                         sex     R2
(1)     38D : 60                         irx
(1)     38E : 72                         ldxa                    ; restore R14
(1)     38F : BE                         phi     R14
(1)     390 : F0                         ldx
(1)     391 : AE                         plo     R14
(1)     392 : 8F                         glo     R15             ; return flag
(1)     393 : D6                         sep     R6              ; return
        394 :
        394 :                    ;;; From scrt_isr, X=2, P=3
        394 :                    isr_char:
        394 : 00                         dc      0
        395 :                    isr:
        395 : 88                         glo     R8              ; save R8
        396 : 73                         stxd
        397 : 98                         ghi     R8
        398 : 73                         stxd
        399 : 87                         glo     R7              ; save R7
        39A : 73                         stxd
        39B : 97                         ghi     R7
        39C : 73                         stxd
        39D :                            ;;
        39D : F8 03                      ldi     A.1(isr_char)
        39F : B8                         phi     R8
        3A0 : F8 94                      ldi     A.0(isr_char)
        3A2 : A8                         plo     R8
        3A3 : E8                         sex     R8              ; R8 for inp/out
        3A4 : 6C                         inp     ACIA_status
        3A5 : FA 80                      ani     IRQF_bm
        3A7 : 32 CD                      bz      isr_exit
        3A9 : 6C                         inp     ACIA_status
        3AA : FA 01                      ani     RDRF_bm
        3AC : 32 B5                      bz      isr_send        ; no data is received
        3AE : 6D                         inp     ACIA_data
        3AF : A7                         plo     R7
        3B0 : D5                         sep     R5              ; call queue_add
        3B1 : 03 1F                      dc      A(queue_add)
        3B3 : 20 00                      dc      A(rx_queue)
        3B5 :                    isr_send:
        3B5 : E8                         sex     R8              ; R8 for inp/out
        3B6 : 6C                         inp     ACIA_status
        3B7 : FA 02                      ani     TDRE_bm
        3B9 : 32 CD                      bz      isr_exit
        3BB : D5                         sep     R5              ; call queue_remove
        3BC : 03 5A                      dc      A(queue_remove)
        3BE : 20 80                      dc      A(tx_queue)
        3C0 : 32 C8                      bz      isr_send_empty
        3C2 : 87                         glo     R7
        3C3 : 58                         str     R8              ; output char
        3C4 : E8                         sex     R8              ; R8 for inp/out
        3C5 : 65                         out     ACIA_data
        3C6 : 30 CD                      br      isr_exit
        3C8 :                    isr_send_empty:
        3C8 : F8 94                      ldi     RX_INT_TX_NO    ; disable Tx interrupt
        3CA : 58                         str     R8              ; output byte
        3CB : E8                         sex     R8              ; R8 for inp/out
        3CC : 64                         out     ACIA_control
        3CD :                    isr_exit:
        3CD : E2                         sex     R2
        3CE : 60                         irx
        3CF : 72                         ldxa                    ; restore R7
        3D0 : B7                         phi     R7
        3D1 : 72                         ldxa
        3D2 : A7                         plo     R7
        3D3 : 72                         ldxa                    ; restore R8
        3D4 : B8                         phi     R8
        3D5 : F0                         ldx
        3D6 : A8                         plo     R8
        3D7 : D1                         sep     R1              ; return to scrt_isr
        3D8 :
          0 :                            org     ORG_RESET
          0 : 71                         dis                     ; disable interrupt
          1 : 00                         dc      X'00'           ; X:P=0:0
          2 : 30 04                      br      scrt_init
          4 :
          4 :                            include "scrt.inc"
(1)       4 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       4 :
(1)       4 :                    ;;; Standard Call and Return Technique
(1)       4 :                    ;;; R0: DMA pointer
(1)       4 :                    ;;; R1: Program counter for Interrupt routine
(1)       4 :                    ;;; R2: Stack pointer
(1)       4 :                    ;;; R3: Program counter
(1)       4 :                    ;;; R4: Link register, pointer to the return location and arguments
(1)       4 :                    ;;;     passed by the calling program
(1)       4 :                    ;;; R5: Dedicated program counter for CALL routine
(1)       4 :                    ;;; R6: Dedicated program counter for RETURN routine
(1)       4 :
(1)       4 :                    ;;; Call subroutine
(1)       4 :                    ;;;   SEP R5
(1)       4 :                    ;;;   DC  A(subroutine)
(1)       4 :                    ;;;   DC  arguments...
(1)       4 :                    ;;; Subroutine return
(1)       4 :                    ;;;   SEP R6
(1)       4 :                    ;;; Return from interrupt
(1)       4 :                    ;;;   SEP R1
(1)       4 :
(1)       4 :                    ;;; Initialize for SCRT, P=0
(1)       4 :                    ;;; @param P!=3
(1)       4 :                    ;;; @param stack top address of stack
(1)       4 :                    ;;; @param main start address of main routine
(1)       4 :                    ;;; @return P=3
(1)       4 :                    ;;; @return R1=scrt_isr
(1)       4 :                    ;;; @return R2=stack
(1)       4 :                    ;;; @return R3=main
(1)       4 :                    ;;; @return R5=scrt_call
(1)       4 :                    ;;; @return R6=scrt_return
(1)       4 :                    ;;; @clobber D, R15
(1)       4 :                    scrt_init:
(1)       4 : F8 00                      ldi     A.1(scrt_start)
(1)       6 : B3                         phi     R3
(1)       7 : F8 0B                      ldi     A.0(scrt_start)
(1)       9 : A3                         plo     R3
(1)       A : D3                         sep     R3              ; P=3
(1)       B :                    scrt_start:
(1)       B : F8 00                      ldi     A.1(scrt_init_tab)
(1)       D : BF                         phi     R15
(1)       E : F8 24                      ldi     A.0(scrt_init_tab)
(1)      10 : AF                         plo     R15
(1)      11 : 4F                         lda     R15             ; setup interrupt
(1)      12 : B1                         phi     R1
(1)      13 : 4F                         lda     R15
(1)      14 : A1                         plo     R1
(1)      15 : 4F                         lda     R15             ; setup stack
(1)      16 : B2                         phi     R2
(1)      17 : 4F                         lda     R15
(1)      18 : A2                         plo     R2
(1)      19 : 4F                         lda     R15             ; setup call
(1)      1A : B5                         phi     R5
(1)      1B : 4F                         lda     R15
(1)      1C : A5                         plo     R5
(1)      1D : 4F                         lda     R15             ; setup return
(1)      1E : B6                         phi     R6
(1)      1F : 4F                         lda     R15
(1)      20 : A6                         plo     R6
(1)      21 : C0 01 00                   br      main            ; goto main with P=3
(1)      24 :
(1)      24 :                    scrt_init_tab:
(1)      24 : 00 62                      dc      A(scrt_isr)     ; R1
(1)      26 : 0F FF                      dc      A(stack)        ; R2
(1)      28 : 00 2D                      dc      A(scrt_call)    ; R5
(1)      2A : 00 3F                      dc      A(scrt_return)  ; R6
(1)      2C :
(1)      2C :                    ;;; Call subroutine, P=5
(1)      2C :                    ;;; @param M(R3):M(R3+1) subroutine address
(1)      2C :                    ;;; @param M(R3+2) optional arguments, depending on a subroutine called.
(1)      2C :                    ;;; @return R4 points optional arguments
(1)      2C :                    ;;; @return M(R2) R4.1, R4.0
(1)      2C :                    ;;; @clobber R15.1, X
(1)      2C :                    ;;; @unchanged D, DF, IE, R0, R1, R7-R14, R15.0
(1)      2C :                    scrt_call_exit:
(1)      2C : D3                         sep     R3              ; go to subroutine
(1)      2D :                    scrt_call:
(1)      2D : BF                         phi     R15             ; save D to R15.1
(1)      2E : E2                         sex     R2              ; select stack
(1)      2F : 84                         glo     R4              ; push old link register R4
(1)      30 : 73                         stxd
(1)      31 : 94                         ghi     R4
(1)      32 : 73                         stxd
(1)      33 : 93                         ghi     R3              ; load link register
(1)      34 : B4                         phi     R4
(1)      35 : 83                         glo     R3
(1)      36 : A4                         plo     R4
(1)      37 : 44                         lda     R4              ; load the address of subroutine
(1)      38 : B3                         phi     R3
(1)      39 : 44                         lda     R4
(1)      3A : A3                         plo     R3              ; R3=subroutine address
(1)      3B : 9F                         ghi     R15             ; restore D
(1)      3C : 30 2C                      br      scrt_call_exit
(1)      3E :
(1)      3E :                    ;;; Return subroutine, P=6
(1)      3E :                    ;;; @param R4 return address
(1)      3E :                    ;;; @oaram M(R2) R4.1, R4.0, X:P(3)
(1)      3E :                    ;;; @clobber R15.1, X
(1)      3E :                    ;;; @unchanged D, DF, R0, R1, R7-R14, R15.0
(1)      3E :                    scrt_return_exit:
(1)      3E : D3                         sep     R3              ; return to subroutine caller
(1)      3F :                    scrt_return:
(1)      3F : BF                         phi     R15             ; save D to R15.1
(1)      40 : 94                         ghi     R4              ; load return address from link register
(1)      41 : B3                         phi     R3
(1)      42 : 84                         glo     R4
(1)      43 : A3                         plo     R3
(1)      44 : E2                         sex     R2              ; select stack
(1)      45 : 60                         irx
(1)      46 : 72                         ldxa                    ; pop link register R4
(1)      47 : B4                         phi     R4
(1)      48 : F0                         ldx
(1)      49 : A4                         plo     R4
(1)      4A : 9F                         ghi     R15             ; restore D
(1)      4B : 30 3E                      br      scrt_return_exit
(1)      4D :
(1)      4D :                    ;;; Interrupt exit entry P=1
(1)      4D :                    ;;;  (Come here by SEP R1)
(1)      4D :                    scrt_isr_exit:
(1)      4D : 60                         irx
(1)      4E : 72                         ldxa                    ; pop program counter R3
(1)      4F : B3                         phi     R3
(1)      50 : 72                         ldxa
(1)      51 : A3                         plo     R3
(1)      52 : 72                         ldxa                    ; pop call pointer R5
(1)      53 : B5                         phi     R5
(1)      54 : 72                         ldxa
(1)      55 : A5                         plo     R5
(1)      56 : 72                         ldxa                    ; pop return pointer R6
(1)      57 : B6                         phi     R6
(1)      58 : 72                         ldxa
(1)      59 : A6                         plo     R6
(1)      5A : 72                         ldxa                    ; pop scratch pad register R15
(1)      5B : BF                         phi     R15
(1)      5C : 72                         ldxa
(1)      5D : AF                         plo     R15
(1)      5E : 72                         ldxa                    ; pop DF into D:MSB
(1)      5F : FE                         shl                     ; restore DF
(1)      60 : 72                         ldxa                    ; pop D
(1)      61 : 70                         ret                     ; restore X,P IE=1
(1)      62 :                            ;; R1 points scrt_isr
(1)      62 :                    ;;; CDP1802 interrupt entry, X=2, P=1, IE=0
(1)      62 :                    ;;; @unchanged D, DF, X, P, R3, R5, R6, R15
(1)      62 :                    scrt_isr:
(1)      62 :                            ;; R2[0] must be preserved because it may be in the pop process
(1)      62 : 22                         dec     R2
(1)      63 : 78                         sav                     ; push X,P
(1)      64 : 22                         dec     R2
(1)      65 : 73                         stxd                    ; push D
(1)      66 : 76                         shrc                    ; MSB of D=DF
(1)      67 : 73                         stxd                    ; push DF
(1)      68 : 8F                         glo     R15             ; push scratch pad register R15
(1)      69 : 73                         stxd
(1)      6A : 9F                         ghi     R15
(1)      6B : 73                         stxd
(1)      6C : 86                         glo     R6              ; push return pointer R6
(1)      6D : 73                         stxd
(1)      6E : 96                         ghi     R6
(1)      6F : 73                         stxd
(1)      70 : 85                         glo     R5              ; push call pointer R5
(1)      71 : 73                         stxd
(1)      72 : 95                         ghi     R5
(1)      73 : 73                         stxd
(1)      74 : 83                         glo     R3              ; push program counter R3
(1)      75 : 73                         stxd
(1)      76 : 93                         ghi     R3
(1)      77 : 73                         stxd
(1)      78 :                            ;; Initialize SCRT registers because interrupt service routine
(1)      78 :                            ;; may use call/return
(1)      78 : F8 00                      ldi     A.1(scrt_call)  ; initialize call pointer R5
(1)      7A : B5                         phi     R5
(1)      7B : F8 2D                      ldi     A.0(scrt_call)
(1)      7D : A5                         plo     R5
(1)      7E : F8 00                      ldi     A.1(scrt_return) ; initialize return pointer R6
(1)      80 : B6                         phi     R6
(1)      81 : F8 3F                      ldi     A.0(scrt_return)
(1)      83 : A6                         plo     R6
(1)      84 :                            ;;
(1)      84 : F8 03                      ldi     A.1(isr)
(1)      86 : B3                         phi     R3
(1)      87 : F8 95                      ldi     A.0(isr)
(1)      89 : A3                         plo     R3
(1)      8A : D3                         sep     R3              ; call interrupt service routine with P=3
(1)      8B : 30 4D                      br      scrt_isr_exit   ; return from isr by SEP R1
