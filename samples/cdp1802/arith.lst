          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     1802
          0 :                            option  "smart-branch", "on"
          0 :                            include "cdp1802.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; CDP1802 register alias
(1)       0 : =0                 R0:     equ     0
(1)       0 : =1                 R1:     equ     1
(1)       0 : =2                 R2:     equ     2
(1)       0 : =3                 R3:     equ     3
(1)       0 : =4                 R4:     equ     4
(1)       0 : =5                 R5:     equ     5
(1)       0 : =6                 R6:     equ     6
(1)       0 : =7                 R7:     equ     7
(1)       0 : =8                 R8:     equ     8
(1)       0 : =9                 R9:     equ     9
(1)       0 : =A                 R10:    equ     10
(1)       0 : =B                 R11:    equ     11
(1)       0 : =C                 R12:    equ     12
(1)       0 : =D                 R13:    equ     13
(1)       0 : =E                 R14:    equ     14
(1)       0 : =F                 R15:    equ     15
(1)       0 :
(1)       0 :                    ;;; Transfer locations
(1)       0 : =0                 ORG_RESET:      equ     0000H   ; Reset transfer location
          0 :
          0 :                            org     ORG_RESET
          0 : 71                         dis                     ; disable interrupt
          1 : 00                         dc      X'00'           ; X:P=0:0
          2 : 30 04                      br      scrt_init
          4 :                            include "scrt.inc"
(1)       4 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       4 :
(1)       4 :                    ;;; Standard Call and Return Technique
(1)       4 :                    ;;; R0: DMA pointer
(1)       4 :                    ;;; R1: Program counter for Interrupt routine
(1)       4 :                    ;;; R2: Stack pointer
(1)       4 :                    ;;; R3: Program counter
(1)       4 :                    ;;; R4: Link register, pointer to the return location and arguments
(1)       4 :                    ;;;     passed by the calling program
(1)       4 :                    ;;; R5: Dedicated program counter for CALL routine
(1)       4 :                    ;;; R6: Dedicated program counter for RETURN routine
(1)       4 :
(1)       4 :                    ;;; Call subroutine
(1)       4 :                    ;;;   SEP R5
(1)       4 :                    ;;;   DC  A(subroutine)
(1)       4 :                    ;;;   DC  arguments...
(1)       4 :                    ;;; Subroutine return
(1)       4 :                    ;;;   SEP R6
(1)       4 :                    ;;; Return from interrupt
(1)       4 :                    ;;;   SEP R1
(1)       4 :
(1)       4 :                    ;;; Initialize for SCRT, P=0
(1)       4 :                    ;;; @param P!=3
(1)       4 :                    ;;; @param stack top address of stack
(1)       4 :                    ;;; @param main start address of main routine
(1)       4 :                    ;;; @return P=3
(1)       4 :                    ;;; @return R1=scrt_isr
(1)       4 :                    ;;; @return R2=stack
(1)       4 :                    ;;; @return R3=main
(1)       4 :                    ;;; @return R5=scrt_call
(1)       4 :                    ;;; @return R6=scrt_return
(1)       4 :                    ;;; @clobber D, R15
(1)       4 :                    scrt_init:
(1)       4 : F8 00                      ldi     A.1(scrt_start)
(1)       6 : B3                         phi     R3
(1)       7 : F8 0B                      ldi     A.0(scrt_start)
(1)       9 : A3                         plo     R3
(1)       A : D3                         sep     R3              ; P=3
(1)       B :                    scrt_start:
(1)       B : F8 00                      ldi     A.1(scrt_init_tab)
(1)       D : BF                         phi     R15
(1)       E : F8 24                      ldi     A.0(scrt_init_tab)
(1)      10 : AF                         plo     R15
(1)      11 : 4F                         lda     R15             ; setup interrupt
(1)      12 : B1                         phi     R1
(1)      13 : 4F                         lda     R15
(1)      14 : A1                         plo     R1
(1)      15 : 4F                         lda     R15             ; setup stack
(1)      16 : B2                         phi     R2
(1)      17 : 4F                         lda     R15
(1)      18 : A2                         plo     R2
(1)      19 : 4F                         lda     R15             ; setup call
(1)      1A : B5                         phi     R5
(1)      1B : 4F                         lda     R15
(1)      1C : A5                         plo     R5
(1)      1D : 4F                         lda     R15             ; setup return
(1)      1E : B6                         phi     R6
(1)      1F : 4F                         lda     R15
(1)      20 : A6                         plo     R6
(1)      21 : C0 10 00                   br      main            ; goto main with P=3
(1)      24 :
(1)      24 :                    scrt_init_tab:
(1)      24 : 00 62                      dc      A(scrt_isr)     ; R1
(1)      26 : 0F FF                      dc      A(stack)        ; R2
(1)      28 : 00 2D                      dc      A(scrt_call)    ; R5
(1)      2A : 00 3F                      dc      A(scrt_return)  ; R6
(1)      2C :
(1)      2C :                    ;;; Call subroutine, P=5
(1)      2C :                    ;;; @param M(R3):M(R3+1) subroutine address
(1)      2C :                    ;;; @param M(R3+2) optional arguments, depending on a subroutine called.
(1)      2C :                    ;;; @return R4 points optional arguments
(1)      2C :                    ;;; @return M(R2) R4.1, R4.0
(1)      2C :                    ;;; @clobber R15.1, X
(1)      2C :                    ;;; @unchanged D, DF, IE, R0, R1, R7-R14, R15.0
(1)      2C :                    scrt_call_exit:
(1)      2C : D3                         sep     R3              ; go to subroutine
(1)      2D :                    scrt_call:
(1)      2D : BF                         phi     R15             ; save D to R15.1
(1)      2E : E2                         sex     R2              ; select stack
(1)      2F : 84                         glo     R4              ; push old link register R4
(1)      30 : 73                         stxd
(1)      31 : 94                         ghi     R4
(1)      32 : 73                         stxd
(1)      33 : 93                         ghi     R3              ; load link register
(1)      34 : B4                         phi     R4
(1)      35 : 83                         glo     R3
(1)      36 : A4                         plo     R4
(1)      37 : 44                         lda     R4              ; load the address of subroutine
(1)      38 : B3                         phi     R3
(1)      39 : 44                         lda     R4
(1)      3A : A3                         plo     R3              ; R3=subroutine address
(1)      3B : 9F                         ghi     R15             ; restore D
(1)      3C : 30 2C                      br      scrt_call_exit
(1)      3E :
(1)      3E :                    ;;; Return subroutine, P=6
(1)      3E :                    ;;; @param R4 return address
(1)      3E :                    ;;; @oaram M(R2) R4.1, R4.0, X:P(3)
(1)      3E :                    ;;; @clobber R15.1, X
(1)      3E :                    ;;; @unchanged D, DF, R0, R1, R7-R14, R15.0
(1)      3E :                    scrt_return_exit:
(1)      3E : D3                         sep     R3              ; return to subroutine caller
(1)      3F :                    scrt_return:
(1)      3F : BF                         phi     R15             ; save D to R15.1
(1)      40 : 94                         ghi     R4              ; load return address from link register
(1)      41 : B3                         phi     R3
(1)      42 : 84                         glo     R4
(1)      43 : A3                         plo     R3
(1)      44 : E2                         sex     R2              ; select stack
(1)      45 : 60                         irx
(1)      46 : 72                         ldxa                    ; pop link register R4
(1)      47 : B4                         phi     R4
(1)      48 : F0                         ldx
(1)      49 : A4                         plo     R4
(1)      4A : 9F                         ghi     R15             ; restore D
(1)      4B : 30 3E                      br      scrt_return_exit
(1)      4D :
(1)      4D :                    ;;; Interrupt exit entry P=1
(1)      4D :                    ;;;  (Come here by SEP R1)
(1)      4D :                    scrt_isr_exit:
(1)      4D : 60                         irx
(1)      4E : 72                         ldxa                    ; pop program counter R3
(1)      4F : B3                         phi     R3
(1)      50 : 72                         ldxa
(1)      51 : A3                         plo     R3
(1)      52 : 72                         ldxa                    ; pop call pointer R5
(1)      53 : B5                         phi     R5
(1)      54 : 72                         ldxa
(1)      55 : A5                         plo     R5
(1)      56 : 72                         ldxa                    ; pop return pointer R6
(1)      57 : B6                         phi     R6
(1)      58 : 72                         ldxa
(1)      59 : A6                         plo     R6
(1)      5A : 72                         ldxa                    ; pop scratch pad register R15
(1)      5B : BF                         phi     R15
(1)      5C : 72                         ldxa
(1)      5D : AF                         plo     R15
(1)      5E : 72                         ldxa                    ; pop DF into D:MSB
(1)      5F : FE                         shl                     ; restore DF
(1)      60 : 72                         ldxa                    ; pop D
(1)      61 : 70                         ret                     ; restore X,P IE=1
(1)      62 :                            ;; R1 points scrt_isr
(1)      62 :                    ;;; CDP1802 interrupt entry, X=2, P=1, IE=0
(1)      62 :                    ;;; @unchanged D, DF, X, P, R3, R5, R6, R15
(1)      62 :                    scrt_isr:
(1)      62 :                            ;; R2[0] must be preserved because it may be in the pop process
(1)      62 : 22                         dec     R2
(1)      63 : 78                         sav                     ; push X,P
(1)      64 : 22                         dec     R2
(1)      65 : 73                         stxd                    ; push D
(1)      66 : 76                         shrc                    ; MSB of D=DF
(1)      67 : 73                         stxd                    ; push DF
(1)      68 : 8F                         glo     R15             ; push scratch pad register R15
(1)      69 : 73                         stxd
(1)      6A : 9F                         ghi     R15
(1)      6B : 73                         stxd
(1)      6C : 86                         glo     R6              ; push return pointer R6
(1)      6D : 73                         stxd
(1)      6E : 96                         ghi     R6
(1)      6F : 73                         stxd
(1)      70 : 85                         glo     R5              ; push call pointer R5
(1)      71 : 73                         stxd
(1)      72 : 95                         ghi     R5
(1)      73 : 73                         stxd
(1)      74 : 83                         glo     R3              ; push program counter R3
(1)      75 : 73                         stxd
(1)      76 : 93                         ghi     R3
(1)      77 : 73                         stxd
(1)      78 :                            ;; Initialize SCRT registers because interrupt service routine
(1)      78 :                            ;; may use call/return
(1)      78 : F8 00                      ldi     A.1(scrt_call)  ; initialize call pointer R5
(1)      7A : B5                         phi     R5
(1)      7B : F8 2D                      ldi     A.0(scrt_call)
(1)      7D : A5                         plo     R5
(1)      7E : F8 00                      ldi     A.1(scrt_return) ; initialize return pointer R6
(1)      80 : B6                         phi     R6
(1)      81 : F8 3F                      ldi     A.0(scrt_return)
(1)      83 : A6                         plo     R6
(1)      84 :                            ;;
(1)      84 : F8 10                      ldi     A.1(isr)
(1)      86 : B3                         phi     R3
(1)      87 : F8 0C                      ldi     A.0(isr)
(1)      89 : A3                         plo     R3
(1)      8A : D3                         sep     R3              ; call interrupt service routine with P=3
(1)      8B : 30 4D                      br      scrt_isr_exit   ; return from isr by SEP R1
         8D :
         8D :                    ;;; MC6850 Asynchronous Communication Interface Adapter
         8D : =4                 ACIA:   equ     4
         8D :                            include "mc6850.inc"
(1)      8D :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)      8D :
(1)      8D :                    ;;; MC6850
(1)      8D :                    ;;; Asynchronous Communication Interface Adapter
(1)      8D :
(1)      8D :                    ;;; Control register
(1)      8D : =4                 ACIA_control:   equ     ACIA+0
(1)      8D :                            ;; Counter Divider Select Bits
(1)      8D : =3                 CDS_gm:         equ     11b    ; Group mask
(1)      8D : =0                 CDS_DIV1_gc:    equ     00000000B ; /1
(1)      8D : =1                 CDS_DIV16_gc:   equ     00000001B ; /16
(1)      8D : =2                 CDS_DIV64_gc:   equ     00000010B ; /64
(1)      8D : =3                 CDS_RESET_gc:   equ     00000011B ; Master Reset
(1)      8D :                            ;; Word Select Bits
(1)      8D : =1C                WSB_gm:         equ     00011100B ; Group mask
(1)      8D : =0                 WSB_7E2_gc:     equ     00000000B ; 7 Bits + Even Parity + 2 Stop Bits
(1)      8D : =4                 WSB_7O2_gc:     equ     00000100B ; 7 bits + Odd Parity  + 2 Stop Bits
(1)      8D : =8                 WSB_7E1_gc:     equ     00001000B ; 7 bits + Even Parity + 1 Stop Bits
(1)      8D : =C                 WSB_7O1_gc:     equ     00001100B ; 7 bits + Odd Parity  + 1 Stop Bits
(1)      8D : =10                WSB_8N2_gc:     equ     00010000B ; 8 bits + No Parity   + 2 Stop Bits
(1)      8D : =14                WSB_8N1_gc:     equ     00010100B ; 8 bits + No Parity   + 1 Stop Bits
(1)      8D : =18                WSB_8E1_gc:     equ     00011000B ; 8 bits + Even Parity + 1 Stop Bits
(1)      8D : =1C                WSB_8O1_gc:     equ     00011100B ; 8 bits + Odd Parity  + 1 Stop Bits
(1)      8D :                            ;; Transmit Control Bits
(1)      8D : =60                TCB_gm:         equ     01100000B ; Group mask
(1)      8D : =0                 TCB_DI_gc:      equ     00000000B ; RTS=Low,  Tx Interrupt Disabled
(1)      8D : =20                TCB_EI_gc:      equ     00100000B ; RTS=Low,  Tx Interrupt Enabled
(1)      8D : =40                TCB_RTS_gc:     equ     01000000B ; RTS=High, Tx Interrupt Disabled
(1)      8D : =60                TCB_BREAK_gc:   equ     01100000B ; RTS=Low,  Tx Interrupt Disabled
(1)      8D :                                                      ; Transmit Break Level
(1)      8D : =80                RIEB_bm:        equ     10000000B ; Receive Interrupt Enable Bit mask
(1)      8D :
(1)      8D :                    ;;; Status register
(1)      8D : =4                 ACIA_status:    equ     ACIA+0
(1)      8D : =1                 RDRF_bm:        equ     00000001B ; Receive Data Register Full
(1)      8D : =2                 TDRE_bm:        equ     00000010B ; Transmit Data Register Empty
(1)      8D : =4                 DCDF_bm:        equ     00000100B ; Data Carrier Detect Flag
(1)      8D : =8                 CTSF_bm:        equ     00001000B ; Clear To Send Flag
(1)      8D : =10                FERR_bm:        equ     00010000B ; Frame Error Flag
(1)      8D : =20                OVRN_bm:        equ     00100000B ; Receiver Overrun Flag
(1)      8D : =40                PERR_bm:        equ     01000000B ; Parity Error Flag
(1)      8D : =80                IRQF_bm:        equ     10000000B ; Interrupt Request Flag
(1)      8D :
(1)      8D :                    ;;; Data register
(1)      8D : =5                 ACIA_data:      equ     ACIA+1          ; Data register
         8D :
       1000 :                            org     X'1000'
       1000 : =FFF               stack:  equ     *-1
       1000 :                    main:
       1000 : F8 10                      ldi     A.1(ACIA_config)
       1002 : B8                         phi     R8
       1003 : F8 0D                      ldi     A.0(ACIA_config)
       1005 : A8                         plo     R8
       1006 : E8                         sex     R8             ; R8 for out
       1007 : 64                         out     ACIA_control   ; Master reset
       1008 : 64                         out     ACIA_control   ; Set mode
       1009 : D5                         sep     R5
       100A : 10 A1                      dc      A(arith)        ; call arith
       100C :                    isr:
       100C : 00                         idl
       100D :
       100D :                    ACIA_config:
       100D : 03                         dc      CDS_RESET_gc   ; Master reset
       100E : 14                         dc      WSB_8N1_gc     ; 8 bits + No Parity + 1 Stop Bits
       100F :                                                    ; Transmit, Receive interrupts disabled
       100F :
       100F :                    ;;; Print out char
       100F :                    ;;; @param D char
       100F :                    ;;; @clobber R15.0
       100F :                    putchar_char:
       100F : 00                         dc      0
       1010 :                    putchar:
       1010 : AF                         plo     R15             ; save D to R15.0
       1011 : 88                         glo     R8
       1012 : 73                         stxd
       1013 : 98                         ghi     R8
       1014 : 73                         stxd
       1015 :                            ;;
       1015 : F8 10                      ldi     A.1(putchar_char)
       1017 : B8                         phi     R8
       1018 : F8 0F                      ldi     A.0(putchar_char)
       101A : A8                         plo     R8
       101B : E8                         sex     R8              ; R8 for inp/out
       101C :                    putchar_loop:
       101C : 6C                         inp     ACIA_status
       101D : FA 02                      ani     TDRE_bm
       101F : 32 1C                      bz      putchar_loop
       1021 : 8F                         glo     R15             ; restore D
       1022 : 58                         str     R8              ; set character
       1023 : 65                         out     ACIA_data
       1024 :                            ;;
       1024 : E2                         sex     R2
       1025 : 60                         irx
       1026 : 72                         ldxa
       1027 : B8                         phi     R8
       1028 : F0                         ldx
       1029 : A8                         plo     R8
       102A : D6                         sep     R6              ; return
       102B :
       102B :                    ;;; Print out newline
       102B :                    ;;; @clobber D R15.0
       102B :                    newline:
       102B : F8 0D                      ldi     X'0D'
       102D : D5                         sep     R5              ; call
       102E : 10 10                      dc      A(putchar)
       1030 : F8 0A                      ldi     X'0A'
       1032 : 30 10                      br      putchar
       1034 :
       1034 :                    ;;; Print out space
       1034 :                    ;;; @clobber D R15.0
       1034 :                    putspace:
       1034 : F8 20                      ldi     T' '
       1036 : 30 10                      br      putchar
       1038 :
       1038 :                    ;;; Print out expression "operand1 operator operand2"
       1038 :                    ;;; @param R7 operand1
       1038 :                    ;;; @param R8 operand2
       1038 :                    ;;; @param D operator
       1038 :                    ;;; @clobber D R7 R8 R15
       1038 :                    expr:
       1038 : AF                         plo     R15             ; save operator
       1039 : 87                         glo     R7
       103A : 73                         stxd
       103B : 97                         ghi     R7
       103C : 73                         stxd                    ; save R7
       103D : 88                         glo     R8
       103E : 73                         stxd
       103F : 98                         ghi     R8
       1040 : 73                         stxd                    ; save R8
       1041 : 8F                         glo     R15
       1042 : 73                         stxd                    ; save operator
       1043 : D5                         sep     R5
       1044 : 12 EC                      dc      A(print_int16)
       1046 : D5                         sep     R5
       1047 : 10 34                      dc      A(putspace)
       1049 : 12                         inc     R2
       104A : 02                         ldn     R2              ; restore operator
       104B : D5                         sep     R5
       104C : 10 10                      dc      A(putchar)
       104E : D5                         sep     R5
       104F : 10 34                      dc      A(putspace)
       1051 : 98                         ghi     R8
       1052 : B7                         phi     R7
       1053 : 88                         glo     R8
       1054 : A7                         plo     R7
       1055 : D5                         sep     R5
       1056 : 12 EC                      dc      A(print_int16)
       1058 : 60                         irx
       1059 : 72                         ldxa
       105A : B8                         phi     R8
       105B : 72                         ldxa
       105C : A8                         plo     R8              ; restore R8
       105D : 72                         ldxa
       105E : B7                         phi     R7
       105F : F0                         ldx
       1060 : A7                         plo     R7              ; restore R7
       1061 : D6                         sep     R6
       1062 :
       1062 :                    ;;; Print out answer " = result\n"
       1062 :                    ;;; @params R7 result
       1062 :                    ;;; @clobber D R7 R15
       1062 :                    answer:
       1062 : D5                         sep     R5
       1063 : 10 34                      dc      A(putspace)
       1065 : F8 3D                      ldi     T'='
       1067 : D5                         sep     R5
       1068 : 10 10                      dc      A(putchar)
       106A : D5                         sep     R5
       106B : 10 34                      dc      A(putspace)
       106D : D5                         sep     R5
       106E : 12 EC                      dc      A(print_int16)
       1070 : 30 2B                      br      newline
       1072 :
       1072 :                    ;;; Compare 2 integers and print out "operand1 <=> operand2\n"
       1072 :                    ;;; @param R7 operand1
       1072 :                    ;;; @param R8 operand2
       1072 :                    ;;; @clobber R15
       1072 :                    comp:
       1072 : 87                         glo     R7
       1073 : 73                         stxd
       1074 : 97                         ghi     R7
       1075 : 73                         stxd                    ; save R7
       1076 : 88                         glo     R8
       1077 : 73                         stxd
       1078 : 98                         ghi     R8
       1079 : 73                         stxd                    ; save R8
       107A : D5                         sep     R5
       107B : 13 84                      dc      A(cmp16)
       107D : 3B 8F                      bl      comp_lt
       107F : 32 8B                      bz      comp_eq
       1081 : 33 87                      bge     comp_gt
       1083 : F8 3F                      ldi     T'?'
       1085 : 30 91                      br      comp_out
       1087 :                    comp_gt:
       1087 : F8 3E                      ldi     T'>'
       1089 : 30 91                      br      comp_out
       108B :                    comp_eq:
       108B : F8 3D                      ldi     T'='
       108D : 30 91                      br      comp_out
       108F :                    comp_lt:
       108F : F8 3C                      ldi     T'<'
       1091 :                    comp_out:
       1091 : AF                         plo     R15             ; save relation
       1092 : 60                         irx
       1093 : 72                         ldxa
       1094 : B8                         phi     R8
       1095 : 72                         ldxa
       1096 : A8                         plo     R8              ; restore R8
       1097 : 72                         ldxa
       1098 : B7                         phi     R7
       1099 : F0                         ldx
       109A : A7                         plo     R7              ; restore R7
       109B : 8F                         glo     R15
       109C : D5                         sep     R5
       109D : 10 38                      dc      A(expr)
       109F : 30 2B                      br      newline
       10A1 :
       10A1 :                    arith:
       10A1 : D5                         sep     R5
       10A2 : 13 45                      dc      A(set_R7)
       10A4 : 00 00                      dc      A(0)            ; vA=0
       10A6 : D5                         sep     R5
       10A7 : 13 4C                      dc      A(set_R8)
       10A9 : 92 A0                      dc      A(-28000)       ; vB=-28000
       10AB : F8 2D                      ldi     T'-'
       10AD : D5                         sep     R5
       10AE : 10 38                      dc      A(expr)
       10B0 : D5                         sep     R5              ; vA=-vB
       10B1 : 13 79                      dc      A(sub16)
       10B3 : D5                         sep     R5
       10B4 : 10 62                      dc      A(answer)       ; 28000
       10B6 :
       10B6 : D5                         sep     R5
       10B7 : 13 45                      dc      A(set_R7)
       10B9 : 00 00                      dc      A(0)            ; vA=0
       10BB : D5                         sep     R5
       10BC : 13 4C                      dc      A(set_R8)
       10BE : 6D 60                      dc      A(28000)        ; vB=28000
       10C0 : F8 2D                      ldi     T'-'
       10C2 : D5                         sep     R5
       10C3 : 10 38                      dc      A(expr)
       10C5 : D5                         sep     R5              ; vA=-vB
       10C6 : 13 79                      dc      A(sub16)
       10C8 : D5                         sep     R5
       10C9 : 10 62                      dc      A(answer)       ; -28000
       10CB :
       10CB : D5                         sep     R5
       10CC : 13 45                      dc      A(set_R7)
       10CE : 46 50                      dc      A(18000)        ; vA=18000
       10D0 : D5                         sep     R5
       10D1 : 13 4C                      dc      A(set_R8)
       10D3 : 6D 60                      dc      A(28000)        ; vB=28000
       10D5 : F8 2B                      ldi     T'+'
       10D7 : D5                         sep     R5
       10D8 : 10 38                      dc      A(expr)
       10DA : D5                         sep     R5              ; vA+=vB
       10DB : 13 6E                      dc      A(add16)
       10DD : D5                         sep     R5
       10DE : 10 62                      dc      A(answer)       ; -19536
       10E0 :
       10E0 : D5                         sep     R5
       10E1 : 13 45                      dc      A(set_R7)
       10E3 : 46 50                      dc      A(18000)        ; vA=18000
       10E5 : D5                         sep     R5
       10E6 : 13 4C                      dc      A(set_R8)
       10E8 : B9 B0                      dc      A(-18000)       ; vB=-18000
       10EA : F8 2B                      ldi     T'+'
       10EC : D5                         sep     R5
       10ED : 10 38                      dc      A(expr)
       10EF : D5                         sep     R5              ; vA+=vB
       10F0 : 13 6E                      dc      A(add16)
       10F2 : D5                         sep     R5
       10F3 : 10 62                      dc      A(answer)       ; 0
       10F5 :
       10F5 : D5                         sep     R5
       10F6 : 13 45                      dc      A(set_R7)
       10F8 : B9 B0                      dc      A(-18000)       ; vA=-18000
       10FA : D5                         sep     R5
       10FB : 13 4C                      dc      A(set_R8)
       10FD : B9 B0                      dc      A(-18000)       ; vB=-18000
       10FF : F8 2B                      ldi     T'+'
       1101 : D5                         sep     R5
       1102 : 10 38                      dc      A(expr)
       1104 : D5                         sep     R5              ; vA+=vB
       1105 : 13 6E                      dc      A(add16)
       1107 : D5                         sep     R5
       1108 : 10 62                      dc      A(answer)       ; 29536
       110A :
       110A : D5                         sep     R5
       110B : 13 45                      dc      A(set_R7)
       110D : 46 50                      dc      A(18000)        ; vA=18000
       110F : D5                         sep     R5
       1110 : 13 4C                      dc      A(set_R8)
       1112 : 92 A0                      dc      A(-28000)       ; vB=-28000
       1114 : F8 2D                      ldi     T'-'
       1116 : D5                         sep     R5
       1117 : 10 38                      dc      A(expr)
       1119 : D5                         sep     R5              ; vA-=vB
       111A : 13 79                      dc      A(sub16)
       111C : D5                         sep     R5
       111D : 10 62                      dc      A(answer)       ; -19536
       111F :
       111F : D5                         sep     R5
       1120 : 13 45                      dc      A(set_R7)
       1122 : 46 50                      dc      A(18000)        ; vA=18000
       1124 : D5                         sep     R5
       1125 : 13 4C                      dc      A(set_R8)
       1127 : B9 B0                      dc      A(-18000)       ; vB=-18000
       1129 : F8 2D                      ldi     T'-'
       112B : D5                         sep     R5
       112C : 10 38                      dc      A(expr)
       112E : D5                         sep     R5              ; vA-=vB
       112F : 13 79                      dc      A(sub16)
       1131 : D5                         sep     R5
       1132 : 10 62                      dc      A(answer)       ; 29536
       1134 :
       1134 : D5                         sep     R5
       1135 : 13 45                      dc      A(set_R7)
       1137 : 92 A0                      dc      A(-28000)       ; vA=-28000
       1139 : D5                         sep     R5
       113A : 13 4C                      dc      A(set_R8)
       113C : B9 B0                      dc      A(-18000)       ; vB=-18000
       113E : F8 2D                      ldi     T'-'
       1140 : D5                         sep     R5
       1141 : 10 38                      dc      A(expr)
       1143 : D5                         sep     R5              ; vA-=vB
       1144 : 13 79                      dc      A(sub16)
       1146 : D5                         sep     R5
       1147 : 10 62                      dc      A(answer)       ; -10000
       1149 :
       1149 : D5                         sep     R5
       114A : 13 45                      dc      A(set_R7)
       114C : 00 64                      dc      A(100)          ; vA=100
       114E : D5                         sep     R5
       114F : 13 4C                      dc      A(set_R8)
       1151 : 01 2C                      dc      A(300)          ; vB=300
       1153 : F8 2A                      ldi     T'*'
       1155 : D5                         sep     R5
       1156 : 10 38                      dc      A(expr)
       1158 : D5                         sep     R5              ; vA*=vB
       1159 : 13 D6                      dc      A(mul16)
       115B : D5                         sep     R5
       115C : 10 62                      dc      A(answer)       ; 30000
       115E :
       115E : D5                         sep     R5
       115F : 13 45                      dc      A(set_R7)
       1161 : 00 C8                      dc      A(200)          ; vA=200
       1163 : D5                         sep     R5
       1164 : 13 4C                      dc      A(set_R8)
       1166 : FF 9C                      dc      A(-100)         ; vB=-100
       1168 : F8 2A                      ldi     T'*'
       116A : D5                         sep     R5
       116B : 10 38                      dc      A(expr)
       116D : D5                         sep     R5              ; vA*=vB
       116E : 13 D6                      dc      A(mul16)
       1170 : D5                         sep     R5
       1171 : 10 62                      dc      A(answer)       ; -20000
       1173 :
       1173 : D5                         sep     R5
       1174 : 13 45                      dc      A(set_R7)
       1176 : 01 2C                      dc      A(300)          ; vA=300
       1178 : D5                         sep     R5
       1179 : 13 4C                      dc      A(set_R8)
       117B : FF 38                      dc      A(-200)         ; vB=-200
       117D : F8 2A                      ldi     T'*'
       117F : D5                         sep     R5
       1180 : 10 38                      dc      A(expr)
       1182 : D5                         sep     R5              ; vA*=vB
       1183 : 13 D6                      dc      A(mul16)
       1185 : D5                         sep     R5
       1186 : 10 62                      dc      A(answer)       ; 5536
       1188 :
       1188 : D5                         sep     R5
       1189 : 13 45                      dc      A(set_R7)
       118B : FF 9C                      dc      A(-100)         ; vA=-100
       118D : D5                         sep     R5
       118E : 13 4C                      dc      A(set_R8)
       1190 : 01 2C                      dc      A(300)          ; vB=300
       1192 : F8 2A                      ldi     T'*'
       1194 : D5                         sep     R5
       1195 : 10 38                      dc      A(expr)
       1197 : D5                         sep     R5              ; vA*=vB
       1198 : 13 D6                      dc      A(mul16)
       119A : D5                         sep     R5
       119B : 10 62                      dc      A(answer)       ; -30000
       119D :
       119D : D5                         sep     R5
       119E : 13 45                      dc      A(set_R7)
       11A0 : FF 38                      dc      A(-200)         ; vA=-200
       11A2 : D5                         sep     R5
       11A3 : 13 4C                      dc      A(set_R8)
       11A5 : FF 9C                      dc      A(-100)         ; vB=-100
       11A7 : F8 2A                      ldi     T'*'
       11A9 : D5                         sep     R5
       11AA : 10 38                      dc      A(expr)
       11AC : D5                         sep     R5              ; vA*=vB
       11AD : 13 D6                      dc      A(mul16)
       11AF : D5                         sep     R5
       11B0 : 10 62                      dc      A(answer)       ; 20000
       11B2 :
       11B2 : D5                         sep     R5
       11B3 : 13 45                      dc      A(set_R7)
       11B5 : 75 30                      dc      A(30000)        ; vA=30000
       11B7 : D5                         sep     R5
       11B8 : 13 4C                      dc      A(set_R8)
       11BA : 00 64                      dc      A(100)          ; vB=100
       11BC : F8 2F                      ldi     T'/'
       11BE : D5                         sep     R5
       11BF : 10 38                      dc      A(expr)
       11C1 : D5                         sep     R5              ; vA/=vB
       11C2 : 14 63                      dc      A(div16)
       11C4 : D5                         sep     R5
       11C5 : 10 62                      dc      A(answer)       ; 30
       11C7 :
       11C7 : D5                         sep     R5
       11C8 : 13 45                      dc      A(set_R7)
       11CA : FF 38                      dc      A(-200)         ; vA=-200
       11CC : D5                         sep     R5
       11CD : 13 4C                      dc      A(set_R8)
       11CF : 00 64                      dc      A(100)          ; vB=100
       11D1 : F8 2F                      ldi     T'/'
       11D3 : D5                         sep     R5
       11D4 : 10 38                      dc      A(expr)
       11D6 : D5                         sep     R5              ; vA/=vB
       11D7 : 14 63                      dc      A(div16)
       11D9 : D5                         sep     R5
       11DA : 10 62                      dc      A(answer)       ; -2
       11DC :
       11DC : D5                         sep     R5
       11DD : 13 45                      dc      A(set_R7)
       11DF : 8A D0                      dc      A(-30000)       ; vA=-30000
       11E1 : D5                         sep     R5
       11E2 : 13 4C                      dc      A(set_R8)
       11E4 : FF 38                      dc      A(-200)         ; vB=-200
       11E6 : F8 2F                      ldi     T'/'
       11E8 : D5                         sep     R5
       11E9 : 10 38                      dc      A(expr)
       11EB : D5                         sep     R5              ; vA/=vB
       11EC : 14 63                      dc      A(div16)
       11EE : D5                         sep     R5
       11EF : 10 62                      dc      A(answer)       ; 150
       11F1 :
       11F1 : D5                         sep     R5
       11F2 : 13 45                      dc      A(set_R7)
       11F4 : 8A D0                      dc      A(-30000)       ; vA=-30000
       11F6 : D5                         sep     R5
       11F7 : 13 4C                      dc      A(set_R8)
       11F9 : 00 4E                      dc      A(78)           ; vB=78
       11FB : F8 2F                      ldi     T'/'
       11FD : D5                         sep     R5
       11FE : 10 38                      dc      A(expr)
       1200 : D5                         sep     R5              ; vA/=vB
       1201 : 14 63                      dc      A(div16)
       1203 : D5                         sep     R5
       1204 : 10 62                      dc      A(answer)       ; -384
       1206 :
       1206 : D5                         sep     R5
       1207 : 13 45                      dc      A(set_R7)
       1209 : 13 88                      dc      A(5000)         ; vA=5000
       120B : D5                         sep     R5
       120C : 13 4C                      dc      A(set_R8)
       120E : 0F A0                      dc      A(4000)         ; vB=4000
       1210 : D5                         sep     R5
       1211 : 10 72                      dc      A(comp)
       1213 :
       1213 : D5                         sep     R5
       1214 : 13 45                      dc      A(set_R7)
       1216 : 13 88                      dc      A(5000)         ; vA=5000
       1218 : D5                         sep     R5
       1219 : 13 4C                      dc      A(set_R8)
       121B : 13 88                      dc      A(5000)         ; vB=5000
       121D : D5                         sep     R5
       121E : 10 72                      dc      A(comp)
       1220 :
       1220 : D5                         sep     R5
       1221 : 13 45                      dc      A(set_R7)
       1223 : 0F A0                      dc      A(4000)         ; vA=4000
       1225 : D5                         sep     R5
       1226 : 13 4C                      dc      A(set_R8)
       1228 : 13 88                      dc      A(5000)         ; vB=5000
       122A : D5                         sep     R5
       122B : 10 72                      dc      A(comp)
       122D :
       122D : D5                         sep     R5
       122E : 13 45                      dc      A(set_R7)
       1230 : EC 78                      dc      A(-5000)        ; vA=-5000
       1232 : D5                         sep     R5
       1233 : 13 4C                      dc      A(set_R8)
       1235 : F0 60                      dc      A(-4000)        ; vB=-4000
       1237 : D5                         sep     R5
       1238 : 10 72                      dc      A(comp)
       123A :
       123A : D5                         sep     R5
       123B : 13 45                      dc      A(set_R7)
       123D : EC 78                      dc      A(-5000)        ; vA=-5000
       123F : D5                         sep     R5
       1240 : 13 4C                      dc      A(set_R8)
       1242 : EC 78                      dc      A(-5000)        ; vB=-5000
       1244 : D5                         sep     R5
       1245 : 10 72                      dc      A(comp)
       1247 :
       1247 : D5                         sep     R5
       1248 : 13 45                      dc      A(set_R7)
       124A : F0 60                      dc      A(-4000)        ; vA=-4000
       124C : D5                         sep     R5
       124D : 13 4C                      dc      A(set_R8)
       124F : EC 78                      dc      A(-5000)        ; vB=-5000
       1251 : D5                         sep     R5
       1252 : 10 72                      dc      A(comp)
       1254 :
       1254 : D5                         sep     R5
       1255 : 13 45                      dc      A(set_R7)
       1257 : 7F BC                      dc      A(32700)        ; vA=32700
       1259 : D5                         sep     R5
       125A : 13 4C                      dc      A(set_R8)
       125C : 7F 58                      dc      A(32600)        ; vB=32600
       125E : D5                         sep     R5
       125F : 10 72                      dc      A(comp)
       1261 :
       1261 : D5                         sep     R5
       1262 : 13 45                      dc      A(set_R7)
       1264 : 7F BC                      dc      A(32700)        ; vA=32700
       1266 : D5                         sep     R5
       1267 : 13 4C                      dc      A(set_R8)
       1269 : 7F BC                      dc      A(32700)        ; vB=32700
       126B : D5                         sep     R5
       126C : 10 72                      dc      A(comp)
       126E :
       126E : D5                         sep     R5
       126F : 13 45                      dc      A(set_R7)
       1271 : 7F 58                      dc      A(32600)        ; vA=32600
       1273 : D5                         sep     R5
       1274 : 13 4C                      dc      A(set_R8)
       1276 : 7F BC                      dc      A(32700)        ; vB=32700
       1278 : D5                         sep     R5
       1279 : 10 72                      dc      A(comp)
       127B :
       127B : D5                         sep     R5
       127C : 13 45                      dc      A(set_R7)
       127E : 80 44                      dc      A(-32700)       ; vA=-32700
       1280 : D5                         sep     R5
       1281 : 13 4C                      dc      A(set_R8)
       1283 : 80 A8                      dc      A(-32600)       ; vB=-32600
       1285 : D5                         sep     R5
       1286 : 10 72                      dc      A(comp)
       1288 :
       1288 : D5                         sep     R5
       1289 : 13 45                      dc      A(set_R7)
       128B : 80 44                      dc      A(-32700)       ; vA=-32700
       128D : D5                         sep     R5
       128E : 13 4C                      dc      A(set_R8)
       1290 : 80 44                      dc      A(-32700)       ; vB=-32700
       1292 : D5                         sep     R5
       1293 : 10 72                      dc      A(comp)
       1295 :
       1295 : D5                         sep     R5
       1296 : 13 45                      dc      A(set_R7)
       1298 : 80 A8                      dc      A(-32600)       ; vA=-32600
       129A : D5                         sep     R5
       129B : 13 4C                      dc      A(set_R8)
       129D : 80 44                      dc      A(-32700)       ; vB=-32700
       129F : D5                         sep     R5
       12A0 : 10 72                      dc      A(comp)
       12A2 :
       12A2 : D5                         sep     R5
       12A3 : 13 45                      dc      A(set_R7)
       12A5 : 46 50                      dc      A(18000)        ; vA=18000
       12A7 : D5                         sep     R5
       12A8 : 13 4C                      dc      A(set_R8)
       12AA : 92 A0                      dc      A(-28000)       ; vB=-28000
       12AC : D5                         sep     R5
       12AD : 10 72                      dc      A(comp)
       12AF :
       12AF : D5                         sep     R5
       12B0 : 13 45                      dc      A(set_R7)
       12B2 : 92 A0                      dc      A(-28000)       ; vA=-28000
       12B4 : D5                         sep     R5
       12B5 : 13 4C                      dc      A(set_R8)
       12B7 : 92 A0                      dc      A(-28000)       ; vB=-28000
       12B9 : D5                         sep     R5
       12BA : 10 72                      dc      A(comp)
       12BC :
       12BC : D5                         sep     R5
       12BD : 13 45                      dc      A(set_R7)
       12BF : 92 A0                      dc      A(-28000)       ; vA=-28000
       12C1 : D5                         sep     R5
       12C2 : 13 4C                      dc      A(set_R8)
       12C4 : 46 50                      dc      A(18000)        ; vB=18000
       12C6 : D5                         sep     R5
       12C7 : 10 72                      dc      A(comp)
       12C9 :
       12C9 : D6                         sep     R6              ; return
       12CA :
       12CA :                            include "arith.inc"
(1)    12CA :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    12CA :                            cpu     1802
(1)    12CA :
(1)    12CA :                    ;;; Print unsigned 16-bit integer as decimal
(1)    12CA :                    ;;; @param R7 value
(1)    12CA :                    ;;; @clobber D R7 R8 R15
(1)    12CA :                    print_uint16:
(1)    12CA : 97                         ghi     R7
(1)    12CB : 3A D0                      bnz     print_uint16_loop
(1)    12CD : 87                         glo     R7
(1)    12CE : 32 E7                      bz      print_uint16_zero
(1)    12D0 :                    print_uint16_loop:
(1)    12D0 : 97                         ghi     R7
(1)    12D1 : 3A D7                      bnz     print_uint16_digit
(1)    12D3 : 87                         glo     R7
(1)    12D4 : 3A D7                      bnz     print_uint16_digit
(1)    12D6 : D6                         sep     R6              ; return if value=0
(1)    12D7 :                    print_uint16_digit:
(1)    12D7 : F8 00                      ldi     0
(1)    12D9 : B8                         phi     R8
(1)    12DA : F8 0A                      ldi     10
(1)    12DC : A8                         plo     R8              ; divisor=10
(1)    12DD : D5                         sep     R5
(1)    12DE : 14 0A                      dc      A(udiv16)       ; call udiv16
(1)    12E0 : 88                         glo     R8
(1)    12E1 : 73                         stxd                    ; push remainder
(1)    12E2 : D5                         sep     R5
(1)    12E3 : 12 D0                      dc      A(print_uint16_loop)
(1)    12E5 : 12                         inc     R2
(1)    12E6 : 02                         ldn     R2              ; pop remainder
(1)    12E7 :                    print_uint16_zero:
(1)    12E7 : FC 30                      adi     T'0'
(1)    12E9 : C0 10 10                   br      putchar
(1)    12EC :
(1)    12EC :                    ;;; Print signed 16-bit integer as decimal
(1)    12EC :                    ;;; @param R7 value
(1)    12EC :                    ;;; @clobber D R15
(1)    12EC :                    print_int16:
(1)    12EC : 88                         glo     R8
(1)    12ED : 73                         stxd
(1)    12EE : 98                         ghi     R8
(1)    12EF : 73                         stxd                    ; save R8
(1)    12F0 : 87                         glo     R7
(1)    12F1 : 73                         stxd
(1)    12F2 : 97                         ghi     R7
(1)    12F3 : 73                         stxd                    ; save R7
(1)    12F4 : FA 80                      ani     X'80'
(1)    12F6 : C2 13 07                   bz      print_int16_print
(1)    12F9 : F8 2D                      ldi     T'-'
(1)    12FB : D5                         sep     R5
(1)    12FC : 10 10                      dc      A(putchar)      ; print '-'
(1)    12FE : 97                         ghi     R7
(1)    12FF : FB FF                      xri     X'FF'
(1)    1301 : B7                         phi     R7
(1)    1302 : 87                         glo     R7
(1)    1303 : FB FF                      xri     X'FF'
(1)    1305 : A7                         plo     R7
(1)    1306 : 17                         inc     R7              ; negate value
(1)    1307 :                    print_int16_print:
(1)    1307 : D5                         sep     R5
(1)    1308 : 12 CA                      dc      A(print_uint16)
(1)    130A : 60                         irx
(1)    130B : 72                         ldxa
(1)    130C : B7                         phi     R7
(1)    130D : 72                         ldxa
(1)    130E : A7                         plo     R7              ; restore R7
(1)    130F : 72                         ldxa
(1)    1310 : B8                         phi     R8
(1)    1311 : F0                         ldx
(1)    1312 : A8                         plo     R8              ; restore R8
(1)    1313 : D6                         sep     R6
(1)    1314 :
(1)    1314 :                    ;;; Store R7 to variable
(1)    1314 :                    ;;;   SEP  R5
(1)    1314 :                    ;;;   DC   A(store_R7)
(1)    1314 :                    ;;;   DC   A(variable)
(1)    1314 :                    ;;; @clobber D
(1)    1314 :                    store_R7:
(1)    1314 : 88                         glo     R8
(1)    1315 : 73                         stxd
(1)    1316 : 98                         ghi     R8
(1)    1317 : 73                         stxd                    ; save R8
(1)    1318 : E4                         sex     R4
(1)    1319 : 72                         ldxa
(1)    131A : B8                         phi     R8
(1)    131B : 72                         ldxa
(1)    131C : A8                         plo     R8              ; R8=&valiable
(1)    131D : 97                         ghi     R7
(1)    131E : 58                         str     R8
(1)    131F : 18                         inc     R8
(1)    1320 : 87                         glo     R7
(1)    1321 : 58                         str     R8
(1)    1322 : E2                         sex     R2
(1)    1323 : 60                         irx
(1)    1324 : 72                         ldxa
(1)    1325 : B8                         phi     R8
(1)    1326 : F0                         ldx
(1)    1327 : A8                         plo     R8              ; restore R8
(1)    1328 : D6                         sep     R6
(1)    1329 :
(1)    1329 :                    ;;; Load variable to R7
(1)    1329 :                    ;;;   SEP  R5
(1)    1329 :                    ;;;   DC   A(load_R7)
(1)    1329 :                    ;;;   DC   A(variable)
(1)    1329 :                    ;;; @return R7 variable
(1)    1329 :                    ;;; @clobber D R15
(1)    1329 :                    load_R7:
(1)    1329 : E4                         sex     R4
(1)    132A : 72                         ldxa
(1)    132B : B7                         phi     R7
(1)    132C : 72                         ldxa
(1)    132D : A7                         plo     R7
(1)    132E : 07                         ldn     R7
(1)    132F : AF                         plo     R15
(1)    1330 : 17                         inc     R7
(1)    1331 : 07                         ldn     R7
(1)    1332 : A7                         plo     R7
(1)    1333 : 8F                         glo     R15
(1)    1334 : B7                         phi     R7
(1)    1335 : E2                         sex     R2
(1)    1336 : D6                         sep     R6
(1)    1337 :
(1)    1337 :                    ;;; Load variable to R8
(1)    1337 :                    ;;;   SEP  R5
(1)    1337 :                    ;;;   DC   A(load_R8)
(1)    1337 :                    ;;;   DC   A(variable)
(1)    1337 :                    ;;; @clobber R15
(1)    1337 :                    load_R8:
(1)    1337 : E4                         sex     R4
(1)    1338 : 72                         ldxa
(1)    1339 : B8                         phi     R8
(1)    133A : 72                         ldxa
(1)    133B : A8                         plo     R8
(1)    133C : 08                         ldn     R8
(1)    133D : AF                         plo     R15
(1)    133E : 18                         inc     R8
(1)    133F : 08                         ldn     R8
(1)    1340 : A8                         plo     R8
(1)    1341 : 8F                         glo     R15
(1)    1342 : B8                         phi     R8
(1)    1343 : E2                         sex     R2
(1)    1344 : D6                         sep     R6
(1)    1345 :
(1)    1345 :                    ;;; Set constant to R7
(1)    1345 :                    ;;;   SEP  R5
(1)    1345 :                    ;;;   DC   A(set_R7)
(1)    1345 :                    ;;;   DC   A(constant)
(1)    1345 :                    ;;; @return R7 constant
(1)    1345 :                    ;;; @clobber D
(1)    1345 :                    set_R7:
(1)    1345 : E4                         sex     R4
(1)    1346 : 72                         ldxa
(1)    1347 : B7                         phi     R7
(1)    1348 : 72                         ldxa
(1)    1349 : A7                         plo     R7
(1)    134A : E2                         sex     R2
(1)    134B : D6                         sep     R6
(1)    134C :
(1)    134C :                    ;;; Set constant to R8
(1)    134C :                    ;;;   SEP  R5
(1)    134C :                    ;;;   DC   A(set_R8)
(1)    134C :                    ;;;   DC   A(variable)
(1)    134C :                    ;;; @clobber R15
(1)    134C :                    set_R8:
(1)    134C : E4                         sex     R4
(1)    134D : 72                         ldxa
(1)    134E : B8                         phi     R8
(1)    134F : 72                         ldxa
(1)    1350 : A8                         plo     R8
(1)    1351 : E2                         sex     R2
(1)    1352 : D6                         sep     R6
(1)    1353 :
(1)    1353 :                    ;;; Increment variable
(1)    1353 :                    ;;;   SEP  R5
(1)    1353 :                    ;;;   DC   A(inc16)
(1)    1353 :                    ;;;   DC   A(variable)
(1)    1353 :                    ;;; @return R7 variable
(1)    1353 :                    ;;; @clobber D R15
(1)    1353 :                    inc16:
(1)    1353 : 88                         glo     R8
(1)    1354 : 73                         stxd
(1)    1355 : 98                         ghi     R8
(1)    1356 : 73                         stxd                    ; save R8
(1)    1357 : E4                         sex     R4
(1)    1358 : 72                         ldxa
(1)    1359 : B8                         phi     R8
(1)    135A : 72                         ldxa
(1)    135B : A8                         plo     R8
(1)    135C : 08                         ldn     R8
(1)    135D : B7                         phi     R7
(1)    135E : 18                         inc     R8
(1)    135F : 08                         ldn     R8
(1)    1360 : A7                         plo     R7
(1)    1361 : 17                         inc     R7
(1)    1362 : 87                         glo     R7
(1)    1363 : 58                         str     R8
(1)    1364 : 97                         ghi     R7
(1)    1365 : 28                         dec     R8
(1)    1366 : 58                         str     R8
(1)    1367 : E2                         sex     R2
(1)    1368 : 60                         irx
(1)    1369 : 72                         ldxa
(1)    136A : B8                         phi     R8
(1)    136B : F0                         ldx
(1)    136C : A8                         plo     R8              ; restore R8
(1)    136D : D6                         sep     R6
(1)    136E :
(1)    136E :                    ;;; Signed addition: summand += addend
(1)    136E :                    ;;; @param R7 summand
(1)    136E :                    ;;; @param R8 addend
(1)    136E :                    ;;; @return R7 summand + addend
(1)    136E :                    ;;;   SEP R5
(1)    136E :                    ;;;   DC  A(add16)
(1)    136E :                    ;;; @clobber D
(1)    136E :                    add16:
(1)    136E : 88                         glo     R8
(1)    136F : 52                         str     R2
(1)    1370 : 87                         glo     R7
(1)    1371 : F4                         add
(1)    1372 : A7                         plo     R7
(1)    1373 : 98                         ghi     R8
(1)    1374 : 52                         str     R2
(1)    1375 : 97                         ghi     R7
(1)    1376 : 74                         adc
(1)    1377 : B7                         phi     R7
(1)    1378 : D6                         sep     R6
(1)    1379 :
(1)    1379 :                    ;;; Singed subtraction: minuend -= subtrahend
(1)    1379 :                    ;;; @param R7 minuend
(1)    1379 :                    ;;; @param R8 subtrahend
(1)    1379 :                    ;;; @return R7 minuend - subtrahend
(1)    1379 :                    ;;;   SEP R5
(1)    1379 :                    ;;;   DC  A(sub16)
(1)    1379 :                    sub16:
(1)    1379 : 88                         glo     R8
(1)    137A : 52                         str     R2
(1)    137B : 87                         glo     R7
(1)    137C : F7                         sm
(1)    137D : A7                         plo     R7
(1)    137E : 98                         ghi     R8
(1)    137F : 52                         str     R2
(1)    1380 : 97                         ghi     R7
(1)    1381 : 77                         smb
(1)    1382 : B7                         phi     R7
(1)    1383 : D6                         sep     R6
(1)    1384 :
(1)    1384 :                    ;;; Signed comparison: minuend - subtrahend
(1)    1384 :                    ;;; @param R7 minuend
(1)    1384 :                    ;;; @param R8 subtrahend
(1)    1384 :                    ;;; @return D=0 DF=1 (minuend==subtrahend); BZ
(1)    1384 :                    ;;;         D=1 DF=1 (minuend>subtrahend);  BGE
(1)    1384 :                    ;;;         D=1 DF=0 (minuend<subtrahend);  BL
(1)    1384 :                    ;;; @clobber R7 R8
(1)    1384 :                    ;;; result = minuend - subtrahend
(1)    1384 :                    ;;; Z=(result.1 | result.0) == 0
(1)    1384 :                    ;;; N=(result.1 & 0x80) != 0
(1)    1384 :                    ;;; V=((minuend.1 ^ subtrahend.1) & (result.1 ^ minuend.1) & 0x80) != 0
(1)    1384 :                    ;;; LT=N ^ V
(1)    1384 :                    cmp16:
(1)    1384 : 88                         glo     R8              ; D=subtrahend.0
(1)    1385 : 52                         str     R2              ; stack top=subtrahend.0
(1)    1386 : 87                         glo     R7              ; D=minuend.0
(1)    1387 : F7                         sm                      ; D=minuend.0=subtrahend.0
(1)    1388 : A7                         plo     R7              ; R7.0=result.0
(1)    1389 : 98                         ghi     R8              ; D=subtrahend.1
(1)    138A : 52                         str     R2              ; stack top=subtrahend.1
(1)    138B : 97                         ghi     R7              ; D=minuend.1
(1)    138C : F3                         xor                     ; D=minuend.1^subtrahend.1
(1)    138D : A8                         plo     R8              ; R8.0=minuend.1^subtrahend.1
(1)    138E : 97                         ghi     R7              ; D=minuend.1
(1)    138F : 77                         smb                     ; D=minuend.1=subtrahend.1
(1)    1390 : B8                         phi     R8              ; R8.1=result.1
(1)    1391 : 3A 9A                      bnz     cmp16_neq       ; branch if result.1!=0
(1)    1393 : 87                         glo     R7              ; D=result.0
(1)    1394 : 3A 9A                      bnz     cmp16_neq       ; branch if result.0!=-
(1)    1396 : F8 01                      ldi     1
(1)    1398 : F6                         shr
(1)    1399 : D6                         sep     R6              ; return with D=0, DF=1
(1)    139A :                    cmp16_neq:
(1)    139A : 98                         ghi     R8              ; D=result.1
(1)    139B : 52                         str     R2
(1)    139C : 97                         ghi     R7              ; D=minuend.1
(1)    139D : F3                         xor                     ; D=result.1^minuend.1
(1)    139E : 52                         str     R2              ; stack top=result.1^minuend.1
(1)    139F : 88                         glo     R8              ; D=minuend.1^subtrahend.1
(1)    13A0 : F2                         and                     ; D=(minuend.1^subtrahend.1)&(result.1^minuend.1)
(1)    13A1 : 52                         str     R2              ; stack top=V
(1)    13A2 : 98                         ghi     R8              ; D=result.1
(1)    13A3 : F3                         xor                     ; D=N^V
(1)    13A4 : FB 80                      xri     X'80'           ; D=~(N^V)
(1)    13A6 : FE                         shl                     ; DF=~(N^V)
(1)    13A7 : F8 01                      ldi     1
(1)    13A9 : D6                         sep     R6              ; return with D=1
(1)    13AA :
(1)    13AA :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)    13AA :                    ;;; @param R7 multiplicand
(1)    13AA :                    ;;; @param R8 multiplier
(1)    13AA :                    ;;; @return R7 result
(1)    13AA :                    ;;; @clobber D R7 R8 R15
(1)    13AA :                    umul16:
(1)    13AA : F8 00                      ldi     0
(1)    13AC : BF                         phi     R15
(1)    13AD : AF                         plo     R15             ; R15=result
(1)    13AE : 30 CB                      br      umul16_check
(1)    13B0 :                    umul16_loop:
(1)    13B0 : 88                         glo     R8
(1)    13B1 : FA 01                      ani     1
(1)    13B3 : 32 BF                      bz      umul16_sr       ; lsb(multiplier)==0
(1)    13B5 : 87                         glo     R7
(1)    13B6 : 52                         str     R2              ; stack top=multiplicand.0
(1)    13B7 : 8F                         glo     R15
(1)    13B8 : F4                         add
(1)    13B9 : AF                         plo     R15
(1)    13BA : 97                         ghi     R7
(1)    13BB : 52                         str     R2              ; stack top=multiplicand.1
(1)    13BC : 9F                         ghi     R15
(1)    13BD : 74                         adc
(1)    13BE : BF                         phi     R15             ; result += multiplicand
(1)    13BF :                    umul16_sr:
(1)    13BF : 98                         ghi     R8
(1)    13C0 : F6                         shr
(1)    13C1 : B8                         phi     R8
(1)    13C2 : 88                         glo     R8
(1)    13C3 : 76                         shrc
(1)    13C4 : A8                         plo     R8              ; multiplier >>= 1
(1)    13C5 : 87                         glo     R7
(1)    13C6 : FE                         shl
(1)    13C7 : A7                         plo     R7
(1)    13C8 : 97                         ghi     R7
(1)    13C9 : 7E                         shlc
(1)    13CA : B7                         phi     R7              ; multiplicand <<= 1
(1)    13CB :                    umul16_check:
(1)    13CB : 98                         ghi     R8
(1)    13CC : 3A B0                      bnz     umul16_loop     ; while multiplier != 0
(1)    13CE : 88                         glo     R8
(1)    13CF : 3A B0                      bnz     umul16_loop     ; while multiplier != 0
(1)    13D1 : 9F                         ghi     R15
(1)    13D2 : B7                         phi     R7
(1)    13D3 : 8F                         glo     R15
(1)    13D4 : A7                         plo     R7              ; R7=result
(1)    13D5 : D6                         sep     R6              ; return
(1)    13D6 :
(1)    13D6 :                    ;;; Signed multiplication: multiplicand *= multiplier
(1)    13D6 :                    ;;; @param R7 multiplicand
(1)    13D6 :                    ;;; @param R8 multiplier
(1)    13D6 :                    ;;; @return R7 multiplicand * multiplier
(1)    13D6 :                    ;;;   SEP R5
(1)    13D6 :                    ;;;   DC  A(mul16)
(1)    13D6 :                    ;;; @clobber R8 R15
(1)    13D6 :                    mul16:
(1)    13D6 : 98                         ghi     R8
(1)    13D7 : 52                         str     R2
(1)    13D8 : 97                         ghi     R7
(1)    13D9 : F3                         xor
(1)    13DA : 73                         stxd                    ; push sign
(1)    13DB : 98                         ghi     R8
(1)    13DC : FA 80                      ani     X'80'
(1)    13DE : 32 E9                      bz      mul16_multiplicand
(1)    13E0 : 98                         ghi     R8
(1)    13E1 : FB FF                      xri     X'FF'
(1)    13E3 : B8                         phi     R8
(1)    13E4 : 88                         glo     R8
(1)    13E5 : FB FF                      xri     X'FF'
(1)    13E7 : A8                         plo     R8
(1)    13E8 : 18                         inc     R8              ; negate multiplier
(1)    13E9 :                    mul16_multiplicand:
(1)    13E9 : 97                         ghi     R7
(1)    13EA : FA 80                      ani     X'80'
(1)    13EC : 32 F7                      bz      mul16_multiply
(1)    13EE : 97                         ghi     R7
(1)    13EF : FB FF                      xri     X'FF'
(1)    13F1 : B7                         phi     R7
(1)    13F2 : 87                         glo     R7
(1)    13F3 : FB FF                      xri     X'FF'
(1)    13F5 : A7                         plo     R7
(1)    13F6 : 17                         inc     R7              ; negate multiplicand
(1)    13F7 :                    mul16_multiply:
(1)    13F7 : D5                         sep     R5
(1)    13F8 : 13 AA                      dc      A(umul16)       ; call umul16
(1)    13FA : 60                         irx
(1)    13FB : F0                         ldx                     ; sign
(1)    13FC : FA 80                      ani     X'80'
(1)    13FE : 32 09                      bz      mul16_return
(1)    1400 : 97                         ghi     R7
(1)    1401 : FB FF                      xri     X'FF'
(1)    1403 : B7                         phi     R7
(1)    1404 : 87                         glo     R7
(1)    1405 : FB FF                      xri     X'FF'
(1)    1407 : A7                         plo     R7
(1)    1408 : 17                         inc     R7              ; negate result
(1)    1409 :                    mul16_return:
(1)    1409 : D6                         sep     R6
(1)    140A :
(1)    140A :                    ;;; Unsigned division: dividend / divisor = quotient ... remainder
(1)    140A :                    ;;; @praram R7 dividend
(1)    140A :                    ;;; @praram R8 divisor
(1)    140A :                    ;;; @return R7 quotient
(1)    140A :                    ;;; @return R8 remainder
(1)    140A :                    ;;; @clobber R7 R8 R15
(1)    140A :                    udiv16:
(1)    140A : 98                         ghi     R8
(1)    140B : 3A 11                      bnz     udiv16_calc
(1)    140D : 88                         glo     R8
(1)    140E : 3A 11                      bnz     udiv16_calc
(1)    1410 : D6                         sep     R6              ; return divide by zero
(1)    1411 :                    udiv16_calc:
(1)    1411 : 89                         glo     R9
(1)    1412 : 73                         stxd
(1)    1413 : 99                         ghi     R9
(1)    1414 : 73                         stxd                    ; save R9
(1)    1415 : F8 01                      ldi     1
(1)    1417 : AF                         plo     R15             ; R15.0=bits
(1)    1418 : 30 21                      br      udiv16_prep
(1)    141A :                    udiv16_prep_loop:
(1)    141A : 88                         glo     R8
(1)    141B : FE                         shl
(1)    141C : A8                         plo     R8
(1)    141D : 98                         ghi     R8
(1)    141E : 7E                         shlc
(1)    141F : B8                         phi     R8              ; divisor <<= 1
(1)    1420 : 1F                         inc     R15             ; ++bits
(1)    1421 :                    udiv16_prep:
(1)    1421 : 98                         ghi     R8
(1)    1422 : FA 80                      ani     X'80'
(1)    1424 : 32 1A                      bz      udiv16_prep_loop ; while msb(divisor) == 0
(1)    1426 : 97                         ghi     R7
(1)    1427 : B9                         phi     R9
(1)    1428 : 87                         glo     R7
(1)    1429 : A9                         plo     R9              ; R9=dividend
(1)    142A : F8 00                      ldi     0
(1)    142C : B7                         phi     R7
(1)    142D : A7                         plo     R7              ; R7=quotient
(1)    142E : 30 3C                      br      udiv16_enter_loop
(1)    1430 :                    udiv16_loop:
(1)    1430 : 98                         ghi     R8
(1)    1431 : F6                         shr
(1)    1432 : B8                         phi     R8
(1)    1433 : 88                         glo     R8
(1)    1434 : 76                         shrc
(1)    1435 : A8                         plo     R8              ; divisor >>= 1
(1)    1436 : 87                         glo     R7
(1)    1437 : FE                         shl
(1)    1438 : A7                         plo     R7
(1)    1439 : 97                         ghi     R7
(1)    143A : 7E                         shlc
(1)    143B : B7                         phi     R7              ; quotient <<= 1
(1)    143C :                    udiv16_enter_loop:
(1)    143C : 88                         glo     R8
(1)    143D : 52                         str     R2
(1)    143E : 89                         glo     R9
(1)    143F : F7                         sm
(1)    1440 : A9                         plo     R9
(1)    1441 : 98                         ghi     R8
(1)    1442 : 52                         str     R2
(1)    1443 : 99                         ghi     R9
(1)    1444 : 77                         smb
(1)    1445 : B9                         phi     R9              ; dividend-=divisor
(1)    1446 : 3B 4B                      bm      udiv16_readd    ; branch if dividend < 0
(1)    1448 : 17                         inc     R7              ; quotient += 1
(1)    1449 : 30 55                      br      udiv16_next
(1)    144B :                    udiv16_readd:
(1)    144B : 88                         glo     R8
(1)    144C : 52                         str     R2
(1)    144D : 89                         glo     R9
(1)    144E : F4                         add
(1)    144F : A9                         plo     R9
(1)    1450 : 98                         ghi     R8
(1)    1451 : 52                         str     R2
(1)    1452 : 99                         ghi     R9
(1)    1453 : 74                         adc
(1)    1454 : B9                         phi     R9              ; dividend+=divisor
(1)    1455 :                    udiv16_next:
(1)    1455 : 2F                         dec     R15
(1)    1456 : 8F                         glo     R15
(1)    1457 : 3A 30                      bnz     udiv16_loop     ; while bits != 0
(1)    1459 : 99                         ghi     R9
(1)    145A : B8                         phi     R8
(1)    145B : 89                         glo     R9
(1)    145C : A8                         plo     R8              ; R8=remainder
(1)    145D : 60                         irx
(1)    145E : 72                         ldxa
(1)    145F : B9                         phi     R9
(1)    1460 : F0                         ldx
(1)    1461 : A9                         plo     R9              ; restore R9
(1)    1462 : D6                         sep     R6              ; return
(1)    1463 :
(1)    1463 :                    ;;; Signed division: dividend / divisor = quotient ... remainder
(1)    1463 :                    ;;; @param R7 dividend
(1)    1463 :                    ;;; @param R8 divisor
(1)    1463 :                    ;;; @return R7 quotient
(1)    1463 :                    ;;; @return R8 remainder
(1)    1463 :                    ;;;   SEP R5
(1)    1463 :                    ;;;   DC  A(div16)
(1)    1463 :                    ;;; @clobber R15
(1)    1463 :                    div16:
(1)    1463 : 98                         ghi     R8
(1)    1464 : 52                         str     R2
(1)    1465 : 97                         ghi     R7
(1)    1466 : F3                         xor
(1)    1467 : 73                         stxd                    ; push sign
(1)    1468 : 98                         ghi     R8
(1)    1469 : FA 80                      ani     X'80'
(1)    146B : 32 76                      bz      div16_dividend
(1)    146D : 98                         ghi     R8
(1)    146E : FB FF                      xri     X'FF'
(1)    1470 : B8                         phi     R8
(1)    1471 : 88                         glo     R8
(1)    1472 : FB FF                      xri     X'FF'
(1)    1474 : A8                         plo     R8
(1)    1475 : 18                         inc     R8              ; negate divisor
(1)    1476 :                    div16_dividend:
(1)    1476 : 97                         ghi     R7              ; R7=dividend
(1)    1477 : FA 80                      ani     X'80'
(1)    1479 : 32 84                      bz      div16_divide
(1)    147B : 97                         ghi     R7
(1)    147C : FB FF                      xri     X'FF'
(1)    147E : B7                         phi     R7
(1)    147F : 87                         glo     R7
(1)    1480 : FB FF                      xri     X'FF'
(1)    1482 : A7                         plo     R7
(1)    1483 : 17                         inc     R7              ; negate dividend
(1)    1484 :                    div16_divide:
(1)    1484 : D5                         sep     R5
(1)    1485 : 14 0A                      dc      A(udiv16)       ; call udiv16
(1)    1487 : 60                         irx
(1)    1488 : F0                         ldx                     ; pop sign
(1)    1489 : FA 80                      ani     X'80'
(1)    148B : 32 96                      bz      div16_return
(1)    148D : 97                         ghi     R7
(1)    148E : FB FF                      xri     X'FF'
(1)    1490 : B7                         phi     R7
(1)    1491 : 87                         glo     R7
(1)    1492 : FB FF                      xri     X'FF'
(1)    1494 : A7                         plo     R7
(1)    1495 : 17                         inc     R7              ; negate quotient
(1)    1496 :                    div16_return:
(1)    1496 : D6                         sep     R6
       1497 :
       1497 :                            end
