          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     1802
          0 :                            option  "smart-branch", "on"
          0 :                            include "cdp1802.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; CDP1802 register alias
(1)       0 : =0                 R0:     equ     0
(1)       0 : =1                 R1:     equ     1
(1)       0 : =2                 R2:     equ     2
(1)       0 : =3                 R3:     equ     3
(1)       0 : =4                 R4:     equ     4
(1)       0 : =5                 R5:     equ     5
(1)       0 : =6                 R6:     equ     6
(1)       0 : =7                 R7:     equ     7
(1)       0 : =8                 R8:     equ     8
(1)       0 : =9                 R9:     equ     9
(1)       0 : =A                 R10:    equ     10
(1)       0 : =B                 R11:    equ     11
(1)       0 : =C                 R12:    equ     12
(1)       0 : =D                 R13:    equ     13
(1)       0 : =E                 R14:    equ     14
(1)       0 : =F                 R15:    equ     15
(1)       0 :
(1)       0 :                    ;;; Transfer locations
(1)       0 : =0                 ORG_RESET:      equ     0000H   ; Reset transfer location
          0 :
          0 :                            org     ORG_RESET
          0 : 71                         dis                     ; disable interrupt
          1 : 00                         dc      X'00'           ; X:P=0:0
          2 : 30 04                      br      scrt_init
          4 :                            include "scrt.inc"
(1)       4 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       4 :
(1)       4 :                    ;;; Standard Call and Return Technique
(1)       4 :                    ;;; R0: DMA pointer
(1)       4 :                    ;;; R1: Program counter for Interrupt routine
(1)       4 :                    ;;; R2: Stack pointer
(1)       4 :                    ;;; R3: Program counter
(1)       4 :                    ;;; R4: Link register, pointer to the return location and arguments
(1)       4 :                    ;;;     passed by the calling program
(1)       4 :                    ;;; R5: Dedicated program counter for CALL routine
(1)       4 :                    ;;; R6: Dedicated program counter for RETURN routine
(1)       4 :
(1)       4 :                    ;;; Call subroutine
(1)       4 :                    ;;;   SEP R5
(1)       4 :                    ;;;   DC  A(subroutine)
(1)       4 :                    ;;;   DC  arguments...
(1)       4 :                    ;;; Subroutine return
(1)       4 :                    ;;;   SEP R6
(1)       4 :                    ;;; Return from interrupt
(1)       4 :                    ;;;   SEP R1
(1)       4 :
(1)       4 :                    ;;; Initialize for SCRT, P=0
(1)       4 :                    ;;; @param P!=3
(1)       4 :                    ;;; @param stack top address of stack
(1)       4 :                    ;;; @param main start address of main routine
(1)       4 :                    ;;; @return P=3
(1)       4 :                    ;;; @return R1=scrt_isr
(1)       4 :                    ;;; @return R2=stack
(1)       4 :                    ;;; @return R3=main
(1)       4 :                    ;;; @return R5=scrt_call
(1)       4 :                    ;;; @return R6=scrt_return
(1)       4 :                    ;;; @clobber D, R15
(1)       4 :                    scrt_init:
(1)       4 : F8 00                      ldi     A.1(scrt_start)
(1)       6 : B3                         phi     R3
(1)       7 : F8 0B                      ldi     A.0(scrt_start)
(1)       9 : A3                         plo     R3
(1)       A : D3                         sep     R3              ; P=3
(1)       B :                    scrt_start:
(1)       B : F8 00                      ldi     A.1(scrt_init_tab)
(1)       D : BF                         phi     R15
(1)       E : F8 24                      ldi     A.0(scrt_init_tab)
(1)      10 : AF                         plo     R15
(1)      11 : 4F                         lda     R15             ; setup interrupt
(1)      12 : B1                         phi     R1
(1)      13 : 4F                         lda     R15
(1)      14 : A1                         plo     R1
(1)      15 : 4F                         lda     R15             ; setup stack
(1)      16 : B2                         phi     R2
(1)      17 : 4F                         lda     R15
(1)      18 : A2                         plo     R2
(1)      19 : 4F                         lda     R15             ; setup call
(1)      1A : B5                         phi     R5
(1)      1B : 4F                         lda     R15
(1)      1C : A5                         plo     R5
(1)      1D : 4F                         lda     R15             ; setup return
(1)      1E : B6                         phi     R6
(1)      1F : 4F                         lda     R15
(1)      20 : A6                         plo     R6
(1)      21 : C0 10 00                   br      main            ; goto main with P=3
(1)      24 :
(1)      24 :                    scrt_init_tab:
(1)      24 : 00 62                      dc      A(scrt_isr)     ; R1
(1)      26 : 0F FF                      dc      A(stack)        ; R2
(1)      28 : 00 2D                      dc      A(scrt_call)    ; R5
(1)      2A : 00 3F                      dc      A(scrt_return)  ; R6
(1)      2C :
(1)      2C :                    ;;; Call subroutine, P=5
(1)      2C :                    ;;; @param M(R3):M(R3+1) subroutine address
(1)      2C :                    ;;; @param M(R3+2) optional arguments, depending on a subroutine called.
(1)      2C :                    ;;; @return R4 points optional arguments
(1)      2C :                    ;;; @return M(R2) R4.1, R4.0
(1)      2C :                    ;;; @clobber R15.1, X
(1)      2C :                    ;;; @unchanged D, DF, IE, R0, R1, R7-R14, R15.0
(1)      2C :                    scrt_call_exit:
(1)      2C : D3                         sep     R3              ; go to subroutine
(1)      2D :                    scrt_call:
(1)      2D : BF                         phi     R15             ; save D to R15.1
(1)      2E : E2                         sex     R2              ; select stack
(1)      2F : 84                         glo     R4              ; push old link register R4
(1)      30 : 73                         stxd
(1)      31 : 94                         ghi     R4
(1)      32 : 73                         stxd
(1)      33 : 93                         ghi     R3              ; load link register
(1)      34 : B4                         phi     R4
(1)      35 : 83                         glo     R3
(1)      36 : A4                         plo     R4
(1)      37 : 44                         lda     R4              ; load the address of subroutine
(1)      38 : B3                         phi     R3
(1)      39 : 44                         lda     R4
(1)      3A : A3                         plo     R3              ; R3=subroutine address
(1)      3B : 9F                         ghi     R15             ; restore D
(1)      3C : 30 2C                      br      scrt_call_exit
(1)      3E :
(1)      3E :                    ;;; Return subroutine, P=6
(1)      3E :                    ;;; @param R4 return address
(1)      3E :                    ;;; @oaram M(R2) R4.1, R4.0, X:P(3)
(1)      3E :                    ;;; @clobber R15.1, X
(1)      3E :                    ;;; @unchanged D, DF, R0, R1, R7-R14, R15.0
(1)      3E :                    scrt_return_exit:
(1)      3E : D3                         sep     R3              ; return to subroutine caller
(1)      3F :                    scrt_return:
(1)      3F : BF                         phi     R15             ; save D to R15.1
(1)      40 : 94                         ghi     R4              ; load return address from link register
(1)      41 : B3                         phi     R3
(1)      42 : 84                         glo     R4
(1)      43 : A3                         plo     R3
(1)      44 : E2                         sex     R2              ; select stack
(1)      45 : 60                         irx
(1)      46 : 72                         ldxa                    ; pop link register R4
(1)      47 : B4                         phi     R4
(1)      48 : F0                         ldx
(1)      49 : A4                         plo     R4
(1)      4A : 9F                         ghi     R15             ; restore D
(1)      4B : 30 3E                      br      scrt_return_exit
(1)      4D :
(1)      4D :                    ;;; Interrupt exit entry P=1
(1)      4D :                    ;;;  (Come here by SEP R1)
(1)      4D :                    scrt_isr_exit:
(1)      4D : 60                         irx
(1)      4E : 72                         ldxa                    ; pop program counter R3
(1)      4F : B3                         phi     R3
(1)      50 : 72                         ldxa
(1)      51 : A3                         plo     R3
(1)      52 : 72                         ldxa                    ; pop call pointer R5
(1)      53 : B5                         phi     R5
(1)      54 : 72                         ldxa
(1)      55 : A5                         plo     R5
(1)      56 : 72                         ldxa                    ; pop return pointer R6
(1)      57 : B6                         phi     R6
(1)      58 : 72                         ldxa
(1)      59 : A6                         plo     R6
(1)      5A : 72                         ldxa                    ; pop scratch pad register R15
(1)      5B : BF                         phi     R15
(1)      5C : 72                         ldxa
(1)      5D : AF                         plo     R15
(1)      5E : 72                         ldxa                    ; pop DF into D:MSB
(1)      5F : FE                         shl                     ; restore DF
(1)      60 : 72                         ldxa                    ; pop D
(1)      61 : 70                         ret                     ; restore X,P IE=1
(1)      62 :                            ;; R1 points scrt_isr
(1)      62 :                    ;;; CDP1802 interrupt entry, X=2, P=1, IE=0
(1)      62 :                    ;;; @unchanged D, DF, X, P, R3, R5, R6, R15
(1)      62 :                    scrt_isr:
(1)      62 :                            ;; R2[0] must be preserved because it may be in the pop process
(1)      62 : 22                         dec     R2
(1)      63 : 78                         sav                     ; push X,P
(1)      64 : 22                         dec     R2
(1)      65 : 73                         stxd                    ; push D
(1)      66 : 76                         shrc                    ; MSB of D=DF
(1)      67 : 73                         stxd                    ; push DF
(1)      68 : 8F                         glo     R15             ; push scratch pad register R15
(1)      69 : 73                         stxd
(1)      6A : 9F                         ghi     R15
(1)      6B : 73                         stxd
(1)      6C : 86                         glo     R6              ; push return pointer R6
(1)      6D : 73                         stxd
(1)      6E : 96                         ghi     R6
(1)      6F : 73                         stxd
(1)      70 : 85                         glo     R5              ; push call pointer R5
(1)      71 : 73                         stxd
(1)      72 : 95                         ghi     R5
(1)      73 : 73                         stxd
(1)      74 : 83                         glo     R3              ; push program counter R3
(1)      75 : 73                         stxd
(1)      76 : 93                         ghi     R3
(1)      77 : 73                         stxd
(1)      78 :                            ;; Initialize SCRT registers because interrupt service routine
(1)      78 :                            ;; may use call/return
(1)      78 : F8 00                      ldi     A.1(scrt_call)  ; initialize call pointer R5
(1)      7A : B5                         phi     R5
(1)      7B : F8 2D                      ldi     A.0(scrt_call)
(1)      7D : A5                         plo     R5
(1)      7E : F8 00                      ldi     A.1(scrt_return) ; initialize return pointer R6
(1)      80 : B6                         phi     R6
(1)      81 : F8 3F                      ldi     A.0(scrt_return)
(1)      83 : A6                         plo     R6
(1)      84 :                            ;;
(1)      84 : F8 10                      ldi     A.1(isr)
(1)      86 : B3                         phi     R3
(1)      87 : F8 0C                      ldi     A.0(isr)
(1)      89 : A3                         plo     R3
(1)      8A : D3                         sep     R3              ; call interrupt service routine with P=3
(1)      8B : 30 4D                      br      scrt_isr_exit   ; return from isr by SEP R1
         8D :
         8D :                    ;;; MC6850 Asynchronous Communication Interface Adapter
         8D : =4                 ACIA:   equ     4
         8D :                            include "mc6850.inc"
(1)      8D :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)      8D :
(1)      8D :                    ;;; MC6850
(1)      8D :                    ;;; Asynchronous Communication Interface Adapter
(1)      8D :
(1)      8D :                    ;;; Control register
(1)      8D : =4                 ACIA_control:   equ     ACIA+0
(1)      8D :                            ;; Counter Divider Select Bits
(1)      8D : =3                 CDS_gm:         equ     11b    ; Group mask
(1)      8D : =0                 CDS_DIV1_gc:    equ     00000000B ; /1
(1)      8D : =1                 CDS_DIV16_gc:   equ     00000001B ; /16
(1)      8D : =2                 CDS_DIV64_gc:   equ     00000010B ; /64
(1)      8D : =3                 CDS_RESET_gc:   equ     00000011B ; Master Reset
(1)      8D :                            ;; Word Select Bits
(1)      8D : =1C                WSB_gm:         equ     00011100B ; Group mask
(1)      8D : =0                 WSB_7E2_gc:     equ     00000000B ; 7 Bits + Even Parity + 2 Stop Bits
(1)      8D : =4                 WSB_7O2_gc:     equ     00000100B ; 7 bits + Odd Parity  + 2 Stop Bits
(1)      8D : =8                 WSB_7E1_gc:     equ     00001000B ; 7 bits + Even Parity + 1 Stop Bits
(1)      8D : =C                 WSB_7O1_gc:     equ     00001100B ; 7 bits + Odd Parity  + 1 Stop Bits
(1)      8D : =10                WSB_8N2_gc:     equ     00010000B ; 8 bits + No Parity   + 2 Stop Bits
(1)      8D : =14                WSB_8N1_gc:     equ     00010100B ; 8 bits + No Parity   + 1 Stop Bits
(1)      8D : =18                WSB_8E1_gc:     equ     00011000B ; 8 bits + Even Parity + 1 Stop Bits
(1)      8D : =1C                WSB_8O1_gc:     equ     00011100B ; 8 bits + Odd Parity  + 1 Stop Bits
(1)      8D :                            ;; Transmit Control Bits
(1)      8D : =60                TCB_gm:         equ     01100000B ; Group mask
(1)      8D : =0                 TCB_DI_gc:      equ     00000000B ; RTS=Low,  Tx Interrupt Disabled
(1)      8D : =20                TCB_EI_gc:      equ     00100000B ; RTS=Low,  Tx Interrupt Enabled
(1)      8D : =40                TCB_RTS_gc:     equ     01000000B ; RTS=High, Tx Interrupt Disabled
(1)      8D : =60                TCB_BREAK_gc:   equ     01100000B ; RTS=Low,  Tx Interrupt Disabled
(1)      8D :                                                      ; Transmit Break Level
(1)      8D : =80                RIEB_bm:        equ     10000000B ; Receive Interrupt Enable Bit mask
(1)      8D :
(1)      8D :                    ;;; Status register
(1)      8D : =4                 ACIA_status:    equ     ACIA+0
(1)      8D : =1                 RDRF_bm:        equ     00000001B ; Receive Data Register Full
(1)      8D : =2                 TDRE_bm:        equ     00000010B ; Transmit Data Register Empty
(1)      8D : =4                 DCDF_bm:        equ     00000100B ; Data Carrier Detect Flag
(1)      8D : =8                 CTSF_bm:        equ     00001000B ; Clear To Send Flag
(1)      8D : =10                FERR_bm:        equ     00010000B ; Frame Error Flag
(1)      8D : =20                OVRN_bm:        equ     00100000B ; Receiver Overrun Flag
(1)      8D : =40                PERR_bm:        equ     01000000B ; Parity Error Flag
(1)      8D : =80                IRQF_bm:        equ     10000000B ; Interrupt Request Flag
(1)      8D :
(1)      8D :                    ;;; Data register
(1)      8D : =5                 ACIA_data:      equ     ACIA+1          ; Data register
         8D :
       1000 :                            org     X'1000'
       1000 : =FFF               stack:  equ     *-1
       1000 :                    main:
       1000 : F8 10                      ldi     A.1(ACIA_config)
       1002 : B8                         phi     R8
       1003 : F8 0D                      ldi     A.0(ACIA_config)
       1005 : A8                         plo     R8
       1006 : E8                         sex     R8             ; R8 for out
       1007 : 64                         out     ACIA_control   ; Master reset
       1008 : 64                         out     ACIA_control   ; Set mode
       1009 : D5                         sep     R5
       100A : 10 EB                      dc      A(arith)        ; call arith
       100C :                    isr:
       100C : 00                         idl
       100D :
       100D :                    ACIA_config:
       100D : 03                         dc      CDS_RESET_gc   ; Master reset
       100E : 14                         dc      WSB_8N1_gc     ; 8 bits + No Parity + 1 Stop Bits
       100F :                                                    ; Transmit, Receive interrupts disabled
       100F :
       100F :                    ;;; Print out char
       100F :                    ;;; @param D char
       100F :                    ;;; @clobber R15.0
       100F :                    putchar_char:
       100F : 00                         dc      0
       1010 :                    putchar:
       1010 : AF                         plo     R15             ; save D to R15.0
       1011 : 88                         glo     R8
       1012 : 73                         stxd
       1013 : 98                         ghi     R8
       1014 : 73                         stxd
       1015 :                            ;;
       1015 : F8 10                      ldi     A.1(putchar_char)
       1017 : B8                         phi     R8
       1018 : F8 0F                      ldi     A.0(putchar_char)
       101A : A8                         plo     R8
       101B : E8                         sex     R8              ; R8 for inp/out
       101C :                    putchar_loop:
       101C : 6C                         inp     ACIA_status
       101D : FA 02                      ani     TDRE_bm
       101F : 32 1C                      bz      putchar_loop
       1021 : 8F                         glo     R15             ; restore D
       1022 : 58                         str     R8              ; set character
       1023 : 65                         out     ACIA_data
       1024 :                            ;;
       1024 : E2                         sex     R2
       1025 : 60                         irx
       1026 : 72                         ldxa
       1027 : B8                         phi     R8
       1028 : F0                         ldx
       1029 : A8                         plo     R8
       102A : D6                         sep     R6              ; return
       102B :
       102B :                    ;;; Print out newline
       102B :                    ;;; @clobber D R15.0
       102B :                    newline:
       102B : F8 0D                      ldi     X'0D'
       102D : D5                         sep     R5              ; call
       102E : 10 10                      dc      A(putchar)
       1030 : F8 0A                      ldi     X'0A'
       1032 : 30 10                      br      putchar
       1034 :
       1034 :                    ;;; Print out space
       1034 :                    ;;; @clobber D R15.0
       1034 :                    putspace:
       1034 : F8 20                      ldi     T' '
       1036 : 30 10                      br      putchar
       1038 :
       1038 :                    ;;; Set constant to R7
       1038 :                    ;;;   SEP  R5
       1038 :                    ;;;   DC   A(set_R7)
       1038 :                    ;;;   DC   A(constant)
       1038 :                    ;;; @return R7 constant
       1038 :                    ;;; @clobber D
       1038 :                    set_R7:
       1038 : E4                         sex     R4
       1039 : 72                         ldxa
       103A : B7                         phi     R7
       103B : 72                         ldxa
       103C : A7                         plo     R7
       103D : E2                         sex     R2
       103E : D6                         sep     R6
       103F :
       103F :                    ;;; Set constant to R8
       103F :                    ;;;   SEP  R5
       103F :                    ;;;   DC   A(set_R8)
       103F :                    ;;;   DC   A(variable)
       103F :                    ;;; @clobber R15
       103F :                    set_R8:
       103F : E4                         sex     R4
       1040 : 72                         ldxa
       1041 : B8                         phi     R8
       1042 : 72                         ldxa
       1043 : A8                         plo     R8
       1044 : E2                         sex     R2
       1045 : D6                         sep     R6
       1046 :
       1046 :                    ;;; Signed addition: summand += addend
       1046 :                    ;;; @param R7 summand
       1046 :                    ;;; @param R8 addend
       1046 :                    ;;; @return R7 summand + addend
       1046 :                    ;;;   SEP R5
       1046 :                    ;;;   DC  A(add16)
       1046 :                    ;;; @clobber D
       1046 :                    add16:
       1046 : 88                         glo     R8
       1047 : 52                         str     R2
       1048 : 87                         glo     R7
       1049 : F4                         add
       104A : A7                         plo     R7
       104B : 98                         ghi     R8
       104C : 52                         str     R2
       104D : 97                         ghi     R7
       104E : 74                         adc
       104F : B7                         phi     R7
       1050 : D6                         sep     R6
       1051 :
       1051 :                    ;;; Singed subtraction: minuend -= subtrahend
       1051 :                    ;;; @param R7 minuend
       1051 :                    ;;; @param R8 subtrahend
       1051 :                    ;;; @return R7 minuend - subtrahend
       1051 :                    ;;;   SEP R5
       1051 :                    ;;;   DC  A(sub16)
       1051 :                    sub16:
       1051 : 88                         glo     R8
       1052 : 52                         str     R2
       1053 : 87                         glo     R7
       1054 : F7                         sm
       1055 : A7                         plo     R7
       1056 : 98                         ghi     R8
       1057 : 52                         str     R2
       1058 : 97                         ghi     R7
       1059 : 77                         smb
       105A : B7                         phi     R7
       105B : D6                         sep     R6
       105C :
       105C :                    ;;; Signed comparison: minuend - subtrahend
       105C :                    ;;; @param R7 minuend
       105C :                    ;;; @param R8 subtrahend
       105C :                    ;;; @return D=0 DF=1 (minuend==subtrahend); BZ
       105C :                    ;;;         D=1 DF=1 (minuend>subtrahend);  BGE
       105C :                    ;;;         D=1 DF=0 (minuend<subtrahend);  BL
       105C :                    ;;; @clobber R7 R8
       105C :                    ;;; result = minuend - subtrahend
       105C :                    ;;; Z=(result.1 | result.0) == 0
       105C :                    ;;; N=(result.1 & 0x80) != 0
       105C :                    ;;; V=((minuend.1 ^ subtrahend.1) & (result.1 ^ minuend.1) & 0x80) != 0
       105C :                    ;;; LT=N ^ V
       105C :                    cmp16:
       105C : 88                         glo     R8              ; D=subtrahend.0
       105D : 52                         str     R2              ; stack top=subtrahend.0
       105E : 87                         glo     R7              ; D=minuend.0
       105F : F7                         sm                      ; D=minuend.0=subtrahend.0
       1060 : A7                         plo     R7              ; R7.0=result.0
       1061 : 98                         ghi     R8              ; D=subtrahend.1
       1062 : 52                         str     R2              ; stack top=subtrahend.1
       1063 : 97                         ghi     R7              ; D=minuend.1
       1064 : F3                         xor                     ; D=minuend.1^subtrahend.1
       1065 : A8                         plo     R8              ; R8.0=minuend.1^subtrahend.1
       1066 : 97                         ghi     R7              ; D=minuend.1
       1067 : 77                         smb                     ; D=minuend.1=subtrahend.1
       1068 : B8                         phi     R8              ; R8.1=result.1
       1069 : 3A 72                      bnz     cmp16_neq       ; branch if result.1!=0
       106B : 87                         glo     R7              ; D=result.0
       106C : 3A 72                      bnz     cmp16_neq       ; branch if result.0!=-
       106E : F8 01                      ldi     1
       1070 : F6                         shr
       1071 : D6                         sep     R6              ; return with D=0, DF=1
       1072 :                    cmp16_neq:
       1072 : 98                         ghi     R8              ; D=result.1
       1073 : 52                         str     R2
       1074 : 97                         ghi     R7              ; D=minuend.1
       1075 : F3                         xor                     ; D=result.1^minuend.1
       1076 : 52                         str     R2              ; stack top=result.1^minuend.1
       1077 : 88                         glo     R8              ; D=minuend.1^subtrahend.1
       1078 : F2                         and                     ; D=(minuend.1^subtrahend.1)&(result.1^minuend.1)
       1079 : 52                         str     R2              ; stack top=V
       107A : 98                         ghi     R8              ; D=result.1
       107B : F3                         xor                     ; D=N^V
       107C : FB 80                      xri     X'80'           ; D=~(N^V)
       107E : FE                         shl                     ; DF=~(N^V)
       107F : F8 01                      ldi     1
       1081 : D6                         sep     R6              ; return with D=1
       1082 :
       1082 :                    ;;; Print out expression "operand1 operator operand2"
       1082 :                    ;;; @param R7 operand1
       1082 :                    ;;; @param R8 operand2
       1082 :                    ;;; @param D operator
       1082 :                    ;;; @clobber D R7 R8 R15
       1082 :                    expr:
       1082 : AF                         plo     R15             ; save operator
       1083 : 87                         glo     R7
       1084 : 73                         stxd
       1085 : 97                         ghi     R7
       1086 : 73                         stxd                    ; save R7
       1087 : 88                         glo     R8
       1088 : 73                         stxd
       1089 : 98                         ghi     R8
       108A : 73                         stxd                    ; save R8
       108B : 8F                         glo     R15
       108C : 73                         stxd                    ; save operator
       108D : D5                         sep     R5
       108E : 13 36                      dc      A(print_int16)
       1090 : D5                         sep     R5
       1091 : 10 34                      dc      A(putspace)
       1093 : 12                         inc     R2
       1094 : 02                         ldn     R2              ; restore operator
       1095 : D5                         sep     R5
       1096 : 10 10                      dc      A(putchar)
       1098 : D5                         sep     R5
       1099 : 10 34                      dc      A(putspace)
       109B : 98                         ghi     R8
       109C : B7                         phi     R7
       109D : 88                         glo     R8
       109E : A7                         plo     R7
       109F : D5                         sep     R5
       10A0 : 13 36                      dc      A(print_int16)
       10A2 : 60                         irx
       10A3 : 72                         ldxa
       10A4 : B8                         phi     R8
       10A5 : 72                         ldxa
       10A6 : A8                         plo     R8              ; restore R8
       10A7 : 72                         ldxa
       10A8 : B7                         phi     R7
       10A9 : F0                         ldx
       10AA : A7                         plo     R7              ; restore R7
       10AB : D6                         sep     R6
       10AC :
       10AC :                    ;;; Print out answer " = result\n"
       10AC :                    ;;; @params R7 result
       10AC :                    ;;; @clobber D R7 R15
       10AC :                    answer:
       10AC : D5                         sep     R5
       10AD : 10 34                      dc      A(putspace)
       10AF : F8 3D                      ldi     T'='
       10B1 : D5                         sep     R5
       10B2 : 10 10                      dc      A(putchar)
       10B4 : D5                         sep     R5
       10B5 : 10 34                      dc      A(putspace)
       10B7 : D5                         sep     R5
       10B8 : 13 36                      dc      A(print_int16)
       10BA : 30 2B                      br      newline
       10BC :
       10BC :                    ;;; Compare 2 integers and print out "operand1 <=> operand2\n"
       10BC :                    ;;; @param R7 operand1
       10BC :                    ;;; @param R8 operand2
       10BC :                    ;;; @clobber R15
       10BC :                    comp:
       10BC : 87                         glo     R7
       10BD : 73                         stxd
       10BE : 97                         ghi     R7
       10BF : 73                         stxd                    ; save R7
       10C0 : 88                         glo     R8
       10C1 : 73                         stxd
       10C2 : 98                         ghi     R8
       10C3 : 73                         stxd                    ; save R8
       10C4 : D5                         sep     R5
       10C5 : 10 5C                      dc      A(cmp16)
       10C7 : 3B D9                      bl      comp_lt
       10C9 : 32 D5                      bz      comp_eq
       10CB : 33 D1                      bge     comp_gt
       10CD : F8 3F                      ldi     T'?'
       10CF : 30 DB                      br      comp_out
       10D1 :                    comp_gt:
       10D1 : F8 3E                      ldi     T'>'
       10D3 : 30 DB                      br      comp_out
       10D5 :                    comp_eq:
       10D5 : F8 3D                      ldi     T'='
       10D7 : 30 DB                      br      comp_out
       10D9 :                    comp_lt:
       10D9 : F8 3C                      ldi     T'<'
       10DB :                    comp_out:
       10DB : AF                         plo     R15             ; save relation
       10DC : 60                         irx
       10DD : 72                         ldxa
       10DE : B8                         phi     R8
       10DF : 72                         ldxa
       10E0 : A8                         plo     R8              ; restore R8
       10E1 : 72                         ldxa
       10E2 : B7                         phi     R7
       10E3 : F0                         ldx
       10E4 : A7                         plo     R7              ; restore R7
       10E5 : 8F                         glo     R15
       10E6 : D5                         sep     R5
       10E7 : 10 82                      dc      A(expr)
       10E9 : 30 2B                      br      newline
       10EB :
       10EB :                    arith:
       10EB : D5                         sep     R5
       10EC : 10 38                      dc      A(set_R7)
       10EE : 00 00                      dc      A(0)            ; vA=0
       10F0 : D5                         sep     R5
       10F1 : 10 3F                      dc      A(set_R8)
       10F3 : 92 A0                      dc      A(-28000)       ; vB=-28000
       10F5 : F8 2D                      ldi     T'-'
       10F7 : D5                         sep     R5
       10F8 : 10 82                      dc      A(expr)
       10FA : D5                         sep     R5              ; vA=-vB
       10FB : 10 51                      dc      A(sub16)
       10FD : D5                         sep     R5
       10FE : 10 AC                      dc      A(answer)       ; 28000
       1100 :
       1100 : D5                         sep     R5
       1101 : 10 38                      dc      A(set_R7)
       1103 : 00 00                      dc      A(0)            ; vA=0
       1105 : D5                         sep     R5
       1106 : 10 3F                      dc      A(set_R8)
       1108 : 6D 60                      dc      A(28000)        ; vB=28000
       110A : F8 2D                      ldi     T'-'
       110C : D5                         sep     R5
       110D : 10 82                      dc      A(expr)
       110F : D5                         sep     R5              ; vA=-vB
       1110 : 10 51                      dc      A(sub16)
       1112 : D5                         sep     R5
       1113 : 10 AC                      dc      A(answer)       ; -28000
       1115 :
       1115 : D5                         sep     R5
       1116 : 10 38                      dc      A(set_R7)
       1118 : 46 50                      dc      A(18000)        ; vA=18000
       111A : D5                         sep     R5
       111B : 10 3F                      dc      A(set_R8)
       111D : 6D 60                      dc      A(28000)        ; vB=28000
       111F : F8 2B                      ldi     T'+'
       1121 : D5                         sep     R5
       1122 : 10 82                      dc      A(expr)
       1124 : D5                         sep     R5              ; vA+=vB
       1125 : 10 46                      dc      A(add16)
       1127 : D5                         sep     R5
       1128 : 10 AC                      dc      A(answer)       ; -19536
       112A :
       112A : D5                         sep     R5
       112B : 10 38                      dc      A(set_R7)
       112D : 46 50                      dc      A(18000)        ; vA=18000
       112F : D5                         sep     R5
       1130 : 10 3F                      dc      A(set_R8)
       1132 : B9 B0                      dc      A(-18000)       ; vB=-18000
       1134 : F8 2B                      ldi     T'+'
       1136 : D5                         sep     R5
       1137 : 10 82                      dc      A(expr)
       1139 : D5                         sep     R5              ; vA+=vB
       113A : 10 46                      dc      A(add16)
       113C : D5                         sep     R5
       113D : 10 AC                      dc      A(answer)       ; 0
       113F :
       113F : D5                         sep     R5
       1140 : 10 38                      dc      A(set_R7)
       1142 : B9 B0                      dc      A(-18000)       ; vA=-18000
       1144 : D5                         sep     R5
       1145 : 10 3F                      dc      A(set_R8)
       1147 : B9 B0                      dc      A(-18000)       ; vB=-18000
       1149 : F8 2B                      ldi     T'+'
       114B : D5                         sep     R5
       114C : 10 82                      dc      A(expr)
       114E : D5                         sep     R5              ; vA+=vB
       114F : 10 46                      dc      A(add16)
       1151 : D5                         sep     R5
       1152 : 10 AC                      dc      A(answer)       ; 29536
       1154 :
       1154 : D5                         sep     R5
       1155 : 10 38                      dc      A(set_R7)
       1157 : 46 50                      dc      A(18000)        ; vA=18000
       1159 : D5                         sep     R5
       115A : 10 3F                      dc      A(set_R8)
       115C : 92 A0                      dc      A(-28000)       ; vB=-28000
       115E : F8 2D                      ldi     T'-'
       1160 : D5                         sep     R5
       1161 : 10 82                      dc      A(expr)
       1163 : D5                         sep     R5              ; vA-=vB
       1164 : 10 51                      dc      A(sub16)
       1166 : D5                         sep     R5
       1167 : 10 AC                      dc      A(answer)       ; -19536
       1169 :
       1169 : D5                         sep     R5
       116A : 10 38                      dc      A(set_R7)
       116C : 46 50                      dc      A(18000)        ; vA=18000
       116E : D5                         sep     R5
       116F : 10 3F                      dc      A(set_R8)
       1171 : B9 B0                      dc      A(-18000)       ; vB=-18000
       1173 : F8 2D                      ldi     T'-'
       1175 : D5                         sep     R5
       1176 : 10 82                      dc      A(expr)
       1178 : D5                         sep     R5              ; vA-=vB
       1179 : 10 51                      dc      A(sub16)
       117B : D5                         sep     R5
       117C : 10 AC                      dc      A(answer)       ; 29536
       117E :
       117E : D5                         sep     R5
       117F : 10 38                      dc      A(set_R7)
       1181 : 92 A0                      dc      A(-28000)       ; vA=-28000
       1183 : D5                         sep     R5
       1184 : 10 3F                      dc      A(set_R8)
       1186 : B9 B0                      dc      A(-18000)       ; vB=-18000
       1188 : F8 2D                      ldi     T'-'
       118A : D5                         sep     R5
       118B : 10 82                      dc      A(expr)
       118D : D5                         sep     R5              ; vA-=vB
       118E : 10 51                      dc      A(sub16)
       1190 : D5                         sep     R5
       1191 : 10 AC                      dc      A(answer)       ; -10000
       1193 :
       1193 : D5                         sep     R5
       1194 : 10 38                      dc      A(set_R7)
       1196 : 00 64                      dc      A(100)          ; vA=100
       1198 : D5                         sep     R5
       1199 : 10 3F                      dc      A(set_R8)
       119B : 01 2C                      dc      A(300)          ; vB=300
       119D : F8 2A                      ldi     T'*'
       119F : D5                         sep     R5
       11A0 : 10 82                      dc      A(expr)
       11A2 : D5                         sep     R5              ; vA*=vB
       11A3 : 13 B1                      dc      A(mul16)
       11A5 : D5                         sep     R5
       11A6 : 10 AC                      dc      A(answer)       ; 30000
       11A8 :
       11A8 : D5                         sep     R5
       11A9 : 10 38                      dc      A(set_R7)
       11AB : 00 C8                      dc      A(200)          ; vA=200
       11AD : D5                         sep     R5
       11AE : 10 3F                      dc      A(set_R8)
       11B0 : FF 9C                      dc      A(-100)         ; vB=-100
       11B2 : F8 2A                      ldi     T'*'
       11B4 : D5                         sep     R5
       11B5 : 10 82                      dc      A(expr)
       11B7 : D5                         sep     R5              ; vA*=vB
       11B8 : 13 B1                      dc      A(mul16)
       11BA : D5                         sep     R5
       11BB : 10 AC                      dc      A(answer)       ; -20000
       11BD :
       11BD : D5                         sep     R5
       11BE : 10 38                      dc      A(set_R7)
       11C0 : 01 2C                      dc      A(300)          ; vA=300
       11C2 : D5                         sep     R5
       11C3 : 10 3F                      dc      A(set_R8)
       11C5 : FF 38                      dc      A(-200)         ; vB=-200
       11C7 : F8 2A                      ldi     T'*'
       11C9 : D5                         sep     R5
       11CA : 10 82                      dc      A(expr)
       11CC : D5                         sep     R5              ; vA*=vB
       11CD : 13 B1                      dc      A(mul16)
       11CF : D5                         sep     R5
       11D0 : 10 AC                      dc      A(answer)       ; 5536
       11D2 :
       11D2 : D5                         sep     R5
       11D3 : 10 38                      dc      A(set_R7)
       11D5 : FF 9C                      dc      A(-100)         ; vA=-100
       11D7 : D5                         sep     R5
       11D8 : 10 3F                      dc      A(set_R8)
       11DA : 01 2C                      dc      A(300)          ; vB=300
       11DC : F8 2A                      ldi     T'*'
       11DE : D5                         sep     R5
       11DF : 10 82                      dc      A(expr)
       11E1 : D5                         sep     R5              ; vA*=vB
       11E2 : 13 B1                      dc      A(mul16)
       11E4 : D5                         sep     R5
       11E5 : 10 AC                      dc      A(answer)       ; -30000
       11E7 :
       11E7 : D5                         sep     R5
       11E8 : 10 38                      dc      A(set_R7)
       11EA : FF 38                      dc      A(-200)         ; vA=-200
       11EC : D5                         sep     R5
       11ED : 10 3F                      dc      A(set_R8)
       11EF : FF 9C                      dc      A(-100)         ; vB=-100
       11F1 : F8 2A                      ldi     T'*'
       11F3 : D5                         sep     R5
       11F4 : 10 82                      dc      A(expr)
       11F6 : D5                         sep     R5              ; vA*=vB
       11F7 : 13 B1                      dc      A(mul16)
       11F9 : D5                         sep     R5
       11FA : 10 AC                      dc      A(answer)       ; 20000
       11FC :
       11FC : D5                         sep     R5
       11FD : 10 38                      dc      A(set_R7)
       11FF : 75 30                      dc      A(30000)        ; vA=30000
       1201 : D5                         sep     R5
       1202 : 10 3F                      dc      A(set_R8)
       1204 : 00 64                      dc      A(100)          ; vB=100
       1206 : F8 2F                      ldi     T'/'
       1208 : D5                         sep     R5
       1209 : 10 82                      dc      A(expr)
       120B : D5                         sep     R5              ; vA/=vB
       120C : 14 3F                      dc      A(div16)
       120E : D5                         sep     R5
       120F : 10 AC                      dc      A(answer)       ; 30
       1211 :
       1211 : D5                         sep     R5
       1212 : 10 38                      dc      A(set_R7)
       1214 : FF 38                      dc      A(-200)         ; vA=-200
       1216 : D5                         sep     R5
       1217 : 10 3F                      dc      A(set_R8)
       1219 : 00 64                      dc      A(100)          ; vB=100
       121B : F8 2F                      ldi     T'/'
       121D : D5                         sep     R5
       121E : 10 82                      dc      A(expr)
       1220 : D5                         sep     R5              ; vA/=vB
       1221 : 14 3F                      dc      A(div16)
       1223 : D5                         sep     R5
       1224 : 10 AC                      dc      A(answer)       ; -2
       1226 :
       1226 : D5                         sep     R5
       1227 : 10 38                      dc      A(set_R7)
       1229 : 8A D0                      dc      A(-30000)       ; vA=-30000
       122B : D5                         sep     R5
       122C : 10 3F                      dc      A(set_R8)
       122E : FF 38                      dc      A(-200)         ; vB=-200
       1230 : F8 2F                      ldi     T'/'
       1232 : D5                         sep     R5
       1233 : 10 82                      dc      A(expr)
       1235 : D5                         sep     R5              ; vA/=vB
       1236 : 14 3F                      dc      A(div16)
       1238 : D5                         sep     R5
       1239 : 10 AC                      dc      A(answer)       ; 150
       123B :
       123B : D5                         sep     R5
       123C : 10 38                      dc      A(set_R7)
       123E : 8A D0                      dc      A(-30000)       ; vA=-30000
       1240 : D5                         sep     R5
       1241 : 10 3F                      dc      A(set_R8)
       1243 : 00 4E                      dc      A(78)           ; vB=78
       1245 : F8 2F                      ldi     T'/'
       1247 : D5                         sep     R5
       1248 : 10 82                      dc      A(expr)
       124A : D5                         sep     R5              ; vA/=vB
       124B : 14 3F                      dc      A(div16)
       124D : D5                         sep     R5
       124E : 10 AC                      dc      A(answer)       ; -384
       1250 :
       1250 : D5                         sep     R5
       1251 : 10 38                      dc      A(set_R7)
       1253 : 13 88                      dc      A(5000)         ; vA=5000
       1255 : D5                         sep     R5
       1256 : 10 3F                      dc      A(set_R8)
       1258 : 0F A0                      dc      A(4000)         ; vB=4000
       125A : D5                         sep     R5
       125B : 10 BC                      dc      A(comp)
       125D :
       125D : D5                         sep     R5
       125E : 10 38                      dc      A(set_R7)
       1260 : 13 88                      dc      A(5000)         ; vA=5000
       1262 : D5                         sep     R5
       1263 : 10 3F                      dc      A(set_R8)
       1265 : 13 88                      dc      A(5000)         ; vB=5000
       1267 : D5                         sep     R5
       1268 : 10 BC                      dc      A(comp)
       126A :
       126A : D5                         sep     R5
       126B : 10 38                      dc      A(set_R7)
       126D : 0F A0                      dc      A(4000)         ; vA=4000
       126F : D5                         sep     R5
       1270 : 10 3F                      dc      A(set_R8)
       1272 : 13 88                      dc      A(5000)         ; vB=5000
       1274 : D5                         sep     R5
       1275 : 10 BC                      dc      A(comp)
       1277 :
       1277 : D5                         sep     R5
       1278 : 10 38                      dc      A(set_R7)
       127A : EC 78                      dc      A(-5000)        ; vA=-5000
       127C : D5                         sep     R5
       127D : 10 3F                      dc      A(set_R8)
       127F : F0 60                      dc      A(-4000)        ; vB=-4000
       1281 : D5                         sep     R5
       1282 : 10 BC                      dc      A(comp)
       1284 :
       1284 : D5                         sep     R5
       1285 : 10 38                      dc      A(set_R7)
       1287 : EC 78                      dc      A(-5000)        ; vA=-5000
       1289 : D5                         sep     R5
       128A : 10 3F                      dc      A(set_R8)
       128C : EC 78                      dc      A(-5000)        ; vB=-5000
       128E : D5                         sep     R5
       128F : 10 BC                      dc      A(comp)
       1291 :
       1291 : D5                         sep     R5
       1292 : 10 38                      dc      A(set_R7)
       1294 : F0 60                      dc      A(-4000)        ; vA=-4000
       1296 : D5                         sep     R5
       1297 : 10 3F                      dc      A(set_R8)
       1299 : EC 78                      dc      A(-5000)        ; vB=-5000
       129B : D5                         sep     R5
       129C : 10 BC                      dc      A(comp)
       129E :
       129E : D5                         sep     R5
       129F : 10 38                      dc      A(set_R7)
       12A1 : 7F BC                      dc      A(32700)        ; vA=32700
       12A3 : D5                         sep     R5
       12A4 : 10 3F                      dc      A(set_R8)
       12A6 : 7F 58                      dc      A(32600)        ; vB=32600
       12A8 : D5                         sep     R5
       12A9 : 10 BC                      dc      A(comp)
       12AB :
       12AB : D5                         sep     R5
       12AC : 10 38                      dc      A(set_R7)
       12AE : 7F BC                      dc      A(32700)        ; vA=32700
       12B0 : D5                         sep     R5
       12B1 : 10 3F                      dc      A(set_R8)
       12B3 : 7F BC                      dc      A(32700)        ; vB=32700
       12B5 : D5                         sep     R5
       12B6 : 10 BC                      dc      A(comp)
       12B8 :
       12B8 : D5                         sep     R5
       12B9 : 10 38                      dc      A(set_R7)
       12BB : 7F 58                      dc      A(32600)        ; vA=32600
       12BD : D5                         sep     R5
       12BE : 10 3F                      dc      A(set_R8)
       12C0 : 7F BC                      dc      A(32700)        ; vB=32700
       12C2 : D5                         sep     R5
       12C3 : 10 BC                      dc      A(comp)
       12C5 :
       12C5 : D5                         sep     R5
       12C6 : 10 38                      dc      A(set_R7)
       12C8 : 80 44                      dc      A(-32700)       ; vA=-32700
       12CA : D5                         sep     R5
       12CB : 10 3F                      dc      A(set_R8)
       12CD : 80 A8                      dc      A(-32600)       ; vB=-32600
       12CF : D5                         sep     R5
       12D0 : 10 BC                      dc      A(comp)
       12D2 :
       12D2 : D5                         sep     R5
       12D3 : 10 38                      dc      A(set_R7)
       12D5 : 80 44                      dc      A(-32700)       ; vA=-32700
       12D7 : D5                         sep     R5
       12D8 : 10 3F                      dc      A(set_R8)
       12DA : 80 44                      dc      A(-32700)       ; vB=-32700
       12DC : D5                         sep     R5
       12DD : 10 BC                      dc      A(comp)
       12DF :
       12DF : D5                         sep     R5
       12E0 : 10 38                      dc      A(set_R7)
       12E2 : 80 A8                      dc      A(-32600)       ; vA=-32600
       12E4 : D5                         sep     R5
       12E5 : 10 3F                      dc      A(set_R8)
       12E7 : 80 44                      dc      A(-32700)       ; vB=-32700
       12E9 : D5                         sep     R5
       12EA : 10 BC                      dc      A(comp)
       12EC :
       12EC : D5                         sep     R5
       12ED : 10 38                      dc      A(set_R7)
       12EF : 46 50                      dc      A(18000)        ; vA=18000
       12F1 : D5                         sep     R5
       12F2 : 10 3F                      dc      A(set_R8)
       12F4 : 92 A0                      dc      A(-28000)       ; vB=-28000
       12F6 : D5                         sep     R5
       12F7 : 10 BC                      dc      A(comp)
       12F9 :
       12F9 : D5                         sep     R5
       12FA : 10 38                      dc      A(set_R7)
       12FC : 92 A0                      dc      A(-28000)       ; vA=-28000
       12FE : D5                         sep     R5
       12FF : 10 3F                      dc      A(set_R8)
       1301 : 92 A0                      dc      A(-28000)       ; vB=-28000
       1303 : D5                         sep     R5
       1304 : 10 BC                      dc      A(comp)
       1306 :
       1306 : D5                         sep     R5
       1307 : 10 38                      dc      A(set_R7)
       1309 : 92 A0                      dc      A(-28000)       ; vA=-28000
       130B : D5                         sep     R5
       130C : 10 3F                      dc      A(set_R8)
       130E : 46 50                      dc      A(18000)        ; vB=18000
       1310 : D5                         sep     R5
       1311 : 10 BC                      dc      A(comp)
       1313 :
       1313 : D6                         sep     R6              ; return
       1314 :
       1314 :                            include "arith.inc"
(1)    1314 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    1314 :                            cpu     1802
(1)    1314 :
(1)    1314 :                    ;;; Print unsigned 16-bit integer as decimal
(1)    1314 :                    ;;; @param R7 value
(1)    1314 :                    ;;; @clobber D R7 R8 R15
(1)    1314 :                    print_uint16:
(1)    1314 : 97                         ghi     R7
(1)    1315 : 3A 1A                      bnz     print_uint16_loop
(1)    1317 : 87                         glo     R7
(1)    1318 : 32 31                      bz      print_uint16_zero
(1)    131A :                    print_uint16_loop:
(1)    131A : 97                         ghi     R7
(1)    131B : 3A 21                      bnz     print_uint16_digit
(1)    131D : 87                         glo     R7
(1)    131E : 3A 21                      bnz     print_uint16_digit
(1)    1320 : D6                         sep     R6              ; return if value=0
(1)    1321 :                    print_uint16_digit:
(1)    1321 : F8 00                      ldi     0
(1)    1323 : B8                         phi     R8
(1)    1324 : F8 0A                      ldi     10
(1)    1326 : A8                         plo     R8              ; divisor=10
(1)    1327 : D5                         sep     R5
(1)    1328 : 13 E5                      dc      A(udiv16)       ; call udiv16
(1)    132A : 88                         glo     R8
(1)    132B : 73                         stxd                    ; push remainder
(1)    132C : D5                         sep     R5
(1)    132D : 13 1A                      dc      A(print_uint16_loop)
(1)    132F : 12                         inc     R2
(1)    1330 : 02                         ldn     R2              ; pop remainder
(1)    1331 :                    print_uint16_zero:
(1)    1331 : FC 30                      adi     T'0'
(1)    1333 : C0 10 10                   br      putchar
(1)    1336 :
(1)    1336 :                    ;;; Print signed 16-bit integer as decimal
(1)    1336 :                    ;;; @param R7 value
(1)    1336 :                    ;;; @clobber D R15
(1)    1336 :                    print_int16:
(1)    1336 : 88                         glo     R8
(1)    1337 : 73                         stxd
(1)    1338 : 98                         ghi     R8
(1)    1339 : 73                         stxd                    ; save R8
(1)    133A : 87                         glo     R7
(1)    133B : 73                         stxd
(1)    133C : 97                         ghi     R7
(1)    133D : 73                         stxd                    ; save R7
(1)    133E : FA 80                      ani     X'80'
(1)    1340 : 32 50                      bz      print_int16_print
(1)    1342 : F8 2D                      ldi     T'-'
(1)    1344 : D5                         sep     R5
(1)    1345 : 10 10                      dc      A(putchar)      ; print '-'
(1)    1347 : 97                         ghi     R7
(1)    1348 : FB FF                      xri     X'FF'
(1)    134A : B7                         phi     R7
(1)    134B : 87                         glo     R7
(1)    134C : FB FF                      xri     X'FF'
(1)    134E : A7                         plo     R7
(1)    134F : 17                         inc     R7              ; negate value
(1)    1350 :                    print_int16_print:
(1)    1350 : D5                         sep     R5
(1)    1351 : 13 14                      dc      A(print_uint16)
(1)    1353 : 60                         irx
(1)    1354 : 72                         ldxa
(1)    1355 : B7                         phi     R7
(1)    1356 : 72                         ldxa
(1)    1357 : A7                         plo     R7              ; restore R7
(1)    1358 : 72                         ldxa
(1)    1359 : B8                         phi     R8
(1)    135A : F0                         ldx
(1)    135B : A8                         plo     R8              ; restore R8
(1)    135C : D6                         sep     R6
(1)    135D :
(1)    135D :                    ;;; Store R7 to variable
(1)    135D :                    ;;;   SEP  R5
(1)    135D :                    ;;;   DC   A(store_R7)
(1)    135D :                    ;;;   DC   A(variable)
(1)    135D :                    ;;; @clobber D R15
(1)    135D :                    store_R7:
(1)    135D : E4                         sex     R4
(1)    135E : 72                         ldxa
(1)    135F : BF                         phi     R15
(1)    1360 : 72                         ldxa
(1)    1361 : AF                         plo     R15             ; R15=&valiable
(1)    1362 : 97                         ghi     R7
(1)    1363 : 5F                         str     R15
(1)    1364 : 1F                         inc     R15
(1)    1365 : 87                         glo     R7
(1)    1366 : 5F                         str     R15
(1)    1367 : E2                         sex     R2
(1)    1368 : D6                         sep     R6
(1)    1369 :
(1)    1369 :                    ;;; Load variable to R7
(1)    1369 :                    ;;;   SEP  R5
(1)    1369 :                    ;;;   DC   A(load_R7)
(1)    1369 :                    ;;;   DC   A(variable)
(1)    1369 :                    ;;; @return R7 variable
(1)    1369 :                    ;;; @clobber D R15
(1)    1369 :                    load_R7:
(1)    1369 : E4                         sex     R4
(1)    136A : 72                         ldxa
(1)    136B : B7                         phi     R7
(1)    136C : 72                         ldxa
(1)    136D : A7                         plo     R7
(1)    136E : 07                         ldn     R7
(1)    136F : AF                         plo     R15
(1)    1370 : 17                         inc     R7
(1)    1371 : 07                         ldn     R7
(1)    1372 : A7                         plo     R7
(1)    1373 : 8F                         glo     R15
(1)    1374 : B7                         phi     R7
(1)    1375 : E2                         sex     R2
(1)    1376 : D6                         sep     R6
(1)    1377 :
(1)    1377 :                    ;;; Load variable to R8
(1)    1377 :                    ;;;   SEP  R5
(1)    1377 :                    ;;;   DC   A(load_R8)
(1)    1377 :                    ;;;   DC   A(variable)
(1)    1377 :                    ;;; @clobber R15
(1)    1377 :                    load_R8:
(1)    1377 : E4                         sex     R4
(1)    1378 : 72                         ldxa
(1)    1379 : B8                         phi     R8
(1)    137A : 72                         ldxa
(1)    137B : A8                         plo     R8
(1)    137C : 08                         ldn     R8
(1)    137D : AF                         plo     R15
(1)    137E : 18                         inc     R8
(1)    137F : 08                         ldn     R8
(1)    1380 : A8                         plo     R8
(1)    1381 : 8F                         glo     R15
(1)    1382 : B8                         phi     R8
(1)    1383 : E2                         sex     R2
(1)    1384 : D6                         sep     R6
(1)    1385 :
(1)    1385 :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)    1385 :                    ;;; @param R7 multiplicand
(1)    1385 :                    ;;; @param R8 multiplier
(1)    1385 :                    ;;; @return R7 result
(1)    1385 :                    ;;; @clobber D R7 R8 R15
(1)    1385 :                    umul16:
(1)    1385 : F8 00                      ldi     0
(1)    1387 : BF                         phi     R15
(1)    1388 : AF                         plo     R15             ; R15=result
(1)    1389 : 30 A6                      br      umul16_check
(1)    138B :                    umul16_loop:
(1)    138B : 88                         glo     R8
(1)    138C : FA 01                      ani     1
(1)    138E : 32 9A                      bz      umul16_sr       ; lsb(multiplier)==0
(1)    1390 : 87                         glo     R7
(1)    1391 : 52                         str     R2              ; stack top=multiplicand.0
(1)    1392 : 8F                         glo     R15
(1)    1393 : F4                         add
(1)    1394 : AF                         plo     R15
(1)    1395 : 97                         ghi     R7
(1)    1396 : 52                         str     R2              ; stack top=multiplicand.1
(1)    1397 : 9F                         ghi     R15
(1)    1398 : 74                         adc
(1)    1399 : BF                         phi     R15             ; result += multiplicand
(1)    139A :                    umul16_sr:
(1)    139A : 98                         ghi     R8
(1)    139B : F6                         shr
(1)    139C : B8                         phi     R8
(1)    139D : 88                         glo     R8
(1)    139E : 76                         shrc
(1)    139F : A8                         plo     R8              ; multiplier >>= 1
(1)    13A0 : 87                         glo     R7
(1)    13A1 : FE                         shl
(1)    13A2 : A7                         plo     R7
(1)    13A3 : 97                         ghi     R7
(1)    13A4 : 7E                         shlc
(1)    13A5 : B7                         phi     R7              ; multiplicand <<= 1
(1)    13A6 :                    umul16_check:
(1)    13A6 : 98                         ghi     R8
(1)    13A7 : 3A 8B                      bnz     umul16_loop     ; while multiplier != 0
(1)    13A9 : 88                         glo     R8
(1)    13AA : 3A 8B                      bnz     umul16_loop     ; while multiplier != 0
(1)    13AC : 9F                         ghi     R15
(1)    13AD : B7                         phi     R7
(1)    13AE : 8F                         glo     R15
(1)    13AF : A7                         plo     R7              ; R7=result
(1)    13B0 : D6                         sep     R6              ; return
(1)    13B1 :
(1)    13B1 :                    ;;; Signed multiplication: multiplicand *= multiplier
(1)    13B1 :                    ;;; @param R7 multiplicand
(1)    13B1 :                    ;;; @param R8 multiplier
(1)    13B1 :                    ;;; @return R7 multiplicand * multiplier
(1)    13B1 :                    ;;;   SEP R5
(1)    13B1 :                    ;;;   DC  A(mul16)
(1)    13B1 :                    ;;; @clobber R8 R15
(1)    13B1 :                    mul16:
(1)    13B1 : 98                         ghi     R8
(1)    13B2 : 52                         str     R2
(1)    13B3 : 97                         ghi     R7
(1)    13B4 : F3                         xor
(1)    13B5 : 73                         stxd                    ; push sign
(1)    13B6 : 98                         ghi     R8
(1)    13B7 : FA 80                      ani     X'80'
(1)    13B9 : 32 C4                      bz      mul16_multiplicand
(1)    13BB : 98                         ghi     R8
(1)    13BC : FB FF                      xri     X'FF'
(1)    13BE : B8                         phi     R8
(1)    13BF : 88                         glo     R8
(1)    13C0 : FB FF                      xri     X'FF'
(1)    13C2 : A8                         plo     R8
(1)    13C3 : 18                         inc     R8              ; negate multiplier
(1)    13C4 :                    mul16_multiplicand:
(1)    13C4 : 97                         ghi     R7
(1)    13C5 : FA 80                      ani     X'80'
(1)    13C7 : 32 D2                      bz      mul16_multiply
(1)    13C9 : 97                         ghi     R7
(1)    13CA : FB FF                      xri     X'FF'
(1)    13CC : B7                         phi     R7
(1)    13CD : 87                         glo     R7
(1)    13CE : FB FF                      xri     X'FF'
(1)    13D0 : A7                         plo     R7
(1)    13D1 : 17                         inc     R7              ; negate multiplicand
(1)    13D2 :                    mul16_multiply:
(1)    13D2 : D5                         sep     R5
(1)    13D3 : 13 85                      dc      A(umul16)       ; call umul16
(1)    13D5 : 60                         irx
(1)    13D6 : F0                         ldx                     ; sign
(1)    13D7 : FA 80                      ani     X'80'
(1)    13D9 : 32 E4                      bz      mul16_return
(1)    13DB : 97                         ghi     R7
(1)    13DC : FB FF                      xri     X'FF'
(1)    13DE : B7                         phi     R7
(1)    13DF : 87                         glo     R7
(1)    13E0 : FB FF                      xri     X'FF'
(1)    13E2 : A7                         plo     R7
(1)    13E3 : 17                         inc     R7              ; negate result
(1)    13E4 :                    mul16_return:
(1)    13E4 : D6                         sep     R6
(1)    13E5 :
(1)    13E5 :                    ;;; Unsigned division: dividend / divisor = quotient ... remainder
(1)    13E5 :                    ;;; @praram R7 dividend
(1)    13E5 :                    ;;; @praram R8 divisor
(1)    13E5 :                    ;;; @return R7 quotient
(1)    13E5 :                    ;;; @return R8 remainder
(1)    13E5 :                    ;;; @clobber R7 R8 R15
(1)    13E5 :                    udiv16:
(1)    13E5 : 98                         ghi     R8
(1)    13E6 : 3A EC                      bnz     udiv16_calc
(1)    13E8 : 88                         glo     R8
(1)    13E9 : 3A EC                      bnz     udiv16_calc
(1)    13EB : D6                         sep     R6              ; return divide by zero
(1)    13EC :                    udiv16_calc:
(1)    13EC : 89                         glo     R9
(1)    13ED : 73                         stxd
(1)    13EE : 99                         ghi     R9
(1)    13EF : 73                         stxd                    ; save R9
(1)    13F0 : F8 01                      ldi     1
(1)    13F2 : AF                         plo     R15             ; R15.0=bits
(1)    13F3 : 30 FC                      br      udiv16_prep
(1)    13F5 :                    udiv16_prep_loop:
(1)    13F5 : 88                         glo     R8
(1)    13F6 : FE                         shl
(1)    13F7 : A8                         plo     R8
(1)    13F8 : 98                         ghi     R8
(1)    13F9 : 7E                         shlc
(1)    13FA : B8                         phi     R8              ; divisor <<= 1
(1)    13FB : 1F                         inc     R15             ; ++bits
(1)    13FC :                    udiv16_prep:
(1)    13FC : 98                         ghi     R8
(1)    13FD : FA 80                      ani     X'80'
(1)    13FF : C2 13 F5                   bz      udiv16_prep_loop ; while msb(divisor) == 0
(1)    1402 : 97                         ghi     R7
(1)    1403 : B9                         phi     R9
(1)    1404 : 87                         glo     R7
(1)    1405 : A9                         plo     R9              ; R9=dividend
(1)    1406 : F8 00                      ldi     0
(1)    1408 : B7                         phi     R7
(1)    1409 : A7                         plo     R7              ; R7=quotient
(1)    140A : 30 18                      br      udiv16_enter_loop
(1)    140C :                    udiv16_loop:
(1)    140C : 98                         ghi     R8
(1)    140D : F6                         shr
(1)    140E : B8                         phi     R8
(1)    140F : 88                         glo     R8
(1)    1410 : 76                         shrc
(1)    1411 : A8                         plo     R8              ; divisor >>= 1
(1)    1412 : 87                         glo     R7
(1)    1413 : FE                         shl
(1)    1414 : A7                         plo     R7
(1)    1415 : 97                         ghi     R7
(1)    1416 : 7E                         shlc
(1)    1417 : B7                         phi     R7              ; quotient <<= 1
(1)    1418 :                    udiv16_enter_loop:
(1)    1418 : 88                         glo     R8
(1)    1419 : 52                         str     R2
(1)    141A : 89                         glo     R9
(1)    141B : F7                         sm
(1)    141C : A9                         plo     R9
(1)    141D : 98                         ghi     R8
(1)    141E : 52                         str     R2
(1)    141F : 99                         ghi     R9
(1)    1420 : 77                         smb
(1)    1421 : B9                         phi     R9              ; dividend-=divisor
(1)    1422 : 3B 27                      bm      udiv16_readd    ; branch if dividend < 0
(1)    1424 : 17                         inc     R7              ; quotient += 1
(1)    1425 : 30 31                      br      udiv16_next
(1)    1427 :                    udiv16_readd:
(1)    1427 : 88                         glo     R8
(1)    1428 : 52                         str     R2
(1)    1429 : 89                         glo     R9
(1)    142A : F4                         add
(1)    142B : A9                         plo     R9
(1)    142C : 98                         ghi     R8
(1)    142D : 52                         str     R2
(1)    142E : 99                         ghi     R9
(1)    142F : 74                         adc
(1)    1430 : B9                         phi     R9              ; dividend+=divisor
(1)    1431 :                    udiv16_next:
(1)    1431 : 2F                         dec     R15
(1)    1432 : 8F                         glo     R15
(1)    1433 : 3A 0C                      bnz     udiv16_loop     ; while bits != 0
(1)    1435 : 99                         ghi     R9
(1)    1436 : B8                         phi     R8
(1)    1437 : 89                         glo     R9
(1)    1438 : A8                         plo     R8              ; R8=remainder
(1)    1439 : 60                         irx
(1)    143A : 72                         ldxa
(1)    143B : B9                         phi     R9
(1)    143C : F0                         ldx
(1)    143D : A9                         plo     R9              ; restore R9
(1)    143E : D6                         sep     R6              ; return
(1)    143F :
(1)    143F :                    ;;; Signed division: dividend / divisor = quotient ... remainder
(1)    143F :                    ;;; @param R7 dividend
(1)    143F :                    ;;; @param R8 divisor
(1)    143F :                    ;;; @return R7 quotient
(1)    143F :                    ;;; @return R8 remainder
(1)    143F :                    ;;;   SEP R5
(1)    143F :                    ;;;   DC  A(div16)
(1)    143F :                    ;;; @clobber R15
(1)    143F :                    div16:
(1)    143F : 98                         ghi     R8
(1)    1440 : 52                         str     R2
(1)    1441 : 97                         ghi     R7
(1)    1442 : F3                         xor
(1)    1443 : 73                         stxd                    ; push sign
(1)    1444 : 98                         ghi     R8
(1)    1445 : FA 80                      ani     X'80'
(1)    1447 : 32 52                      bz      div16_dividend
(1)    1449 : 98                         ghi     R8
(1)    144A : FB FF                      xri     X'FF'
(1)    144C : B8                         phi     R8
(1)    144D : 88                         glo     R8
(1)    144E : FB FF                      xri     X'FF'
(1)    1450 : A8                         plo     R8
(1)    1451 : 18                         inc     R8              ; negate divisor
(1)    1452 :                    div16_dividend:
(1)    1452 : 97                         ghi     R7              ; R7=dividend
(1)    1453 : FA 80                      ani     X'80'
(1)    1455 : 32 60                      bz      div16_divide
(1)    1457 : 97                         ghi     R7
(1)    1458 : FB FF                      xri     X'FF'
(1)    145A : B7                         phi     R7
(1)    145B : 87                         glo     R7
(1)    145C : FB FF                      xri     X'FF'
(1)    145E : A7                         plo     R7
(1)    145F : 17                         inc     R7              ; negate dividend
(1)    1460 :                    div16_divide:
(1)    1460 : D5                         sep     R5
(1)    1461 : 13 E5                      dc      A(udiv16)       ; call udiv16
(1)    1463 : 60                         irx
(1)    1464 : F0                         ldx                     ; pop sign
(1)    1465 : FA 80                      ani     X'80'
(1)    1467 : 32 72                      bz      div16_return
(1)    1469 : 97                         ghi     R7
(1)    146A : FB FF                      xri     X'FF'
(1)    146C : B7                         phi     R7
(1)    146D : 87                         glo     R7
(1)    146E : FB FF                      xri     X'FF'
(1)    1470 : A7                         plo     R7
(1)    1471 : 17                         inc     R7              ; negate quotient
(1)    1472 :                    div16_return:
(1)    1472 : D6                         sep     R6
       1473 :
       1473 :                            end
