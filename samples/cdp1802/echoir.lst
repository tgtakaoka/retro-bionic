          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     1802
          0 :                            option  "smart-branch", "on"
          0 :                            include "cdp1802.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; CDP1802 register alias
(1)       0 : =0                 R0:     equ     0
(1)       0 : =1                 R1:     equ     1
(1)       0 : =2                 R2:     equ     2
(1)       0 : =3                 R3:     equ     3
(1)       0 : =4                 R4:     equ     4
(1)       0 : =5                 R5:     equ     5
(1)       0 : =6                 R6:     equ     6
(1)       0 : =7                 R7:     equ     7
(1)       0 : =8                 R8:     equ     8
(1)       0 : =9                 R9:     equ     9
(1)       0 : =A                 R10:    equ     10
(1)       0 : =B                 R11:    equ     11
(1)       0 : =C                 R12:    equ     12
(1)       0 : =D                 R13:    equ     13
(1)       0 : =E                 R14:    equ     14
(1)       0 : =F                 R15:    equ     15
(1)       0 :
(1)       0 :                    ;;; Transfer locations
(1)       0 : =0                 ORG_RESET:      equ     0000H   ; Reset transfer location
          0 :
          0 :                            org     ORG_RESET
          0 : 71                         dis                     ; disable interrupt
          1 : 00                         dc      X'00'           ; X:P=0:0
          2 : 30 04                      br      scrt_init
          4 :                            include "scrt.inc"
(1)       4 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       4 :
(1)       4 :                    ;;; Standard Call and Return Technique
(1)       4 :                    ;;; R0: DMA pointer
(1)       4 :                    ;;; R1: Program counter for Interrupt routine
(1)       4 :                    ;;; R2: Stack pointer
(1)       4 :                    ;;; R3: Program counter
(1)       4 :                    ;;; R4: Link register, pointer to the return location and arguments
(1)       4 :                    ;;;     passed by the calling program
(1)       4 :                    ;;; R5: Dedicated program counter for CALL routine
(1)       4 :                    ;;; R6: Dedicated program counter for RETURN routine
(1)       4 :
(1)       4 :                    ;;; Call subroutine
(1)       4 :                    ;;;   SEP R5
(1)       4 :                    ;;;   DC  A(subroutine)
(1)       4 :                    ;;;   DC  arguments...
(1)       4 :                    ;;; Subroutine return
(1)       4 :                    ;;;   SEP R6
(1)       4 :                    ;;; Return from interrupt
(1)       4 :                    ;;;   SEP R1
(1)       4 :
(1)       4 :                    ;;; Initialize for SCRT, P=0
(1)       4 :                    ;;; @param P!=3
(1)       4 :                    ;;; @param stack top address of stack
(1)       4 :                    ;;; @param main start address of main routine
(1)       4 :                    ;;; @return P=3
(1)       4 :                    ;;; @return R1=scrt_isr
(1)       4 :                    ;;; @return R2=stack
(1)       4 :                    ;;; @return R3=main
(1)       4 :                    ;;; @return R5=scrt_call
(1)       4 :                    ;;; @return R6=scrt_return
(1)       4 :                    ;;; @clobber D, R15
(1)       4 :                    scrt_init:
(1)       4 : F8 00                      ldi     A.1(scrt_start)
(1)       6 : B3                         phi     R3
(1)       7 : F8 0B                      ldi     A.0(scrt_start)
(1)       9 : A3                         plo     R3
(1)       A : D3                         sep     R3              ; P=3
(1)       B :                    scrt_start:
(1)       B : F8 00                      ldi     A.1(scrt_init_tab)
(1)       D : BF                         phi     R15
(1)       E : F8 24                      ldi     A.0(scrt_init_tab)
(1)      10 : AF                         plo     R15
(1)      11 : 4F                         lda     R15             ; setup interrupt
(1)      12 : B1                         phi     R1
(1)      13 : 4F                         lda     R15
(1)      14 : A1                         plo     R1
(1)      15 : 4F                         lda     R15             ; setup stack
(1)      16 : B2                         phi     R2
(1)      17 : 4F                         lda     R15
(1)      18 : A2                         plo     R2
(1)      19 : 4F                         lda     R15             ; setup call
(1)      1A : B5                         phi     R5
(1)      1B : 4F                         lda     R15
(1)      1C : A5                         plo     R5
(1)      1D : 4F                         lda     R15             ; setup return
(1)      1E : B6                         phi     R6
(1)      1F : 4F                         lda     R15
(1)      20 : A6                         plo     R6
(1)      21 : C0 01 00                   br      main            ; goto main with P=3
(1)      24 :
(1)      24 :                    scrt_init_tab:
(1)      24 : 00 62                      dc      A(scrt_isr)     ; R1
(1)      26 : 0F FF                      dc      A(stack)        ; R2
(1)      28 : 00 2D                      dc      A(scrt_call)    ; R5
(1)      2A : 00 3F                      dc      A(scrt_return)  ; R6
(1)      2C :
(1)      2C :                    ;;; Call subroutine, P=5
(1)      2C :                    ;;; @param M(R3):M(R3+1) subroutine address
(1)      2C :                    ;;; @param M(R3+2) optional arguments, depending on a subroutine called.
(1)      2C :                    ;;; @return R4 points optional arguments
(1)      2C :                    ;;; @return M(R2) R4.1, R4.0
(1)      2C :                    ;;; @clobber R15.1, X
(1)      2C :                    ;;; @unchanged D, DF, IE, R0, R1, R7-R14, R15.0
(1)      2C :                    scrt_call_exit:
(1)      2C : D3                         sep     R3              ; go to subroutine
(1)      2D :                    scrt_call:
(1)      2D : BF                         phi     R15             ; save D to R15.1
(1)      2E : E2                         sex     R2              ; select stack
(1)      2F : 84                         glo     R4              ; push old link register R4
(1)      30 : 73                         stxd
(1)      31 : 94                         ghi     R4
(1)      32 : 73                         stxd
(1)      33 : 93                         ghi     R3              ; load link register
(1)      34 : B4                         phi     R4
(1)      35 : 83                         glo     R3
(1)      36 : A4                         plo     R4
(1)      37 : 44                         lda     R4              ; load the address of subroutine
(1)      38 : B3                         phi     R3
(1)      39 : 44                         lda     R4
(1)      3A : A3                         plo     R3              ; R3=subroutine address
(1)      3B : 9F                         ghi     R15             ; restore D
(1)      3C : 30 2C                      br      scrt_call_exit
(1)      3E :
(1)      3E :                    ;;; Return subroutine, P=6
(1)      3E :                    ;;; @param R4 return address
(1)      3E :                    ;;; @oaram M(R2) R4.1, R4.0, X:P(3)
(1)      3E :                    ;;; @clobber R15.1, X
(1)      3E :                    ;;; @unchanged D, DF, R0, R1, R7-R14, R15.0
(1)      3E :                    scrt_return_exit:
(1)      3E : D3                         sep     R3              ; return to subroutine caller
(1)      3F :                    scrt_return:
(1)      3F : BF                         phi     R15             ; save D to R15.1
(1)      40 : 94                         ghi     R4              ; load return address from link register
(1)      41 : B3                         phi     R3
(1)      42 : 84                         glo     R4
(1)      43 : A3                         plo     R3
(1)      44 : E2                         sex     R2              ; select stack
(1)      45 : 60                         irx
(1)      46 : 72                         ldxa                    ; pop link register R4
(1)      47 : B4                         phi     R4
(1)      48 : F0                         ldx
(1)      49 : A4                         plo     R4
(1)      4A : 9F                         ghi     R15             ; restore D
(1)      4B : 30 3E                      br      scrt_return_exit
(1)      4D :
(1)      4D :                    ;;; Interrupt exit entry P=1
(1)      4D :                    ;;;  (Come here by SEP R1)
(1)      4D :                    scrt_isr_exit:
(1)      4D : 60                         irx
(1)      4E : 72                         ldxa                    ; pop program counter R3
(1)      4F : B3                         phi     R3
(1)      50 : 72                         ldxa
(1)      51 : A3                         plo     R3
(1)      52 : 72                         ldxa                    ; pop call pointer R5
(1)      53 : B5                         phi     R5
(1)      54 : 72                         ldxa
(1)      55 : A5                         plo     R5
(1)      56 : 72                         ldxa                    ; pop return pointer R6
(1)      57 : B6                         phi     R6
(1)      58 : 72                         ldxa
(1)      59 : A6                         plo     R6
(1)      5A : 72                         ldxa                    ; pop scratch pad register R15
(1)      5B : BF                         phi     R15
(1)      5C : 72                         ldxa
(1)      5D : AF                         plo     R15
(1)      5E : 72                         ldxa                    ; pop DF into D:MSB
(1)      5F : FE                         shl                     ; restore DF
(1)      60 : 72                         ldxa                    ; pop D
(1)      61 : 70                         ret                     ; restore X,P IE=1
(1)      62 :                            ;; R1 points scrt_isr
(1)      62 :                    ;;; CDP1802 interrupt entry, X=2, P=1, IE=0
(1)      62 :                    ;;; @unchanged D, DF, X, P, R3, R5, R6, R15
(1)      62 :                    scrt_isr:
(1)      62 :                            ;; R2[0] must be preserved because it may be in the pop process
(1)      62 : 22                         dec     R2
(1)      63 : 78                         sav                     ; push X,P
(1)      64 : 22                         dec     R2
(1)      65 : 73                         stxd                    ; push D
(1)      66 : 76                         shrc                    ; MSB of D=DF
(1)      67 : 73                         stxd                    ; push DF
(1)      68 : 8F                         glo     R15             ; push scratch pad register R15
(1)      69 : 73                         stxd
(1)      6A : 9F                         ghi     R15
(1)      6B : 73                         stxd
(1)      6C : 86                         glo     R6              ; push return pointer R6
(1)      6D : 73                         stxd
(1)      6E : 96                         ghi     R6
(1)      6F : 73                         stxd
(1)      70 : 85                         glo     R5              ; push call pointer R5
(1)      71 : 73                         stxd
(1)      72 : 95                         ghi     R5
(1)      73 : 73                         stxd
(1)      74 : 83                         glo     R3              ; push program counter R3
(1)      75 : 73                         stxd
(1)      76 : 93                         ghi     R3
(1)      77 : 73                         stxd
(1)      78 :                            ;; Initialize SCRT registers because interrupt service routine
(1)      78 :                            ;; may use call/return
(1)      78 : F8 00                      ldi     A.1(scrt_call)  ; initialize call pointer R5
(1)      7A : B5                         phi     R5
(1)      7B : F8 2D                      ldi     A.0(scrt_call)
(1)      7D : A5                         plo     R5
(1)      7E : F8 00                      ldi     A.1(scrt_return) ; initialize return pointer R6
(1)      80 : B6                         phi     R6
(1)      81 : F8 3F                      ldi     A.0(scrt_return)
(1)      83 : A6                         plo     R6
(1)      84 :                            ;;
(1)      84 : F8 01                      ldi     A.1(isr)
(1)      86 : B3                         phi     R3
(1)      87 : F8 E9                      ldi     A.0(isr)
(1)      89 : A3                         plo     R3
(1)      8A : D3                         sep     R3              ; call interrupt service routine with P=3
(1)      8B : 30 4D                      br      scrt_isr_exit   ; return from isr by SEP R1
         8D :
         8D :                    ;;; MC6850 Asynchronous Communication Interface Adapter
         8D : =4                 ACIA:   equ     4
         8D :                            include "mc6850.inc"
(1)      8D :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)      8D :
(1)      8D :                    ;;; MC6850
(1)      8D :                    ;;; Asynchronous Communication Interface Adapter
(1)      8D :
(1)      8D :                    ;;; Control register
(1)      8D : =4                 ACIA_control:   equ     ACIA+0
(1)      8D :                            ;; Counter Divider Select Bits
(1)      8D : =3                 CDS_gm:         equ     11b    ; Group mask
(1)      8D : =0                 CDS_DIV1_gc:    equ     00000000B ; /1
(1)      8D : =1                 CDS_DIV16_gc:   equ     00000001B ; /16
(1)      8D : =2                 CDS_DIV64_gc:   equ     00000010B ; /64
(1)      8D : =3                 CDS_RESET_gc:   equ     00000011B ; Master Reset
(1)      8D :                            ;; Word Select Bits
(1)      8D : =1C                WSB_gm:         equ     00011100B ; Group mask
(1)      8D : =0                 WSB_7E2_gc:     equ     00000000B ; 7 Bits + Even Parity + 2 Stop Bits
(1)      8D : =4                 WSB_7O2_gc:     equ     00000100B ; 7 bits + Odd Parity  + 2 Stop Bits
(1)      8D : =8                 WSB_7E1_gc:     equ     00001000B ; 7 bits + Even Parity + 1 Stop Bits
(1)      8D : =C                 WSB_7O1_gc:     equ     00001100B ; 7 bits + Odd Parity  + 1 Stop Bits
(1)      8D : =10                WSB_8N2_gc:     equ     00010000B ; 8 bits + No Parity   + 2 Stop Bits
(1)      8D : =14                WSB_8N1_gc:     equ     00010100B ; 8 bits + No Parity   + 1 Stop Bits
(1)      8D : =18                WSB_8E1_gc:     equ     00011000B ; 8 bits + Even Parity + 1 Stop Bits
(1)      8D : =1C                WSB_8O1_gc:     equ     00011100B ; 8 bits + Odd Parity  + 1 Stop Bits
(1)      8D :                            ;; Transmit Control Bits
(1)      8D : =60                TCB_gm:         equ     01100000B ; Group mask
(1)      8D : =0                 TCB_DI_gc:      equ     00000000B ; RTS=Low,  Tx Interrupt Disabled
(1)      8D : =20                TCB_EI_gc:      equ     00100000B ; RTS=Low,  Tx Interrupt Enabled
(1)      8D : =40                TCB_RTS_gc:     equ     01000000B ; RTS=High, Tx Interrupt Disabled
(1)      8D : =60                TCB_BREAK_gc:   equ     01100000B ; RTS=Low,  Tx Interrupt Disabled
(1)      8D :                                                      ; Transmit Break Level
(1)      8D : =80                RIEB_bm:        equ     10000000B ; Receive Interrupt Enable Bit mask
(1)      8D :
(1)      8D :                    ;;; Status register
(1)      8D : =4                 ACIA_status:    equ     ACIA+0
(1)      8D : =1                 RDRF_bm:        equ     00000001B ; Receive Data Register Full
(1)      8D : =2                 TDRE_bm:        equ     00000010B ; Transmit Data Register Empty
(1)      8D : =4                 DCDF_bm:        equ     00000100B ; Data Carrier Detect Flag
(1)      8D : =8                 CTSF_bm:        equ     00001000B ; Clear To Send Flag
(1)      8D : =10                FERR_bm:        equ     00010000B ; Frame Error Flag
(1)      8D : =20                OVRN_bm:        equ     00100000B ; Receiver Overrun Flag
(1)      8D : =40                PERR_bm:        equ     01000000B ; Parity Error Flag
(1)      8D : =80                IRQF_bm:        equ     10000000B ; Interrupt Request Flag
(1)      8D :
(1)      8D :                    ;;; Data register
(1)      8D : =5                 ACIA_data:      equ     ACIA+1          ; Data register
         8D : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
         8D :
       2000 :                            org     X'2000'
       2000 :
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:
       2080 :                            org     *+rx_queue_size
       2080 :
       2080 :
       2080 : =FFF               stack:  equ     X'1000'-1
       2080 :
        100 :                            org     X'0100'
        100 :                    main:
        100 : D5                         sep     R5
        101 : 01 54                      dc      A(queue_init)   ; call queue_init
        103 : 20 00                      dc      A(rx_queue)
        105 : 80                         dc      rx_queue_size
        106 :                            ;; initialize ACIA
        106 : F8 01                      ldi     A.1(ACIA_config)
        108 : B8                         phi     R8
        109 : F8 15                      ldi     A.0(ACIA_config)
        10B : A8                         plo     R8
        10C : E8                         sex     R8              ; R8 for inp/out
        10D : 64                         out     ACIA_control    ; Master reset
        10E : 64                         out     ACIA_control    ; Set mode
        10F : E3                         sex     R3
        110 : 70                         ret
        111 : 33                         dc      X'33'           ; enable interrupt
        112 : E2                         sex     R2
        113 : 30 17                      br      loop
        115 :
        115 :                    ACIA_config:
        115 : 03                         dc      CDS_RESET_gc    ; Master reset
        116 : 94                         dc      RX_INT_TX_NO
        117 :
        117 :                    loop:
        117 : E3                         sex     R3
        118 : 71                         dis                     ; disable interrupt
        119 : 33                         dc      X'33'           ; X=3, P=3
        11A : E2                         sex     R2
        11B : D5                         sep     R5              ; call queue_remove
        11C : 01 AE                      dc      A(queue_remove)
        11E : 20 00                      dc      A(rx_queue)
        120 : E3                         sex     R3
        121 : 70                         ret                     ; enable interrupt
        122 : 33                         dc      X'33'
        123 : E2                         sex     R2
        124 : 32 17                      bz      loop            ; branch if queue is empty
        126 : 87                         glo     R7
        127 : 32 36                      bz      halt_to_system
        129 :                    echo:
        129 : D5                         sep     R5              ; call putchar
        12A : 01 38                      dc      A(putchar)
        12C : 87                         glo     R7
        12D : FB 0D                      xri     X'0D'           ; carriage return
        12F : 3A 17                      bnz     loop
        131 : F8 0A                      ldi     X'0A'           ; newline
        133 : A7                         plo     R7
        134 : 30 29                      br      echo
        136 :                    halt_to_system:
        136 : 00                         idl
        137 :
        137 :                    ;;; @param D char
        137 :                    ;;; @unchanged D
        137 :                    ;;; @clobber R15
        137 :                    putchar_char:
        137 : 00                         dc      0
        138 :                    putchar:
        138 : AF                         plo     R15             ; save D to R15.0
        139 : 88                         glo     R8              ; save R8
        13A : 73                         stxd
        13B : 98                         ghi     R8
        13C : 73                         stxd
        13D :                            ;;
        13D : F8 01                      ldi     A.1(putchar_char)
        13F : B8                         phi     R8
        140 : F8 37                      ldi     A.0(putchar_char)
        142 : A8                         plo     R8
        143 : E8                         sex     R8              ; R8 for inp/out
        144 :                    putchar_loop:
        144 : 6C                         inp     ACIA_status
        145 : FA 02                      ani     TDRE_bm
        147 : 32 44                      bz      putchar_loop
        149 : 8F                         glo     R15             ; restore D
        14A : 58                         str     R8              ; putchar_char
        14B : 65                         out     ACIA_data
        14C :                            ;;
        14C : E2                         sex     R2
        14D : 60                         irx
        14E : 72                         ldxa                    ; restore R8
        14F : B8                         phi     R8
        150 : F0                         ldx
        151 : A8                         plo     R8
        152 : 8F                         glo     R15             ; restore D
        153 : D6                         sep     R6              ; return
        154 :
        154 :                            include "queue.inc"
(1)     154 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     154 :                    ;;; [queue] queue structure
(1)     154 : =0                 queue_len:      equ     0       ; queue length
(1)     154 : =1                 queue_size:     equ     1       ; buffer size
(1)     154 : =2                 queue_put:      equ     2       ; queue put index
(1)     154 : =3                 queue_get:      equ     3       ; queue get index
(1)     154 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     154 :
(1)     154 :                    ;;; [queue] Initialize queue
(1)     154 :                    ;;; @param R4+0 queue work space pointer
(1)     154 :                    ;;; @param R4+2 queue work space size
(1)     154 :                    ;;; @clobber D, R15
(1)     154 :                    queue_init:
(1)     154 : 8E                         glo     R14             ; save R14.0
(1)     155 : 73                         stxd
(1)     156 :                            ;;
(1)     156 : 44                         lda     R4
(1)     157 : BF                         phi     R15
(1)     158 : 44                         lda     R4
(1)     159 : AF                         plo     R15             ; R15=queue space pointer
(1)     15A : F8 00                      ldi     0
(1)     15C : 5F                         str     R15             ; clear queue_len
(1)     15D : 1F                         inc     R15
(1)     15E : 44                         lda     R4              ; queue space size
(1)     15F : FF 04                      smi     queue_buf       ; calculate queue size
(1)     161 : 5F                         str     R15             ; store queue_size
(1)     162 : FC 02                      adi     2               ; for queue_put and queue_get
(1)     164 : AE                         plo     R14             ; R14.0: byte counter
(1)     165 :                    queue_init_clear:
(1)     165 : F8 00                      ldi     0
(1)     167 : 1F                         inc     R15
(1)     168 : 5F                         str     R15             ; clear memory
(1)     169 : 8E                         glo     R14
(1)     16A : FF 01                      smi     1
(1)     16C : AE                         plo     R14             ; decrement byte counter
(1)     16D : 3A 65                      bnz     queue_init_clear
(1)     16F :                            ;;
(1)     16F : 60                         irx
(1)     170 : F0                         ldx                     ; restore R14.0
(1)     171 : AE                         plo     R14
(1)     172 : D6                         sep     R6              ; return
(1)     173 :
(1)     173 :                    ;;; [queue] Add an element to queue
(1)     173 :                    ;;; @param R4+0 queue work space pointer
(1)     173 :                    ;;; @param R7.0 an element
(1)     173 :                    ;;; @return D 0 if queue is full
(1)     173 :                    queue_add:
(1)     173 : 8E                         glo     R14             ; save R14
(1)     174 : 73                         stxd
(1)     175 : 9E                         ghi     R14
(1)     176 : 73                         stxd
(1)     177 :                            ;;
(1)     177 : 44                         lda     R4
(1)     178 : BF                         phi     R15
(1)     179 : 44                         lda     R4
(1)     17A : AF                         plo     R15             ; R15=queue space pointer
(1)     17B : EF                         sex     R15
(1)     17C : 72                         ldxa                    ; load queue_len
(1)     17D : F3                         xor                     ; queue_len ^ queue_size
(1)     17E : 32 A5                      bz      queue_add_return ; branch if D=0
(1)     180 : 2F                         dec     R15
(1)     181 : 8F                         glo     R15
(1)     182 : FC 04                      adi     queue_buf
(1)     184 : AE                         plo     R14
(1)     185 : 9F                         ghi     R15
(1)     186 : 7C 00                      adci    0
(1)     188 : BE                         phi     R14             ; R14=&queue_buf[0]
(1)     189 : 0F                         ldn     R15
(1)     18A : FC 01                      adi     1
(1)     18C : 5F                         str     R15             ; queue_len++
(1)     18D : 8E                         glo     R14
(1)     18E : 1F                         inc     R15
(1)     18F : 1F                         inc     R15
(1)     190 : EF                         sex     R15
(1)     191 : F4                         add                     ; add queue_put
(1)     192 : AE                         plo     R14
(1)     193 : 9E                         ghi     R14
(1)     194 : 7C 00                      adci    0
(1)     196 : BE                         phi     R14             ; R14=&queue_buf[queue_put]
(1)     197 : 87                         glo     R7              ; R7.0=an element
(1)     198 : 5E                         str     R14             ; store an element
(1)     199 : 0F                         ldn     R15             ; load queue_put
(1)     19A : FC 01                      adi     1
(1)     19C : 5F                         str     R15             ; update queue_put
(1)     19D : 2F                         dec     R15
(1)     19E : F3                         xor                      ; queue_put ^ queue_size
(1)     19F : 3A A5                      bnz     queue_add_return ; branch if D!=0
(1)     1A1 : 1F                         inc     R15
(1)     1A2 : 5F                         str     R15             ; queue_put=0
(1)     1A3 : F8 01                      ldi     1
(1)     1A5 :                    queue_add_return:
(1)     1A5 : AF                         plo     R15             ; return flag
(1)     1A6 : E2                         sex     R2
(1)     1A7 : 60                         irx
(1)     1A8 : 72                         ldxa                    ; restore R14
(1)     1A9 : BE                         phi     R14
(1)     1AA : F0                         ldx
(1)     1AB : AE                         plo     R14
(1)     1AC : 8F                         glo     R15
(1)     1AD : D6                         sep     R6              ; return
(1)     1AE :
(1)     1AE :                    ;;; [queue] Remove an element from queue
(1)     1AE :                    ;;; @param R4+0 queue work space pointer
(1)     1AE :                    ;;; @return R7.0 an element
(1)     1AE :                    ;;; @return D 0 if queue is empty
(1)     1AE :                    ;;; @clobber R15
(1)     1AE :                    queue_remove:
(1)     1AE : 8E                         glo     R14             ; save R14
(1)     1AF : 73                         stxd
(1)     1B0 : 9E                         ghi     R14
(1)     1B1 : 73                         stxd
(1)     1B2 :                            ;;
(1)     1B2 : 44                         lda     R4
(1)     1B3 : BF                         phi     R15
(1)     1B4 : 44                         lda     R4
(1)     1B5 : AF                         plo     R15             ; R15=queue space pointer
(1)     1B6 : 0F                         ldn     R15             ; load queue_len
(1)     1B7 : 32 DF                      bz      queue_remove_return ; branch if D=0
(1)     1B9 : FF 01                      smi     1
(1)     1BB : 5F                         str     R15             ; queue_len--
(1)     1BC : 8F                         glo     R15
(1)     1BD : FC 04                      adi     queue_buf
(1)     1BF : AE                         plo     R14
(1)     1C0 : 9F                         ghi     R15
(1)     1C1 : 7C 00                      adci    0
(1)     1C3 : BE                         phi     R14             ; R14=&queue_buf[0]
(1)     1C4 : 8E                         glo     R14
(1)     1C5 : 1F                         inc     R15
(1)     1C6 : 1F                         inc     R15
(1)     1C7 : 1F                         inc     R15
(1)     1C8 : EF                         sex     R15
(1)     1C9 : F4                         add                     ; add queue_get
(1)     1CA : AE                         plo     R14
(1)     1CB : 9E                         ghi     R14
(1)     1CC : 7C 00                      adci    0
(1)     1CE : BE                         phi     R14             ; R14=&queue_buf[queue_get]
(1)     1CF : 0E                         ldn     R14             ; load an alement
(1)     1D0 : A7                         plo     R7              ; R7.0=an element
(1)     1D1 : 0F                         ldn     R15             ; load queue_get
(1)     1D2 : FC 01                      adi     1
(1)     1D4 : 5F                         str     R15             ; update queue_get
(1)     1D5 : 2F                         dec     R15
(1)     1D6 : 2F                         dec     R15
(1)     1D7 : F3                         xor                     ; queue_get ^ queue_size
(1)     1D8 : 3A DF                      bnz     queue_remove_return ; brnach if D!=0
(1)     1DA : 1F                         inc     R15
(1)     1DB : 1F                         inc     R15
(1)     1DC : 5F                         str     R15             ; queue_get=0
(1)     1DD : F8 01                      ldi     1
(1)     1DF :                    queue_remove_return:
(1)     1DF : AF                         plo     R15             ; return flag
(1)     1E0 : E2                         sex     R2
(1)     1E1 : 60                         irx
(1)     1E2 : 72                         ldxa                    ; restore R14
(1)     1E3 : BE                         phi     R14
(1)     1E4 : F0                         ldx
(1)     1E5 : AE                         plo     R14
(1)     1E6 : 8F                         glo     R15             ; return flag
(1)     1E7 : D6                         sep     R6              ; return
        1E8 :
        1E8 :                    ;;; From scrt_isr, P=3
        1E8 :                    received_char:
        1E8 : 00                         dc      0
        1E9 :                    isr:
        1E9 : 88                         glo     R8              ; save R8
        1EA : 73                         stxd
        1EB : 98                         ghi     R8
        1EC : 73                         stxd
        1ED : 87                         glo     R7
        1EE : 73                         stxd                    ; save R7.0
        1EF :                            ;;
        1EF : F8 01                      ldi     A.1(received_char)
        1F1 : B8                         phi     R8
        1F2 : F8 E8                      ldi     A.0(received_char)
        1F4 : A8                         plo     R8
        1F5 : E8                         sex     R8              ; R8 for inp/out
        1F6 : 6C                         inp     ACIA_status
        1F7 : FA 80                      ani     IRQF_bm
        1F9 : C2 02 08                   bz      isr_exit        ; no interrupt
        1FC :                    isr_receive:
        1FC : 6C                         inp     ACIA_status
        1FD : FA 01                      ani     RDRF_bm
        1FF : 32 08                      bz      isr_exit        ; no data is received
        201 : 6D                         inp     ACIA_data
        202 : A7                         plo     R7
        203 : D5                         sep     R5              ; call queue_add
        204 : 01 73                      dc      A(queue_add)
        206 : 20 00                      dc      A(rx_queue)
        208 :                    isr_exit:
        208 : E2                         sex     R2
        209 : 60                         irx
        20A : 72                         ldxa                    ; restore R7.0
        20B : A7                         plo     R7
        20C : 72                         ldxa                    ; restore R8
        20D : B8                         phi     R8
        20E : F0                         ldx
        20F : A8                         plo     R8
        210 : D1                         sep     R1              ; return to scrt_isr
