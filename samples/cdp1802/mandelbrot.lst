          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     1802
          0 :                            option  "smart-branch", "on"
          0 :                            include "cdp1802.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; CDP1802 register alias
(1)       0 : =0                 R0:     equ     0
(1)       0 : =1                 R1:     equ     1
(1)       0 : =2                 R2:     equ     2
(1)       0 : =3                 R3:     equ     3
(1)       0 : =4                 R4:     equ     4
(1)       0 : =5                 R5:     equ     5
(1)       0 : =6                 R6:     equ     6
(1)       0 : =7                 R7:     equ     7
(1)       0 : =8                 R8:     equ     8
(1)       0 : =9                 R9:     equ     9
(1)       0 : =A                 R10:    equ     10
(1)       0 : =B                 R11:    equ     11
(1)       0 : =C                 R12:    equ     12
(1)       0 : =D                 R13:    equ     13
(1)       0 : =E                 R14:    equ     14
(1)       0 : =F                 R15:    equ     15
(1)       0 :
(1)       0 :                    ;;; Transfer locations
(1)       0 : =0                 ORG_RESET:      equ     0000H   ; Reset transfer location
          0 :
          0 :                            org     ORG_RESET
          0 : 71                         dis                     ; disable interrupt
          1 : 00                         dc      X'00'           ; X:P=0:0
          2 : 30 04                      br      scrt_init
          4 :                            include "scrt.inc"
(1)       4 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       4 :
(1)       4 :                    ;;; Standard Call and Return Technique
(1)       4 :                    ;;; R0: DMA pointer
(1)       4 :                    ;;; R1: Program counter for Interrupt routine
(1)       4 :                    ;;; R2: Stack pointer
(1)       4 :                    ;;; R3: Program counter
(1)       4 :                    ;;; R4: Link register, pointer to the return location and arguments
(1)       4 :                    ;;;     passed by the calling program
(1)       4 :                    ;;; R5: Dedicated program counter for CALL routine
(1)       4 :                    ;;; R6: Dedicated program counter for RETURN routine
(1)       4 :
(1)       4 :                    ;;; Call subroutine
(1)       4 :                    ;;;   SEP R5
(1)       4 :                    ;;;   DC  A(subroutine)
(1)       4 :                    ;;;   DC  arguments...
(1)       4 :                    ;;; Subroutine return
(1)       4 :                    ;;;   SEP R6
(1)       4 :                    ;;; Return from interrupt
(1)       4 :                    ;;;   SEP R1
(1)       4 :
(1)       4 :                    ;;; Initialize for SCRT, P=0
(1)       4 :                    ;;; @param P!=3
(1)       4 :                    ;;; @param stack top address of stack
(1)       4 :                    ;;; @param main start address of main routine
(1)       4 :                    ;;; @return P=3
(1)       4 :                    ;;; @return R1=scrt_isr
(1)       4 :                    ;;; @return R2=stack
(1)       4 :                    ;;; @return R3=main
(1)       4 :                    ;;; @return R5=scrt_call
(1)       4 :                    ;;; @return R6=scrt_return
(1)       4 :                    ;;; @clobber D, R15
(1)       4 :                    scrt_init:
(1)       4 : F8 00                      ldi     A.1(scrt_start)
(1)       6 : B3                         phi     R3
(1)       7 : F8 0B                      ldi     A.0(scrt_start)
(1)       9 : A3                         plo     R3
(1)       A : D3                         sep     R3              ; P=3
(1)       B :                    scrt_start:
(1)       B : F8 00                      ldi     A.1(scrt_init_tab)
(1)       D : BF                         phi     R15
(1)       E : F8 24                      ldi     A.0(scrt_init_tab)
(1)      10 : AF                         plo     R15
(1)      11 : 4F                         lda     R15             ; setup interrupt
(1)      12 : B1                         phi     R1
(1)      13 : 4F                         lda     R15
(1)      14 : A1                         plo     R1
(1)      15 : 4F                         lda     R15             ; setup stack
(1)      16 : B2                         phi     R2
(1)      17 : 4F                         lda     R15
(1)      18 : A2                         plo     R2
(1)      19 : 4F                         lda     R15             ; setup call
(1)      1A : B5                         phi     R5
(1)      1B : 4F                         lda     R15
(1)      1C : A5                         plo     R5
(1)      1D : 4F                         lda     R15             ; setup return
(1)      1E : B6                         phi     R6
(1)      1F : 4F                         lda     R15
(1)      20 : A6                         plo     R6
(1)      21 : C0 10 00                   br      main            ; goto main with P=3
(1)      24 :
(1)      24 :                    scrt_init_tab:
(1)      24 : 00 62                      dc      A(scrt_isr)     ; R1
(1)      26 : 0F FF                      dc      A(stack)        ; R2
(1)      28 : 00 2D                      dc      A(scrt_call)    ; R5
(1)      2A : 00 3F                      dc      A(scrt_return)  ; R6
(1)      2C :
(1)      2C :                    ;;; Call subroutine, P=5
(1)      2C :                    ;;; @param M(R3):M(R3+1) subroutine address
(1)      2C :                    ;;; @param M(R3+2) optional arguments, depending on a subroutine called.
(1)      2C :                    ;;; @return R4 points optional arguments
(1)      2C :                    ;;; @return M(R2) R4.1, R4.0
(1)      2C :                    ;;; @clobber R15.1, X
(1)      2C :                    ;;; @unchanged D, DF, IE, R0, R1, R7-R14, R15.0
(1)      2C :                    scrt_call_exit:
(1)      2C : D3                         sep     R3              ; go to subroutine
(1)      2D :                    scrt_call:
(1)      2D : BF                         phi     R15             ; save D to R15.1
(1)      2E : E2                         sex     R2              ; select stack
(1)      2F : 84                         glo     R4              ; push old link register R4
(1)      30 : 73                         stxd
(1)      31 : 94                         ghi     R4
(1)      32 : 73                         stxd
(1)      33 : 93                         ghi     R3              ; load link register
(1)      34 : B4                         phi     R4
(1)      35 : 83                         glo     R3
(1)      36 : A4                         plo     R4
(1)      37 : 44                         lda     R4              ; load the address of subroutine
(1)      38 : B3                         phi     R3
(1)      39 : 44                         lda     R4
(1)      3A : A3                         plo     R3              ; R3=subroutine address
(1)      3B : 9F                         ghi     R15             ; restore D
(1)      3C : 30 2C                      br      scrt_call_exit
(1)      3E :
(1)      3E :                    ;;; Return subroutine, P=6
(1)      3E :                    ;;; @param R4 return address
(1)      3E :                    ;;; @oaram M(R2) R4.1, R4.0, X:P(3)
(1)      3E :                    ;;; @clobber R15.1, X
(1)      3E :                    ;;; @unchanged D, DF, R0, R1, R7-R14, R15.0
(1)      3E :                    scrt_return_exit:
(1)      3E : D3                         sep     R3              ; return to subroutine caller
(1)      3F :                    scrt_return:
(1)      3F : BF                         phi     R15             ; save D to R15.1
(1)      40 : 94                         ghi     R4              ; load return address from link register
(1)      41 : B3                         phi     R3
(1)      42 : 84                         glo     R4
(1)      43 : A3                         plo     R3
(1)      44 : E2                         sex     R2              ; select stack
(1)      45 : 60                         irx
(1)      46 : 72                         ldxa                    ; pop link register R4
(1)      47 : B4                         phi     R4
(1)      48 : F0                         ldx
(1)      49 : A4                         plo     R4
(1)      4A : 9F                         ghi     R15             ; restore D
(1)      4B : 30 3E                      br      scrt_return_exit
(1)      4D :
(1)      4D :                    ;;; Interrupt exit entry P=1
(1)      4D :                    ;;;  (Come here by SEP R1)
(1)      4D :                    scrt_isr_exit:
(1)      4D : 60                         irx
(1)      4E : 72                         ldxa                    ; pop program counter R3
(1)      4F : B3                         phi     R3
(1)      50 : 72                         ldxa
(1)      51 : A3                         plo     R3
(1)      52 : 72                         ldxa                    ; pop call pointer R5
(1)      53 : B5                         phi     R5
(1)      54 : 72                         ldxa
(1)      55 : A5                         plo     R5
(1)      56 : 72                         ldxa                    ; pop return pointer R6
(1)      57 : B6                         phi     R6
(1)      58 : 72                         ldxa
(1)      59 : A6                         plo     R6
(1)      5A : 72                         ldxa                    ; pop scratch pad register R15
(1)      5B : BF                         phi     R15
(1)      5C : 72                         ldxa
(1)      5D : AF                         plo     R15
(1)      5E : 72                         ldxa                    ; pop DF into D:MSB
(1)      5F : FE                         shl                     ; restore DF
(1)      60 : 72                         ldxa                    ; pop D
(1)      61 : 70                         ret                     ; restore X,P IE=1
(1)      62 :                            ;; R1 points scrt_isr
(1)      62 :                    ;;; CDP1802 interrupt entry, X=2, P=1, IE=0
(1)      62 :                    ;;; @unchanged D, DF, X, P, R3, R5, R6, R15
(1)      62 :                    scrt_isr:
(1)      62 :                            ;; R2[0] must be preserved because it may be in the pop process
(1)      62 : 22                         dec     R2
(1)      63 : 78                         sav                     ; push X,P
(1)      64 : 22                         dec     R2
(1)      65 : 73                         stxd                    ; push D
(1)      66 : 76                         shrc                    ; MSB of D=DF
(1)      67 : 73                         stxd                    ; push DF
(1)      68 : 8F                         glo     R15             ; push scratch pad register R15
(1)      69 : 73                         stxd
(1)      6A : 9F                         ghi     R15
(1)      6B : 73                         stxd
(1)      6C : 86                         glo     R6              ; push return pointer R6
(1)      6D : 73                         stxd
(1)      6E : 96                         ghi     R6
(1)      6F : 73                         stxd
(1)      70 : 85                         glo     R5              ; push call pointer R5
(1)      71 : 73                         stxd
(1)      72 : 95                         ghi     R5
(1)      73 : 73                         stxd
(1)      74 : 83                         glo     R3              ; push program counter R3
(1)      75 : 73                         stxd
(1)      76 : 93                         ghi     R3
(1)      77 : 73                         stxd
(1)      78 :                            ;; Initialize SCRT registers because interrupt service routine
(1)      78 :                            ;; may use call/return
(1)      78 : F8 00                      ldi     A.1(scrt_call)  ; initialize call pointer R5
(1)      7A : B5                         phi     R5
(1)      7B : F8 2D                      ldi     A.0(scrt_call)
(1)      7D : A5                         plo     R5
(1)      7E : F8 00                      ldi     A.1(scrt_return) ; initialize return pointer R6
(1)      80 : B6                         phi     R6
(1)      81 : F8 3F                      ldi     A.0(scrt_return)
(1)      83 : A6                         plo     R6
(1)      84 :                            ;;
(1)      84 : F8 10                      ldi     A.1(isr)
(1)      86 : B3                         phi     R3
(1)      87 : F8 65                      ldi     A.0(isr)
(1)      89 : A3                         plo     R3
(1)      8A : D3                         sep     R3              ; call interrupt service routine with P=3
(1)      8B : 30 4D                      br      scrt_isr_exit   ; return from isr by SEP R1
         8D :
         8D :                    ;;; MC6850 Asynchronous Communication Interface Adapter
         8D : =4                 ACIA:   equ     4
         8D :                            include "mc6850.inc"
(1)      8D :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)      8D :
(1)      8D :                    ;;; MC6850
(1)      8D :                    ;;; Asynchronous Communication Interface Adapter
(1)      8D :
(1)      8D :                    ;;; Control register
(1)      8D : =4                 ACIA_control:   equ     ACIA+0
(1)      8D :                            ;; Counter Divider Select Bits
(1)      8D : =3                 CDS_gm:         equ     11b    ; Group mask
(1)      8D : =0                 CDS_DIV1_gc:    equ     00000000B ; /1
(1)      8D : =1                 CDS_DIV16_gc:   equ     00000001B ; /16
(1)      8D : =2                 CDS_DIV64_gc:   equ     00000010B ; /64
(1)      8D : =3                 CDS_RESET_gc:   equ     00000011B ; Master Reset
(1)      8D :                            ;; Word Select Bits
(1)      8D : =1C                WSB_gm:         equ     00011100B ; Group mask
(1)      8D : =0                 WSB_7E2_gc:     equ     00000000B ; 7 Bits + Even Parity + 2 Stop Bits
(1)      8D : =4                 WSB_7O2_gc:     equ     00000100B ; 7 bits + Odd Parity  + 2 Stop Bits
(1)      8D : =8                 WSB_7E1_gc:     equ     00001000B ; 7 bits + Even Parity + 1 Stop Bits
(1)      8D : =C                 WSB_7O1_gc:     equ     00001100B ; 7 bits + Odd Parity  + 1 Stop Bits
(1)      8D : =10                WSB_8N2_gc:     equ     00010000B ; 8 bits + No Parity   + 2 Stop Bits
(1)      8D : =14                WSB_8N1_gc:     equ     00010100B ; 8 bits + No Parity   + 1 Stop Bits
(1)      8D : =18                WSB_8E1_gc:     equ     00011000B ; 8 bits + Even Parity + 1 Stop Bits
(1)      8D : =1C                WSB_8O1_gc:     equ     00011100B ; 8 bits + Odd Parity  + 1 Stop Bits
(1)      8D :                            ;; Transmit Control Bits
(1)      8D : =60                TCB_gm:         equ     01100000B ; Group mask
(1)      8D : =0                 TCB_DI_gc:      equ     00000000B ; RTS=Low,  Tx Interrupt Disabled
(1)      8D : =20                TCB_EI_gc:      equ     00100000B ; RTS=Low,  Tx Interrupt Enabled
(1)      8D : =40                TCB_RTS_gc:     equ     01000000B ; RTS=High, Tx Interrupt Disabled
(1)      8D : =60                TCB_BREAK_gc:   equ     01100000B ; RTS=Low,  Tx Interrupt Disabled
(1)      8D :                                                      ; Transmit Break Level
(1)      8D : =80                RIEB_bm:        equ     10000000B ; Receive Interrupt Enable Bit mask
(1)      8D :
(1)      8D :                    ;;; Status register
(1)      8D : =4                 ACIA_status:    equ     ACIA+0
(1)      8D : =1                 RDRF_bm:        equ     00000001B ; Receive Data Register Full
(1)      8D : =2                 TDRE_bm:        equ     00000010B ; Transmit Data Register Empty
(1)      8D : =4                 DCDF_bm:        equ     00000100B ; Data Carrier Detect Flag
(1)      8D : =8                 CTSF_bm:        equ     00001000B ; Clear To Send Flag
(1)      8D : =10                FERR_bm:        equ     00010000B ; Frame Error Flag
(1)      8D : =20                OVRN_bm:        equ     00100000B ; Receiver Overrun Flag
(1)      8D : =40                PERR_bm:        equ     01000000B ; Parity Error Flag
(1)      8D : =80                IRQF_bm:        equ     10000000B ; Interrupt Request Flag
(1)      8D :
(1)      8D :                    ;;; Data register
(1)      8D : =5                 ACIA_data:      equ     ACIA+1          ; Data register
         8D :
       2000 :                            org     X'2000'
       2000 :
       2000 : =80                rx_queue_size:  equ     128
       2000 : =80                tx_queue_size:  equ     128
       2000 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
       2000 : =B4                RX_INT_TX_INT:  equ     WSB_8N1_gc|RIEB_bm|TCB_EI_gc
       2000 :
       2000 :                    rx_queue:
       2080 :                            org     *+rx_queue_size
       2080 :                    tx_queue:
       2100 :                            org     *+tx_queue_size
       2100 :
       2100 : =FFF               stack:  equ     X'1000'-1
       2100 :
       1000 :                            org     X'1000'
       1000 :                    main:
       1000 : D5                         sep     R5
       1001 : 10 A7                      dc      A(queue_init)   ; call queue_init
       1003 : 20 00                      dc      A(rx_queue)
       1005 : 80                         dc      rx_queue_size
       1006 : D5                         sep     R5
       1007 : 10 A7                      dc      A(queue_init)   ; call queue_init
       1009 : 20 80                      dc      A(tx_queue)
       100B : 80                         dc      tx_queue_size
       100C :                            ;; initialize ACIA
       100C : F8 10                      ldi     A.1(ACIA_config)
       100E : B8                         phi     R8
       100F : F8 1B                      ldi     A.0(ACIA_config)
       1011 : A8                         plo     R8
       1012 : E8                         sex     R8              ; R8 for out
       1013 : 64                         out     ACIA_control    ; Master reset
       1014 : 64                         out     ACIA_control    ; Set mode
       1015 : E3                         sex     R3
       1016 : 70                         ret
       1017 : 33                         dc      X'33'           ; enable interrupt
       1018 : E2                         sex     R2
       1019 : 30 1D                      br      loop
       101B :
       101B :                    ACIA_config:
       101B : 03                         dc      CDS_RESET_gc    ; Master reset
       101C : 94                         dc      RX_INT_TX_NO
       101D :
       101D :                    loop:
       101D : D5                         sep     R5              ; call mandelbrot
       101E : 12 CC                      dc      A(mandelbrot)
       1020 : D5                         sep     R5
       1021 : 10 57                      dc      A(newline)
       1023 : 30 1D                      br      loop
       1025 :
       1025 :                    ;;; Get character
       1025 :                    ;;; @return R7.0 char
       1025 :                    ;;; @return A 0 if no char received
       1025 :                    getchar:
       1025 : E3                         sex     R3
       1026 : 71                         dis                     ; disable interrupt
       1027 : 33                         dc      X'33'
       1028 : E2                         sex     R2
       1029 : D5                         sep     R5              ; call queue_remove
       102A : 11 01                      dc      A(queue_remove)
       102C : 20 00                      dc      A(rx_queue)
       102E : E3                         sex     R3
       102F : 70                         ret                     ; enable interrupt
       1030 : 33                         dc      X'33'
       1031 : E2                         sex     R2
       1032 : D6                         sep     R6              ; return
       1033 :
       1033 :                    ;;; Put character
       1033 :                    ;;; @param D char
       1033 :                    ;;; @unchanged D
       1033 :                    ;;; @clobber R15
       1033 :                    putchar:
       1033 : 73                         stxd                    ; save D
       1034 : AF                         plo     R15             ; save D to scratch pad
       1035 : 87                         glo     R7              ; save R7.0
       1036 : 73                         stxd
       1037 : 8F                         glo     R15             ; restore D
       1038 :                            ;;
       1038 : A7                         plo     R7              ; R7.0=char
       1039 :                    putchar_loop:
       1039 : E3                         sex     R3
       103A : 71                         dis                     ; disable interrupt
       103B : 33                         dc      X'33'
       103C : E2                         sex     R2
       103D : D5                         sep     R5              ; call queue_add
       103E : 10 C6                      dc      A(queue_add)
       1040 : 20 80                      dc      A(tx_queue)
       1042 : E3                         sex     R3
       1043 : 70                         ret                     ; enable interrupt
       1044 : 33                         dc      X'33'
       1045 : E2                         sex     R2
       1046 : 32 39                      bz      putchar_loop    ; retry if queue is full
       1048 : F8 10                      ldi     A.1(putchar_txint)
       104A : BF                         phi     R15
       104B : F8 56                      ldi     A.0(putchar_txint)
       104D : AF                         plo     R15
       104E : EF                         sex     R15             ; R15 for out
       104F : 64                         out     ACIA_control
       1050 :                    putchar_exit:
       1050 : E2                         sex     R2
       1051 : 60                         irx
       1052 : 72                         ldxa                    ; restore R7.0
       1053 : A7                         plo     R7
       1054 : F0                         ldx                     ; restore D
       1055 : D6                         sep     R6              ; return
       1056 :                    putchar_txint:
       1056 : B4                         dc      RX_INT_TX_INT   ; enable Tx interrupt
       1057 :
       1057 :                    ;;; Print out newline
       1057 :                    ;;; @clobber D R15.0
       1057 :                    newline:
       1057 : F8 0D                      ldi     X'0D'
       1059 : D5                         sep     R5              ; call
       105A : 10 33                      dc      A(putchar)
       105C : F8 0A                      ldi     X'0A'
       105E : 30 33                      br      putchar
       1060 :
       1060 :                    ;;; Print out space
       1060 :                    ;;; @clobber D R15.0
       1060 :                    putspace:
       1060 : F8 20                      ldi     T' '
       1062 : 30 33                      br      putchar
       1064 :
       1064 :                    ;;; From scrt_isr, X=2, P=3
       1064 :                    isr_char:
       1064 : 00                         dc      0
       1065 :                    isr:
       1065 : 88                         glo     R8              ; save R8
       1066 : 73                         stxd
       1067 : 98                         ghi     R8
       1068 : 73                         stxd
       1069 : 87                         glo     R7              ; save R7
       106A : 73                         stxd
       106B : 97                         ghi     R7
       106C : 73                         stxd
       106D :                            ;;
       106D : F8 10                      ldi     A.1(isr_char)
       106F : B8                         phi     R8
       1070 : F8 64                      ldi     A.0(isr_char)
       1072 : A8                         plo     R8
       1073 : E8                         sex     R8              ; R8 for inp/out
       1074 : 6C                         inp     ACIA_status
       1075 : FA 80                      ani     IRQF_bm
       1077 : 32 9C                      bz      isr_exit
       1079 : 6C                         inp     ACIA_status
       107A : FA 01                      ani     RDRF_bm
       107C : 32 85                      bz      isr_send        ; no data is received
       107E : 6D                         inp     ACIA_data
       107F : A7                         plo     R7
       1080 : D5                         sep     R5              ; call queue_add
       1081 : 10 C6                      dc      A(queue_add)
       1083 : 20 00                      dc      A(rx_queue)
       1085 :                    isr_send:
       1085 : 6C                         inp     ACIA_status
       1086 : FA 02                      ani     TDRE_bm
       1088 : 32 9C                      bz      isr_exit
       108A : D5                         sep     R5              ; call queue_remove
       108B : 11 01                      dc      A(queue_remove)
       108D : 20 80                      dc      A(tx_queue)
       108F : 32 97                      bz      isr_send_empty
       1091 : 87                         glo     R7
       1092 : 58                         str     R8              ; send character
       1093 : E8                         sex     R8              ; R8 for out
       1094 : 65                         out     ACIA_data
       1095 : 30 9C                      br      isr_exit
       1097 :                    isr_send_empty:
       1097 : F8 94                      ldi     RX_INT_TX_NO    ; disable Tx interrupt
       1099 : 58                         str     R8
       109A : E8                         sex     R8              ; R8 for out
       109B : 64                         out     ACIA_control
       109C :                    isr_exit:
       109C : E2                         sex     R2
       109D : 60                         irx
       109E : 72                         ldxa                    ; restore R7
       109F : B7                         phi     R7
       10A0 : 72                         ldxa
       10A1 : A7                         plo     R7
       10A2 : 72                         ldxa                    ; restore R8
       10A3 : B8                         phi     R8
       10A4 : F0                         ldx
       10A5 : A8                         plo     R8
       10A6 : D1                         sep     R1              ; return to scrt_isr
       10A7 :
       10A7 :                            include "queue.inc"
(1)    10A7 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    10A7 :                    ;;; [queue] queue structure
(1)    10A7 : =0                 queue_len:      equ     0       ; queue length
(1)    10A7 : =1                 queue_size:     equ     1       ; buffer size
(1)    10A7 : =2                 queue_put:      equ     2       ; queue put index
(1)    10A7 : =3                 queue_get:      equ     3       ; queue get index
(1)    10A7 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)    10A7 :
(1)    10A7 :                    ;;; [queue] Initialize queue
(1)    10A7 :                    ;;; @param R4+0 queue work space pointer
(1)    10A7 :                    ;;; @param R4+2 queue work space size
(1)    10A7 :                    ;;; @clobber D, R15
(1)    10A7 :                    queue_init:
(1)    10A7 : 8E                         glo     R14             ; save R14.0
(1)    10A8 : 73                         stxd
(1)    10A9 :                            ;;
(1)    10A9 : 44                         lda     R4
(1)    10AA : BF                         phi     R15
(1)    10AB : 44                         lda     R4
(1)    10AC : AF                         plo     R15             ; R15=queue space pointer
(1)    10AD : F8 00                      ldi     0
(1)    10AF : 5F                         str     R15             ; clear queue_len
(1)    10B0 : 1F                         inc     R15
(1)    10B1 : 44                         lda     R4              ; queue space size
(1)    10B2 : FF 04                      smi     queue_buf       ; calculate queue size
(1)    10B4 : 5F                         str     R15             ; store queue_size
(1)    10B5 : FC 02                      adi     2               ; for queue_put and queue_get
(1)    10B7 : AE                         plo     R14             ; R14.0: byte counter
(1)    10B8 :                    queue_init_clear:
(1)    10B8 : F8 00                      ldi     0
(1)    10BA : 1F                         inc     R15
(1)    10BB : 5F                         str     R15             ; clear memory
(1)    10BC : 8E                         glo     R14
(1)    10BD : FF 01                      smi     1
(1)    10BF : AE                         plo     R14             ; decrement byte counter
(1)    10C0 : 3A B8                      bnz     queue_init_clear
(1)    10C2 :                            ;;
(1)    10C2 : 60                         irx
(1)    10C3 : F0                         ldx                     ; restore R14.0
(1)    10C4 : AE                         plo     R14
(1)    10C5 : D6                         sep     R6              ; return
(1)    10C6 :
(1)    10C6 :                    ;;; [queue] Add an element to queue
(1)    10C6 :                    ;;; @param R4+0 queue work space pointer
(1)    10C6 :                    ;;; @param R7.0 an element
(1)    10C6 :                    ;;; @return D 0 if queue is full
(1)    10C6 :                    queue_add:
(1)    10C6 : 8E                         glo     R14             ; save R14
(1)    10C7 : 73                         stxd
(1)    10C8 : 9E                         ghi     R14
(1)    10C9 : 73                         stxd
(1)    10CA :                            ;;
(1)    10CA : 44                         lda     R4
(1)    10CB : BF                         phi     R15
(1)    10CC : 44                         lda     R4
(1)    10CD : AF                         plo     R15             ; R15=queue space pointer
(1)    10CE : EF                         sex     R15
(1)    10CF : 72                         ldxa                    ; load queue_len
(1)    10D0 : F3                         xor                     ; queue_len ^ queue_size
(1)    10D1 : 32 F8                      bz      queue_add_return ; branch if D=0
(1)    10D3 : 2F                         dec     R15
(1)    10D4 : 8F                         glo     R15
(1)    10D5 : FC 04                      adi     queue_buf
(1)    10D7 : AE                         plo     R14
(1)    10D8 : 9F                         ghi     R15
(1)    10D9 : 7C 00                      adci    0
(1)    10DB : BE                         phi     R14             ; R14=&queue_buf[0]
(1)    10DC : 0F                         ldn     R15
(1)    10DD : FC 01                      adi     1
(1)    10DF : 5F                         str     R15             ; queue_len++
(1)    10E0 : 8E                         glo     R14
(1)    10E1 : 1F                         inc     R15
(1)    10E2 : 1F                         inc     R15
(1)    10E3 : EF                         sex     R15
(1)    10E4 : F4                         add                     ; add queue_put
(1)    10E5 : AE                         plo     R14
(1)    10E6 : 9E                         ghi     R14
(1)    10E7 : 7C 00                      adci    0
(1)    10E9 : BE                         phi     R14             ; R14=&queue_buf[queue_put]
(1)    10EA : 87                         glo     R7              ; R7.0=an element
(1)    10EB : 5E                         str     R14             ; store an element
(1)    10EC : 0F                         ldn     R15             ; load queue_put
(1)    10ED : FC 01                      adi     1
(1)    10EF : 5F                         str     R15             ; update queue_put
(1)    10F0 : 2F                         dec     R15
(1)    10F1 : F3                         xor                      ; queue_put ^ queue_size
(1)    10F2 : 3A F8                      bnz     queue_add_return ; branch if D!=0
(1)    10F4 : 1F                         inc     R15
(1)    10F5 : 5F                         str     R15             ; queue_put=0
(1)    10F6 : F8 01                      ldi     1
(1)    10F8 :                    queue_add_return:
(1)    10F8 : AF                         plo     R15             ; return flag
(1)    10F9 : E2                         sex     R2
(1)    10FA : 60                         irx
(1)    10FB : 72                         ldxa                    ; restore R14
(1)    10FC : BE                         phi     R14
(1)    10FD : F0                         ldx
(1)    10FE : AE                         plo     R14
(1)    10FF : 8F                         glo     R15
(1)    1100 : D6                         sep     R6              ; return
(1)    1101 :
(1)    1101 :                    ;;; [queue] Remove an element from queue
(1)    1101 :                    ;;; @param R4+0 queue work space pointer
(1)    1101 :                    ;;; @return R7.0 an element
(1)    1101 :                    ;;; @return D 0 if queue is empty
(1)    1101 :                    ;;; @clobber R15
(1)    1101 :                    queue_remove:
(1)    1101 : 8E                         glo     R14             ; save R14
(1)    1102 : 73                         stxd
(1)    1103 : 9E                         ghi     R14
(1)    1104 : 73                         stxd
(1)    1105 :                            ;;
(1)    1105 : 44                         lda     R4
(1)    1106 : BF                         phi     R15
(1)    1107 : 44                         lda     R4
(1)    1108 : AF                         plo     R15             ; R15=queue space pointer
(1)    1109 : 0F                         ldn     R15             ; load queue_len
(1)    110A : 32 32                      bz      queue_remove_return ; branch if D=0
(1)    110C : FF 01                      smi     1
(1)    110E : 5F                         str     R15             ; queue_len--
(1)    110F : 8F                         glo     R15
(1)    1110 : FC 04                      adi     queue_buf
(1)    1112 : AE                         plo     R14
(1)    1113 : 9F                         ghi     R15
(1)    1114 : 7C 00                      adci    0
(1)    1116 : BE                         phi     R14             ; R14=&queue_buf[0]
(1)    1117 : 8E                         glo     R14
(1)    1118 : 1F                         inc     R15
(1)    1119 : 1F                         inc     R15
(1)    111A : 1F                         inc     R15
(1)    111B : EF                         sex     R15
(1)    111C : F4                         add                     ; add queue_get
(1)    111D : AE                         plo     R14
(1)    111E : 9E                         ghi     R14
(1)    111F : 7C 00                      adci    0
(1)    1121 : BE                         phi     R14             ; R14=&queue_buf[queue_get]
(1)    1122 : 0E                         ldn     R14             ; load an alement
(1)    1123 : A7                         plo     R7              ; R7.0=an element
(1)    1124 : 0F                         ldn     R15             ; load queue_get
(1)    1125 : FC 01                      adi     1
(1)    1127 : 5F                         str     R15             ; update queue_get
(1)    1128 : 2F                         dec     R15
(1)    1129 : 2F                         dec     R15
(1)    112A : F3                         xor                     ; queue_get ^ queue_size
(1)    112B : 3A 32                      bnz     queue_remove_return ; brnach if D!=0
(1)    112D : 1F                         inc     R15
(1)    112E : 1F                         inc     R15
(1)    112F : 5F                         str     R15             ; queue_get=0
(1)    1130 : F8 01                      ldi     1
(1)    1132 :                    queue_remove_return:
(1)    1132 : AF                         plo     R15             ; return flag
(1)    1133 : E2                         sex     R2
(1)    1134 : 60                         irx
(1)    1135 : 72                         ldxa                    ; restore R14
(1)    1136 : BE                         phi     R14
(1)    1137 : F0                         ldx
(1)    1138 : AE                         plo     R14
(1)    1139 : 8F                         glo     R15             ; return flag
(1)    113A : D6                         sep     R6              ; return
       113B :                            include "arith.inc"
(1)    113B :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    113B :                            cpu     1802
(1)    113B :
(1)    113B :                    ;;; Print unsigned 16-bit integer as decimal
(1)    113B :                    ;;; @param R7 value
(1)    113B :                    ;;; @clobber D R7 R8 R15
(1)    113B :                    print_uint16:
(1)    113B : 97                         ghi     R7
(1)    113C : 3A 41                      bnz     print_uint16_loop
(1)    113E : 87                         glo     R7
(1)    113F : 32 58                      bz      print_uint16_zero
(1)    1141 :                    print_uint16_loop:
(1)    1141 : 97                         ghi     R7
(1)    1142 : 3A 48                      bnz     print_uint16_digit
(1)    1144 : 87                         glo     R7
(1)    1145 : 3A 48                      bnz     print_uint16_digit
(1)    1147 : D6                         sep     R6              ; return if value=0
(1)    1148 :                    print_uint16_digit:
(1)    1148 : F8 00                      ldi     0
(1)    114A : B8                         phi     R8
(1)    114B : F8 0A                      ldi     10
(1)    114D : A8                         plo     R8              ; divisor=10
(1)    114E : D5                         sep     R5
(1)    114F : 12 0C                      dc      A(udiv16)       ; call udiv16
(1)    1151 : 88                         glo     R8
(1)    1152 : 73                         stxd                    ; push remainder
(1)    1153 : D5                         sep     R5
(1)    1154 : 11 41                      dc      A(print_uint16_loop)
(1)    1156 : 12                         inc     R2
(1)    1157 : 02                         ldn     R2              ; pop remainder
(1)    1158 :                    print_uint16_zero:
(1)    1158 : FC 30                      adi     T'0'
(1)    115A : C0 10 33                   br      putchar
(1)    115D :
(1)    115D :                    ;;; Print signed 16-bit integer as decimal
(1)    115D :                    ;;; @param R7 value
(1)    115D :                    ;;; @clobber D R15
(1)    115D :                    print_int16:
(1)    115D : 88                         glo     R8
(1)    115E : 73                         stxd
(1)    115F : 98                         ghi     R8
(1)    1160 : 73                         stxd                    ; save R8
(1)    1161 : 87                         glo     R7
(1)    1162 : 73                         stxd
(1)    1163 : 97                         ghi     R7
(1)    1164 : 73                         stxd                    ; save R7
(1)    1165 : FA 80                      ani     X'80'
(1)    1167 : 32 77                      bz      print_int16_print
(1)    1169 : F8 2D                      ldi     T'-'
(1)    116B : D5                         sep     R5
(1)    116C : 10 33                      dc      A(putchar)      ; print '-'
(1)    116E : 97                         ghi     R7
(1)    116F : FB FF                      xri     X'FF'
(1)    1171 : B7                         phi     R7
(1)    1172 : 87                         glo     R7
(1)    1173 : FB FF                      xri     X'FF'
(1)    1175 : A7                         plo     R7
(1)    1176 : 17                         inc     R7              ; negate value
(1)    1177 :                    print_int16_print:
(1)    1177 : D5                         sep     R5
(1)    1178 : 11 3B                      dc      A(print_uint16)
(1)    117A : 60                         irx
(1)    117B : 72                         ldxa
(1)    117C : B7                         phi     R7
(1)    117D : 72                         ldxa
(1)    117E : A7                         plo     R7              ; restore R7
(1)    117F : 72                         ldxa
(1)    1180 : B8                         phi     R8
(1)    1181 : F0                         ldx
(1)    1182 : A8                         plo     R8              ; restore R8
(1)    1183 : D6                         sep     R6
(1)    1184 :
(1)    1184 :                    ;;; Store R7 to variable
(1)    1184 :                    ;;;   SEP  R5
(1)    1184 :                    ;;;   DC   A(store_R7)
(1)    1184 :                    ;;;   DC   A(variable)
(1)    1184 :                    ;;; @clobber D R15
(1)    1184 :                    store_R7:
(1)    1184 : E4                         sex     R4
(1)    1185 : 72                         ldxa
(1)    1186 : BF                         phi     R15
(1)    1187 : 72                         ldxa
(1)    1188 : AF                         plo     R15             ; R15=&valiable
(1)    1189 : 97                         ghi     R7
(1)    118A : 5F                         str     R15
(1)    118B : 1F                         inc     R15
(1)    118C : 87                         glo     R7
(1)    118D : 5F                         str     R15
(1)    118E : E2                         sex     R2
(1)    118F : D6                         sep     R6
(1)    1190 :
(1)    1190 :                    ;;; Load variable to R7
(1)    1190 :                    ;;;   SEP  R5
(1)    1190 :                    ;;;   DC   A(load_R7)
(1)    1190 :                    ;;;   DC   A(variable)
(1)    1190 :                    ;;; @return R7 variable
(1)    1190 :                    ;;; @clobber D R15
(1)    1190 :                    load_R7:
(1)    1190 : E4                         sex     R4
(1)    1191 : 72                         ldxa
(1)    1192 : B7                         phi     R7
(1)    1193 : 72                         ldxa
(1)    1194 : A7                         plo     R7
(1)    1195 : 07                         ldn     R7
(1)    1196 : AF                         plo     R15
(1)    1197 : 17                         inc     R7
(1)    1198 : 07                         ldn     R7
(1)    1199 : A7                         plo     R7
(1)    119A : 8F                         glo     R15
(1)    119B : B7                         phi     R7
(1)    119C : E2                         sex     R2
(1)    119D : D6                         sep     R6
(1)    119E :
(1)    119E :                    ;;; Load variable to R8
(1)    119E :                    ;;;   SEP  R5
(1)    119E :                    ;;;   DC   A(load_R8)
(1)    119E :                    ;;;   DC   A(variable)
(1)    119E :                    ;;; @clobber R15
(1)    119E :                    load_R8:
(1)    119E : E4                         sex     R4
(1)    119F : 72                         ldxa
(1)    11A0 : B8                         phi     R8
(1)    11A1 : 72                         ldxa
(1)    11A2 : A8                         plo     R8
(1)    11A3 : 08                         ldn     R8
(1)    11A4 : AF                         plo     R15
(1)    11A5 : 18                         inc     R8
(1)    11A6 : 08                         ldn     R8
(1)    11A7 : A8                         plo     R8
(1)    11A8 : 8F                         glo     R15
(1)    11A9 : B8                         phi     R8
(1)    11AA : E2                         sex     R2
(1)    11AB : D6                         sep     R6
(1)    11AC :
(1)    11AC :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)    11AC :                    ;;; @param R7 multiplicand
(1)    11AC :                    ;;; @param R8 multiplier
(1)    11AC :                    ;;; @return R7 result
(1)    11AC :                    ;;; @clobber D R7 R8 R15
(1)    11AC :                    umul16:
(1)    11AC : F8 00                      ldi     0
(1)    11AE : BF                         phi     R15
(1)    11AF : AF                         plo     R15             ; R15=result
(1)    11B0 : 30 CD                      br      umul16_check
(1)    11B2 :                    umul16_loop:
(1)    11B2 : 88                         glo     R8
(1)    11B3 : FA 01                      ani     1
(1)    11B5 : 32 C1                      bz      umul16_sr       ; lsb(multiplier)==0
(1)    11B7 : 87                         glo     R7
(1)    11B8 : 52                         str     R2              ; stack top=multiplicand.0
(1)    11B9 : 8F                         glo     R15
(1)    11BA : F4                         add
(1)    11BB : AF                         plo     R15
(1)    11BC : 97                         ghi     R7
(1)    11BD : 52                         str     R2              ; stack top=multiplicand.1
(1)    11BE : 9F                         ghi     R15
(1)    11BF : 74                         adc
(1)    11C0 : BF                         phi     R15             ; result += multiplicand
(1)    11C1 :                    umul16_sr:
(1)    11C1 : 98                         ghi     R8
(1)    11C2 : F6                         shr
(1)    11C3 : B8                         phi     R8
(1)    11C4 : 88                         glo     R8
(1)    11C5 : 76                         shrc
(1)    11C6 : A8                         plo     R8              ; multiplier >>= 1
(1)    11C7 : 87                         glo     R7
(1)    11C8 : FE                         shl
(1)    11C9 : A7                         plo     R7
(1)    11CA : 97                         ghi     R7
(1)    11CB : 7E                         shlc
(1)    11CC : B7                         phi     R7              ; multiplicand <<= 1
(1)    11CD :                    umul16_check:
(1)    11CD : 98                         ghi     R8
(1)    11CE : 3A B2                      bnz     umul16_loop     ; while multiplier != 0
(1)    11D0 : 88                         glo     R8
(1)    11D1 : 3A B2                      bnz     umul16_loop     ; while multiplier != 0
(1)    11D3 : 9F                         ghi     R15
(1)    11D4 : B7                         phi     R7
(1)    11D5 : 8F                         glo     R15
(1)    11D6 : A7                         plo     R7              ; R7=result
(1)    11D7 : D6                         sep     R6              ; return
(1)    11D8 :
(1)    11D8 :                    ;;; Signed multiplication: multiplicand *= multiplier
(1)    11D8 :                    ;;; @param R7 multiplicand
(1)    11D8 :                    ;;; @param R8 multiplier
(1)    11D8 :                    ;;; @return R7 multiplicand * multiplier
(1)    11D8 :                    ;;;   SEP R5
(1)    11D8 :                    ;;;   DC  A(mul16)
(1)    11D8 :                    ;;; @clobber R8 R15
(1)    11D8 :                    mul16:
(1)    11D8 : 98                         ghi     R8
(1)    11D9 : 52                         str     R2
(1)    11DA : 97                         ghi     R7
(1)    11DB : F3                         xor
(1)    11DC : 73                         stxd                    ; push sign
(1)    11DD : 98                         ghi     R8
(1)    11DE : FA 80                      ani     X'80'
(1)    11E0 : 32 EB                      bz      mul16_multiplicand
(1)    11E2 : 98                         ghi     R8
(1)    11E3 : FB FF                      xri     X'FF'
(1)    11E5 : B8                         phi     R8
(1)    11E6 : 88                         glo     R8
(1)    11E7 : FB FF                      xri     X'FF'
(1)    11E9 : A8                         plo     R8
(1)    11EA : 18                         inc     R8              ; negate multiplier
(1)    11EB :                    mul16_multiplicand:
(1)    11EB : 97                         ghi     R7
(1)    11EC : FA 80                      ani     X'80'
(1)    11EE : 32 F9                      bz      mul16_multiply
(1)    11F0 : 97                         ghi     R7
(1)    11F1 : FB FF                      xri     X'FF'
(1)    11F3 : B7                         phi     R7
(1)    11F4 : 87                         glo     R7
(1)    11F5 : FB FF                      xri     X'FF'
(1)    11F7 : A7                         plo     R7
(1)    11F8 : 17                         inc     R7              ; negate multiplicand
(1)    11F9 :                    mul16_multiply:
(1)    11F9 : D5                         sep     R5
(1)    11FA : 11 AC                      dc      A(umul16)       ; call umul16
(1)    11FC : 60                         irx
(1)    11FD : F0                         ldx                     ; sign
(1)    11FE : FA 80                      ani     X'80'
(1)    1200 : 32 0B                      bz      mul16_return
(1)    1202 : 97                         ghi     R7
(1)    1203 : FB FF                      xri     X'FF'
(1)    1205 : B7                         phi     R7
(1)    1206 : 87                         glo     R7
(1)    1207 : FB FF                      xri     X'FF'
(1)    1209 : A7                         plo     R7
(1)    120A : 17                         inc     R7              ; negate result
(1)    120B :                    mul16_return:
(1)    120B : D6                         sep     R6
(1)    120C :
(1)    120C :                    ;;; Unsigned division: dividend / divisor = quotient ... remainder
(1)    120C :                    ;;; @praram R7 dividend
(1)    120C :                    ;;; @praram R8 divisor
(1)    120C :                    ;;; @return R7 quotient
(1)    120C :                    ;;; @return R8 remainder
(1)    120C :                    ;;; @clobber R7 R8 R15
(1)    120C :                    udiv16:
(1)    120C : 98                         ghi     R8
(1)    120D : 3A 13                      bnz     udiv16_calc
(1)    120F : 88                         glo     R8
(1)    1210 : 3A 13                      bnz     udiv16_calc
(1)    1212 : D6                         sep     R6              ; return divide by zero
(1)    1213 :                    udiv16_calc:
(1)    1213 : 89                         glo     R9
(1)    1214 : 73                         stxd
(1)    1215 : 99                         ghi     R9
(1)    1216 : 73                         stxd                    ; save R9
(1)    1217 : F8 01                      ldi     1
(1)    1219 : AF                         plo     R15             ; R15.0=bits
(1)    121A : 30 23                      br      udiv16_prep
(1)    121C :                    udiv16_prep_loop:
(1)    121C : 88                         glo     R8
(1)    121D : FE                         shl
(1)    121E : A8                         plo     R8
(1)    121F : 98                         ghi     R8
(1)    1220 : 7E                         shlc
(1)    1221 : B8                         phi     R8              ; divisor <<= 1
(1)    1222 : 1F                         inc     R15             ; ++bits
(1)    1223 :                    udiv16_prep:
(1)    1223 : 98                         ghi     R8
(1)    1224 : FA 80                      ani     X'80'
(1)    1226 : 32 1C                      bz      udiv16_prep_loop ; while msb(divisor) == 0
(1)    1228 : 97                         ghi     R7
(1)    1229 : B9                         phi     R9
(1)    122A : 87                         glo     R7
(1)    122B : A9                         plo     R9              ; R9=dividend
(1)    122C : F8 00                      ldi     0
(1)    122E : B7                         phi     R7
(1)    122F : A7                         plo     R7              ; R7=quotient
(1)    1230 : F8 01                      ldi     1               ; 1=no borrow
(1)    1232 : BF                         phi     R15             ; R15.1=borrow
(1)    1233 : 30 41                      br      udiv16_enter_loop
(1)    1235 :                    udiv16_loop:
(1)    1235 : 98                         ghi     R8
(1)    1236 : F6                         shr
(1)    1237 : B8                         phi     R8
(1)    1238 : 88                         glo     R8
(1)    1239 : 76                         shrc
(1)    123A : A8                         plo     R8              ; divisor >>= 1
(1)    123B : 87                         glo     R7
(1)    123C : FE                         shl
(1)    123D : A7                         plo     R7
(1)    123E : 97                         ghi     R7
(1)    123F : 7E                         shlc
(1)    1240 : B7                         phi     R7              ; quotient <<= 1
(1)    1241 :                    udiv16_enter_loop:
(1)    1241 : 9F                         ghi     R15             ; borrow
(1)    1242 : 32 50                      bz      udiv16_add      ; brancg if borrow (0)
(1)    1244 : 88                         glo     R8
(1)    1245 : 52                         str     R2
(1)    1246 : 89                         glo     R9
(1)    1247 : F7                         sm
(1)    1248 : A9                         plo     R9
(1)    1249 : 98                         ghi     R8
(1)    124A : 52                         str     R2
(1)    124B : 99                         ghi     R9
(1)    124C : 77                         smb
(1)    124D : B9                         phi     R9              ; dividend-=divisor
(1)    124E : 30 5A                      br      udiv16_quotient
(1)    1250 :                    udiv16_add:
(1)    1250 : 88                         glo     R8
(1)    1251 : 52                         str     R2
(1)    1252 : 89                         glo     R9
(1)    1253 : F4                         add
(1)    1254 : A9                         plo     R9
(1)    1255 : 98                         ghi     R8
(1)    1256 : 52                         str     R2
(1)    1257 : 99                         ghi     R9
(1)    1258 : 74                         adc
(1)    1259 : B9                         phi     R9              ; dividend+=divisor
(1)    125A :                    udiv16_quotient:
(1)    125A : F8 00                      ldi     0
(1)    125C : 7E                         shlc                    ; LSB(D)=DF; 0 if borrow
(1)    125D : BF                         phi     R15             ; borrow
(1)    125E : 32 61                      bz      udiv16_next
(1)    1260 : 17                         inc     R7              ; quotient += 1
(1)    1261 :                    udiv16_next:
(1)    1261 : 2F                         dec     R15
(1)    1262 : 8F                         glo     R15
(1)    1263 : 3A 35                      bnz     udiv16_loop     ; while bits != 0
(1)    1265 : 9F                         ghi     R15             ; borrow
(1)    1266 : 3A 72                      bnz     udiv16_return   ; branch if no borrow (1)
(1)    1268 : 88                         glo     R8              ; adjust dividend
(1)    1269 : 52                         str     R2
(1)    126A : 89                         glo     R9
(1)    126B : F4                         add
(1)    126C : A9                         plo     R9
(1)    126D : 98                         ghi     R8
(1)    126E : 52                         str     R2
(1)    126F : 99                         ghi     R9
(1)    1270 : 74                         adc
(1)    1271 : B9                         phi     R9              ; dividend+=divisor
(1)    1272 :                    udiv16_return:
(1)    1272 : 99                         ghi     R9
(1)    1273 : B8                         phi     R8
(1)    1274 : 89                         glo     R9
(1)    1275 : A8                         plo     R8              ; R8=remainder
(1)    1276 : 60                         irx
(1)    1277 : 72                         ldxa
(1)    1278 : B9                         phi     R9
(1)    1279 : F0                         ldx
(1)    127A : A9                         plo     R9              ; restore R9
(1)    127B : D6                         sep     R6              ; return
(1)    127C :
(1)    127C :                    ;;; Signed division: dividend / divisor = quotient ... remainder
(1)    127C :                    ;;; @param R7 dividend
(1)    127C :                    ;;; @param R8 divisor
(1)    127C :                    ;;; @return R7 quotient
(1)    127C :                    ;;; @return R8 remainder
(1)    127C :                    ;;;   SEP R5
(1)    127C :                    ;;;   DC  A(div16)
(1)    127C :                    ;;; @clobber R15
(1)    127C :                    div16:
(1)    127C : 98                         ghi     R8
(1)    127D : 52                         str     R2
(1)    127E : 97                         ghi     R7
(1)    127F : F3                         xor
(1)    1280 : 73                         stxd                    ; push sign
(1)    1281 : 98                         ghi     R8
(1)    1282 : FA 80                      ani     X'80'
(1)    1284 : 32 8F                      bz      div16_dividend
(1)    1286 : 98                         ghi     R8
(1)    1287 : FB FF                      xri     X'FF'
(1)    1289 : B8                         phi     R8
(1)    128A : 88                         glo     R8
(1)    128B : FB FF                      xri     X'FF'
(1)    128D : A8                         plo     R8
(1)    128E : 18                         inc     R8              ; negate divisor
(1)    128F :                    div16_dividend:
(1)    128F : 97                         ghi     R7              ; R7=dividend
(1)    1290 : FA 80                      ani     X'80'
(1)    1292 : 32 9D                      bz      div16_divide
(1)    1294 : 97                         ghi     R7
(1)    1295 : FB FF                      xri     X'FF'
(1)    1297 : B7                         phi     R7
(1)    1298 : 87                         glo     R7
(1)    1299 : FB FF                      xri     X'FF'
(1)    129B : A7                         plo     R7
(1)    129C : 17                         inc     R7              ; negate dividend
(1)    129D :                    div16_divide:
(1)    129D : D5                         sep     R5
(1)    129E : 12 0C                      dc      A(udiv16)       ; call udiv16
(1)    12A0 : 60                         irx
(1)    12A1 : F0                         ldx                     ; pop sign
(1)    12A2 : FA 80                      ani     X'80'
(1)    12A4 : 32 AF                      bz      div16_return
(1)    12A6 : 97                         ghi     R7
(1)    12A7 : FB FF                      xri     X'FF'
(1)    12A9 : B7                         phi     R7
(1)    12AA : 87                         glo     R7
(1)    12AB : FB FF                      xri     X'FF'
(1)    12AD : A7                         plo     R7
(1)    12AE : 17                         inc     R7              ; negate quotient
(1)    12AF :                    div16_return:
(1)    12AF : D6                         sep     R6
       12B0 :                            include "mandelbrot.inc"
(1)    12B0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    12B0 :                    ;;; Mandelbrot variables
(1)    12B0 : =32                cF:     equ     50
(1)    12B0 : 00 00              vC:     dc      A(0)
(1)    12B2 : 00 00              vD:     dc      A(0)
(1)    12B4 : 00 00              vA:     dc      A(0)
(1)    12B6 : 00 00              vB:     dc      A(0)
(1)    12B8 : 00 00              vP:     dc      A(0)
(1)    12BA : 00 00              vQ:     dc      A(0)
(1)    12BC : 00 00              vS:     dc      A(0)
(1)    12BE : =A                 rT      =       R10
(1)    12BE : =E                 rTMP    =       R14
(1)    12BE : =B                 rY      =       R11
(1)    12BE : =C                 rX      =       R12
(1)    12BE : =D                 rI      =       R13
(1)    12BE :
(1)    12BE :                    ;;; Print variable: "D=variable "
(1)    12BE :                    ;;; @param D variable letter
(1)    12BE :                    ;;; @param R7 variable
(1)    12BE :                    ;;;   SEP R5
(1)    12BE :                    ;;;   DC  A(print)
(1)    12BE :                    ;;; @clobber R7 R15
(1)    12BE :                    print:
(1)    12BE : D5                         sep     R5
(1)    12BF : 10 33                      dc      A(putchar)      ; print variable letter
(1)    12C1 : F8 3D                      ldi     T'='
(1)    12C3 : D5                         sep     R5
(1)    12C4 : 10 33                      dc      A(putchar)      ; '='
(1)    12C6 : D5                         sep     R5
(1)    12C7 : 11 5D                      dc      A(print_int16)
(1)    12C9 : C0 10 60                   br      putspace
(1)    12CC :
(1)    12CC :                    mandelbrot:
(1)    12CC : F8 FF                      ldi     A.1(-12)
(1)    12CE : BB                         phi     rY
(1)    12CF : F8 F4                      ldi     A.0(-12)
(1)    12D1 : AB                         plo     rY              ; Y=-12
(1)    12D2 :                    loop_y:
(1)    12D2 : F8 FF                      ldi     A.1(-49)
(1)    12D4 : BC                         phi     rX
(1)    12D5 : F8 CF                      ldi     A.0(-49)
(1)    12D7 : AC                         plo     rX              ; X=-49
(1)    12D8 :                    loop_x:
(1)    12D8 : 9C                         ghi     rX
(1)    12D9 : B7                         phi     R7
(1)    12DA : 8C                         glo     rX
(1)    12DB : A7                         plo     R7              ; R7=X
(1)    12DC : F8 00                      ldi     A.1(229)
(1)    12DE : B8                         phi     R8
(1)    12DF : F8 E5                      ldi     A.0(229)
(1)    12E1 : A8                         plo     R8
(1)    12E2 : D5                         sep     R5
(1)    12E3 : 11 D8                      dc      A(mul16)
(1)    12E5 : F8 00                      ldi     A.1(100)
(1)    12E7 : B8                         phi     R8
(1)    12E8 : F8 64                      ldi     A.0(100)
(1)    12EA : A8                         plo     R8
(1)    12EB : D5                         sep     R5
(1)    12EC : 12 7C                      dc      A(div16)
(1)    12EE : D5                         sep     R5
(1)    12EF : 11 84                      dc      A(store_R7)
(1)    12F1 : 12 B0                      dc      A(vC)           ; C=X*229/100
(1)    12F3 : D5                         sep     R5
(1)    12F4 : 11 84                      dc      A(store_R7)     ; A=C
(1)    12F6 : 12 B4                      dc      A(vA)
(1)    12F8 : 9B                         ghi     rY
(1)    12F9 : B7                         phi     R7
(1)    12FA : 8B                         glo     rY
(1)    12FB : A7                         plo     R7              ; R7=Y
(1)    12FC : F8 01                      ldi     A.1(416)
(1)    12FE : B8                         phi     R8
(1)    12FF : F8 A0                      ldi     A.0(416)
(1)    1301 : A8                         plo     R8
(1)    1302 : D5                         sep     R5
(1)    1303 : 11 D8                      dc      A(mul16)
(1)    1305 : F8 00                      ldi     A.1(100)
(1)    1307 : B8                         phi     R8
(1)    1308 : F8 64                      ldi     A.0(100)
(1)    130A : A8                         plo     R8
(1)    130B : D5                         sep     R5
(1)    130C : 12 7C                      dc      A(div16)
(1)    130E : D5                         sep     R5
(1)    130F : 11 84                      dc      A(store_R7)
(1)    1311 : 12 B2                      dc      A(vD)           ; D=Y*416/100
(1)    1313 : D5                         sep     R5
(1)    1314 : 11 84                      dc      A(store_R7)
(1)    1316 : 12 B6                      dc      A(vB)           ; B=D
(1)    1318 : F8 00                      ldi     0
(1)    131A : BD                         phi     rI
(1)    131B : AD                         plo     rI              ; I=0
(1)    131C :
(1)    131C :                            ;; ghi     rY
(1)    131C :                            ;; phi     R7
(1)    131C :                            ;; glo     rY
(1)    131C :                            ;; plo     R7              ; R7=Y
(1)    131C :                            ;; ldi     T'Y'
(1)    131C :                            ;; sep     R5
(1)    131C :                            ;; dc      A(print)
(1)    131C :                            ;; ghi     rX
(1)    131C :                            ;; phi     R7
(1)    131C :                            ;; glo     rX
(1)    131C :                            ;; plo     R7              ; R7=X
(1)    131C :                            ;; ldi     T'X'
(1)    131C :                            ;; sep     R5
(1)    131C :                            ;; dc      A(print)
(1)    131C :                            ;; sep     R5
(1)    131C :                            ;; dc      A(load_R7)
(1)    131C :                            ;; dc      A(vC)
(1)    131C :                            ;; ldi     T'C'
(1)    131C :                            ;; sep     R5
(1)    131C :                            ;; dc      A(print)
(1)    131C :                            ;; sep     R5
(1)    131C :                            ;; dc      A(load_R7)
(1)    131C :                            ;; dc      A(vD)
(1)    131C :                            ;; ldi     T'D'
(1)    131C :                            ;; sep     R5
(1)    131C :                            ;; dc      A(print)
(1)    131C :                            ;; sep     R5
(1)    131C :                            ;; dc      A(newline)
(1)    131C :
(1)    131C :                    loop_i:
(1)    131C : D5                         sep     R5
(1)    131D : 11 90                      dc      A(load_R7)
(1)    131F : 12 B6                      dc      A(vB)
(1)    1321 : F8 00                      ldi     A.1(cF)
(1)    1323 : B8                         phi     R8
(1)    1324 : F8 32                      ldi     A.0(cF)
(1)    1326 : A8                         plo     R8
(1)    1327 : D5                         sep     R5
(1)    1328 : 12 7C                      dc      A(div16)
(1)    132A : D5                         sep     R5
(1)    132B : 11 84                      dc      A(store_R7)
(1)    132D : 12 BA                      dc      A(vQ)           ; Q=B/F
(1)    132F : F8 00                      ldi     A.1(cF)
(1)    1331 : B8                         phi     R8
(1)    1332 : F8 32                      ldi     A.0(cF)
(1)    1334 : A8                         plo     R8
(1)    1335 : D5                         sep     R5
(1)    1336 : 11 D8                      dc      A(mul16)        ; R7=Q*F
(1)    1338 : D5                         sep     R5
(1)    1339 : 11 9E                      dc      A(load_R8)
(1)    133B : 12 B6                      dc      A(vB)           ; R8=B
(1)    133D : 87                         glo     R7
(1)    133E : 52                         str     R2
(1)    133F : 88                         glo     R8
(1)    1340 : F7                         sm
(1)    1341 : A7                         plo     R7
(1)    1342 : 97                         ghi     R7
(1)    1343 : 52                         str     R2
(1)    1344 : 98                         ghi     R8
(1)    1345 : 77                         smb
(1)    1346 : B7                         phi     R7              ; R7=B-Q*F
(1)    1347 : D5                         sep     R5
(1)    1348 : 11 84                      dc      A(store_R7)
(1)    134A : 12 BC                      dc      A(vS)           ; S=B-Q*F
(1)    134C : D5                         sep     R5
(1)    134D : 11 90                      dc      A(load_R7)
(1)    134F : 12 B6                      dc      A(vB)           ; R7=B
(1)    1351 : 97                         ghi     R7
(1)    1352 : B8                         phi     R8
(1)    1353 : 87                         glo     R7
(1)    1354 : A8                         plo     R8              ; R8=B
(1)    1355 : D5                         sep     R5
(1)    1356 : 11 D8                      dc      A(mul16)        ; R7=B*B
(1)    1358 : 97                         ghi     R7
(1)    1359 : BA                         phi     rT
(1)    135A : 87                         glo     R7
(1)    135B : AA                         plo     rT              ; T=B*B
(1)    135C : D5                         sep     R5
(1)    135D : 11 90                      dc      A(load_R7)
(1)    135F : 12 B4                      dc      A(vA)           ; R7=A
(1)    1361 : 97                         ghi     R7
(1)    1362 : B8                         phi     R8
(1)    1363 : 87                         glo     R7
(1)    1364 : A8                         plo     R8
(1)    1365 : D5                         sep     R5
(1)    1366 : 11 D8                      dc      A(mul16)        ; R7=A*A
(1)    1368 : 8A                         glo     rT
(1)    1369 : 52                         str     R2
(1)    136A : 87                         glo     R7
(1)    136B : F7                         sm
(1)    136C : A7                         plo     R7
(1)    136D : 9A                         ghi     rT
(1)    136E : 52                         str     R2
(1)    136F : 97                         ghi     R7
(1)    1370 : 77                         smb
(1)    1371 : B7                         phi     R7              ; R7=A*A-B*B
(1)    1372 : F8 00                      ldi     A.1(cF)
(1)    1374 : B8                         phi     R8
(1)    1375 : F8 32                      ldi     A.0(cF)
(1)    1377 : A8                         plo     R8
(1)    1378 : D5                         sep     R5
(1)    1379 : 12 7C                      dc      A(div16)        ; R7=(A*A-B*B)/F
(1)    137B : D5                         sep     R5
(1)    137C : 11 9E                      dc      A(load_R8)
(1)    137E : 12 B0                      dc      A(vC)           ; R8=C
(1)    1380 : 87                         glo     R7
(1)    1381 : 52                         str     R2
(1)    1382 : 88                         glo     R8
(1)    1383 : F4                         add
(1)    1384 : AE                         plo     rTMP
(1)    1385 : 97                         ghi     R7
(1)    1386 : 52                         str     R2
(1)    1387 : 98                         ghi     R8
(1)    1388 : 74                         adc
(1)    1389 : BE                         phi     rTMP            ; tmp=(A*A-B*B)/F+C
(1)    138A : D5                         sep     R5
(1)    138B : 11 90                      dc      A(load_R7)
(1)    138D : 12 B4                      dc      A(vA)           ; R7=A
(1)    138F : D5                         sep     R5
(1)    1390 : 11 9E                      dc      A(load_R8)      ; R8=S
(1)    1392 : 12 BC                      dc      A(vS)
(1)    1394 : D5                         sep     R5
(1)    1395 : 11 D8                      dc      A(mul16)        ; R7=A*S
(1)    1397 : F8 00                      ldi     A.1(cF)
(1)    1399 : B8                         phi     R8
(1)    139A : F8 32                      ldi     A.0(cF)
(1)    139C : A8                         plo     R8
(1)    139D : D5                         sep     R5
(1)    139E : 12 7C                      dc      A(div16)        ; R7=A*S/F
(1)    13A0 : 97                         ghi     R7
(1)    13A1 : BA                         phi     rT
(1)    13A2 : 87                         glo     R7
(1)    13A3 : AA                         plo     rT              ; T=A*S/F
(1)    13A4 : D5                         sep     R5
(1)    13A5 : 11 90                      dc      A(load_R7)
(1)    13A7 : 12 B4                      dc      A(vA)           ; R7=A
(1)    13A9 : D5                         sep     R5
(1)    13AA : 11 9E                      dc      A(load_R8)
(1)    13AC : 12 BA                      dc      A(vQ)           ; R8=Q
(1)    13AE : D5                         sep     R5
(1)    13AF : 11 D8                      dc      A(mul16)        ; R7=A*Q
(1)    13B1 : 8A                         glo     rT
(1)    13B2 : 52                         str     R2
(1)    13B3 : 87                         glo     R7
(1)    13B4 : F4                         add
(1)    13B5 : A7                         plo     R7
(1)    13B6 : 9A                         ghi     rT
(1)    13B7 : 52                         str     R2
(1)    13B8 : 97                         ghi     R7
(1)    13B9 : 74                         adc
(1)    13BA : B7                         phi     R7              ; R7=A*Q+A*S/F
(1)    13BB : 87                         glo     R7
(1)    13BC : FE                         shl
(1)    13BD : A7                         plo     R7
(1)    13BE : 97                         ghi     R7
(1)    13BF : 7E                         shlc
(1)    13C0 : B7                         phi     R7              ; R7=2*(A*A+A*S/F)
(1)    13C1 : D5                         sep     R5
(1)    13C2 : 11 9E                      dc      A(load_R8)
(1)    13C4 : 12 B2                      dc      A(vD)           ; R8=D
(1)    13C6 : 87                         glo     R7
(1)    13C7 : 52                         str     R2
(1)    13C8 : 88                         glo     R8
(1)    13C9 : F4                         add
(1)    13CA : A7                         plo     R7
(1)    13CB : 97                         ghi     R7
(1)    13CC : 52                         str     R2
(1)    13CD : 98                         ghi     R8
(1)    13CE : 74                         adc
(1)    13CF : B7                         phi     R7              ; R7=2*(A*A+A*S/F)+D
(1)    13D0 : D5                         sep     R5
(1)    13D1 : 11 84                      dc      A(store_R7)
(1)    13D3 : 12 B6                      dc      A(vB)           ; B=2*(A*Q+A*S/F)+D
(1)    13D5 : 9E                         ghi     rTMP
(1)    13D6 : B7                         phi     R7
(1)    13D7 : 8E                         glo     rTMP
(1)    13D8 : A7                         plo     R7
(1)    13D9 : D5                         sep     R5
(1)    13DA : 11 84                      dc      A(store_R7)
(1)    13DC : 12 B4                      dc      A(vA)           ; A=tmp
(1)    13DE : F8 00                      ldi     A.1(cF)
(1)    13E0 : B8                         phi     R8
(1)    13E1 : F8 32                      ldi     A.0(cF)
(1)    13E3 : A8                         plo     R8
(1)    13E4 : D5                         sep     R5
(1)    13E5 : 12 7C                      dc      A(div16)        ; R7=A/F
(1)    13E7 : D5                         sep     R5
(1)    13E8 : 11 84                      dc      A(store_R7)
(1)    13EA : 12 B8                      dc      A(vP)           ; P=A/F
(1)    13EC : 97                         ghi     R7
(1)    13ED : B8                         phi     R8
(1)    13EE : 87                         glo     R7
(1)    13EF : A8                         plo     R8
(1)    13F0 : D5                         sep     R5
(1)    13F1 : 11 D8                      dc      A(mul16)        ; R7=P*P
(1)    13F3 : 97                         ghi     R7
(1)    13F4 : BA                         phi     rT
(1)    13F5 : 87                         glo     R7
(1)    13F6 : AA                         plo     rT              ; T=P*P
(1)    13F7 : D5                         sep     R5
(1)    13F8 : 11 90                      dc      A(load_R7)
(1)    13FA : 12 B6                      dc      A(vB)           ; R7=B
(1)    13FC : F8 00                      ldi     A.1(cF)
(1)    13FE : B8                         phi     R8
(1)    13FF : F8 32                      ldi     A.0(cF)
(1)    1401 : A8                         plo     R8
(1)    1402 : D5                         sep     R5
(1)    1403 : 12 7C                      dc      A(div16)        ; R7=B/Q
(1)    1405 : D5                         sep     R5
(1)    1406 : 11 84                      dc      A(store_R7)
(1)    1408 : 12 BA                      dc      A(vQ)           ; Q=B/F
(1)    140A : 97                         ghi     R7
(1)    140B : B8                         phi     R8
(1)    140C : 87                         glo     R7
(1)    140D : A8                         plo     R8
(1)    140E : D5                         sep     R5
(1)    140F : 11 D8                      dc      A(mul16)        ; R7=Q*Q
(1)    1411 : 87                         glo     R7
(1)    1412 : 52                         str     R2
(1)    1413 : 8A                         glo     rT
(1)    1414 : F4                         add
(1)    1415 : AA                         plo     rT
(1)    1416 : 97                         ghi     R7
(1)    1417 : 52                         str     R2
(1)    1418 : 9A                         ghi     rT
(1)    1419 : 74                         adc
(1)    141A : BA                         phi     rT              ; T=P*P+Q*Q
(1)    141B :
(1)    141B :                            ;; sep     R5
(1)    141B :                            ;; dc      A(putspace)
(1)    141B :                            ;; ghi     rI
(1)    141B :                            ;; phi     R7
(1)    141B :                            ;; glo     rI
(1)    141B :                            ;; plo     R7              ; R7=I
(1)    141B :                            ;; ldi     T'I'
(1)    141B :                            ;; sep     R5
(1)    141B :                            ;; dc      A(print)
(1)    141B :                            ;; sep     R5
(1)    141B :                            ;; dc      A(load_R7)
(1)    141B :                            ;; dc      A(vA)           ; R7=A
(1)    141B :                            ;; ldi     T'A'
(1)    141B :                            ;; sep     R5
(1)    141B :                            ;; dc      A(print)
(1)    141B :                            ;; sep     R5
(1)    141B :                            ;; dc      A(load_R7)
(1)    141B :                            ;; dc      A(vB)           ; R7=B
(1)    141B :                            ;; ldi     T'B'
(1)    141B :                            ;; sep     R5
(1)    141B :                            ;; dc      A(print)
(1)    141B :                            ;; sep     R5
(1)    141B :                            ;; dc      A(load_R7)
(1)    141B :                            ;; dc      A(vP)           ; R7=P
(1)    141B :                            ;; ldi     T'P'
(1)    141B :                            ;; sep     R5
(1)    141B :                            ;; dc      A(print)
(1)    141B :                            ;; sep     R5
(1)    141B :                            ;; dc      A(load_R7)
(1)    141B :                            ;; dc      A(vQ)           ; R7=Q
(1)    141B :                            ;; ldi     T'Q'
(1)    141B :                            ;; sep     R5
(1)    141B :                            ;; dc      A(print)
(1)    141B :                            ;; ghi     rT
(1)    141B :                            ;; phi     R7
(1)    141B :                            ;; glo     rT
(1)    141B :                            ;; plo     R7              ; R7=T
(1)    141B :                            ;; ldi     T'T'
(1)    141B :                            ;; sep     R5
(1)    141B :                            ;; dc      A(print)
(1)    141B :                            ;; sep     R5
(1)    141B :                            ;; dc      A(newline)
(1)    141B :
(1)    141B : 9A                         ghi     rT
(1)    141C : 3A 2E                      bnz     print_i
(1)    141E : 8A                         glo     rT
(1)    141F : FD 04                      sdi     4
(1)    1421 : 3B 2E                      bm      print_i         ; if 4<T
(1)    1423 : 1D                         inc     rI              ; I+=1
(1)    1424 : 8D                         glo     rI              ; A.0(I)
(1)    1425 : FF 10                      smi     16
(1)    1427 : CB 13 1C                   bm      loop_i          ; if I<16
(1)    142A : F8 20                      ldi     T' '
(1)    142C : 30 37                      br      print_char
(1)    142E :                    print_i:
(1)    142E : 8D                         glo     rI
(1)    142F : FF 0A                      smi     10
(1)    1431 : 3B 35                      bl      print_i2        ; if I<10
(1)    1433 : FC 07                      adi     T'A'-T'0'-10
(1)    1435 :                    print_i2:
(1)    1435 : FC 3A                      adi     T'0'+10
(1)    1437 :                    print_char:
(1)    1437 : D5                         sep     R5
(1)    1438 : 10 33                      dc      A(putchar)
(1)    143A :
(1)    143A :                            ;; stxd                    ; save char
(1)    143A :                            ;; ldi     T'@'
(1)    143A :                            ;; sep     R5
(1)    143A :                            ;; dc      A(putchar)
(1)    143A :                            ;; ldi     T'='
(1)    143A :                            ;; sep     R5
(1)    143A :                            ;; dc      A(putchar)
(1)    143A :                            ;; inc     R2
(1)    143A :                            ;; ldn     R2              ; restore char
(1)    143A :                            ;; sep     R5
(1)    143A :                            ;; dc      A(putchar)
(1)    143A :                            ;; sep     R5
(1)    143A :                            ;; dc      A(newline)
(1)    143A :
(1)    143A : D5                         sep     R5
(1)    143B : 10 25                      dc      A(getchar)
(1)    143D : 32 43                      bz      next_x
(1)    143F : 87                         glo     R7
(1)    1440 : 3A 43                      bnz     next_x
(1)    1442 : 00                         idl                     ; break
(1)    1443 :                    next_x:
(1)    1443 : 1C                         inc     rX              ; X+=1
(1)    1444 : 9C                         ghi     rX              ; A.1(X)
(1)    1445 : CA 12 D8                   bnz     loop_x          ; if X<0
(1)    1448 : 8C                         glo     rX              ; A.0(X)
(1)    1449 : FF 1E                      smi     30
(1)    144B : CB 12 D8                   bl      loop_x          ; if X<30
(1)    144E : D5                         sep     R5
(1)    144F : 10 57                      dc      A(newline)
(1)    1451 : 1B                         inc     rY              ; Y+=1
(1)    1452 : 9B                         ghi     rY              ; A.1(Y)
(1)    1453 : CA 12 D2                   bnz     loop_y          ; if Y<0
(1)    1456 : 8B                         glo     rY              ; A.0(Y)
(1)    1457 : FF 0D                      smi     13
(1)    1459 : CB 12 D2                   bl      loop_y          ; if Y<13
(1)    145C : D6                         sep     R6
       145D :
       145D :                            end
