          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     1802
          0 :                            option  "smart-branch", "on"
          0 :                            include "cdp1802.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; CDP1802 register alias
(1)       0 : =0                 R0:     equ     0
(1)       0 : =1                 R1:     equ     1
(1)       0 : =2                 R2:     equ     2
(1)       0 : =3                 R3:     equ     3
(1)       0 : =4                 R4:     equ     4
(1)       0 : =5                 R5:     equ     5
(1)       0 : =6                 R6:     equ     6
(1)       0 : =7                 R7:     equ     7
(1)       0 : =8                 R8:     equ     8
(1)       0 : =9                 R9:     equ     9
(1)       0 : =A                 R10:    equ     10
(1)       0 : =B                 R11:    equ     11
(1)       0 : =C                 R12:    equ     12
(1)       0 : =D                 R13:    equ     13
(1)       0 : =E                 R14:    equ     14
(1)       0 : =F                 R15:    equ     15
(1)       0 :
(1)       0 :                    ;;; Transfer locations
(1)       0 : =0                 ORG_RESET:      equ     0000H   ; Reset transfer location
          0 :
          0 :                            org     ORG_RESET
          0 : 71                         dis                     ; disable interrupt
          1 : 00                         dc      X'00'           ; X:P=0:0
          2 : 30 04                      br      scrt_init
          4 :                            include "scrt.inc"
(1)       4 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       4 :
(1)       4 :                    ;;; Standard Call and Return Technique
(1)       4 :                    ;;; R0: DMA pointer
(1)       4 :                    ;;; R1: Program counter for Interrupt routine
(1)       4 :                    ;;; R2: Stack pointer
(1)       4 :                    ;;; R3: Program counter
(1)       4 :                    ;;; R4: Link register, pointer to the return location and arguments
(1)       4 :                    ;;;     passed by the calling program
(1)       4 :                    ;;; R5: Dedicated program counter for CALL routine
(1)       4 :                    ;;; R6: Dedicated program counter for RETURN routine
(1)       4 :
(1)       4 :                    ;;; Call subroutine
(1)       4 :                    ;;;   SEP R5
(1)       4 :                    ;;;   DC  A(subroutine)
(1)       4 :                    ;;;   DC  arguments...
(1)       4 :                    ;;; Subroutine return
(1)       4 :                    ;;;   SEP R6
(1)       4 :                    ;;; Return from interrupt
(1)       4 :                    ;;;   SEP R1
(1)       4 :
(1)       4 :                    ;;; Initialize for SCRT, P=0
(1)       4 :                    ;;; @param P!=3
(1)       4 :                    ;;; @param stack top address of stack
(1)       4 :                    ;;; @param main start address of main routine
(1)       4 :                    ;;; @return P=3
(1)       4 :                    ;;; @return R1=scrt_isr
(1)       4 :                    ;;; @return R2=stack
(1)       4 :                    ;;; @return R3=main
(1)       4 :                    ;;; @return R5=scrt_call
(1)       4 :                    ;;; @return R6=scrt_return
(1)       4 :                    ;;; @clobber D, R15
(1)       4 :                    scrt_init:
(1)       4 : F8 00                      ldi     A.1(scrt_start)
(1)       6 : B3                         phi     R3
(1)       7 : F8 0B                      ldi     A.0(scrt_start)
(1)       9 : A3                         plo     R3
(1)       A : D3                         sep     R3              ; P=3
(1)       B :                    scrt_start:
(1)       B : F8 00                      ldi     A.1(scrt_init_tab)
(1)       D : BF                         phi     R15
(1)       E : F8 24                      ldi     A.0(scrt_init_tab)
(1)      10 : AF                         plo     R15
(1)      11 : 4F                         lda     R15             ; setup interrupt
(1)      12 : B1                         phi     R1
(1)      13 : 4F                         lda     R15
(1)      14 : A1                         plo     R1
(1)      15 : 4F                         lda     R15             ; setup stack
(1)      16 : B2                         phi     R2
(1)      17 : 4F                         lda     R15
(1)      18 : A2                         plo     R2
(1)      19 : 4F                         lda     R15             ; setup call
(1)      1A : B5                         phi     R5
(1)      1B : 4F                         lda     R15
(1)      1C : A5                         plo     R5
(1)      1D : 4F                         lda     R15             ; setup return
(1)      1E : B6                         phi     R6
(1)      1F : 4F                         lda     R15
(1)      20 : A6                         plo     R6
(1)      21 : C0 10 00                   br      main            ; goto main with P=3
(1)      24 :
(1)      24 :                    scrt_init_tab:
(1)      24 : 00 62                      dc      A(scrt_isr)     ; R1
(1)      26 : 0F FF                      dc      A(stack)        ; R2
(1)      28 : 00 2D                      dc      A(scrt_call)    ; R5
(1)      2A : 00 3F                      dc      A(scrt_return)  ; R6
(1)      2C :
(1)      2C :                    ;;; Call subroutine, P=5
(1)      2C :                    ;;; @param M(R3):M(R3+1) subroutine address
(1)      2C :                    ;;; @param M(R3+2) optional arguments, depending on a subroutine called.
(1)      2C :                    ;;; @return R4 points optional arguments
(1)      2C :                    ;;; @return M(R2) R4.1, R4.0
(1)      2C :                    ;;; @clobber R15.1, X
(1)      2C :                    ;;; @unchanged D, DF, IE, R0, R1, R7-R14, R15.0
(1)      2C :                    scrt_call_exit:
(1)      2C : D3                         sep     R3              ; go to subroutine
(1)      2D :                    scrt_call:
(1)      2D : BF                         phi     R15             ; save D to R15.1
(1)      2E : E2                         sex     R2              ; select stack
(1)      2F : 84                         glo     R4              ; push old link register R4
(1)      30 : 73                         stxd
(1)      31 : 94                         ghi     R4
(1)      32 : 73                         stxd
(1)      33 : 93                         ghi     R3              ; load link register
(1)      34 : B4                         phi     R4
(1)      35 : 83                         glo     R3
(1)      36 : A4                         plo     R4
(1)      37 : 44                         lda     R4              ; load the address of subroutine
(1)      38 : B3                         phi     R3
(1)      39 : 44                         lda     R4
(1)      3A : A3                         plo     R3              ; R3=subroutine address
(1)      3B : 9F                         ghi     R15             ; restore D
(1)      3C : 30 2C                      br      scrt_call_exit
(1)      3E :
(1)      3E :                    ;;; Return subroutine, P=6
(1)      3E :                    ;;; @param R4 return address
(1)      3E :                    ;;; @oaram M(R2) R4.1, R4.0, X:P(3)
(1)      3E :                    ;;; @clobber R15.1, X
(1)      3E :                    ;;; @unchanged D, DF, R0, R1, R7-R14, R15.0
(1)      3E :                    scrt_return_exit:
(1)      3E : D3                         sep     R3              ; return to subroutine caller
(1)      3F :                    scrt_return:
(1)      3F : BF                         phi     R15             ; save D to R15.1
(1)      40 : 94                         ghi     R4              ; load return address from link register
(1)      41 : B3                         phi     R3
(1)      42 : 84                         glo     R4
(1)      43 : A3                         plo     R3
(1)      44 : E2                         sex     R2              ; select stack
(1)      45 : 60                         irx
(1)      46 : 72                         ldxa                    ; pop link register R4
(1)      47 : B4                         phi     R4
(1)      48 : F0                         ldx
(1)      49 : A4                         plo     R4
(1)      4A : 9F                         ghi     R15             ; restore D
(1)      4B : 30 3E                      br      scrt_return_exit
(1)      4D :
(1)      4D :                    ;;; Interrupt exit entry P=1
(1)      4D :                    ;;;  (Come here by SEP R1)
(1)      4D :                    scrt_isr_exit:
(1)      4D : 60                         irx
(1)      4E : 72                         ldxa                    ; pop program counter R3
(1)      4F : B3                         phi     R3
(1)      50 : 72                         ldxa
(1)      51 : A3                         plo     R3
(1)      52 : 72                         ldxa                    ; pop call pointer R5
(1)      53 : B5                         phi     R5
(1)      54 : 72                         ldxa
(1)      55 : A5                         plo     R5
(1)      56 : 72                         ldxa                    ; pop return pointer R6
(1)      57 : B6                         phi     R6
(1)      58 : 72                         ldxa
(1)      59 : A6                         plo     R6
(1)      5A : 72                         ldxa                    ; pop scratch pad register R15
(1)      5B : BF                         phi     R15
(1)      5C : 72                         ldxa
(1)      5D : AF                         plo     R15
(1)      5E : 72                         ldxa                    ; pop DF into D:MSB
(1)      5F : FE                         shl                     ; restore DF
(1)      60 : 72                         ldxa                    ; pop D
(1)      61 : 70                         ret                     ; restore X,P IE=1
(1)      62 :                            ;; R1 points scrt_isr
(1)      62 :                    ;;; CDP1802 interrupt entry, X=2, P=1, IE=0
(1)      62 :                    ;;; @unchanged D, DF, X, P, R3, R5, R6, R15
(1)      62 :                    scrt_isr:
(1)      62 :                            ;; R2[0] must be preserved because it may be in the pop process
(1)      62 : 22                         dec     R2
(1)      63 : 78                         sav                     ; push X,P
(1)      64 : 22                         dec     R2
(1)      65 : 73                         stxd                    ; push D
(1)      66 : 76                         shrc                    ; MSB of D=DF
(1)      67 : 73                         stxd                    ; push DF
(1)      68 : 8F                         glo     R15             ; push scratch pad register R15
(1)      69 : 73                         stxd
(1)      6A : 9F                         ghi     R15
(1)      6B : 73                         stxd
(1)      6C : 86                         glo     R6              ; push return pointer R6
(1)      6D : 73                         stxd
(1)      6E : 96                         ghi     R6
(1)      6F : 73                         stxd
(1)      70 : 85                         glo     R5              ; push call pointer R5
(1)      71 : 73                         stxd
(1)      72 : 95                         ghi     R5
(1)      73 : 73                         stxd
(1)      74 : 83                         glo     R3              ; push program counter R3
(1)      75 : 73                         stxd
(1)      76 : 93                         ghi     R3
(1)      77 : 73                         stxd
(1)      78 :                            ;; Initialize SCRT registers because interrupt service routine
(1)      78 :                            ;; may use call/return
(1)      78 : F8 00                      ldi     A.1(scrt_call)  ; initialize call pointer R5
(1)      7A : B5                         phi     R5
(1)      7B : F8 2D                      ldi     A.0(scrt_call)
(1)      7D : A5                         plo     R5
(1)      7E : F8 00                      ldi     A.1(scrt_return) ; initialize return pointer R6
(1)      80 : B6                         phi     R6
(1)      81 : F8 3F                      ldi     A.0(scrt_return)
(1)      83 : A6                         plo     R6
(1)      84 :                            ;;
(1)      84 : F8 10                      ldi     A.1(isr)
(1)      86 : B3                         phi     R3
(1)      87 : F8 6A                      ldi     A.0(isr)
(1)      89 : A3                         plo     R3
(1)      8A : D3                         sep     R3              ; call interrupt service routine with P=3
(1)      8B : 30 4D                      br      scrt_isr_exit   ; return from isr by SEP R1
         8D :
         8D :                    ;;; MC6850 Asynchronous Communication Interface Adapter
         8D : =DF00              ACIA:   equ     X'0DF00'
         8D :                            include "mc6850.inc"
(1)      8D :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)      8D :
(1)      8D :                    ;;; MC6850
(1)      8D :                    ;;; Asynchronous Communication Interface Adapter
(1)      8D :
(1)      8D :                    ;;; Control register
(1)      8D : =DF00              ACIA_control:   equ     ACIA+0
(1)      8D :                            ;; Counter Divider Select Bits
(1)      8D : =3                 CDS_gm:         equ     11b    ; Group mask
(1)      8D : =0                 CDS_DIV1_gc:    equ     00000000B ; /1
(1)      8D : =1                 CDS_DIV16_gc:   equ     00000001B ; /16
(1)      8D : =2                 CDS_DIV64_gc:   equ     00000010B ; /64
(1)      8D : =3                 CDS_RESET_gc:   equ     00000011B ; Master Reset
(1)      8D :                            ;; Word Select Bits
(1)      8D : =1C                WSB_gm:         equ     00011100B ; Group mask
(1)      8D : =0                 WSB_7E2_gc:     equ     00000000B ; 7 Bits + Even Parity + 2 Stop Bits
(1)      8D : =4                 WSB_7O2_gc:     equ     00000100B ; 7 bits + Odd Parity  + 2 Stop Bits
(1)      8D : =8                 WSB_7E1_gc:     equ     00001000B ; 7 bits + Even Parity + 1 Stop Bits
(1)      8D : =C                 WSB_7O1_gc:     equ     00001100B ; 7 bits + Odd Parity  + 1 Stop Bits
(1)      8D : =10                WSB_8N2_gc:     equ     00010000B ; 8 bits + No Parity   + 2 Stop Bits
(1)      8D : =14                WSB_8N1_gc:     equ     00010100B ; 8 bits + No Parity   + 1 Stop Bits
(1)      8D : =18                WSB_8E1_gc:     equ     00011000B ; 8 bits + Even Parity + 1 Stop Bits
(1)      8D : =1C                WSB_8O1_gc:     equ     00011100B ; 8 bits + Odd Parity  + 1 Stop Bits
(1)      8D :                            ;; Transmit Control Bits
(1)      8D : =60                TCB_gm:         equ     01100000B ; Group mask
(1)      8D : =0                 TCB_DI_gc:      equ     00000000B ; RTS=Low,  Tx Interrupt Disabled
(1)      8D : =20                TCB_EI_gc:      equ     00100000B ; RTS=Low,  Tx Interrupt Enabled
(1)      8D : =40                TCB_RTS_gc:     equ     01000000B ; RTS=High, Tx Interrupt Disabled
(1)      8D : =60                TCB_BREAK_gc:   equ     01100000B ; RTS=Low,  Tx Interrupt Disabled
(1)      8D :                                                      ; Transmit Break Level
(1)      8D : =80                RIEB_bm:        equ     10000000B ; Receive Interrupt Enable Bit mask
(1)      8D :
(1)      8D :                    ;;; Status register
(1)      8D : =DF00              ACIA_status:    equ     ACIA+0
(1)      8D : =1                 RDRF_bm:        equ     00000001B ; Receive Data Register Full
(1)      8D : =2                 TDRE_bm:        equ     00000010B ; Transmit Data Register Empty
(1)      8D : =4                 DCDF_bm:        equ     00000100B ; Data Carrier Detect Flag
(1)      8D : =8                 CTSF_bm:        equ     00001000B ; Clear To Send Flag
(1)      8D : =10                FERR_bm:        equ     00010000B ; Frame Error Flag
(1)      8D : =20                OVRN_bm:        equ     00100000B ; Receiver Overrun Flag
(1)      8D : =40                PERR_bm:        equ     01000000B ; Parity Error Flag
(1)      8D : =80                IRQF_bm:        equ     10000000B ; Interrupt Request Flag
(1)      8D :
(1)      8D :                    ;;; Data register
(1)      8D : =DF01              ACIA_data:      equ     ACIA+1          ; Data register
         8D :
       2000 :                            org     X'2000'
       2000 :
       2000 : =80                rx_queue_size:  equ     128
       2000 : =80                tx_queue_size:  equ     128
       2000 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
       2000 : =B4                RX_INT_TX_INT:  equ     WSB_8N1_gc|RIEB_bm|TCB_EI_gc
       2000 :
       2000 :                    rx_queue:
       2080 :                            org     *+rx_queue_size
       2080 :                    tx_queue:
       2100 :                            org     *+tx_queue_size
       2100 :
       2100 : =FFF               stack:  equ     X'1000'-1
       2100 :
       1000 :                            org     X'1000'
       1000 :                    main:
       1000 : D5                         sep     R5
       1001 : 10 AA                      dc      A(queue_init)   ; call queue_init
       1003 : 20 00                      dc      A(rx_queue)
       1005 : 80                         dc      rx_queue_size
       1006 : D5                         sep     R5
       1007 : 10 AA                      dc      A(queue_init)   ; call queue_init
       1009 : 20 80                      dc      A(tx_queue)
       100B : 80                         dc      tx_queue_size
       100C :                            ;; initialize ACIA
       100C : F8 DF                      ldi     A.1(ACIA)
       100E : B8                         phi     R8
       100F : F8 00                      ldi     A.0(ACIA)
       1011 : A8                         plo     R8
       1012 : F8 03                      ldi     CDS_RESET_gc    ; Master reset
       1014 : 58                         str     R8              ; ACIA_control
       1015 : F8 94                      ldi     RX_INT_TX_NO
       1017 : 58                         str     R8              ; ACIA_control
       1018 : E3                         sex     R3
       1019 : 70                         ret
       101A : 33                         dc      X'33'           ; enable interrupt
       101B : E2                         sex     R2
       101C :
       101C : D5                         sep     R5              ; call mandelbrot
       101D : 13 2E                      dc      A(mandelbrot)
       101F : D5                         sep     R5
       1020 : 10 5D                      dc      A(newline)
       1022 : F8 20                      ldi     A.1(tx_queue)
       1024 : B8                         phi     R8
       1025 : F8 80                      ldi     A.0(tx_queue)
       1027 : A8                         plo     R8
       1028 : 08                 wait:   ldn     R8              ; tx queue len
       1029 : 3A 28                      bnz     wait
       102B : 00                         idl
       102C :
       102C :                    ;;; Get character
       102C :                    ;;; @return R7.0 char
       102C :                    ;;; @return A 0 if no char received
       102C :                    getchar:
       102C : E3                         sex     R3
       102D : 71                         dis                     ; disable interrupt
       102E : 33                         dc      X'33'
       102F : E2                         sex     R2
       1030 : D5                         sep     R5              ; call queue_remove
       1031 : 11 04                      dc      A(queue_remove)
       1033 : 20 00                      dc      A(rx_queue)
       1035 : E3                         sex     R3
       1036 : 70                         ret                     ; enable interrupt
       1037 : 33                         dc      X'33'
       1038 : E2                         sex     R2
       1039 : D6                         sep     R6              ; return
       103A :
       103A :                    ;;; Put character
       103A :                    ;;; @param D char
       103A :                    ;;; @unchanged D
       103A :                    ;;; @clobber R15
       103A :                    putchar:
       103A : 73                         stxd                    ; save D
       103B : AF                         plo     R15             ; save D to scratch pad
       103C : 87                         glo     R7              ; save R7.0
       103D : 73                         stxd
       103E : 8F                         glo     R15             ; restore D
       103F :                            ;;
       103F : A7                         plo     R7              ; R7.0=char
       1040 :                    putchar_loop:
       1040 : E3                         sex     R3
       1041 : 71                         dis                     ; disable interrupt
       1042 : 33                         dc      X'33'
       1043 : E2                         sex     R2
       1044 : D5                         sep     R5              ; call queue_add
       1045 : 10 C9                      dc      A(queue_add)
       1047 : 20 80                      dc      A(tx_queue)
       1049 : E3                         sex     R3
       104A : 70                         ret                     ; enable interrupt
       104B : 33                         dc      X'33'
       104C : E2                         sex     R2
       104D : 32 40                      bz      putchar_loop    ; retry if queue is full
       104F : F8 DF                      ldi     A.1(ACIA)
       1051 : BF                         phi     R15
       1052 : F8 00                      ldi     A.0(ACIA)
       1054 : AF                         plo     R15
       1055 : F8 B4                      ldi     RX_INT_TX_INT   ; enable Tx interrupt
       1057 : 5F                         str     R15             ; ACIA_C
       1058 :                    putchar_exit:
       1058 : 60                         irx
       1059 : 72                         ldxa                    ; restore R7.0
       105A : A7                         plo     R7
       105B : F0                         ldx                     ; restore D
       105C : D6                         sep     R6              ; return
       105D :
       105D :                    ;;; Print out newline
       105D :                    ;;; @clobber D R15.0
       105D :                    newline:
       105D : F8 0D                      ldi     X'0D'
       105F : D5                         sep     R5              ; call
       1060 : 10 3A                      dc      A(putchar)
       1062 : F8 0A                      ldi     X'0A'
       1064 : 30 3A                      br      putchar
       1066 :
       1066 :                    ;;; Print out space
       1066 :                    ;;; @clobber D R15.0
       1066 :                    putspace:
       1066 : F8 20                      ldi     T' '
       1068 : 30 3A                      br      putchar
       106A :
       106A :                    ;;; From scrt_isr, X=2, P=3
       106A :                    isr:
       106A : 88                         glo     R8              ; save R8
       106B : 73                         stxd
       106C : 98                         ghi     R8
       106D : 73                         stxd
       106E : 87                         glo     R7              ; save R7
       106F : 73                         stxd
       1070 : 97                         ghi     R7
       1071 : 73                         stxd
       1072 :                            ;;
       1072 : F8 DF                      ldi     A.1(ACIA)
       1074 : B8                         phi     R8
       1075 : F8 00                      ldi     A.0(ACIA)
       1077 : A8                         plo     R8              ; R8=ACIA
       1078 : 08                         ldn     R8              ; ACIA_status
       1079 : FA 80                      ani     IRQF_bm
       107B : 32 A0                      bz      isr_exit
       107D : 08                         ldn     R8              ; ACIA_status
       107E : FA 01                      ani     RDRF_bm
       1080 : 32 8B                      bz      isr_send        ; no data is received
       1082 : 18                         inc     R8
       1083 : 08                         ldn     R8              ; ACIA_data
       1084 : 28                         dec     R8
       1085 : A7                         plo     R7
       1086 : D5                         sep     R5              ; call queue_add
       1087 : 10 C9                      dc      A(queue_add)
       1089 : 20 00                      dc      A(rx_queue)
       108B :                    isr_send:
       108B : 08                         ldn     R8              ; ACIA_status
       108C : FA 02                      ani     TDRE_bm
       108E : 32 A0                      bz      isr_exit
       1090 : D5                         sep     R5              ; call queue_remove
       1091 : 11 04                      dc      A(queue_remove)
       1093 : 20 80                      dc      A(tx_queue)
       1095 : 32 9D                      bz      isr_send_empty
       1097 : 87                         glo     R7
       1098 : 18                         inc     R8
       1099 : 58                         str     R8              ; ACIA_D
       109A : 28                         dec     R8
       109B : 30 A0                      br      isr_exit
       109D :                    isr_send_empty:
       109D : F8 94                      ldi     RX_INT_TX_NO    ; disable Tx interrupt
       109F : 58                         str     R8              ; ACIA_C
       10A0 :                    isr_exit:
       10A0 : 60                         irx
       10A1 : 72                         ldxa                    ; restore R7
       10A2 : B7                         phi     R7
       10A3 : 72                         ldxa
       10A4 : A7                         plo     R7
       10A5 : 72                         ldxa                    ; restore R8
       10A6 : B8                         phi     R8
       10A7 : F0                         ldx
       10A8 : A8                         plo     R8
       10A9 : D1                         sep     R1              ; return to scrt_isr
       10AA :
       10AA :                            include "queue.inc"
(1)    10AA :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    10AA :                    ;;; [queue] queue structure
(1)    10AA : =0                 queue_len:      equ     0       ; queue length
(1)    10AA : =1                 queue_size:     equ     1       ; buffer size
(1)    10AA : =2                 queue_put:      equ     2       ; queue put index
(1)    10AA : =3                 queue_get:      equ     3       ; queue get index
(1)    10AA : =4                 queue_buf:      equ     4       ; buffer start offset
(1)    10AA :
(1)    10AA :                    ;;; [queue] Initialize queue
(1)    10AA :                    ;;; @param R4+0 queue work space pointer
(1)    10AA :                    ;;; @param R4+2 queue work space size
(1)    10AA :                    ;;; @clobber D, R15
(1)    10AA :                    queue_init:
(1)    10AA : 8E                         glo     R14             ; save R14.0
(1)    10AB : 73                         stxd
(1)    10AC :                            ;;
(1)    10AC : 44                         lda     R4
(1)    10AD : BF                         phi     R15
(1)    10AE : 44                         lda     R4
(1)    10AF : AF                         plo     R15             ; R15=queue space pointer
(1)    10B0 : F8 00                      ldi     0
(1)    10B2 : 5F                         str     R15             ; clear queue_len
(1)    10B3 : 1F                         inc     R15
(1)    10B4 : 44                         lda     R4              ; queue space size
(1)    10B5 : FF 04                      smi     queue_buf       ; calculate queue size
(1)    10B7 : 5F                         str     R15             ; store queue_size
(1)    10B8 : FC 02                      adi     2               ; for queue_put and queue_get
(1)    10BA : AE                         plo     R14             ; R14.0: byte counter
(1)    10BB :                    queue_init_clear:
(1)    10BB : F8 00                      ldi     0
(1)    10BD : 1F                         inc     R15
(1)    10BE : 5F                         str     R15             ; clear memory
(1)    10BF : 8E                         glo     R14
(1)    10C0 : FF 01                      smi     1
(1)    10C2 : AE                         plo     R14             ; decrement byte counter
(1)    10C3 : 3A BB                      bnz     queue_init_clear
(1)    10C5 :                            ;;
(1)    10C5 : 60                         irx
(1)    10C6 : F0                         ldx                     ; restore R14.0
(1)    10C7 : AE                         plo     R14
(1)    10C8 : D6                         sep     R6              ; return
(1)    10C9 :
(1)    10C9 :                    ;;; [queue] Add an element to queue
(1)    10C9 :                    ;;; @param R4+0 queue work space pointer
(1)    10C9 :                    ;;; @param R7.0 an element
(1)    10C9 :                    ;;; @return D 0 if queue is full
(1)    10C9 :                    queue_add:
(1)    10C9 : 8E                         glo     R14             ; save R14
(1)    10CA : 73                         stxd
(1)    10CB : 9E                         ghi     R14
(1)    10CC : 73                         stxd
(1)    10CD :                            ;;
(1)    10CD : 44                         lda     R4
(1)    10CE : BF                         phi     R15
(1)    10CF : 44                         lda     R4
(1)    10D0 : AF                         plo     R15             ; R15=queue space pointer
(1)    10D1 : EF                         sex     R15
(1)    10D2 : 72                         ldxa                    ; load queue_len
(1)    10D3 : F3                         xor                     ; queue_len ^ queue_size
(1)    10D4 : 32 FB                      bz      queue_add_return ; branch if D=0
(1)    10D6 : 2F                         dec     R15
(1)    10D7 : 8F                         glo     R15
(1)    10D8 : FC 04                      adi     queue_buf
(1)    10DA : AE                         plo     R14
(1)    10DB : 9F                         ghi     R15
(1)    10DC : 7C 00                      adci    0
(1)    10DE : BE                         phi     R14             ; R14=&queue_buf[0]
(1)    10DF : 0F                         ldn     R15
(1)    10E0 : FC 01                      adi     1
(1)    10E2 : 5F                         str     R15             ; queue_len++
(1)    10E3 : 8E                         glo     R14
(1)    10E4 : 1F                         inc     R15
(1)    10E5 : 1F                         inc     R15
(1)    10E6 : EF                         sex     R15
(1)    10E7 : F4                         add                     ; add queue_put
(1)    10E8 : AE                         plo     R14
(1)    10E9 : 9E                         ghi     R14
(1)    10EA : 7C 00                      adci    0
(1)    10EC : BE                         phi     R14             ; R14=&queue_buf[queue_put]
(1)    10ED : 87                         glo     R7              ; R7.0=an element
(1)    10EE : 5E                         str     R14             ; store an element
(1)    10EF : 0F                         ldn     R15             ; load queue_put
(1)    10F0 : FC 01                      adi     1
(1)    10F2 : 5F                         str     R15             ; update queue_put
(1)    10F3 : 2F                         dec     R15
(1)    10F4 : F3                         xor                      ; queue_put ^ queue_size
(1)    10F5 : 3A FB                      bnz     queue_add_return ; branch if D!=0
(1)    10F7 : 1F                         inc     R15
(1)    10F8 : 5F                         str     R15             ; queue_put=0
(1)    10F9 : F8 01                      ldi     1
(1)    10FB :                    queue_add_return:
(1)    10FB : AF                         plo     R15             ; return flag
(1)    10FC : E2                         sex     R2
(1)    10FD : 60                         irx
(1)    10FE : 72                         ldxa                    ; restore R14
(1)    10FF : BE                         phi     R14
(1)    1100 : F0                         ldx
(1)    1101 : AE                         plo     R14
(1)    1102 : 8F                         glo     R15
(1)    1103 : D6                         sep     R6              ; return
(1)    1104 :
(1)    1104 :                    ;;; [queue] Remove an element from queue
(1)    1104 :                    ;;; @param R4+0 queue work space pointer
(1)    1104 :                    ;;; @return R7.0 an element
(1)    1104 :                    ;;; @return D 0 if queue is empty
(1)    1104 :                    ;;; @clobber R15
(1)    1104 :                    queue_remove:
(1)    1104 : 8E                         glo     R14             ; save R14
(1)    1105 : 73                         stxd
(1)    1106 : 9E                         ghi     R14
(1)    1107 : 73                         stxd
(1)    1108 :                            ;;
(1)    1108 : 44                         lda     R4
(1)    1109 : BF                         phi     R15
(1)    110A : 44                         lda     R4
(1)    110B : AF                         plo     R15             ; R15=queue space pointer
(1)    110C : 0F                         ldn     R15             ; load queue_len
(1)    110D : 32 35                      bz      queue_remove_return ; branch if D=0
(1)    110F : FF 01                      smi     1
(1)    1111 : 5F                         str     R15             ; queue_len--
(1)    1112 : 8F                         glo     R15
(1)    1113 : FC 04                      adi     queue_buf
(1)    1115 : AE                         plo     R14
(1)    1116 : 9F                         ghi     R15
(1)    1117 : 7C 00                      adci    0
(1)    1119 : BE                         phi     R14             ; R14=&queue_buf[0]
(1)    111A : 8E                         glo     R14
(1)    111B : 1F                         inc     R15
(1)    111C : 1F                         inc     R15
(1)    111D : 1F                         inc     R15
(1)    111E : EF                         sex     R15
(1)    111F : F4                         add                     ; add queue_get
(1)    1120 : AE                         plo     R14
(1)    1121 : 9E                         ghi     R14
(1)    1122 : 7C 00                      adci    0
(1)    1124 : BE                         phi     R14             ; R14=&queue_buf[queue_get]
(1)    1125 : 0E                         ldn     R14             ; load an alement
(1)    1126 : A7                         plo     R7              ; R7.0=an element
(1)    1127 : 0F                         ldn     R15             ; load queue_get
(1)    1128 : FC 01                      adi     1
(1)    112A : 5F                         str     R15             ; update queue_get
(1)    112B : 2F                         dec     R15
(1)    112C : 2F                         dec     R15
(1)    112D : F3                         xor                     ; queue_get ^ queue_size
(1)    112E : 3A 35                      bnz     queue_remove_return ; brnach if D!=0
(1)    1130 : 1F                         inc     R15
(1)    1131 : 1F                         inc     R15
(1)    1132 : 5F                         str     R15             ; queue_get=0
(1)    1133 : F8 01                      ldi     1
(1)    1135 :                    queue_remove_return:
(1)    1135 : AF                         plo     R15             ; return flag
(1)    1136 : E2                         sex     R2
(1)    1137 : 60                         irx
(1)    1138 : 72                         ldxa                    ; restore R14
(1)    1139 : BE                         phi     R14
(1)    113A : F0                         ldx
(1)    113B : AE                         plo     R14
(1)    113C : 8F                         glo     R15             ; return flag
(1)    113D : D6                         sep     R6              ; return
       113E :                            include "arith.inc"
(1)    113E :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    113E :                            cpu     1802
(1)    113E :
(1)    113E :                    ;;; Print unsigned 16-bit integer as decimal
(1)    113E :                    ;;; @param R7 value
(1)    113E :                    ;;; @clobber D R7 R8 R15
(1)    113E :                    print_uint16:
(1)    113E : 97                         ghi     R7
(1)    113F : 3A 44                      bnz     print_uint16_loop
(1)    1141 : 87                         glo     R7
(1)    1142 : 32 5B                      bz      print_uint16_zero
(1)    1144 :                    print_uint16_loop:
(1)    1144 : 97                         ghi     R7
(1)    1145 : 3A 4B                      bnz     print_uint16_digit
(1)    1147 : 87                         glo     R7
(1)    1148 : 3A 4B                      bnz     print_uint16_digit
(1)    114A : D6                         sep     R6              ; return if value=0
(1)    114B :                    print_uint16_digit:
(1)    114B : F8 00                      ldi     0
(1)    114D : B8                         phi     R8
(1)    114E : F8 0A                      ldi     10
(1)    1150 : A8                         plo     R8              ; divisor=10
(1)    1151 : D5                         sep     R5
(1)    1152 : 12 7D                      dc      A(udiv16)       ; call udiv16
(1)    1154 : 88                         glo     R8
(1)    1155 : 73                         stxd                    ; push reminder
(1)    1156 : D5                         sep     R5
(1)    1157 : 11 44                      dc      A(print_uint16_loop)
(1)    1159 : 12                         inc     R2
(1)    115A : 02                         ldn     R2              ; pop reminder
(1)    115B :                    print_uint16_zero:
(1)    115B : FC 30                      adi     T'0'
(1)    115D : C0 10 3A                   br      putchar
(1)    1160 :
(1)    1160 :                    ;;; Print signed 16-bit integer as decimal
(1)    1160 :                    ;;; @param R7 value
(1)    1160 :                    ;;; @clobber D R15
(1)    1160 :                    print_int16:
(1)    1160 : 88                         glo     R8
(1)    1161 : 73                         stxd
(1)    1162 : 98                         ghi     R8
(1)    1163 : 73                         stxd                    ; save R8
(1)    1164 : 87                         glo     R7
(1)    1165 : 73                         stxd
(1)    1166 : 97                         ghi     R7
(1)    1167 : 73                         stxd                    ; save R7
(1)    1168 : FA 80                      ani     X'80'
(1)    116A : 32 7A                      bz      print_int16_print
(1)    116C : F8 2D                      ldi     T'-'
(1)    116E : D5                         sep     R5
(1)    116F : 10 3A                      dc      A(putchar)      ; print '-'
(1)    1171 : 97                         ghi     R7
(1)    1172 : FB FF                      xri     X'FF'
(1)    1174 : B7                         phi     R7
(1)    1175 : 87                         glo     R7
(1)    1176 : FB FF                      xri     X'FF'
(1)    1178 : A7                         plo     R7
(1)    1179 : 17                         inc     R7              ; negate value
(1)    117A :                    print_int16_print:
(1)    117A : D5                         sep     R5
(1)    117B : 11 3E                      dc      A(print_uint16)
(1)    117D : 60                         irx
(1)    117E : 72                         ldxa
(1)    117F : B7                         phi     R7
(1)    1180 : 72                         ldxa
(1)    1181 : A7                         plo     R7              ; restore R7
(1)    1182 : 72                         ldxa
(1)    1183 : B8                         phi     R8
(1)    1184 : F0                         ldx
(1)    1185 : A8                         plo     R8              ; restore R8
(1)    1186 : D6                         sep     R6
(1)    1187 :
(1)    1187 :                    ;;; Store R7 to variable
(1)    1187 :                    ;;;   SEP  R5
(1)    1187 :                    ;;;   DC   A(store_R7)
(1)    1187 :                    ;;;   DC   A(variable)
(1)    1187 :                    ;;; @clobber D
(1)    1187 :                    store_R7:
(1)    1187 : 88                         glo     R8
(1)    1188 : 73                         stxd
(1)    1189 : 98                         ghi     R8
(1)    118A : 73                         stxd                    ; save R8
(1)    118B : E4                         sex     R4
(1)    118C : 72                         ldxa
(1)    118D : B8                         phi     R8
(1)    118E : 72                         ldxa
(1)    118F : A8                         plo     R8              ; R8=&valiable
(1)    1190 : 97                         ghi     R7
(1)    1191 : 58                         str     R8
(1)    1192 : 18                         inc     R8
(1)    1193 : 87                         glo     R7
(1)    1194 : 58                         str     R8
(1)    1195 : E2                         sex     R2
(1)    1196 : 60                         irx
(1)    1197 : 72                         ldxa
(1)    1198 : B8                         phi     R8
(1)    1199 : F0                         ldx
(1)    119A : A8                         plo     R8              ; restore R8
(1)    119B : D6                         sep     R6
(1)    119C :
(1)    119C :                    ;;; Load variable to R7
(1)    119C :                    ;;;   SEP  R5
(1)    119C :                    ;;;   DC   A(load_R7)
(1)    119C :                    ;;;   DC   A(variable)
(1)    119C :                    ;;; @return R7 variable
(1)    119C :                    ;;; @clobber D R15
(1)    119C :                    load_R7:
(1)    119C : E4                         sex     R4
(1)    119D : 72                         ldxa
(1)    119E : B7                         phi     R7
(1)    119F : 72                         ldxa
(1)    11A0 : A7                         plo     R7
(1)    11A1 : 07                         ldn     R7
(1)    11A2 : AF                         plo     R15
(1)    11A3 : 17                         inc     R7
(1)    11A4 : 07                         ldn     R7
(1)    11A5 : A7                         plo     R7
(1)    11A6 : 8F                         glo     R15
(1)    11A7 : B7                         phi     R7
(1)    11A8 : E2                         sex     R2
(1)    11A9 : D6                         sep     R6
(1)    11AA :
(1)    11AA :                    ;;; Load variable to R8
(1)    11AA :                    ;;;   SEP  R5
(1)    11AA :                    ;;;   DC   A(load_R8)
(1)    11AA :                    ;;;   DC   A(variable)
(1)    11AA :                    ;;; @clobber R15
(1)    11AA :                    load_R8:
(1)    11AA : E4                         sex     R4
(1)    11AB : 72                         ldxa
(1)    11AC : B8                         phi     R8
(1)    11AD : 72                         ldxa
(1)    11AE : A8                         plo     R8
(1)    11AF : 08                         ldn     R8
(1)    11B0 : AF                         plo     R15
(1)    11B1 : 18                         inc     R8
(1)    11B2 : 08                         ldn     R8
(1)    11B3 : A8                         plo     R8
(1)    11B4 : 8F                         glo     R15
(1)    11B5 : B8                         phi     R8
(1)    11B6 : E2                         sex     R2
(1)    11B7 : D6                         sep     R6
(1)    11B8 :
(1)    11B8 :                    ;;; Set constant to R7
(1)    11B8 :                    ;;;   SEP  R5
(1)    11B8 :                    ;;;   DC   A(set_R7)
(1)    11B8 :                    ;;;   DC   A(constant)
(1)    11B8 :                    ;;; @return R7 constant
(1)    11B8 :                    ;;; @clobber D
(1)    11B8 :                    set_R7:
(1)    11B8 : E4                         sex     R4
(1)    11B9 : 72                         ldxa
(1)    11BA : B7                         phi     R7
(1)    11BB : 72                         ldxa
(1)    11BC : A7                         plo     R7
(1)    11BD : E2                         sex     R2
(1)    11BE : D6                         sep     R6
(1)    11BF :
(1)    11BF :                    ;;; Set constant to R8
(1)    11BF :                    ;;;   SEP  R5
(1)    11BF :                    ;;;   DC   A(set_R8)
(1)    11BF :                    ;;;   DC   A(variable)
(1)    11BF :                    ;;; @clobber R15
(1)    11BF :                    set_R8:
(1)    11BF : E4                         sex     R4
(1)    11C0 : 72                         ldxa
(1)    11C1 : B8                         phi     R8
(1)    11C2 : 72                         ldxa
(1)    11C3 : A8                         plo     R8
(1)    11C4 : E2                         sex     R2
(1)    11C5 : D6                         sep     R6
(1)    11C6 :
(1)    11C6 :                    ;;; Increment variable
(1)    11C6 :                    ;;;   SEP  R5
(1)    11C6 :                    ;;;   DC   A(inc16)
(1)    11C6 :                    ;;;   DC   A(variable)
(1)    11C6 :                    ;;; @return R7 variable
(1)    11C6 :                    ;;; @clobber D R15
(1)    11C6 :                    inc16:
(1)    11C6 : 88                         glo     R8
(1)    11C7 : 73                         stxd
(1)    11C8 : 98                         ghi     R8
(1)    11C9 : 73                         stxd                    ; save R8
(1)    11CA : E4                         sex     R4
(1)    11CB : 72                         ldxa
(1)    11CC : B8                         phi     R8
(1)    11CD : 72                         ldxa
(1)    11CE : A8                         plo     R8
(1)    11CF : 08                         ldn     R8
(1)    11D0 : B7                         phi     R7
(1)    11D1 : 18                         inc     R8
(1)    11D2 : 08                         ldn     R8
(1)    11D3 : A7                         plo     R7
(1)    11D4 : 17                         inc     R7
(1)    11D5 : 87                         glo     R7
(1)    11D6 : 58                         str     R8
(1)    11D7 : 97                         ghi     R7
(1)    11D8 : 28                         dec     R8
(1)    11D9 : 58                         str     R8
(1)    11DA : E2                         sex     R2
(1)    11DB : 60                         irx
(1)    11DC : 72                         ldxa
(1)    11DD : B8                         phi     R8
(1)    11DE : F0                         ldx
(1)    11DF : A8                         plo     R8              ; restore R8
(1)    11E0 : D6                         sep     R6
(1)    11E1 :
(1)    11E1 :                    ;;; Signed addition: summand += addend
(1)    11E1 :                    ;;; @param R7 summand
(1)    11E1 :                    ;;; @param R8 addend
(1)    11E1 :                    ;;; @return R7 summand + addend
(1)    11E1 :                    ;;;   SEP R5
(1)    11E1 :                    ;;;   DC  A(add16)
(1)    11E1 :                    ;;; @clobber D
(1)    11E1 :                    add16:
(1)    11E1 : 88                         glo     R8
(1)    11E2 : 52                         str     R2
(1)    11E3 : 87                         glo     R7
(1)    11E4 : F4                         add
(1)    11E5 : A7                         plo     R7
(1)    11E6 : 98                         ghi     R8
(1)    11E7 : 52                         str     R2
(1)    11E8 : 97                         ghi     R7
(1)    11E9 : 74                         adc
(1)    11EA : B7                         phi     R7
(1)    11EB : D6                         sep     R6
(1)    11EC :
(1)    11EC :                    ;;; Singed subtraction: minuend -= subtrahend
(1)    11EC :                    ;;; @param R7 minuend
(1)    11EC :                    ;;; @param R8 subtrahend
(1)    11EC :                    ;;; @return R7 minuend - subtrahend
(1)    11EC :                    ;;;   SEP R5
(1)    11EC :                    ;;;   DC  A(sub16)
(1)    11EC :                    sub16:
(1)    11EC : 88                         glo     R8
(1)    11ED : 52                         str     R2
(1)    11EE : 87                         glo     R7
(1)    11EF : F7                         sm
(1)    11F0 : A7                         plo     R7
(1)    11F1 : 98                         ghi     R8
(1)    11F2 : 52                         str     R2
(1)    11F3 : 97                         ghi     R7
(1)    11F4 : 77                         smb
(1)    11F5 : B7                         phi     R7
(1)    11F6 : D6                         sep     R6
(1)    11F7 :
(1)    11F7 :                    ;;; Signed comparison: minuend - subtrahend
(1)    11F7 :                    ;;; @param R7 minuend
(1)    11F7 :                    ;;; @param R8 subtrahend
(1)    11F7 :                    ;;; @return D=0 DF=1 (minuend==subtrahend); BZ
(1)    11F7 :                    ;;;         D=1 DF=1 (minuend>subtrahend);  BGE
(1)    11F7 :                    ;;;         D=1 DF=0 (minuend<subtrahend);  BL
(1)    11F7 :                    ;;; @clobber R7 R8
(1)    11F7 :                    ;;; result = minuend - subtrahend
(1)    11F7 :                    ;;; Z=(result.1 | result.0) == 0
(1)    11F7 :                    ;;; N=(result.1 & 0x80) != 0
(1)    11F7 :                    ;;; V=((minuend.1 ^ subtrahend.1) & (result.1 ^ minuend.1) & 0x80) != 0
(1)    11F7 :                    ;;; LT=N ^ V
(1)    11F7 :                    cmp16:
(1)    11F7 : 88                         glo     R8              ; D=subtrahend.0
(1)    11F8 : 52                         str     R2              ; stack top=subtrahend.0
(1)    11F9 : 87                         glo     R7              ; D=minuend.0
(1)    11FA : F7                         sm                      ; D=minuend.0=subtrahend.0
(1)    11FB : A7                         plo     R7              ; R7.0=result.0
(1)    11FC : 98                         ghi     R8              ; D=subtrahend.1
(1)    11FD : 52                         str     R2              ; stack top=subtrahend.1
(1)    11FE : 97                         ghi     R7              ; D=minuend.1
(1)    11FF : F3                         xor                     ; D=minuend.1^subtrahend.1
(1)    1200 : A8                         plo     R8              ; R8.0=minuend.1^subtrahend.1
(1)    1201 : 97                         ghi     R7              ; D=minuend.1
(1)    1202 : 77                         smb                     ; D=minuend.1=subtrahend.1
(1)    1203 : B8                         phi     R8              ; R8.1=result.1
(1)    1204 : 3A 0D                      bnz     cmp16_neq       ; branch if result.1!=0
(1)    1206 : 87                         glo     R7              ; D=result.0
(1)    1207 : 3A 0D                      bnz     cmp16_neq       ; branch if result.0!=-
(1)    1209 : F8 01                      ldi     1
(1)    120B : F6                         shr
(1)    120C : D6                         sep     R6              ; return with D=0, DF=1
(1)    120D :                    cmp16_neq:
(1)    120D : 98                         ghi     R8              ; D=result.1
(1)    120E : 52                         str     R2
(1)    120F : 97                         ghi     R7              ; D=minuend.1
(1)    1210 : F3                         xor                     ; D=result.1^minuend.1
(1)    1211 : 52                         str     R2              ; stack top=result.1^minuend.1
(1)    1212 : 88                         glo     R8              ; D=minuend.1^subtrahend.1
(1)    1213 : F2                         and                     ; D=(minuend.1^subtrahend.1)&(result.1^minuend.1)
(1)    1214 : 52                         str     R2              ; stack top=V
(1)    1215 : 98                         ghi     R8              ; D=result.1
(1)    1216 : F3                         xor                     ; D=N^V
(1)    1217 : FB 80                      xri     X'80'           ; D=~(N^V)
(1)    1219 : FE                         shl                     ; DF=~(N^V)
(1)    121A : F8 01                      ldi     1
(1)    121C : D6                         sep     R6              ; return with D=1
(1)    121D :
(1)    121D :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)    121D :                    ;;; @param R7 multiplicand
(1)    121D :                    ;;; @param R8 multiplier
(1)    121D :                    ;;; @return R7 result
(1)    121D :                    ;;; @clobber D R7 R8 R15
(1)    121D :                    umul16:
(1)    121D : F8 00                      ldi     0
(1)    121F : BF                         phi     R15
(1)    1220 : AF                         plo     R15             ; R15=result
(1)    1221 : 30 3E                      br      umul16_check
(1)    1223 :                    umul16_loop:
(1)    1223 : 88                         glo     R8
(1)    1224 : FA 01                      ani     1
(1)    1226 : 32 32                      bz      umul16_sr       ; lsb(multiplier)==0
(1)    1228 : 87                         glo     R7
(1)    1229 : 52                         str     R2              ; stack top=multiplicand.0
(1)    122A : 8F                         glo     R15
(1)    122B : F4                         add
(1)    122C : AF                         plo     R15
(1)    122D : 97                         ghi     R7
(1)    122E : 52                         str     R2              ; stack top=multiplicand.1
(1)    122F : 9F                         ghi     R15
(1)    1230 : 74                         adc
(1)    1231 : BF                         phi     R15             ; result += multiplicand
(1)    1232 :                    umul16_sr:
(1)    1232 : 98                         ghi     R8
(1)    1233 : F6                         shr
(1)    1234 : B8                         phi     R8
(1)    1235 : 88                         glo     R8
(1)    1236 : 76                         shrc
(1)    1237 : A8                         plo     R8              ; multiplier >>= 1
(1)    1238 : 87                         glo     R7
(1)    1239 : FE                         shl
(1)    123A : A7                         plo     R7
(1)    123B : 97                         ghi     R7
(1)    123C : 7E                         shlc
(1)    123D : B7                         phi     R7              ; multiplicand <<= 1
(1)    123E :                    umul16_check:
(1)    123E : 98                         ghi     R8
(1)    123F : 3A 23                      bnz     umul16_loop     ; while multiplier != 0
(1)    1241 : 88                         glo     R8
(1)    1242 : 3A 23                      bnz     umul16_loop     ; while multiplier != 0
(1)    1244 : 9F                         ghi     R15
(1)    1245 : B7                         phi     R7
(1)    1246 : 8F                         glo     R15
(1)    1247 : A7                         plo     R7              ; R7=result
(1)    1248 : D6                         sep     R6              ; return
(1)    1249 :
(1)    1249 :                    ;;; Signed multiplication: multiplicand *= multiplier
(1)    1249 :                    ;;; @param R7 multiplicand
(1)    1249 :                    ;;; @param R8 multiplier
(1)    1249 :                    ;;; @return R7 multiplicand * multiplier
(1)    1249 :                    ;;;   SEP R5
(1)    1249 :                    ;;;   DC  A(mul16)
(1)    1249 :                    ;;; @clobber R8 R15
(1)    1249 :                    mul16:
(1)    1249 : 98                         ghi     R8
(1)    124A : 52                         str     R2
(1)    124B : 97                         ghi     R7
(1)    124C : F3                         xor
(1)    124D : 73                         stxd                    ; push sign
(1)    124E : 98                         ghi     R8
(1)    124F : FA 80                      ani     X'80'
(1)    1251 : 32 5C                      bz      mul16_multiplicand
(1)    1253 : 98                         ghi     R8
(1)    1254 : FB FF                      xri     X'FF'
(1)    1256 : B8                         phi     R8
(1)    1257 : 88                         glo     R8
(1)    1258 : FB FF                      xri     X'FF'
(1)    125A : A8                         plo     R8
(1)    125B : 18                         inc     R8              ; negate multiplier
(1)    125C :                    mul16_multiplicand:
(1)    125C : 97                         ghi     R7
(1)    125D : FA 80                      ani     X'80'
(1)    125F : 32 6A                      bz      mul16_multiply
(1)    1261 : 97                         ghi     R7
(1)    1262 : FB FF                      xri     X'FF'
(1)    1264 : B7                         phi     R7
(1)    1265 : 87                         glo     R7
(1)    1266 : FB FF                      xri     X'FF'
(1)    1268 : A7                         plo     R7
(1)    1269 : 17                         inc     R7              ; negate multiplicand
(1)    126A :                    mul16_multiply:
(1)    126A : D5                         sep     R5
(1)    126B : 12 1D                      dc      A(umul16)       ; call umul16
(1)    126D : 60                         irx
(1)    126E : F0                         ldx                     ; sign
(1)    126F : FA 80                      ani     X'80'
(1)    1271 : 32 7C                      bz      mul16_return
(1)    1273 : 97                         ghi     R7
(1)    1274 : FB FF                      xri     X'FF'
(1)    1276 : B7                         phi     R7
(1)    1277 : 87                         glo     R7
(1)    1278 : FB FF                      xri     X'FF'
(1)    127A : A7                         plo     R7
(1)    127B : 17                         inc     R7              ; negate result
(1)    127C :                    mul16_return:
(1)    127C : D6                         sep     R6
(1)    127D :
(1)    127D :                    ;;; Unsigned division: dividend / divisor = quotient ... reminder
(1)    127D :                    ;;; @praram R7 dividend
(1)    127D :                    ;;; @praram R8 divisor
(1)    127D :                    ;;; @return R7 quotient
(1)    127D :                    ;;; @return R8 reminder
(1)    127D :                    ;;; @clobber R7 R8 R15
(1)    127D :                    udiv16:
(1)    127D : 98                         ghi     R8
(1)    127E : 3A 84                      bnz     udiv16_calc
(1)    1280 : 88                         glo     R8
(1)    1281 : 3A 84                      bnz     udiv16_calc
(1)    1283 : D6                         sep     R6              ; return divide by zero
(1)    1284 :                    udiv16_calc:
(1)    1284 : 89                         glo     R9
(1)    1285 : 73                         stxd
(1)    1286 : 99                         ghi     R9
(1)    1287 : 73                         stxd                    ; save R9
(1)    1288 : F8 01                      ldi     1
(1)    128A : AF                         plo     R15             ; R15.0=bits
(1)    128B : 30 94                      br      udiv16_prep
(1)    128D :                    udiv16_prep_loop:
(1)    128D : 88                         glo     R8
(1)    128E : FE                         shl
(1)    128F : A8                         plo     R8
(1)    1290 : 98                         ghi     R8
(1)    1291 : 7E                         shlc
(1)    1292 : B8                         phi     R8              ; divisor <<= 1
(1)    1293 : 1F                         inc     R15             ; ++bits
(1)    1294 :                    udiv16_prep:
(1)    1294 : 98                         ghi     R8
(1)    1295 : FA 80                      ani     X'80'
(1)    1297 : 32 8D                      bz      udiv16_prep_loop ; while msb(divisor) == 0
(1)    1299 : 97                         ghi     R7
(1)    129A : B9                         phi     R9
(1)    129B : 87                         glo     R7
(1)    129C : A9                         plo     R9              ; R9=dividend
(1)    129D : F8 00                      ldi     0
(1)    129F : B7                         phi     R7
(1)    12A0 : A7                         plo     R7              ; R7=quotient
(1)    12A1 : 30 AF                      br      udiv16_enter_loop
(1)    12A3 :                    udiv16_loop:
(1)    12A3 : 98                         ghi     R8
(1)    12A4 : F6                         shr
(1)    12A5 : B8                         phi     R8
(1)    12A6 : 88                         glo     R8
(1)    12A7 : 76                         shrc
(1)    12A8 : A8                         plo     R8              ; divisor >>= 1
(1)    12A9 : 87                         glo     R7
(1)    12AA : FE                         shl
(1)    12AB : A7                         plo     R7
(1)    12AC : 97                         ghi     R7
(1)    12AD : 7E                         shlc
(1)    12AE : B7                         phi     R7              ; quotient <<= 1
(1)    12AF :                    udiv16_enter_loop:
(1)    12AF : 88                         glo     R8
(1)    12B0 : 52                         str     R2
(1)    12B1 : 89                         glo     R9
(1)    12B2 : F7                         sm
(1)    12B3 : A9                         plo     R9
(1)    12B4 : 98                         ghi     R8
(1)    12B5 : 52                         str     R2
(1)    12B6 : 99                         ghi     R9
(1)    12B7 : 77                         smb
(1)    12B8 : B9                         phi     R9              ; dividend-=divisor
(1)    12B9 : 3B BE                      bm      udiv16_readd    ; branch if dividend < 0
(1)    12BB : 17                         inc     R7              ; quotient += 1
(1)    12BC : 30 C8                      br      udiv16_next
(1)    12BE :                    udiv16_readd:
(1)    12BE : 88                         glo     R8
(1)    12BF : 52                         str     R2
(1)    12C0 : 89                         glo     R9
(1)    12C1 : F4                         add
(1)    12C2 : A9                         plo     R9
(1)    12C3 : 98                         ghi     R8
(1)    12C4 : 52                         str     R2
(1)    12C5 : 99                         ghi     R9
(1)    12C6 : 74                         adc
(1)    12C7 : B9                         phi     R9              ; dividend+=divisor
(1)    12C8 :                    udiv16_next:
(1)    12C8 : 2F                         dec     R15
(1)    12C9 : 8F                         glo     R15
(1)    12CA : 3A A3                      bnz     udiv16_loop     ; while bits != 0
(1)    12CC : 99                         ghi     R9
(1)    12CD : B8                         phi     R8
(1)    12CE : 89                         glo     R9
(1)    12CF : A8                         plo     R8              ; R8=reminder
(1)    12D0 : 60                         irx
(1)    12D1 : 72                         ldxa
(1)    12D2 : B9                         phi     R9
(1)    12D3 : F0                         ldx
(1)    12D4 : A9                         plo     R9              ; restore R9
(1)    12D5 : D6                         sep     R6              ; return
(1)    12D6 :
(1)    12D6 :                    ;;; Signed division: dividend / divisor = quotient ... reminder
(1)    12D6 :                    ;;; @param R7 dividend
(1)    12D6 :                    ;;; @param R8 divisor
(1)    12D6 :                    ;;; @return R7 quotient
(1)    12D6 :                    ;;; @return R8 reminder
(1)    12D6 :                    ;;;   SEP R5
(1)    12D6 :                    ;;;   DC  A(div16)
(1)    12D6 :                    ;;; @clobber R15
(1)    12D6 :                    div16:
(1)    12D6 : 98                         ghi     R8
(1)    12D7 : 52                         str     R2
(1)    12D8 : 97                         ghi     R7
(1)    12D9 : F3                         xor
(1)    12DA : 73                         stxd                    ; push sign
(1)    12DB : 98                         ghi     R8
(1)    12DC : FA 80                      ani     X'80'
(1)    12DE : 32 E9                      bz      div16_dividend
(1)    12E0 : 98                         ghi     R8
(1)    12E1 : FB FF                      xri     X'FF'
(1)    12E3 : B8                         phi     R8
(1)    12E4 : 88                         glo     R8
(1)    12E5 : FB FF                      xri     X'FF'
(1)    12E7 : A8                         plo     R8
(1)    12E8 : 18                         inc     R8              ; negate divisor
(1)    12E9 :                    div16_dividend:
(1)    12E9 : 97                         ghi     R7              ; R7=dividend
(1)    12EA : FA 80                      ani     X'80'
(1)    12EC : 32 F7                      bz      div16_divide
(1)    12EE : 97                         ghi     R7
(1)    12EF : FB FF                      xri     X'FF'
(1)    12F1 : B7                         phi     R7
(1)    12F2 : 87                         glo     R7
(1)    12F3 : FB FF                      xri     X'FF'
(1)    12F5 : A7                         plo     R7
(1)    12F6 : 17                         inc     R7              ; negate dividend
(1)    12F7 :                    div16_divide:
(1)    12F7 : D5                         sep     R5
(1)    12F8 : 12 7D                      dc      A(udiv16)       ; call udiv16
(1)    12FA : 60                         irx
(1)    12FB : F0                         ldx                     ; pop sign
(1)    12FC : FA 80                      ani     X'80'
(1)    12FE : 32 09                      bz      div16_return
(1)    1300 : 97                         ghi     R7
(1)    1301 : FB FF                      xri     X'FF'
(1)    1303 : B7                         phi     R7
(1)    1304 : 87                         glo     R7
(1)    1305 : FB FF                      xri     X'FF'
(1)    1307 : A7                         plo     R7
(1)    1308 : 17                         inc     R7              ; negate quotient
(1)    1309 :                    div16_return:
(1)    1309 : D6                         sep     R6
       130A :                            include "mandelbrot.inc"
(1)    130A :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    130A :                    ;;; Mandelbrot variables
(1)    130A : =32                Fv:     equ     50
(1)    130A : 00 00              vC:     dc      A(0)
(1)    130C : 00 00              vD:     dc      A(0)
(1)    130E : 00 00              vA:     dc      A(0)
(1)    1310 : 00 00              vB:     dc      A(0)
(1)    1312 : 00 00              vP:     dc      A(0)
(1)    1314 : 00 00              vQ:     dc      A(0)
(1)    1316 : 00 00              vS:     dc      A(0)
(1)    1318 : 00 00              vT:     dc      A(0)
(1)    131A : 00 00              vY:     dc      A(0)
(1)    131C : 00 00              vX:     dc      A(0)
(1)    131E : 00 00              vI:     dc      A(0)
(1)    1320 :
(1)    1320 :                    ;;; Print variable: "D=variable "
(1)    1320 :                    ;;; @param D variable letter
(1)    1320 :                    ;;; @param R7 variable
(1)    1320 :                    ;;;   SEP R5
(1)    1320 :                    ;;;   DC  A(print)
(1)    1320 :                    ;;; @clobber R7 R15
(1)    1320 :                    print:
(1)    1320 : D5                         sep     R5
(1)    1321 : 10 3A                      dc      A(putchar)      ; print variable letter
(1)    1323 : F8 3D                      ldi     T'='
(1)    1325 : D5                         sep     R5
(1)    1326 : 10 3A                      dc      A(putchar)      ; '='
(1)    1328 : D5                         sep     R5
(1)    1329 : 11 60                      dc      A(print_int16)
(1)    132B : C0 10 66                   br      putspace
(1)    132E :
(1)    132E :                    mandelbrot:
(1)    132E : F8 FF                      ldi     A.1(-12)
(1)    1330 : B7                         phi     R7
(1)    1331 : F8 F4                      ldi     A.0(-12)
(1)    1333 : A7                         plo     R7
(1)    1334 : D5                         sep     R5
(1)    1335 : 11 87                      dc      A(store_R7)
(1)    1337 : 13 1A                      dc      A(vY)           ; Y=-12
(1)    1339 :                    loop_y:
(1)    1339 : F8 FF                      ldi     A.1(-49)
(1)    133B : B7                         phi     R7
(1)    133C : F8 CF                      ldi     A.0(-49)
(1)    133E : A7                         plo     R7
(1)    133F : D5                         sep     R5
(1)    1340 : 11 87                      dc      A(store_R7)
(1)    1342 : 13 1C                      dc      A(vX)           ; X=-49
(1)    1344 :                    loop_x:
(1)    1344 : D5                         sep     R5
(1)    1345 : 11 9C                      dc      A(load_R7)
(1)    1347 : 13 1C                      dc      A(vX)
(1)    1349 : F8 00                      ldi     A.1(229)
(1)    134B : B8                         phi     R8
(1)    134C : F8 E5                      ldi     A.0(229)
(1)    134E : A8                         plo     R8
(1)    134F : D5                         sep     R5
(1)    1350 : 12 49                      dc      A(mul16)
(1)    1352 : F8 00                      ldi     A.1(100)
(1)    1354 : B8                         phi     R8
(1)    1355 : F8 64                      ldi     A.0(100)
(1)    1357 : A8                         plo     R8
(1)    1358 : D5                         sep     R5
(1)    1359 : 12 D6                      dc      A(div16)
(1)    135B : D5                         sep     R5
(1)    135C : 11 87                      dc      A(store_R7)
(1)    135E : 13 0A                      dc      A(vC)           ; C=X*229/100
(1)    1360 : D5                         sep     R5
(1)    1361 : 11 87                      dc      A(store_R7)     ; A=C
(1)    1363 : 13 0E                      dc      A(vA)
(1)    1365 : D5                         sep     R5
(1)    1366 : 11 9C                      dc      A(load_R7)
(1)    1368 : 13 1A                      dc      A(vY)
(1)    136A : F8 01                      ldi     A.1(416)
(1)    136C : B8                         phi     R8
(1)    136D : F8 A0                      ldi     A.0(416)
(1)    136F : A8                         plo     R8
(1)    1370 : D5                         sep     R5
(1)    1371 : 12 49                      dc      A(mul16)
(1)    1373 : F8 00                      ldi     A.1(100)
(1)    1375 : B8                         phi     R8
(1)    1376 : F8 64                      ldi     A.0(100)
(1)    1378 : A8                         plo     R8
(1)    1379 : D5                         sep     R5
(1)    137A : 12 D6                      dc      A(div16)
(1)    137C : D5                         sep     R5
(1)    137D : 11 87                      dc      A(store_R7)
(1)    137F : 13 0C                      dc      A(vD)           ; D=Y*416/100
(1)    1381 : D5                         sep     R5
(1)    1382 : 11 87                      dc      A(store_R7)
(1)    1384 : 13 10                      dc      A(vB)           ; B=D
(1)    1386 : F8 00                      ldi     0
(1)    1388 : B7                         phi     R7
(1)    1389 : A7                         plo     R7
(1)    138A : D5                         sep     R5
(1)    138B : 11 87                      dc      A(store_R7)
(1)    138D : 13 1E                      dc      A(vI)           ; I=0
(1)    138F :
(1)    138F :                            ;; sep     R5
(1)    138F :                            ;; dc      A(load_R7)
(1)    138F :                            ;; dc      A(vY)
(1)    138F :                            ;; ldi     T'Y'
(1)    138F :                            ;; sep     R5
(1)    138F :                            ;; dc      A(print)
(1)    138F :                            ;; sep     R5
(1)    138F :                            ;; dc      A(load_R7)
(1)    138F :                            ;; dc      A(vX)
(1)    138F :                            ;; ldi     T'X'
(1)    138F :                            ;; sep     R5
(1)    138F :                            ;; dc      A(print)
(1)    138F :                            ;; sep     R5
(1)    138F :                            ;; dc      A(load_R7)
(1)    138F :                            ;; dc      A(vC)
(1)    138F :                            ;; ldi     T'C'
(1)    138F :                            ;; sep     R5
(1)    138F :                            ;; dc      A(print)
(1)    138F :                            ;; sep     R5
(1)    138F :                            ;; dc      A(load_R7)
(1)    138F :                            ;; dc      A(vD)
(1)    138F :                            ;; ldi     T'D'
(1)    138F :                            ;; sep     R5
(1)    138F :                            ;; dc      A(print)
(1)    138F :                            ;; sep     R5
(1)    138F :                            ;; dc      A(newline)
(1)    138F :
(1)    138F :                    loop_i:
(1)    138F : D5                         sep     R5
(1)    1390 : 11 9C                      dc      A(load_R7)
(1)    1392 : 13 10                      dc      A(vB)
(1)    1394 : F8 00                      ldi     A.1(Fv)
(1)    1396 : B8                         phi     R8
(1)    1397 : F8 32                      ldi     A.0(Fv)
(1)    1399 : A8                         plo     R8
(1)    139A : D5                         sep     R5
(1)    139B : 12 D6                      dc      A(div16)
(1)    139D : D5                         sep     R5
(1)    139E : 11 87                      dc      A(store_R7)
(1)    13A0 : 13 14                      dc      A(vQ)           ; Q=B/F
(1)    13A2 : F8 00                      ldi     A.1(Fv)
(1)    13A4 : B8                         phi     R8
(1)    13A5 : F8 32                      ldi     A.0(Fv)
(1)    13A7 : A8                         plo     R8
(1)    13A8 : D5                         sep     R5
(1)    13A9 : 12 49                      dc      A(mul16)
(1)    13AB : 97                         ghi     R7
(1)    13AC : B8                         phi     R8
(1)    13AD : 87                         glo     R7
(1)    13AE : A8                         plo     R8
(1)    13AF : D5                         sep     R5
(1)    13B0 : 11 9C                      dc      A(load_R7)
(1)    13B2 : 13 10                      dc      A(vB)
(1)    13B4 : D5                         sep     R5
(1)    13B5 : 11 EC                      dc      A(sub16)
(1)    13B7 : D5                         sep     R5
(1)    13B8 : 11 87                      dc      A(store_R7)
(1)    13BA : 13 16                      dc      A(vS)           ; S=B-Q*F
(1)    13BC : D5                         sep     R5
(1)    13BD : 11 9C                      dc      A(load_R7)
(1)    13BF : 13 10                      dc      A(vB)
(1)    13C1 : 97                         ghi     R7
(1)    13C2 : B8                         phi     R8
(1)    13C3 : 87                         glo     R7
(1)    13C4 : A8                         plo     R8
(1)    13C5 : D5                         sep     R5
(1)    13C6 : 12 49                      dc      A(mul16)        ; B*B
(1)    13C8 : 87                         glo     R7
(1)    13C9 : 73                         stxd
(1)    13CA : 97                         ghi     R7
(1)    13CB : 73                         stxd                    ; push B*B
(1)    13CC : D5                         sep     R5
(1)    13CD : 11 9C                      dc      A(load_R7)
(1)    13CF : 13 0E                      dc      A(vA)
(1)    13D1 : 97                         ghi     R7
(1)    13D2 : B8                         phi     R8
(1)    13D3 : 87                         glo     R7
(1)    13D4 : A8                         plo     R8
(1)    13D5 : D5                         sep     R5
(1)    13D6 : 12 49                      dc      A(mul16)        ; A*A
(1)    13D8 : 60                         irx
(1)    13D9 : 72                         ldxa
(1)    13DA : B8                         phi     R8
(1)    13DB : F0                         ldx
(1)    13DC : A8                         plo     R8              ; pop B*B
(1)    13DD : D5                         sep     R5
(1)    13DE : 11 EC                      dc      A(sub16)        ; A*A-B*B
(1)    13E0 : F8 00                      ldi     A.1(Fv)
(1)    13E2 : B8                         phi     R8
(1)    13E3 : F8 32                      ldi     A.0(Fv)
(1)    13E5 : A8                         plo     R8
(1)    13E6 : D5                         sep     R5
(1)    13E7 : 12 D6                      dc      A(div16)        ; (A*A-B*B)/F
(1)    13E9 : D5                         sep     R5
(1)    13EA : 11 AA                      dc      A(load_R8)
(1)    13EC : 13 0A                      dc      A(vC)
(1)    13EE : D5                         sep     R5
(1)    13EF : 11 E1                      dc      A(add16)        ; (A*A-B*B)/F+C
(1)    13F1 : D5                         sep     R5
(1)    13F2 : 11 87                      dc      A(store_R7)     ; T=(A*A-B*B)/F+C
(1)    13F4 : 13 18                      dc      A(vT)
(1)    13F6 : D5                         sep     R5
(1)    13F7 : 11 9C                      dc      A(load_R7)
(1)    13F9 : 13 0E                      dc      A(vA)
(1)    13FB : D5                         sep     R5
(1)    13FC : 11 AA                      dc      A(load_R8)
(1)    13FE : 13 16                      dc      A(vS)
(1)    1400 : D5                         sep     R5
(1)    1401 : 12 49                      dc      A(mul16)        ; A*S
(1)    1403 : F8 00                      ldi     A.1(Fv)
(1)    1405 : B8                         phi     R8
(1)    1406 : F8 32                      ldi     A.0(Fv)
(1)    1408 : A8                         plo     R8
(1)    1409 : D5                         sep     R5
(1)    140A : 12 D6                      dc      A(div16)        ; A*S/F
(1)    140C : 87                         glo     R7
(1)    140D : 73                         stxd
(1)    140E : 97                         ghi     R7
(1)    140F : 73                         stxd                    ; push A*S/F
(1)    1410 : D5                         sep     R5
(1)    1411 : 11 9C                      dc      A(load_R7)
(1)    1413 : 13 0E                      dc      A(vA)
(1)    1415 : D5                         sep     R5
(1)    1416 : 11 AA                      dc      A(load_R8)
(1)    1418 : 13 14                      dc      A(vQ)
(1)    141A : D5                         sep     R5
(1)    141B : 12 49                      dc      A(mul16)        ; A*Q
(1)    141D : 60                         irx
(1)    141E : 72                         ldxa
(1)    141F : B8                         phi     R8
(1)    1420 : F0                         ldx
(1)    1421 : A8                         plo     R8              ; pop A*S/F
(1)    1422 : D5                         sep     R5
(1)    1423 : 11 E1                      dc      A(add16)        ; A*Q+A*S/F
(1)    1425 : 97                         ghi     R7
(1)    1426 : B8                         phi     R8
(1)    1427 : 87                         glo     R7
(1)    1428 : A8                         plo     R8
(1)    1429 : D5                         sep     R5        
(1)    142A : 11 E1                      dc      A(add16)        ; 2*(A*Q+A*S/F)
(1)    142C : D5                         sep     R5
(1)    142D : 11 AA                      dc      A(load_R8)
(1)    142F : 13 0C                      dc      A(vD)
(1)    1431 : D5                         sep     R5
(1)    1432 : 11 E1                      dc      A(add16)        ; 2*(A*Q+A*S/F)+D
(1)    1434 : D5                         sep     R5
(1)    1435 : 11 87                      dc      A(store_R7)
(1)    1437 : 13 10                      dc      A(vB)           ; B=2*(A*Q+A*S/F)+D
(1)    1439 : D5                         sep     R5
(1)    143A : 11 9C                      dc      A(load_R7)
(1)    143C : 13 18                      dc      A(vT)
(1)    143E : D5                         sep     R5
(1)    143F : 11 87                      dc      A(store_R7)
(1)    1441 : 13 0E                      dc      A(vA)           ; A=T
(1)    1443 : F8 00                      ldi     A.1(Fv)
(1)    1445 : B8                         phi     R8
(1)    1446 : F8 32                      ldi     A.0(Fv)
(1)    1448 : A8                         plo     R8
(1)    1449 : D5                         sep     R5
(1)    144A : 12 D6                      dc      A(div16)
(1)    144C : D5                         sep     R5
(1)    144D : 11 87                      dc      A(store_R7)
(1)    144F : 13 12                      dc      A(vP)           ; P=A/F
(1)    1451 : 97                         ghi     R7
(1)    1452 : B8                         phi     R8
(1)    1453 : 87                         glo     R7
(1)    1454 : A8                         plo     R8
(1)    1455 : D5                         sep     R5
(1)    1456 : 12 49                      dc      A(mul16)        ; P*P
(1)    1458 : 87                         glo     R7
(1)    1459 : 73                         stxd
(1)    145A : 97                         ghi     R7
(1)    145B : 73                         stxd                    ; push P*P
(1)    145C : D5                         sep     R5
(1)    145D : 11 9C                      dc      A(load_R7)
(1)    145F : 13 10                      dc      A(vB)
(1)    1461 : F8 00                      ldi     A.1(Fv)
(1)    1463 : B8                         phi     R8
(1)    1464 : F8 32                      ldi     A.0(Fv)
(1)    1466 : A8                         plo     R8
(1)    1467 : D5                         sep     R5
(1)    1468 : 12 D6                      dc      A(div16)        ; B/Q
(1)    146A : D5                         sep     R5
(1)    146B : 11 87                      dc      A(store_R7)
(1)    146D : 13 14                      dc      A(vQ)           ; Q=B/F
(1)    146F : 97                         ghi     R7
(1)    1470 : B8                         phi     R8
(1)    1471 : 87                         glo     R7
(1)    1472 : A8                         plo     R8
(1)    1473 : D5                         sep     R5
(1)    1474 : 12 49                      dc      A(mul16)        ; Q*Q
(1)    1476 : 60                         irx
(1)    1477 : 72                         ldxa
(1)    1478 : B8                         phi     R8
(1)    1479 : F0                         ldx
(1)    147A : A8                         plo     R8              ; pop P*P
(1)    147B : D5                         sep     R5
(1)    147C : 11 E1                      dc      A(add16)
(1)    147E :
(1)    147E :                            ;; glo     R7
(1)    147E :                            ;; stxd
(1)    147E :                            ;; ghi     R7
(1)    147E :                            ;; stxd                    ; push T
(1)    147E :                            ;; sep     R5
(1)    147E :                            ;; dc      A(putspace)
(1)    147E :                            ;; sep     R5
(1)    147E :                            ;; dc      A(load_R7)
(1)    147E :                            ;; dc      A(vI)
(1)    147E :                            ;; ldi     T'I'
(1)    147E :                            ;; sep     R5
(1)    147E :                            ;; dc      A(print)
(1)    147E :                            ;; sep     R5
(1)    147E :                            ;; dc      A(load_R7)
(1)    147E :                            ;; dc      A(vA)
(1)    147E :                            ;; ldi     T'A'
(1)    147E :                            ;; sep     R5
(1)    147E :                            ;; dc      A(print)
(1)    147E :                            ;; sep     R5
(1)    147E :                            ;; dc      A(load_R7)
(1)    147E :                            ;; dc      A(vB)
(1)    147E :                            ;; ldi     T'B'
(1)    147E :                            ;; sep     R5
(1)    147E :                            ;; dc      A(print)
(1)    147E :                            ;; sep     R5
(1)    147E :                            ;; dc      A(load_R7)
(1)    147E :                            ;; dc      A(vP)
(1)    147E :                            ;; ldi     T'P'
(1)    147E :                            ;; sep     R5
(1)    147E :                            ;; dc      A(print)
(1)    147E :                            ;; sep     R5
(1)    147E :                            ;; dc      A(load_R7)
(1)    147E :                            ;; dc      A(vQ)
(1)    147E :                            ;; ldi     T'Q'
(1)    147E :                            ;; sep     R5
(1)    147E :                            ;; dc      A(print)
(1)    147E :                            ;; sep     R5
(1)    147E :                            ;; dc      A(newline)
(1)    147E :                            ;; irx
(1)    147E :                            ;; ldxa
(1)    147E :                            ;; phi     R7
(1)    147E :                            ;; ldx
(1)    147E :                            ;; plo     R7              ; pop T
(1)    147E :
(1)    147E : 97                         ghi     R7
(1)    147F : 3A 99                      bnz     print_i
(1)    1481 : 87                         glo     R7
(1)    1482 : FD 04                      sdi     4
(1)    1484 : 3B 99                      bm      print_i         ; if 4<T
(1)    1486 : F8 13                      ldi     A.1(vI+1)
(1)    1488 : B7                         phi     R7
(1)    1489 : F8 1F                      ldi     A.0(vI+1)
(1)    148B : A7                         plo     R7
(1)    148C : 07                         ldn     R7
(1)    148D : FC 01                      adi     1
(1)    148F : 57                         str     R7              ; I+=1
(1)    1490 : FF 10                      smi     16
(1)    1492 : CB 13 8F                   bm      loop_i          ; if I<16
(1)    1495 : F8 20                      ldi     T' '
(1)    1497 : 30 A8                      br      print_char
(1)    1499 :                    print_i:
(1)    1499 : F8 13                      ldi     A.1(vI+1)
(1)    149B : B7                         phi     R7
(1)    149C : F8 1F                      ldi     A.0(vI+1)
(1)    149E : A7                         plo     R7
(1)    149F : 07                         ldn     R7
(1)    14A0 : FF 0A                      smi     10
(1)    14A2 : 3B A6                      bl      print_i2        ; if I<10
(1)    14A4 : FC 07                      adi     T'A'-T'0'-10
(1)    14A6 :                    print_i2:
(1)    14A6 : FC 3A                      adi     T'0'+10
(1)    14A8 :                    print_char:
(1)    14A8 : D5                         sep     R5
(1)    14A9 : 10 3A                      dc      A(putchar)
(1)    14AB :
(1)    14AB :                            ;; stxd                    ; save char
(1)    14AB :                            ;; ldi     T'@'
(1)    14AB :                            ;; sep     R5
(1)    14AB :                            ;; dc      A(putchar)
(1)    14AB :                            ;; ldi     T'='
(1)    14AB :                            ;; sep     R5
(1)    14AB :                            ;; dc      A(putchar)
(1)    14AB :                            ;; inc     R2
(1)    14AB :                            ;; ldn     R2              ; restore char
(1)    14AB :                            ;; sep     R5
(1)    14AB :                            ;; dc      A(putchar)
(1)    14AB :                            ;; sep     R5
(1)    14AB :                            ;; dc      A(newline)
(1)    14AB :
(1)    14AB : D5                         sep     R5
(1)    14AC : 10 2C                      dc      A(getchar)
(1)    14AE : 32 B4                      bz      next_x
(1)    14B0 : 87                         glo     R7
(1)    14B1 : 3A B4                      bnz     next_x
(1)    14B3 : 00                         idl                     ; break
(1)    14B4 :                    next_x:
(1)    14B4 : D5                         sep     R5
(1)    14B5 : 11 C6                      dc      A(inc16)
(1)    14B7 : 13 1C                      dc      A(vX)           ; X+=1
(1)    14B9 : 97                         ghi     R7
(1)    14BA : CA 13 44                   bnz     loop_x          ; if X<0
(1)    14BD : 87                         glo     R7
(1)    14BE : FF 1E                      smi     30
(1)    14C0 : CB 13 44                   bl      loop_x          ; if X<30
(1)    14C3 : D5                         sep     R5
(1)    14C4 : 10 5D                      dc      A(newline)
(1)    14C6 : D5                         sep     R5
(1)    14C7 : 11 C6                      dc      A(inc16)
(1)    14C9 : 13 1A                      dc      A(vY)           ; Y+=1
(1)    14CB : 97                         ghi     R7
(1)    14CC : CA 13 39                   bnz     loop_y          ; if Y<0
(1)    14CF : 87                         glo     R7
(1)    14D0 : FF 0D                      smi     13
(1)    14D2 : CB 13 39                   bl      loop_y          ; if Y<13
(1)    14D5 : D6                         sep     R6
       14D6 :
       14D6 :                            end
