          0 :                            cpu     6809
          0 :                            include "mc6809.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; Condition Code Register (CC)
(1)       0 : =1                 CC_CARRY      equ  %00000001   ; set to 1 if carry occurred
(1)       0 : =2                 CC_OVERFLOW   equ  %00000010   ; set to 1 if overflow occurred
(1)       0 : =4                 CC_ZERO       equ  %00000100   ; set to 1 if result is zero
(1)       0 : =8                 CC_NEGATIVE   equ  %00001000   ; set to 1 if result is negative
(1)       0 : =10                CC_IRQ        equ  %00010000   ; if 1, IRQ is masked
(1)       0 : =20                CC_HALF_CARRY equ  %00100000   ; if 1, decimal carry from least digit occurred
(1)       0 : =40                CC_FIRQ       equ  %01000000   ; if 1, FIRQ is masked
(1)       0 : =80                CC_ENTIRE     equ  %10000000   ; set to 1 if entire registers are pushed
(1)       0 :
(1)       0 :                    ;;; Vector
(1)       0 : =FFF2              VEC_SWI3:       equ     $FFF2  ; $FFF2: Software Interrupt 3
(1)       0 : =FFF4              VEC_SWI2:       equ     $FFF4  ; $FFF4: Software Interrupt 2
(1)       0 : =FFF6              VEC_FIRQ:       equ     $FFF6  ; $FFF6: Fast Interrupt Request
(1)       0 : =FFF8              VEC_IRQ:        equ     $FFF8  ; $FFF8: Interrupt Request
(1)       0 : =FFFA              VEC_SWI:        equ     $FFFA  ; $FFFA: Software Interrupt
(1)       0 : =FFFC              VEC_NMI:        equ     $FFFC  ; $FFFC: Non Maskable Interrupt
(1)       0 : =FFFE              VEC_RESET:      equ     $FFFE  ; $FFFE: Reset
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA:   equ     $DF00
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     %11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     %00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     %00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     %00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     %00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     %00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     %00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     %00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     %00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     %00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     %00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     %00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     %00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     %00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     %01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     %00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     %00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     %01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     %01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     %10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     %00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     %00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     %00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     %00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     %00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     %00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     %01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     %10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data:      equ     ACIA+1          ; Data register
          0 :
       2000 :                            org     $2000
       2000 :
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       rmb     rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       rmb     tx_queue_size
       2100 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
       2100 : =B4                RX_INT_TX_INT:  equ     WSB_8N1_gc|RIEB_bm|TCB_EI_gc
       2100 :
       1000 :                            org     $1000
       1000 : =1000              stack:  equ     *
       1000 :
       FFF6 :                            org     VEC_FIRQ
       FFF6 : 10 F1                      fdb     isr_firq
       FFF8 :
       FFFA :                            org     VEC_SWI
       FFFA : FF FA                      fdb     VEC_SWI         ; for halt to system
       FFFC :
       FFFE :                            org     VEC_RESET
       FFFE : 10 00                      fdb     initialize
      10000 :
       1000 :                            org     $1000
       1000 :                    initialize:
       1000 : 10 CE 10 00                lds     #stack
       1004 : 8E 20 00                   ldx     #rx_queue
       1007 : C6 80                      ldb     #rx_queue_size
       1009 : 17 00 9A                   lbsr    queue_init
       100C : 8E 20 80                   ldx     #tx_queue
       100F : C6 80                      ldb     #tx_queue_size
       1011 : 17 00 92                   lbsr    queue_init
       1014 :                            ;; initialize ACIA
       1014 : 86 03                      lda     #CDS_RESET_gc   ; master reset
       1016 : B7 DF 00                   sta     ACIA_control
       1019 : 86 94                      lda     #RX_INT_TX_NO
       101B : B7 DF 00                   sta     ACIA_control
       101E : 86 F6                      lda     #VEC_FIRQ
       1020 : B7 DF 02                   sta     ACIA+2          ; set #FIRQ name for MC6850 emulator
       1023 :
       1023 :                    wait:   
       1023 : 3C BF                      cwai    #~CC_FIRQ       ; Clear FIRQ mask
       1025 :                    loop:
       1025 : 8D 5E                      bsr     getchar
       1027 : 24 FC                      bcc     loop
       1029 : 4D                         tsta
       102A : 27 14                      beq     halt_to_system
       102C : 1F 89                      tfr     a,b
       102E : 8D 62                      bsr     putchar         ; echo
       1030 : 86 20                      lda     #' '            ; space
       1032 : 8D 5E                      bsr     putchar
       1034 : 8D 13                      bsr     put_hex8        ; print in hex
       1036 : 86 20                      lda     #' '
       1038 : 8D 58                      bsr     putchar
       103A : 8D 2D                      bsr     put_bin8        ; print in binary
       103C : 8D 03                      bsr     newline
       103E : 20 E5                      bra     loop
       1040 :                    halt_to_system:
       1040 : 3F                         swi                     ; halt to system
       1041 :
       1041 :                    ;;; Put newline
       1041 :                    ;;; @clobber A
       1041 :                    newline:
       1041 : 86 0D                      lda     #$0D
       1043 : 8D 4D                      bsr     putchar
       1045 : 86 0A                      lda     #$0A
       1047 : 20 49                      bra     putchar
       1049 :
       1049 :                    ;;; Print uint8_t in hex
       1049 :                    ;;; @param B uint8_t value to be printed in hex.
       1049 :                    ;;; @clobber A
       1049 :                    put_hex8:
       1049 : 86 30                      lda     #'0'
       104B : 8D 45                      bsr     putchar
       104D : 86 78                      lda     #'x'
       104F : 8D 41                      bsr     putchar
       1051 : 1F 98                      tfr     b,a
       1053 : 44                         lsra
       1054 : 44                         lsra
       1055 : 44                         lsra
       1056 : 44                         lsra
       1057 : 8D 02                      bsr     put_hex4
       1059 : 1F 98                      tfr     b,a
       105B :                    put_hex4:
       105B : 84 0F                      anda    #$0f
       105D : 81 0A                      cmpa    #10
       105F : 25 04                      blo     put_hex8_dec
       1061 : 8B 37                      adda    #'A'-10
       1063 : 20 2D                      bra     putchar
       1065 :                    put_hex8_dec:
       1065 : 8B 30                      adda    #'0'
       1067 : 20 29                      bra     putchar
       1069 :
       1069 :                    ;;; Print uint8_t in binary
       1069 :                    ;;; @param B uint8_t value to be printed in binary.
       1069 :                    ;;; @clobber A
       1069 :                    put_bin8:
       1069 : 34 04                      pshs    b
       106B : 86 30                      lda     #'0'
       106D : 8D 23                      bsr     putchar
       106F : 86 62                      lda     #'b'
       1071 : 8D 1F                      bsr     putchar
       1073 : 8D 04                      bsr     put_bin4
       1075 : 8D 02                      bsr     put_bin4
       1077 : 35 84                      puls    b,pc
       1079 :                    put_bin4:
       1079 : 8D 00                      bsr     put_bin2
       107B :                    put_bin2:
       107B : 8D 00                      bsr     put_bin1
       107D :                    put_bin1:
       107D : 86 30                      lda     #'0'
       107F : 58                         lslb                    ; C=MSB
       1080 : 24 10                      bcc     putchar         ; MSB=0
       1082 : 4C                         inca                    ; MSB=1
       1083 : 20 0D                      bra     putchar
       1085 :
       1085 :                    ;;; Get character
       1085 :                    ;;; @return A
       1085 :                    ;;; @return CC.C 0 if no character
       1085 :                    getchar:
       1085 : 34 10                      pshs    x
       1087 : 8E 20 00                   ldx     #rx_queue
       108A : 1A 40                      orcc    #CC_FIRQ         ; disable FIRQ
       108C : 8D 44                      bsr     queue_remove
       108E : 1C BF                      andcc   #~CC_FIRQ        ; enable FIRQ
       1090 : 35 90                      puls    x,pc
       1092 :
       1092 :                    ;;; Put character
       1092 :                    ;;; @param A
       1092 :                    putchar:
       1092 : 34 12                      pshs    x,a
       1094 : 8E 20 80                   ldx     #tx_queue
       1097 :                    putchar_retry:
       1097 : 1A 40                      orcc    #CC_FIRQ         ; disable FIRQ
       1099 : 8D 19                      bsr     queue_add
       109B : 1C BF                      andcc   #~CC_FIRQ        ; enable FIRQ
       109D : 24 F8                      bcc     putchar_retry    ; branch if queue is full
       109F : 86 B4                      lda     #RX_INT_TX_INT   ; enable Tx interrupt
       10A1 : B7 DF 00                   sta     ACIA_control
       10A4 : 35 92                      puls    a,x,pc
       10A6 :
       10A6 :                            include "queue.inc"
(1)    10A6 :                    ;;; -*- mode: asm; mode: flying-spell; -*-
(1)    10A6 :                    ;;; [queue] queue structure
(1)    10A6 : =0                 queue_len:      equ     0       ; queue length
(1)    10A6 : =1                 queue_size:     equ     1       ; buffer size
(1)    10A6 : =2                 queue_put:      equ     2       ; queue put index
(1)    10A6 : =3                 queue_get:      equ     3       ; queue get index
(1)    10A6 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)    10A6 :
(1)    10A6 :                    ;;; [queue] Initialize queue
(1)    10A6 :                    ;;; @param X queue work space pointer
(1)    10A6 :                    ;;; @param B queue work space size
(1)    10A6 :                    queue_init:
(1)    10A6 : 34 14                      pshs    x,b
(1)    10A8 :                    queue_init_loop:
(1)    10A8 : 6F 80                      clr     ,x+
(1)    10AA : 5A                         decb
(1)    10AB : 26 FB                      bne     queue_init_loop
(1)    10AD : 35 14                      puls    b,x
(1)    10AF : C0 04                      subb    #queue_buf
(1)    10B1 : E7 01                      stb     queue_size,x
(1)    10B3 : 39                         rts
(1)    10B4 :
(1)    10B4 :                    ;;; [queue] Add an element to queue
(1)    10B4 :                    ;;; @param X queue work space pointer
(1)    10B4 :                    ;;; @param A an element
(1)    10B4 :                    ;;; @return CC.C 0 if queue is full
(1)    10B4 :                    queue_add:
(1)    10B4 : 34 54                      pshs    u,x,b
(1)    10B6 : 1F 13                      tfr     x,u
(1)    10B8 : E6 C4                      ldb     queue_len,u
(1)    10BA : E1 41                      cmpb    queue_size,u
(1)    10BC : 24 12                      bhs     queue_add_return ;carry is cleared
(1)    10BE : E6 42                      ldb     queue_put,u     ; 8 bits offset
(1)    10C0 : 3A                         abx                     ; X+=B
(1)    10C1 : A7 04                      sta     queue_buf,x     ; store an element
(1)    10C3 : 6C C4                      inc     queue_len,u
(1)    10C5 : 5C                         incb
(1)    10C6 : E7 42                      stb     queue_put,u
(1)    10C8 : E1 41                      cmpb    queue_size,u
(1)    10CA : 25 04                      blo     queue_add_return ; carry is set
(1)    10CC : 6F 42                      clr     queue_put,u
(1)    10CE : 1A 01                      orcc    #CC_CARRY       ; set carry
(1)    10D0 :                    queue_add_return:
(1)    10D0 : 35 D4                      puls    b,x,u,pc
(1)    10D2 :
(1)    10D2 :                    ;;; [queue] Remove an element from queue
(1)    10D2 :                    ;;; @param X queue work space pointer
(1)    10D2 :                    ;;; @return A an element
(1)    10D2 :                    ;;; @return CC.C 0 if queue is empty
(1)    10D2 :                    queue_remove:
(1)    10D2 : 6D 84                      tst     queue_len,x
(1)    10D4 : 26 03                      bne     queue_remove_elem
(1)    10D6 : 1C FE                      andcc   #~CC_CARRY      ; clear carry
(1)    10D8 : 39                         rts
(1)    10D9 :                    queue_remove_elem:
(1)    10D9 : 34 54                      pshs    u,x,b
(1)    10DB : 1F 13                      tfr     x,u
(1)    10DD : E6 43                      ldb     queue_get,u     ; 8 bits offset
(1)    10DF : 3A                         abx                     ; X+=B
(1)    10E0 : A6 04                      lda     queue_buf,x
(1)    10E2 : 6A C4                      dec     queue_len,u
(1)    10E4 : 5C                         incb
(1)    10E5 : E7 43                      stb     queue_get,u
(1)    10E7 : E1 41                      cmpb    queue_size,u
(1)    10E9 : 25 04                      blo     queue_remove_return ; carry is set
(1)    10EB : 6F 43                      clr     queue_get,u
(1)    10ED : 1A 01                      orcc    #CC_CARRY       ; set carry
(1)    10EF :                    queue_remove_return:
(1)    10EF : 35 D4                      puls    b,x,u,pc
       10F1 :
       10F1 :                    isr_firq:
       10F1 : 34 16                      pshs    x,b,a
       10F3 : F6 DF 00                   ldb     ACIA_status
       10F6 : C5 80                      bitb    #IRQF_bm
       10F8 : 27 1C                      beq     isr_firq_exit
       10FA : C5 01                      bitb    #RDRF_bm
       10FC : 27 09                      beq     isr_firq_send
       10FE : B6 DF 01                   lda     ACIA_data       ; receive character
       1101 : 8E 20 00                   ldx     #rx_queue
       1104 : BD 10 B4                   jsr     queue_add
       1107 :                    isr_firq_send:
       1107 : C5 02                      bitb    #TDRE_bm
       1109 : 27 0B                      beq     isr_firq_exit
       110B : 8E 20 80                   ldx     #tx_queue
       110E : BD 10 D2                   jsr     queue_remove
       1111 : 24 06                      bcc     isr_firq_send_empty
       1113 : B7 DF 01                   sta     ACIA_data       ; send character
       1116 :                    isr_firq_exit:
       1116 : 35 16                      puls    a,b,x
       1118 : 3B                         rti
       1119 :                    isr_firq_send_empty:
       1119 : 86 94                      lda     #RX_INT_TX_NO
       111B : B7 DF 00                   sta     ACIA_control    ; disable Tx interrupt
       111E : 35 16                      puls    a,b,x
       1120 : 3B                         rti
