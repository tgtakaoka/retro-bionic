          0 :                            cpu     6809
          0 :                            include "mc6809.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; Condition Code Register (CC)
(1)       0 : =1                 CC_CARRY      equ  %00000001   ; set to 1 if carry occurred
(1)       0 : =2                 CC_OVERFLOW   equ  %00000010   ; set to 1 if overflow occurred
(1)       0 : =4                 CC_ZERO       equ  %00000100   ; set to 1 if result is zero
(1)       0 : =8                 CC_NEGATIVE   equ  %00001000   ; set to 1 if result is negative
(1)       0 : =10                CC_IRQ        equ  %00010000   ; if 1, IRQ is masked
(1)       0 : =20                CC_HALF_CARRY equ  %00100000   ; if 1, decimal carry from least digit occurred
(1)       0 : =40                CC_FIRQ       equ  %01000000   ; if 1, FIRQ is masked
(1)       0 : =80                CC_ENTIRE     equ  %10000000   ; set to 1 if entire registers are pushed
(1)       0 :
(1)       0 :                    ;;; Vector
(1)       0 : =FFF2              VEC_SWI3:       equ     $FFF2  ; $FFF2: Software Interrupt 3
(1)       0 : =FFF4              VEC_SWI2:       equ     $FFF4  ; $FFF4: Software Interrupt 2
(1)       0 : =FFF6              VEC_FIRQ:       equ     $FFF6  ; $FFF6: Fast Interrupt Request
(1)       0 : =FFF8              VEC_IRQ:        equ     $FFF8  ; $FFF8: Interrupt Request
(1)       0 : =FFFA              VEC_SWI:        equ     $FFFA  ; $FFFA: Software Interrupt
(1)       0 : =FFFC              VEC_NMI:        equ     $FFFC  ; $FFFC: Non Maskable Interrupt
(1)       0 : =FFFE              VEC_RESET:      equ     $FFFE  ; $FFFE: Reset
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA:   equ     $DF00
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     %11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     %00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     %00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     %00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     %00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     %00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     %00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     %00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     %00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     %00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     %00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     %00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     %00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     %00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     %01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     %00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     %00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     %01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     %01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     %10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     %00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     %00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     %00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     %00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     %00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     %00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     %01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     %10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data:      equ     ACIA+1          ; Data register
          0 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
          0 : =B4                RX_INT_TX_INT:  equ     WSB_8N1_gc|RIEB_bm|TCB_EI_gc
          0 :
         20 :                            org     $20
         20 :                    ;;; Working space for mandelbrot.inc
         20 : =32                F:      equ     50
         20 :                    vC:     rmb     2
         22 :                    vD:     rmb     2
         24 :                    vA:     rmb     2
         26 :                    vB:     rmb     2
         28 :                    vS:     rmb     2
         2A :                    vP:     rmb     2
         2C :                    vQ:     rmb     2
         2E :                    vT:     rmb     2
         30 :                    vY:     rmb     1
         31 :                    vX:     rmb     1
         32 :                    vI:     rmb     1
         33 :
         33 :                    ;;; Working space for arith.inc
         33 :                    R0:
         33 :                    R0H:    rmb     1
         34 :                    R0L:    rmb     1
         35 :                    R1:
         35 :                    R1H:    rmb     1
         36 :                    R1L:    rmb     1
         37 :                    R2:
         37 :                    R2H:    rmb     1
         38 :                    R2L:    rmb     1
         39 :
       2000 :                            org     $2000
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       rmb     rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       rmb     tx_queue_size
       2100 :
       1000 :                            org     $1000
       1000 : =FFF               stack:  equ     *-1             ; MC6800's SP is post-decrement/pre-increment
       1000 :
       FFF6 :                            org     VEC_FIRQ
       FFF6 : 03 83                      fdb     isr_firq
       FFF8 :
       FFF8 :                            org     VEC_IRQ
       FFF8 : 03 B3                      fdb     isr_irq
       FFFA :
       FFFA :                            org     VEC_SWI
       FFFA : FF FA                      fdb     VEC_SWI         ; for halt to system
       FFFC :
       FFFC :                            org     VEC_NMI
       FFFC : 03 B4                      fdb     isr_nmi
       FFFE :
       FFFE :                            org     VEC_RESET
       FFFE : 01 00                      fdb     main
      10000 :
        100 :                            org     $0100
        100 :                    main:
        100 : 10 CE 0F FF                lds     #stack
        104 : 8E 20 00                   ldx     #rx_queue
        107 : C6 80                      ldb     #rx_queue_size
        109 : 17 02 2C                   lbsr    queue_init
        10C : 8E 20 80                   ldx     #tx_queue
        10F : C6 80                      ldb     #tx_queue_size
        111 : 17 02 24                   lbsr    queue_init
        114 :                            ;; initialize ACIA
        114 : 86 03                      lda     #CDS_RESET_gc   ; master reset
        116 : B7 DF 00                   sta     ACIA_control
        119 : 86 94                      lda     #RX_INT_TX_NO
        11B : B7 DF 00                   sta     ACIA_control
        11E : 86 F6                      lda     #VEC_FIRQ
        120 : B7 DF 02                   sta     ACIA+2          ; set #FIRQ name for MC6850 emulator
        123 : 1C BF                      andcc   #~CC_FIRQ       ; Clear FIRQ mask
        125 :
        125 :                    loop:
        125 : BD 01 6A                   jsr     mandelbrot
        128 : BD 01 3F                   jsr     newline
        12B : 20 F8                      bra     loop
        12D :
        12D :                    ;;; Get character
        12D :                    ;;; @return A
        12D :                    ;;; @return CC.C 0 if no character
        12D :                    getchar:
        12D : 34 10                      pshs    x
        12F : 8E 20 00                   ldx     #rx_queue
        132 : 1A 40                      orcc    #CC_FIRQ         ; disable FIRQ
        134 : 17 02 2D                   lbsr     queue_remove
        137 : 1C BF                      andcc   #~CC_FIRQ        ; enable FIRQ
        139 : 35 90                      puls    x,pc
        13B :
        13B :                    ;;; Put character
        13B :                    ;;; @param A
        13B :                    putspace:
        13B : 86 20                      lda     #' '
        13D : 20 06                      bra     putchar
        13F :                    newline:
        13F : 86 0D                      lda     #$0D
        141 : 8D 02                      bsr     putchar
        143 : 86 0A                      lda     #$0A
        145 :                    putchar:
        145 : 34 12                      pshs    x,a
        147 : 8E 20 80                   ldx     #tx_queue
        14A :                    putchar_retry:
        14A : 1A 40                      orcc    #CC_FIRQ         ; disable FIRQ
        14C : 17 01 F7                   lbsr    queue_add
        14F : 1C BF                      andcc   #~CC_FIRQ        ; enable FIRQ
        151 : 24 F7                      bcc     putchar_retry    ; branch if queue is full
        153 : 86 B4                      lda     #RX_INT_TX_INT   ; enable Tx interrupt
        155 : B7 DF 00                   sta     ACIA_control
        158 : 35 92                      puls    a,x,pc
        15A :
        15A :                            include "mandelbrot.inc"
(1)     15A :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     15A :                            cpu     6809
(1)     15A :
(1)     15A :                    ;;; Print variable: "A=variable "
(1)     15A :                    ;;; @param X variable
(1)     15A :                    ;;; @param A variable letter
(1)     15A :                    print:
(1)     15A : BD 01 45                   jsr     putchar         ; print variable letter
(1)     15D : 86 3D                      lda     #'='
(1)     15F : BD 01 45                   jsr     putchar         ; '='
(1)     162 : 1F 10                      tfr     X,D
(1)     164 : BD 02 54                   jsr     print_int16
(1)     167 : 7E 01 3B                   jmp     putspace
(1)     16A :
(1)     16A :                    mandelbrot:
(1)     16A : 86 F4                      lda     #-12
(1)     16C : 97 30                      sta     vY              ; Y=-12
(1)     16E :                    loop_y:
(1)     16E : 86 CF                      lda     #-49
(1)     170 : 97 31                      sta     vX              ; X=-49
(1)     172 :                    loop_x:
(1)     172 : D6 31                      ldb     vX
(1)     174 : 1D                         sex                     ; D=X
(1)     175 : 8E 00 E5                   ldx     #229
(1)     178 : BD 02 A5                   jsr     mul16           ; D=X*229
(1)     17B : 8E 00 64                   ldx     #100
(1)     17E : BD 03 0C                   jsr     div16           ; D=X*229/100
(1)     181 : DD 20                      std     vC              ; C=X*229/100
(1)     183 : DD 24                      std     vA              ; A=C
(1)     185 : D6 30                      ldb     vY
(1)     187 : 1D                         sex                     ; D=Y
(1)     188 : 8E 01 A0                   ldx     #416
(1)     18B : BD 02 A5                   jsr     mul16           ; R0=Y*416
(1)     18E : 8E 00 64                   ldx     #100
(1)     191 : BD 03 0C                   jsr     div16           ; R0=Y*416/100
(1)     194 : DD 22                      std     vD              ; D=Y*416/100
(1)     196 : DD 26                      std     vB              ; B=D
(1)     198 : 0F 32                      clr     vI              ; I=0
(1)     19A :
(1)     19A :                            ;; ldb     vY              ; Y
(1)     19A :                            ;; sex
(1)     19A :                            ;; tfr     D,X
(1)     19A :                            ;; lda     #'Y'
(1)     19A :                            ;; jsr     print
(1)     19A :                            ;; ldb     vX              ; X
(1)     19A :                            ;; sex
(1)     19A :                            ;; tfr     D,X
(1)     19A :                            ;; lda     #'X'
(1)     19A :                            ;; jsr     print
(1)     19A :                            ;; ldx     vC              ; C
(1)     19A :                            ;; lda     #'C'
(1)     19A :                            ;; jsr     print
(1)     19A :                            ;; ldx     vD              ; D
(1)     19A :                            ;; lda     #'D'
(1)     19A :                            ;; jsr     print
(1)     19A :                            ;; jsr     newline
(1)     19A :
(1)     19A :                    loop_i:
(1)     19A : DC 26                      ldd     vB
(1)     19C : 8E 00 32                   ldx     #F
(1)     19F : BD 03 0C                   jsr     div16           ; R0=B/F
(1)     1A2 : DD 2C                      std     vQ              ; Q=B/F
(1)     1A4 : 8E FF CE                   ldx     #-F
(1)     1A7 : BD 02 A5                   jsr     mul16           ; -Q*F
(1)     1AA : D3 26                      addd    vB              ; B-Q*F
(1)     1AC : DD 28                      std     vS              ; S=B-Q*F
(1)     1AE : DC 26                      ldd     vB
(1)     1B0 : 1F 01                      tfr     D,X
(1)     1B2 : BD 02 A5                   jsr     mul16           ; B*B
(1)     1B5 : 34 06                      pshs    D               ; push B*B
(1)     1B7 : DC 24                      ldd     vA
(1)     1B9 : 1F 01                      tfr     D,X
(1)     1BB : BD 02 A5                   jsr     mul16           ; A*A
(1)     1BE : A3 E1                      subd    ,S++            ; A*A-B*B
(1)     1C0 : 8E 00 32                   ldx     #F
(1)     1C3 : BD 03 0C                   jsr     div16           ; R0=(A*A-B*B)/F
(1)     1C6 : D3 20                      addd    vC
(1)     1C8 : 34 06                      pshs    D               ; push (A*A-B*B)/F+C
(1)     1CA : DC 24                      ldd     vA
(1)     1CC : 9E 2C                      ldx     vQ
(1)     1CE : BD 02 A5                   jsr     mul16           ; A*Q
(1)     1D1 : 34 06                      pshs    D               ; push A*Q
(1)     1D3 : DC 24                      ldd     vA
(1)     1D5 : 9E 28                      ldx     vS
(1)     1D7 : BD 02 A5                   jsr     mul16           ; A*S
(1)     1DA : 8E 00 32                   ldx     #F
(1)     1DD : BD 03 0C                   jsr     div16           ; A*S/F
(1)     1E0 : E3 E1                      addd    ,S++            ; A*Q+A*S/F
(1)     1E2 : 58                         lslb
(1)     1E3 : 49                         rola                    ; 2*(A*Q+A*S/F)
(1)     1E4 : D3 22                      addd    vD              ; 2*(A*Q+A*S/F)+D
(1)     1E6 : DD 26                      std     vB              ; B=2*(A*Q+A*S/F)+D
(1)     1E8 : 35 06                      puls    D               ; pop (A*A-B*B)/F+C
(1)     1EA : DD 24                      std     vA              ; A=(A*A-B*B)/F+C
(1)     1EC : 8E 00 32                   ldx     #F
(1)     1EF : BD 03 0C                   jsr     div16           ; A/F
(1)     1F2 : DD 2A                      std     vP              ; P=A/F
(1)     1F4 : 1F 01                      tfr     D,X
(1)     1F6 : BD 02 A5                   jsr     mul16           ; P*P
(1)     1F9 : 34 06                      pshs    D               ; push P*P
(1)     1FB : DC 26                      ldd     vB
(1)     1FD : 8E 00 32                   ldx     #F
(1)     200 : BD 03 0C                   jsr     div16           ; B/F
(1)     203 : DD 2C                      std     vQ              ; Q=B/F
(1)     205 : 1F 01                      tfr     D,X
(1)     207 : BD 02 A5                   jsr     mul16           ; Q*Q
(1)     20A : E3 E1                      addd    ,S++            ; P*P+Q*Q
(1)     20C : DD 2E                      std     vT              ; T=P*P+Q*Q
(1)     20E :
(1)     20E :                            ;; jsr     putspace
(1)     20E :                            ;; ldb     vI              ; I
(1)     20E :                            ;; sex
(1)     20E :                            ;; tfr     D,X
(1)     20E :                            ;; lda     #'I'
(1)     20E :                            ;; jsr     print
(1)     20E :                            ;; ldx     vA              ; A
(1)     20E :                            ;; lda     #'A'
(1)     20E :                            ;; jsr     print
(1)     20E :                            ;; ldx     vB              ; B
(1)     20E :                            ;; lda     #'B'
(1)     20E :                            ;; jsr     print
(1)     20E :                            ;; ldx     vP              ; P
(1)     20E :                            ;; lda     #'P'
(1)     20E :                            ;; jsr     print
(1)     20E :                            ;; ldx     vQ              ; Q
(1)     20E :                            ;; lda     #'Q'
(1)     20E :                            ;; jsr     print
(1)     20E :                            ;; ldx     vT              ; T
(1)     20E :                            ;; lda     #'T'
(1)     20E :                            ;; jsr     print
(1)     20E :                            ;; jsr     newline
(1)     20E :
(1)     20E :
(1)     20E : DC 2E                      ldd     vT
(1)     210 : 10 83 00 04                cmpd    #4
(1)     214 : 2E 0E                      bgt     print_i         ; if 4<T
(1)     216 : 0C 32                      inc     vI              ; I+=1
(1)     218 : 96 32                      lda     vI
(1)     21A : 81 10                      cmpa    #16
(1)     21C : 10 25 FF 7A                lblo    loop_i          ; if I<16
(1)     220 : 86 20                      lda     #' '
(1)     222 : 20 0C                      bra     print_char
(1)     224 :                    print_i:
(1)     224 : 96 32                      lda     vI
(1)     226 : 80 0A                      suba    #10
(1)     228 : 2A 04                      bpl     print_i2       ; if I>=10
(1)     22A : 8B 3A                      adda    #10+'0'
(1)     22C : 20 02                      bra     print_char
(1)     22E :                    print_i2:
(1)     22E : 8B 41                      adda    #'A'
(1)     230 :                    print_char:
(1)     230 : BD 01 45                   jsr     putchar
(1)     233 :
(1)     233 :                            ;; pshs    A
(1)     233 :                            ;; lda     #'@'
(1)     233 :                            ;; jsr     putchar
(1)     233 :                            ;; lda     #'='
(1)     233 :                            ;; jsr     putchar
(1)     233 :                            ;; puls    A
(1)     233 :                            ;; jsr     putchar
(1)     233 :                            ;; jsr     newline
(1)     233 :
(1)     233 : BD 01 2D                   jsr     getchar
(1)     236 : 24 04                      bcc     next_x
(1)     238 : 4D                         tsta
(1)     239 : 26 01                      bne     next_x
(1)     23B : 3F                         swi                     ; halt to system
(1)     23C :                    next_x:
(1)     23C : 0C 31                      inc     vX              ; X+=1
(1)     23E : 96 31                      lda     vX
(1)     240 : 81 1E                      cmpa    #30
(1)     242 : 10 2D FF 2C                lblt    loop_x          ; if X<30
(1)     246 : BD 01 3F                   jsr     newline
(1)     249 : 0C 30                      inc     vY              ; Y+=1
(1)     24B : 96 30                      lda     vY
(1)     24D : 81 0D                      cmpa    #13
(1)     24F : 10 2D FF 1B                lblt    loop_y          ; if Y<13
(1)     253 : 39                         rts
        254 :                            include "arith.inc"
(1)     254 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     254 :                            cpu     6809
(1)     254 :
(1)     254 :                    ;;; Print signed 16-bit integer as decimal
(1)     254 :                    ;;; @param D value
(1)     254 :                    ;;; @clobber X
(1)     254 :                    print_int16:
(1)     254 : 34 06                      pshs    D
(1)     256 : 4D                         tsta
(1)     257 : 2A 0C                      bpl     print_int16_print
(1)     259 : 86 2D                      lda     #'-'
(1)     25B : BD 01 45                   jsr     putchar
(1)     25E : EC E4                      ldd     ,S
(1)     260 : 43                         coma
(1)     261 : 53                         comb
(1)     262 : C3 00 01                   addd    #1              ; negate value
(1)     265 :                    print_int16_print:
(1)     265 : 8D 02                      bsr     print_uint16
(1)     267 : 35 86                      puls    D,PC
(1)     269 :
(1)     269 :                    ;;; Print unsigned 16-bit integer as decimal
(1)     269 :                    ;;; @param D value
(1)     269 :                    ;;; @clobber D X
(1)     269 :                    print_uint16:
(1)     269 : C3 00 00                   addd    #0
(1)     26C : 27 15                      beq     print_uint16_zero
(1)     26E :                    print_uint16_loop:
(1)     26E : C3 00 00                   addd    #0
(1)     271 : 27 15                      beq     print_uint16_end ; branch if value == 0
(1)     273 : 8E 00 0A                   ldx     #10
(1)     276 : BD 02 D1                   jsr     udiv16          ; D=value/10, X=value%10
(1)     279 : 1E 01                      exg     D,X
(1)     27B : 34 04                      pshs    B               ; push remainder
(1)     27D : 1E 01                      exg     D,X
(1)     27F : 8D ED                      bsr     print_uint16_loop
(1)     281 : 35 02                      puls    A
(1)     283 :                    print_uint16_zero:
(1)     283 : 8A 30                      ora     #'0'
(1)     285 : 7E 01 45                   jmp     putchar
(1)     288 :                    print_uint16_end:
(1)     288 : 39                         rts
(1)     289 :
(1)     289 :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)     289 :                    ;;; @param D multiplicand
(1)     289 :                    ;;; @param X multiplier
(1)     289 :                    ;;; @return D result
(1)     289 :                    umul16:
(1)     289 : 34 07                      pshs    CC,D            ; S[0]=work, S[1:2]=multiplicand
(1)     28B : 1F 10                      tfr     X,D             ; A=high(multiplier)
(1)     28D : E6 62                      ldb     2,S             ; B=low(multiplicand)
(1)     28F : 3D                         mul                     ; low(multiplicand)*high(multiplier)
(1)     290 : E7 E4                      stb     ,S              ; work
(1)     292 : 1F 10                      tfr     X,D             ; B=low(multiplier)
(1)     294 : A6 61                      lda     1,S             ; A=high(multiplicand)
(1)     296 : 3D                         mul                     ; high(multiplicand)*low(multiplier)
(1)     297 : EB E4                      addb    ,S
(1)     299 : E7 E4                      stb     ,S
(1)     29B : 1F 10                      tfr     X,D             ; B=low(multiplier)
(1)     29D : A6 62                      lda     2,S             ; A=low(multiplicand)
(1)     29F : 3D                         mul                     ; D=low(multiplicand)*low(multiplier)
(1)     2A0 : AB E4                      adda    ,S
(1)     2A2 : 32 63                      leas    3,S
(1)     2A4 : 39                         rts
(1)     2A5 :
(1)     2A5 :                    ;;; Multiply; result = multiplicand * multiplier
(1)     2A5 :                    ;;; @param D multiplicand
(1)     2A5 :                    ;;; @param X multiplier
(1)     2A5 :                    ;;; @return D result
(1)     2A5 :                    mul16:
(1)     2A5 : 34 06                      pshs    D
(1)     2A7 : 1F 10                      tfr     X,D
(1)     2A9 : A8 E4                      eora    ,S
(1)     2AB : 34 02                      pshs    A               ; save hi(multiplicand^multiplier)
(1)     2AD : EC 61                      ldd     1,S
(1)     2AF : 1E 01                      exg     D,X
(1)     2B1 : 4D                         tsta
(1)     2B2 : 2A 05                      bpl     mul16_multiplicand
(1)     2B4 : 43                         coma
(1)     2B5 : 53                         comb
(1)     2B6 : C3 00 01                   addd    #1              ; negate multiplier
(1)     2B9 :                    mul16_multiplicand:
(1)     2B9 : 1E 01                      exg     D,X
(1)     2BB : 4D                         tsta
(1)     2BC : 2A 05                      bpl     mul16_multiply
(1)     2BE : 43                         coma
(1)     2BF : 53                         comb
(1)     2C0 : C3 00 01                   addd    #1              ; negate multiplicand
(1)     2C3 :                    mul16_multiply:
(1)     2C3 : 8D C4                      bsr     umul16          ; R0=result
(1)     2C5 : 6D E0                      tst     ,S+             ; A=(multiplicand^multiplier)
(1)     2C7 : 2A 05                      bpl     mul16_end
(1)     2C9 : 43                         coma
(1)     2CA : 53                         comb
(1)     2CB : C3 00 01                   addd    #1              ; negate result
(1)     2CE :                    mul16_end:
(1)     2CE : 32 62                      leas    2,S
(1)     2D0 : 39                         rts
(1)     2D1 :
(1)     2D1 :                    ;;; Unsigned division: dividend / divisor = quotient ... remainder
(1)     2D1 :                    ;;; @praram D dividend
(1)     2D1 :                    ;;; @praram X divisor
(1)     2D1 :                    ;;; @return D quotient
(1)     2D1 :                    ;;; @return X remainder
(1)     2D1 :                    udiv16:
(1)     2D1 : 34 17                      pshs    CC,D,X          ; S[0]=bits, S[1:2]=dividend, S[3:4]=divisor
(1)     2D3 : 30 84                      leax    ,X              ; X=0?
(1)     2D5 : 27 30                      beq     udiv16_end      ; divide by zero
(1)     2D7 : C6 01                      ldb     #1
(1)     2D9 : E7 E4                      stb     ,S              ; bits=1
(1)     2DB : 1F 10                      tfr     X,D
(1)     2DD : 20 04                      bra     udiv16_prep
(1)     2DF :                    udiv16_prep_loop:
(1)     2DF : 58                         lslb
(1)     2E0 : 49                         rola                    ; divisor <<= 1
(1)     2E1 : 6C E4                      inc     ,S              ; ++bits
(1)     2E3 :                    udiv16_prep:
(1)     2E3 : 4D                         tsta
(1)     2E4 : 2A F9                      bpl     udiv16_prep_loop ; while msb(divisor) == 0
(1)     2E6 : ED 63                      std     3,S              ; update divisor
(1)     2E8 : 8E 00 00                   ldx     #0              ; X=quotient=0
(1)     2EB : EC 61                      ldd     1,S             ; D=dividend
(1)     2ED : 20 0A                      bra     udiv16_enter_loop
(1)     2EF :                    udiv16_loop:
(1)     2EF : 64 63                      lsr     3,S
(1)     2F1 : 66 64                      ror     4,S             ; divisor >>=1
(1)     2F3 : 1E 01                      exg     D,X
(1)     2F5 : 58                         lslb
(1)     2F6 : 49                         rola
(1)     2F7 : 1E 01                      exg     D,X             ; quotient <<= 1
(1)     2F9 :                    udiv16_enter_loop:
(1)     2F9 : A3 63                      subd    3,S             ; dividend -= divisor
(1)     2FB : 25 04                      blo     udiv16_readd
(1)     2FD : 30 01                      leax    1,X             ; quotient |= 1
(1)     2FF : 20 02                      bra     udiv16_next
(1)     301 :                    udiv16_readd:
(1)     301 : E3 63                      addd    3,S             ; dividend += divisor
(1)     303 :                    udiv16_next:
(1)     303 : 6A E4                      dec     ,S              ; --bits
(1)     305 : 26 E8                      bne     udiv16_loop     ; while bits != 0
(1)     307 :                    udiv16_end:
(1)     307 : 1E 01                      exg     D,X             ; D=quotient, X=remainder
(1)     309 : 32 65                      leas    5,S
(1)     30B : 39                         rts
(1)     30C :
(1)     30C :                    ;;; Division; dividend / divisor = quotient ... remainder
(1)     30C :                    ;;; @param D dividend
(1)     30C :                    ;;; @param X divisor
(1)     30C :                    ;;; @return D quotient
(1)     30C :                    ;;; @return X remainder
(1)     30C :                    div16:
(1)     30C : 34 06                      pshs    D
(1)     30E : 1F 10                      tfr     X,D
(1)     310 : A8 E4                      eora    ,S
(1)     312 : 34 02                      pshs    A               ; save hi(dividend^divisor)
(1)     314 : EC 61                      ldd     1,S
(1)     316 : 1E 01                      exg     D,X
(1)     318 : 4D                         tsta
(1)     319 : 2A 05                      bpl     div16_dividend
(1)     31B : 43                         coma
(1)     31C : 53                         comb
(1)     31D : C3 00 01                   addd    #1              ; negate divisor
(1)     320 :                    div16_dividend:
(1)     320 : 1E 01                      exg     D,X
(1)     322 : 4D                         tsta
(1)     323 : 2A 05                      bpl     div16_divide
(1)     325 : 43                         coma
(1)     326 : 53                         comb
(1)     327 : C3 00 01                   addd    #1              ; negate dividend
(1)     32A :                    div16_divide:
(1)     32A : 8D A5                      bsr     udiv16          ; R0=quotient
(1)     32C : 6D E0                      tst     ,S+             ; A=(dividend^divisor)
(1)     32E : 2A 05                      bpl     div16_end
(1)     330 : 43                         coma
(1)     331 : 53                         comb
(1)     332 : C3 00 01                   addd    #1              ; negate result
(1)     335 :                    div16_end:
(1)     335 : 32 62                      leas    2,S
(1)     337 : 39                         rts
        338 :                            include "queue.inc"
(1)     338 :                    ;;; -*- mode: asm; mode: flying-spell; -*-
(1)     338 :                    ;;; [queue] queue structure
(1)     338 : =0                 queue_len:      equ     0       ; queue length
(1)     338 : =1                 queue_size:     equ     1       ; buffer size
(1)     338 : =2                 queue_put:      equ     2       ; queue put index
(1)     338 : =3                 queue_get:      equ     3       ; queue get index
(1)     338 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     338 :
(1)     338 :                    ;;; [queue] Initialize queue
(1)     338 :                    ;;; @param X queue work space pointer
(1)     338 :                    ;;; @param B queue work space size
(1)     338 :                    queue_init:
(1)     338 : 34 14                      pshs    x,b
(1)     33A :                    queue_init_loop:
(1)     33A : 6F 80                      clr     ,x+
(1)     33C : 5A                         decb
(1)     33D : 26 FB                      bne     queue_init_loop
(1)     33F : 35 14                      puls    b,x
(1)     341 : C0 04                      subb    #queue_buf
(1)     343 : E7 01                      stb     queue_size,x
(1)     345 : 39                         rts
(1)     346 :
(1)     346 :                    ;;; [queue] Add an element to queue
(1)     346 :                    ;;; @param X queue work space pointer
(1)     346 :                    ;;; @param A an element
(1)     346 :                    ;;; @return CC.C 0 if queue is full
(1)     346 :                    queue_add:
(1)     346 : 34 54                      pshs    u,x,b
(1)     348 : 1F 13                      tfr     x,u
(1)     34A : E6 C4                      ldb     queue_len,u
(1)     34C : E1 41                      cmpb    queue_size,u
(1)     34E : 24 12                      bhs     queue_add_return ;carry is cleared
(1)     350 : E6 42                      ldb     queue_put,u     ; 8 bits offset
(1)     352 : 3A                         abx                     ; X+=B
(1)     353 : A7 04                      sta     queue_buf,x     ; store an element
(1)     355 : 6C C4                      inc     queue_len,u
(1)     357 : 5C                         incb
(1)     358 : E7 42                      stb     queue_put,u
(1)     35A : E1 41                      cmpb    queue_size,u
(1)     35C : 25 04                      blo     queue_add_return ; carry is set
(1)     35E : 6F 42                      clr     queue_put,u
(1)     360 : 1A 01                      orcc    #CC_CARRY       ; set carry
(1)     362 :                    queue_add_return:
(1)     362 : 35 D4                      puls    b,x,u,pc
(1)     364 :
(1)     364 :                    ;;; [queue] Remove an element from queue
(1)     364 :                    ;;; @param X queue work space pointer
(1)     364 :                    ;;; @return A an element
(1)     364 :                    ;;; @return CC.C 0 if queue is empty
(1)     364 :                    queue_remove:
(1)     364 : 6D 84                      tst     queue_len,x
(1)     366 : 26 03                      bne     queue_remove_elem
(1)     368 : 1C FE                      andcc   #~CC_CARRY      ; clear carry
(1)     36A : 39                         rts
(1)     36B :                    queue_remove_elem:
(1)     36B : 34 54                      pshs    u,x,b
(1)     36D : 1F 13                      tfr     x,u
(1)     36F : E6 43                      ldb     queue_get,u     ; 8 bits offset
(1)     371 : 3A                         abx                     ; X+=B
(1)     372 : A6 04                      lda     queue_buf,x
(1)     374 : 6A C4                      dec     queue_len,u
(1)     376 : 5C                         incb
(1)     377 : E7 43                      stb     queue_get,u
(1)     379 : E1 41                      cmpb    queue_size,u
(1)     37B : 25 04                      blo     queue_remove_return ; carry is set
(1)     37D : 6F 43                      clr     queue_get,u
(1)     37F : 1A 01                      orcc    #CC_CARRY       ; set carry
(1)     381 :                    queue_remove_return:
(1)     381 : 35 D4                      puls    b,x,u,pc
        383 :
        383 :                    isr_firq:
        383 : 34 16                      pshs    x,b,a
        385 : F6 DF 00                   ldb     ACIA_status
        388 : C5 80                      bitb    #IRQF_bm
        38A : 27 1C                      beq     isr_firq_exit
        38C : C5 01                      bitb    #RDRF_bm
        38E : 27 09                      beq     isr_firq_send
        390 : B6 DF 01                   lda     ACIA_data       ; receive character
        393 : 8E 20 00                   ldx     #rx_queue
        396 : BD 03 46                   jsr     queue_add
        399 :                    isr_firq_send:
        399 : C5 02                      bitb    #TDRE_bm
        39B : 27 0B                      beq     isr_firq_exit
        39D : 8E 20 80                   ldx     #tx_queue
        3A0 : BD 03 64                   jsr     queue_remove
        3A3 : 24 06                      bcc     isr_firq_send_empty
        3A5 : B7 DF 01                   sta     ACIA_data       ; send character
        3A8 :                    isr_firq_exit:
        3A8 : 35 16                      puls    a,b,x
        3AA : 3B                         rti
        3AB :                    isr_firq_send_empty:
        3AB : 86 94                      lda     #RX_INT_TX_NO
        3AD : B7 DF 00                   sta     ACIA_control    ; disable Tx interrupt
        3B0 : 35 16                      puls    a,b,x
        3B2 : 3B                         rti
        3B3 :
        3B3 :                    isr_irq:
        3B3 : 3F                         swi
        3B4 :
        3B4 :                    isr_nmi:
        3B4 : 3F                         swi
