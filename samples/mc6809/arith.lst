          0 :                            cpu     6809
          0 :                            include "mc6809.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; Condition Code Register (CC)
(1)       0 : =1                 CC_CARRY      equ  %00000001   ; set to 1 if carry occurred
(1)       0 : =2                 CC_OVERFLOW   equ  %00000010   ; set to 1 if overflow occurred
(1)       0 : =4                 CC_ZERO       equ  %00000100   ; set to 1 if result is zero
(1)       0 : =8                 CC_NEGATIVE   equ  %00001000   ; set to 1 if result is negative
(1)       0 : =10                CC_IRQ        equ  %00010000   ; if 1, IRQ is masked
(1)       0 : =20                CC_HALF_CARRY equ  %00100000   ; if 1, decimal carry from least digit occurred
(1)       0 : =40                CC_FIRQ       equ  %01000000   ; if 1, FIRQ is masked
(1)       0 : =80                CC_ENTIRE     equ  %10000000   ; set to 1 if entire registers are pushed
(1)       0 :
(1)       0 :                    ;;; Vector
(1)       0 : =FFF2              VEC_SWI3:       equ     $FFF2  ; $FFF2: Software Interrupt 3
(1)       0 : =FFF4              VEC_SWI2:       equ     $FFF4  ; $FFF4: Software Interrupt 2
(1)       0 : =FFF6              VEC_FIRQ:       equ     $FFF6  ; $FFF6: Fast Interrupt Request
(1)       0 : =FFF8              VEC_IRQ:        equ     $FFF8  ; $FFF8: Interrupt Request
(1)       0 : =FFFA              VEC_SWI:        equ     $FFFA  ; $FFFA: Software Interrupt
(1)       0 : =FFFC              VEC_NMI:        equ     $FFFC  ; $FFFC: Non Maskable Interrupt
(1)       0 : =FFFE              VEC_RESET:      equ     $FFFE  ; $FFFE: Reset
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA:   equ     $DF00
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     %11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     %00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     %00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     %00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     %00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     %00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     %00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     %00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     %00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     %00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     %00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     %00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     %00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     %00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     %01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     %00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     %00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     %01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     %01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     %10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     %00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     %00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     %00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     %00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     %00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     %00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     %01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     %10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data:      equ     ACIA+1          ; Data register
          0 :
       1000 :                            org     $1000
       1000 : =FFF               stack:  equ     *-1             ; MC6800's SP is post-decrement/pre-increment
       1000 :
       FFFA :                            org     VEC_SWI
       FFFA : FF FA                      fdb     VEC_SWI         ; for halt to system
       FFFC :
       FFFE :                            org     VEC_RESET
       FFFE : 01 00                      fdb     initialize
      10000 :
        100 :                            org     $0100
        100 :                    initialize:
        100 : 10 CE 0F FF                lds     #stack
        104 : 86 03                      lda     #CDS_RESET_gc   ; Master reset
        106 : B7 DF 00                   sta     ACIA_control
        109 : 86 14                      lda     #WSB_8N1_gc     ; 8 bits + No Parity + 1 Stop Bits
        10B :                                                    ; Transmit, Receive interrupts disabled
        10B : B7 DF 00                   sta     ACIA_control
        10E :
        10E : BD 01 78                   jsr     arith
        111 : 3F                         swi
        112 :
        112 :                    ;;; Print out char
        112 :                    ;;; @param A char
        112 :                    ;;; @clobber A B
        112 :                    putspace:
        112 : 86 20                      lda     #' '
        114 : 20 06                      bra     putchar
        116 :                    newline:
        116 : 86 0D                      lda     #$0D
        118 : 8D 02                      bsr     putchar
        11A : 86 0A                      lda     #$0A
        11C :                    putchar:
        11C : F6 DF 00                   ldb     ACIA_status
        11F : C5 02                      bitb    #TDRE_bm
        121 : 27 F9                      beq     putchar
        123 : B7 DF 01                   sta     ACIA_data
        126 : 39                         rts
        127 :
        127 :                    ;;; Print "v1 op v2"
        127 :                    ;;; @param X v1
        127 :                    ;;; @param Y v2
        127 :                    ;;; @param A op
        127 :                    ;;; @return D=X
        127 :                    ;;; @return X=U
        127 :                    expr:
        127 : 34 52                      pshs    U,X,A
        129 : 1F 10                      tfr     X,D
        12B : BD 02 FF                   jsr     print_int16     ; print v1
        12E : 8D E2                      bsr     putspace
        130 : 35 02                      puls    A
        132 : 8D E8                      bsr     putchar         ; print op
        134 : 8D DC                      bsr     putspace
        136 : 1F 30                      tfr     U,D
        138 : BD 02 FF                   jsr     print_int16     ; print v2
        13B : 35 96                      puls    D,X,PC
        13D :
        13D :                    ;;; Print " = v\n"
        13D :                    ;;; @param D v
        13D :                    answer:
        13D : 34 06                      pshs    D
        13F : 8D D1                      bsr     putspace
        141 : 86 3D                      lda     #'='
        143 : 8D D7                      bsr     putchar
        145 : 8D CB                      bsr     putspace
        147 : 35 06                      puls    D
        149 : BD 02 FF                   jsr     print_int16     ; print v
        14C : 20 C8                      bra     newline
        14E :
        14E :                    ;;; Print "v1 rel v2"
        14E :                    ;;; @param X v1
        14E :                    ;;; @param U v2
        14E :                    ;;; @clobber D
        14E :                    comp:
        14E : 34 50                      pshs    X,U
        150 : EC E4                      ldd     ,S
        152 : A3 62                      subd    2,S
        154 : 27 0C                      beq     comp_eq
        156 : 2D 0E                      blt     comp_lt
        158 : 2E 04                      bgt     comp_gt
        15A : 86 3F                      lda     #'?'
        15C : 20 0A                      bra     comp_out
        15E :                    comp_gt:
        15E : 86 3E                      lda     #'>'
        160 : 20 06                      bra     comp_out
        162 :                    comp_eq:
        162 : 86 3D                      lda     #'='
        164 : 20 02                      bra     comp_out
        166 :                    comp_lt:
        166 : 86 3C                      lda     #'<'
        168 :                    comp_out:
        168 : 8D BD                      bsr     expr
        16A : 8D AA                      bsr     newline
        16C : 35 D0                      puls    X,U,PC
        16E :
        16E :                    ;;; Addition: D+=X
        16E :                    add16:
        16E : AF E3                      stx     ,--S
        170 : E3 E1                      addd    ,S++
        172 : 39                         rts
        173 :
        173 :                    ;;; Subtraction: D-=X
        173 :                    sub16:
        173 : AF E3                      stx     ,--S
        175 : A3 E1                      subd    ,S++
        177 : 39                         rts
        178 :
        178 :                    arith:
        178 : 8E 46 50                   ldx     #18000
        17B : CE 6D 60                   ldu     #28000
        17E : 86 2B                      lda     #'+'
        180 : BD 01 27                   jsr     expr
        183 : BD 01 6E                   jsr     add16           ; R0=R1+R2
        186 : BD 01 3D                   jsr     answer          ; -19536
        189 :
        189 : 8E 46 50                   ldx     #18000
        18C : CE B9 B0                   ldu     #-18000
        18F : 86 2B                      lda     #'+'
        191 : BD 01 27                   jsr     expr
        194 : BD 01 6E                   jsr     add16           ; R0=R1+R2
        197 : BD 01 3D                   jsr     answer          ; 0
        19A :
        19A : 8E B9 B0                   ldx     #-18000
        19D : CE B9 B0                   ldu     #-18000
        1A0 : 86 2B                      lda     #'+'
        1A2 : BD 01 27                   jsr     expr
        1A5 : BD 01 6E                   jsr     add16           ; R0=R1+R2
        1A8 : BD 01 3D                   jsr     answer          ; 29536
        1AB :
        1AB : 8E B9 B0                   ldx     #-18000
        1AE : CE 92 A0                   ldu     #-28000
        1B1 : 86 2D                      lda     #'-'
        1B3 : BD 01 27                   jsr     expr
        1B6 : BD 01 73                   jsr     sub16           ; R0=R1-R2
        1B9 : BD 01 3D                   jsr     answer          ; -19536
        1BC :
        1BC : 8E 46 50                   ldx     #18000
        1BF : CE B9 B0                   ldu     #-18000
        1C2 : 86 2D                      lda     #'-'
        1C4 : BD 01 27                   jsr     expr
        1C7 : BD 01 73                   jsr     sub16           ; R0=R1-R2
        1CA : BD 01 3D                   jsr     answer          ; 29536
        1CD :
        1CD : 8E 92 A0                   ldx     #-28000
        1D0 : CE B9 B0                   ldu     #-18000
        1D3 : 86 2D                      lda     #'-'
        1D5 : BD 01 27                   jsr     expr
        1D8 : BD 01 73                   jsr     sub16           ; R0=R1-R2
        1DB : BD 01 3D                   jsr     answer          ; -10000
        1DE :
        1DE : 8E 00 64                   ldx     #100
        1E1 : CE 01 2C                   ldu     #300
        1E4 : 86 2A                      lda     #'*'
        1E6 : BD 01 27                   jsr     expr
        1E9 : BD 03 50                   jsr     mul16           ; R0=R1*R2
        1EC : BD 01 3D                   jsr     answer          ; 30000
        1EF :
        1EF : 8E 00 C8                   ldx     #200
        1F2 : CE 00 64                   ldu     #100
        1F5 : 86 2A                      lda     #'*'
        1F7 : BD 01 27                   jsr     expr
        1FA : BD 03 50                   jsr     mul16           ; R0=R1*R2
        1FD : BD 01 3D                   jsr     answer          ; 20000
        200 :
        200 : 8E 01 2C                   ldx     #300
        203 : CE FF 38                   ldu     #-200
        206 : 86 2A                      lda     #'*'
        208 : BD 01 27                   jsr     expr
        20B : BD 03 50                   jsr     mul16           ; R0=R1*R2
        20E : BD 01 3D                   jsr     answer          ; 5536
        211 :
        211 : 8E 00 64                   ldx     #100
        214 : CE FE D4                   ldu     #-300
        217 : 86 2A                      lda     #'*'
        219 : BD 01 27                   jsr     expr
        21C : BD 03 50                   jsr     mul16           ; R0=R1*R2
        21F : BD 01 3D                   jsr     answer          ; -30000
        222 :
        222 : 8E FF 38                   ldx     #-200
        225 : CE FF 9C                   ldu     #-100
        228 : 86 2A                      lda     #'*'
        22A : BD 01 27                   jsr     expr
        22D : BD 03 50                   jsr     mul16           ; R0=R1*R2
        230 : BD 01 3D                   jsr     answer          ; 20000
        233 :
        233 : 8E 75 30                   ldx     #30000
        236 : CE 00 64                   ldu     #100
        239 : 86 2F                      lda     #'/'
        23B : BD 01 27                   jsr     expr
        23E : BD 03 B7                   jsr     div16           ; R0=R1/R2
        241 : BD 01 3D                   jsr     answer          ; 30
        244 :
        244 : 8E FF 38                   ldx     #-200
        247 : CE 00 64                   ldu     #100
        24A : 86 2F                      lda     #'/'
        24C : BD 01 27                   jsr     expr
        24F : BD 03 B7                   jsr     div16           ; R0=R1/R2
        252 : BD 01 3D                   jsr     answer          ; -2
        255 :
        255 : 8E 8A D0                   ldx     #-30000
        258 : CE FF 38                   ldu     #-200
        25B : 86 2F                      lda     #'/'
        25D : BD 01 27                   jsr     expr
        260 : BD 03 B7                   jsr     div16           ; R0=R1/R2
        263 : BD 01 3D                   jsr     answer          ; 150
        266 :
        266 : 8E 8A D0                   ldx     #-30000
        269 : CE 00 4E                   ldu     #78
        26C : 86 2F                      lda     #'/'
        26E : BD 01 27                   jsr     expr
        271 : BD 03 B7                   jsr     div16           ; R0=R1/R2
        274 : BD 01 3D                   jsr     answer          ; -384
        277 :
        277 : 8E 13 88                   ldx     #5000
        27A : CE 0F A0                   ldu     #4000
        27D : BD 01 4E                   jsr     comp
        280 :
        280 : 8E 13 88                   ldx     #5000
        283 : CE 13 88                   ldu     #5000
        286 : BD 01 4E                   jsr     comp
        289 :
        289 : 8E 0F A0                   ldx     #4000
        28C : CE 13 88                   ldu     #5000
        28F : BD 01 4E                   jsr     comp
        292 :
        292 : 8E EC 78                   ldx     #-5000
        295 : CE F0 60                   ldu     #-4000
        298 : BD 01 4E                   jsr     comp
        29B :
        29B : 8E EC 78                   ldx     #-5000
        29E : CE EC 78                   ldu     #-5000
        2A1 : BD 01 4E                   jsr     comp
        2A4 :
        2A4 : 8E F0 60                   ldx     #-4000
        2A7 : CE EC 78                   ldu     #-5000
        2AA : BD 01 4E                   jsr     comp
        2AD :
        2AD : 8E 7F BC                   ldx     #32700
        2B0 : CE 7F 58                   ldu     #32600
        2B3 : BD 01 4E                   jsr     comp
        2B6 :
        2B6 : 8E 7F BC                   ldx     #32700
        2B9 : CE 7F BC                   ldu     #32700
        2BC : BD 01 4E                   jsr     comp
        2BF :
        2BF : 8E 7F 58                   ldx     #32600
        2C2 : CE 7F BC                   ldu     #32700
        2C5 : BD 01 4E                   jsr     comp
        2C8 :
        2C8 : 8E 80 44                   ldx     #-32700
        2CB : CE 80 A8                   ldu     #-32600
        2CE : BD 01 4E                   jsr     comp
        2D1 :
        2D1 : 8E 80 44                   ldx     #-32700
        2D4 : CE 80 44                   ldu     #-32700
        2D7 : BD 01 4E                   jsr     comp
        2DA :
        2DA : 8E 80 A8                   ldx     #-32600
        2DD : CE 80 44                   ldu     #-32700
        2E0 : BD 01 4E                   jsr     comp
        2E3 :
        2E3 : 8E 46 50                   ldx     #18000
        2E6 : CE 92 A0                   ldu     #-28000
        2E9 : BD 01 4E                   jsr     comp
        2EC :
        2EC : 8E 92 A0                   ldx     #-28000
        2EF : CE 92 A0                   ldu     #-28000
        2F2 : BD 01 4E                   jsr     comp
        2F5 :
        2F5 : 8E 92 A0                   ldx     #-28000
        2F8 : CE 46 50                   ldu     #18000
        2FB : BD 01 4E                   jsr     comp
        2FE : 39                         rts
        2FF :
        2FF :                            include "arith.inc"
(1)     2FF :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     2FF :                            cpu     6809
(1)     2FF :
(1)     2FF :                    ;;; Print signed 16-bit integer as decimal
(1)     2FF :                    ;;; @param D value
(1)     2FF :                    ;;; @clobber X
(1)     2FF :                    print_int16:
(1)     2FF : 34 06                      pshs    D
(1)     301 : 4D                         tsta
(1)     302 : 2A 0C                      bpl     print_int16_print
(1)     304 : 86 2D                      lda     #'-'
(1)     306 : BD 01 1C                   jsr     putchar
(1)     309 : EC E4                      ldd     ,S
(1)     30B : 43                         coma
(1)     30C : 53                         comb
(1)     30D : C3 00 01                   addd    #1              ; negate value
(1)     310 :                    print_int16_print:
(1)     310 : 8D 02                      bsr     print_uint16
(1)     312 : 35 86                      puls    D,PC
(1)     314 :
(1)     314 :                    ;;; Print unsigned 16-bit integer as decimal
(1)     314 :                    ;;; @param D value
(1)     314 :                    ;;; @clobber D X
(1)     314 :                    print_uint16:
(1)     314 : C3 00 00                   addd    #0
(1)     317 : 27 15                      beq     print_uint16_zero
(1)     319 :                    print_uint16_loop:
(1)     319 : C3 00 00                   addd    #0
(1)     31C : 27 15                      beq     print_uint16_end ; branch if value == 0
(1)     31E : 8E 00 0A                   ldx     #10
(1)     321 : BD 03 7C                   jsr     udiv16          ; D=value/10, X=value%10
(1)     324 : 1E 01                      exg     D,X
(1)     326 : 34 04                      pshs    B               ; push remainder
(1)     328 : 1E 01                      exg     D,X
(1)     32A : 8D ED                      bsr     print_uint16_loop
(1)     32C : 35 02                      puls    A
(1)     32E :                    print_uint16_zero:
(1)     32E : 8A 30                      ora     #'0'
(1)     330 : 7E 01 1C                   jmp     putchar
(1)     333 :                    print_uint16_end:
(1)     333 : 39                         rts
(1)     334 :
(1)     334 :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)     334 :                    ;;; @param D multiplicand
(1)     334 :                    ;;; @param X multiplier
(1)     334 :                    ;;; @return D result
(1)     334 :                    umul16:
(1)     334 : 34 07                      pshs    CC,D            ; S[0]=work, S[1:2]=multiplicand
(1)     336 : 1F 10                      tfr     X,D             ; A=high(multiplier)
(1)     338 : E6 62                      ldb     2,S             ; B=low(multiplicand)
(1)     33A : 3D                         mul                     ; low(multiplicand)*high(multiplier)
(1)     33B : E7 E4                      stb     ,S              ; work
(1)     33D : 1F 10                      tfr     X,D             ; B=low(multiplier)
(1)     33F : A6 61                      lda     1,S             ; A=high(multiplicand)
(1)     341 : 3D                         mul                     ; high(multiplicand)*low(multiplier)
(1)     342 : EB E4                      addb    ,S
(1)     344 : E7 E4                      stb     ,S
(1)     346 : 1F 10                      tfr     X,D             ; B=low(multiplier)
(1)     348 : A6 62                      lda     2,S             ; A=low(multiplicand)
(1)     34A : 3D                         mul                     ; D=low(multiplicand)*low(multiplier)
(1)     34B : AB E4                      adda    ,S
(1)     34D : 32 63                      leas    3,S
(1)     34F : 39                         rts
(1)     350 :
(1)     350 :                    ;;; Multiply; result = multiplicand * multiplier
(1)     350 :                    ;;; @param D multiplicand
(1)     350 :                    ;;; @param X multiplier
(1)     350 :                    ;;; @return D result
(1)     350 :                    mul16:
(1)     350 : 34 06                      pshs    D
(1)     352 : 1F 10                      tfr     X,D
(1)     354 : A8 E4                      eora    ,S
(1)     356 : 34 02                      pshs    A               ; save hi(multiplicand^multiplier)
(1)     358 : EC 61                      ldd     1,S
(1)     35A : 1E 01                      exg     D,X
(1)     35C : 4D                         tsta
(1)     35D : 2A 05                      bpl     mul16_multiplicand
(1)     35F : 43                         coma
(1)     360 : 53                         comb
(1)     361 : C3 00 01                   addd    #1              ; negate multiplier
(1)     364 :                    mul16_multiplicand:
(1)     364 : 1E 01                      exg     D,X
(1)     366 : 4D                         tsta
(1)     367 : 2A 05                      bpl     mul16_multiply
(1)     369 : 43                         coma
(1)     36A : 53                         comb
(1)     36B : C3 00 01                   addd    #1              ; negate multiplicand
(1)     36E :                    mul16_multiply:
(1)     36E : 8D C4                      bsr     umul16          ; R0=result
(1)     370 : 6D E0                      tst     ,S+             ; A=(multiplicand^multiplier)
(1)     372 : 2A 05                      bpl     mul16_end
(1)     374 : 43                         coma
(1)     375 : 53                         comb
(1)     376 : C3 00 01                   addd    #1              ; negate result
(1)     379 :                    mul16_end:
(1)     379 : 32 62                      leas    2,S
(1)     37B : 39                         rts
(1)     37C :
(1)     37C :                    ;;; Unsigned division: dividend / divisor = quotient ... remainder
(1)     37C :                    ;;; @praram D dividend
(1)     37C :                    ;;; @praram X divisor
(1)     37C :                    ;;; @return D quotient
(1)     37C :                    ;;; @return X remainder
(1)     37C :                    udiv16:
(1)     37C : 34 17                      pshs    CC,D,X          ; S[0]=bits, S[1:2]=dividend, S[3:4]=divisor
(1)     37E : 30 84                      leax    ,X              ; X=0?
(1)     380 : 27 30                      beq     udiv16_end      ; divide by zero
(1)     382 : C6 01                      ldb     #1
(1)     384 : E7 E4                      stb     ,S              ; bits=1
(1)     386 : 1F 10                      tfr     X,D
(1)     388 : 20 04                      bra     udiv16_prep
(1)     38A :                    udiv16_prep_loop:
(1)     38A : 58                         lslb
(1)     38B : 49                         rola                    ; divisor <<= 1
(1)     38C : 6C E4                      inc     ,S              ; ++bits
(1)     38E :                    udiv16_prep:
(1)     38E : 4D                         tsta
(1)     38F : 2A F9                      bpl     udiv16_prep_loop ; while msb(divisor) == 0
(1)     391 : ED 63                      std     3,S              ; update divisor
(1)     393 : 8E 00 00                   ldx     #0              ; X=quotient=0
(1)     396 : EC 61                      ldd     1,S             ; D=dividend
(1)     398 : 20 0A                      bra     udiv16_enter_loop
(1)     39A :                    udiv16_loop:
(1)     39A : 64 63                      lsr     3,S
(1)     39C : 66 64                      ror     4,S             ; divisor >>=1
(1)     39E : 1E 01                      exg     D,X
(1)     3A0 : 58                         lslb
(1)     3A1 : 49                         rola
(1)     3A2 : 1E 01                      exg     D,X             ; quotient <<= 1
(1)     3A4 :                    udiv16_enter_loop:
(1)     3A4 : A3 63                      subd    3,S             ; dividend -= divisor
(1)     3A6 : 25 04                      blo     udiv16_readd
(1)     3A8 : 30 01                      leax    1,X             ; quotient |= 1
(1)     3AA : 20 02                      bra     udiv16_next
(1)     3AC :                    udiv16_readd:
(1)     3AC : E3 63                      addd    3,S             ; dividend += divisor
(1)     3AE :                    udiv16_next:
(1)     3AE : 6A E4                      dec     ,S              ; --bits
(1)     3B0 : 26 E8                      bne     udiv16_loop     ; while bits != 0
(1)     3B2 :                    udiv16_end:
(1)     3B2 : 1E 01                      exg     D,X             ; D=quotient, X=remainder
(1)     3B4 : 32 65                      leas    5,S
(1)     3B6 : 39                         rts
(1)     3B7 :
(1)     3B7 :                    ;;; Division; dividend / divisor = quotient ... remainder
(1)     3B7 :                    ;;; @param D dividend
(1)     3B7 :                    ;;; @param X divisor
(1)     3B7 :                    ;;; @return D quotient
(1)     3B7 :                    ;;; @return X remainder
(1)     3B7 :                    div16:
(1)     3B7 : 34 06                      pshs    D
(1)     3B9 : 1F 10                      tfr     X,D
(1)     3BB : A8 E4                      eora    ,S
(1)     3BD : 34 02                      pshs    A               ; save hi(dividend^divisor)
(1)     3BF : EC 61                      ldd     1,S
(1)     3C1 : 1E 01                      exg     D,X
(1)     3C3 : 4D                         tsta
(1)     3C4 : 2A 05                      bpl     div16_dividend
(1)     3C6 : 43                         coma
(1)     3C7 : 53                         comb
(1)     3C8 : C3 00 01                   addd    #1              ; negate divisor
(1)     3CB :                    div16_dividend:
(1)     3CB : 1E 01                      exg     D,X
(1)     3CD : 4D                         tsta
(1)     3CE : 2A 05                      bpl     div16_divide
(1)     3D0 : 43                         coma
(1)     3D1 : 53                         comb
(1)     3D2 : C3 00 01                   addd    #1              ; negate dividend
(1)     3D5 :                    div16_divide:
(1)     3D5 : 8D A5                      bsr     udiv16          ; R0=quotient
(1)     3D7 : 6D E0                      tst     ,S+             ; A=(dividend^divisor)
(1)     3D9 : 2A 05                      bpl     div16_end
(1)     3DB : 43                         coma
(1)     3DC : 53                         comb
(1)     3DD : C3 00 01                   addd    #1              ; negate result
(1)     3E0 :                    div16_end:
(1)     3E0 : 32 62                      leas    2,S
(1)     3E2 : 39                         rts
