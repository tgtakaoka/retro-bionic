          0 :                            include "mc68hc05c0.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            include "mc68hc05.inc"
(2)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :                    ;;; MC68HC05
(2)       0 :                            cpu     68hc05
(2)       0 :                    ;;; Condition Code Register (CC)
(2)       0 : =1                 CC_CARRY      equ  %00000001   ; set to 1 if carry occurred
(2)       0 : =2                 CC_ZERO       equ  %00000010   ; set to 1 if result is zero
(2)       0 : =4                 CC_NEGATIVE   equ  %00000100   ; set to 1 if result is negative
(2)       0 : =8                 CC_IRQ        equ  %00001000   ; if 1, IRQ is masked
(2)       0 : =10                CC_HALF_CARRY equ  %00010000   ; if 1, decimal carry from least digit occurred
(1)       0 :                    ;;; MC68HC05C0
(1)       0 :                            option  "pc-bits", 16
(1)       0 :                    ;;; Vector
(1)       0 : =FFF2              VEC_KEY:        equ     $FFF2   ; Keyboard Scan
(1)       0 : =FFF4              VEC_MFT:        equ     $FFF4   ; Multi-Function Timer
(1)       0 : =FFF6              VEC_SCI:        equ     $FFF6   ; Serial Communications Interface
(1)       0 : =FFF8              VEC_TIMER:      equ     $FFF8   ; 16-Bit Timer
(1)       0 : =FFFA              VEC_IRQ:        equ     $FFFA   ; External Interrupt
(1)       0 : =FFFC              VEC_SWI:        equ     $FFFC   ; Software
(1)       0 : =FFFE              VEC_RESET:      equ     $FFFE   ; Reset
(1)       0 :
(1)       0 :                    ;;; Internal Register Area
(1)       0 : =1                 PORTB:  equ     $01     ; Port B Data Register
(1)       0 : =2                 PORTC:  equ     $02     ; Port C Data Register
(1)       0 : =3                 PORTD:  equ     $03     ; Port D Data Register
(1)       0 : =5                 DDRB:   equ     $05     ; Port B Data Direction Register
(1)       0 : =6                 DDRC:   equ     $06     ; Port C Data Direction Register
(1)       0 : =7                 DDRD:   equ     $07     ; Port D Data Direction Register
(1)       0 : =8                 MFTCSR: equ     $08     ; Multi-Function Timer Control/Status Register
(1)       0 : =9                 MFTCR:  equ     $09     ; Multi-Function Timer Counter Register
(1)       0 : =A                 TCR:    equ     $0A     ; 16-Bit Timer Control Register
(1)       0 : =B                 TSR:    equ     $0B     ; 16-Bit Timer Status Register
(1)       0 : =C                 ICR:    equ     $0C     ; 16-Bit Timer Input Capture Register
(1)       0 : =E                 OCR:    equ     $0E     ; 16-Bit Timer Output Compare Register
(1)       0 : =10                CNTR:   equ     $10     ; 16-Bit Timer Counter Register
(1)       0 : =12                ACNTR:  equ     $12     ; 16-Bit Timer Alternate Counter Register
(1)       0 : =14                SCBR:   equ     $14     ; Serial Communications Baud Rate Register
(1)       0 : =15                SCCR1:  equ     $15     ; Serial Communications Control Register 1
(1)       0 : =16                SCCR2:  equ     $16     ; Serial Communications Control Register 2
(1)       0 : =17                SCSR:   equ     $17     ; Serial Communications Status Register
(1)       0 : =18                SCDR:   equ     $18     ; Serial Communications Data Register
(1)       0 : =19                CNFGR:  equ     $19     ; Configuration Register
(1)       0 : =1A                EICSR:  equ     $1A     ; External Interrupt Control/Status Register
(1)       0 :                            
(1)       0 : =40                RAM_START:      equ     $0040   ; Internal RAM $0040-$023F
(1)       0 : =FF                STACK_TOP:      equ     $00FF   ; Stack $00FF->$0040
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =FFE0              ACIA:   equ     $FFE0
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =FFE0              ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     %11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     %00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     %00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     %00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     %00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     %00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     %00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     %00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     %00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     %00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     %00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     %00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     %00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     %00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     %01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     %00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     %00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     %01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     %01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     %10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =FFE0              ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     %00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     %00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     %00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     %00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     %00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     %00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     %01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     %10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =FFE1              ACIA_data:      equ     ACIA+1          ; Data register
          0 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
          0 :
         40 :                            org     RAM_START
         40 :                    save_a:
         40 :                            rmb     1
         41 :
         80 :                            org     $0080
         80 : =10                rx_queue_size:  equ     16
         80 :                    rx_queue:
         80 :                            rmb     rx_queue_size
         90 :
       FFFA :                            org     VEC_IRQ
       FFFA : 10 95                      fdb     isr_irq
       FFFC :
       FFFC :                            org     VEC_SWI
       FFFC : FF FC                      fdb     VEC_SWI         ; halt to system
       FFFE :
       FFFE :                            org     VEC_RESET
       FFFE : 10 00                      fdb     initialize
      10000 :
       1000 :                            org     $1000
       1000 :                    initialize:
       1000 : AE 80                      ldx     #rx_queue
       1002 : A6 10                      lda     #rx_queue_size
       1004 : CD 10 3D                   jsr     queue_init
       1007 :                            ;; initialize ACIA
       1007 : A6 03                      lda     #CDS_RESET_gc   ; Master reset
       1009 : C7 FF E0                   sta     ACIA_control
       100C : A6 94                      lda     #RX_INT_TX_NO
       100E : C7 FF E0                   sta     ACIA_control
       1011 : 9A                         cli                     ; Enable IRQ
       1012 : 20 01                      bra     loop
       1014 :
       1014 :                    wait:
       1014 : 8F                         wait
       1015 :                    loop:
       1015 : AE 80                      ldx     #rx_queue
       1017 : 9B                         sei                     ; Disable IRQ
       1018 : CD 10 74                   jsr     queue_remove
       101B : 9A                         cli                     ; Enable IRQ
       101C : 24 F6                      bcc     wait
       101E : 4D                         tsta
       101F : 27 0C                      beq     halt_to_system
       1021 : AD 0B                      bsr     putchar
       1023 : A1 0D                      cmp     #$0D            ; carriage return
       1025 : 26 EE                      bne     loop
       1027 : A6 0A                      lda     #$0A            ; newline
       1029 : AD 03                      bsr     putchar
       102B : 20 E8                      bra     loop
       102D :                    halt_to_system:
       102D : 83                         swi
       102E :
       102E :                    putchar:
       102E : B7 40                      sta     save_a
       1030 :                    transmit_loop:
       1030 : C6 FF E0                   lda     ACIA_status
       1033 : A5 02                      bit     #TDRE_bm
       1035 : 27 F9                      beq     transmit_loop
       1037 :                    transmit_data:
       1037 : B6 40                      lda     save_a
       1039 : C7 FF E1                   sta     ACIA_data
       103C : 81                         rts
       103D :
       103D :                            include "queue.inc"
(1)    103D :                    ;;; [queue] queue structure
(1)    103D : =0                 queue_len:      equ     0       ; queue length
(1)    103D : =1                 queue_size:     equ     1       ; buffer size
(1)    103D : =2                 queue_put:      equ     2       ; queue put index
(1)    103D : =3                 queue_get:      equ     3       ; queue get index
(1)    103D : =4                 queue_buf:      equ     4       ; buffer start offset
(1)    103D :
(1)    103D :                    ;;; [queue] Initialize queue
(1)    103D :                    ;;; @param X queue work space pointer
(1)    103D :                    ;;; @param A queue work space size
(1)    103D :                    ;;; @clobber A
(1)    103D :                    queue_init:
(1)    103D : 7F                         clr     queue_len,x
(1)    103E : 6F 02                      clr     queue_put,x
(1)    1040 : 6F 03                      clr     queue_get,x
(1)    1042 : A0 04                      sub     #queue_buf
(1)    1044 : E7 01                      sta     queue_size,x
(1)    1046 : 81                         rts
(1)    1047 :
(1)    1047 :                    ;;; [queue] Add an element to queue
(1)    1047 :                    ;;; @param X queue work space pointer
(1)    1047 :                    ;;; @param A an element
(1)    1047 :                    ;;; @return CC.C 0 if queue is full
(1)    1047 :                    queue_add_X:
(1)    1047 :                            rmb     1               ; save X
(1)    1048 :                    queue_add_A:
(1)    1048 :                            rmb     1               ; save X
(1)    1049 :                    queue_add:
(1)    1049 : C7 10 48                   sta     queue_add_A     ; save A
(1)    104C : F6                         lda     queue_len,x
(1)    104D : E1 01                      cmp     queue_size,x
(1)    104F : 24 1E                      bhs     queue_add_return ; carry is cleared
(1)    1051 : 7C                         inc     queue_len,x      ; increment queue length
(1)    1052 : E6 02                      lda     queue_put,x      ; 8 bits offset
(1)    1054 : 4C                         inca
(1)    1055 : E7 02                      sta     queue_put,x     ; update put pointer
(1)    1057 : E1 01                      cmp     queue_size,x
(1)    1059 : 25 02                      blo     queue_add_elem
(1)    105B : 6F 02                      clr     queue_put,x
(1)    105D :                    queue_add_elem:
(1)    105D : 4A                         deca                    ; restore put pointer
(1)    105E : AB 04                      add     #queue_buf
(1)    1060 : CF 10 47                   stx     queue_add_X     ; save X
(1)    1063 : CB 10 47                   add     queue_add_X
(1)    1066 : 97                         tax
(1)    1067 : C6 10 48                   lda     queue_add_A
(1)    106A : F7                         sta     ,x              ; put element
(1)    106B : CE 10 47                   ldx     queue_add_X     ; restore X
(1)    106E : 99                         sec                     ; set carry
(1)    106F :                    queue_add_return:
(1)    106F : C6 10 48                   lda     queue_add_A     ; restore A
(1)    1072 : 81                         rts
(1)    1073 :
(1)    1073 :                    ;;; [queue] Remove an element from queue
(1)    1073 :                    ;;; @param X queue work space pointer
(1)    1073 :                    ;;; @return A an element
(1)    1073 :                    ;;; @return CC.C 0 if queue is empty
(1)    1073 :                    queue_remove_X:
(1)    1073 :                            rmb     1
(1)    1074 :                    queue_remove:
(1)    1074 : 7D                         tst     queue_len,x
(1)    1075 : 26 02                      bne     queue_remove_has_elem
(1)    1077 : 98                         clc                     ; clear carry
(1)    1078 : 81                         rts
(1)    1079 :                    queue_remove_has_elem:
(1)    1079 : 7A                         dec     queue_len,x     ; decrement queue length
(1)    107A : E6 03                      lda     queue_get,x     ; 8 bits offset
(1)    107C : 4C                         inca
(1)    107D : E7 03                      sta     queue_get,x     ; update get pointer
(1)    107F : E1 01                      cmp     queue_size,x
(1)    1081 : 25 02                      blo     queue_remove_elem
(1)    1083 : 6F 03                      clr     queue_get,x
(1)    1085 :                    queue_remove_elem:
(1)    1085 : 4A                         deca                    ; restore get pointer
(1)    1086 : AB 04                      add     #queue_buf
(1)    1088 : CF 10 73                   stx     queue_remove_X  ; save X
(1)    108B : CB 10 73                   add     queue_remove_X
(1)    108E : 97                         tax
(1)    108F : F6                         lda     ,x              ; get element
(1)    1090 : CE 10 73                   ldx     queue_remove_X  ; restore X
(1)    1093 : 99                         sec                     ; set carry
(1)    1094 :                    queue_remove_return:
(1)    1094 : 81                         rts
(1)    1095 :
(1)    1095 :                    ;;; Local Variables:
(1)    1095 :                    ;;; mode: asm
(1)    1095 :                    ;;; End:
(1)    1095 :                    ;;; vim: set ft=asm et ts=4 sw=4:
       1095 :
       1095 :                    isr_irq:
       1095 : C6 FF E0                   lda     ACIA_status
       1098 : A5 80                      bit     #IRQF_bm
       109A : 27 0C                      beq     isr_irq_return
       109C :                    isr_irq_receive:
       109C : A5 01                      bit     #RDRF_bm
       109E : 27 08                      beq     isr_irq_recv_end
       10A0 : C6 FF E1                   lda     ACIA_data
       10A3 : AE 80                      ldx     #rx_queue
       10A5 : CD 10 49                   jsr     queue_add
       10A8 :                    isr_irq_recv_end:
       10A8 :                    isr_irq_return:
       10A8 : 80                         rti
