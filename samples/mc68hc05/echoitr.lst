          0 :                            include "mc68hc05c0.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            include "mc68hc05.inc"
(2)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :                    ;;; MC68HC05
(2)       0 :                            cpu     68hc05
(2)       0 :                    ;;; Condition Code Register (CC)
(2)       0 : =1                 CC_CARRY      equ  %00000001   ; set to 1 if carry occurred
(2)       0 : =2                 CC_ZERO       equ  %00000010   ; set to 1 if result is zero
(2)       0 : =4                 CC_NEGATIVE   equ  %00000100   ; set to 1 if result is negative
(2)       0 : =8                 CC_IRQ        equ  %00001000   ; if 1, IRQ is masked
(2)       0 : =10                CC_HALF_CARRY equ  %00010000   ; if 1, decimal carry from least digit occurred
(2)       0 :                    ;;; Vector
(2)       0 : =FFFA              VEC_IRQ:        equ     $FFFA   ; External Interrupt
(2)       0 : =FFFC              VEC_SWI:        equ     $FFFC   ; Software
(2)       0 : =FFFE              VEC_RESET:      equ     $FFFE   ; Reset
(1)       0 :                    ;;; MC68HC05C0
(1)       0 :                            option  "pc-bits", 16
(1)       0 :                    ;;; Vector
(1)       0 : =FFF2              VEC_KEY:        equ     $FFF2   ; Keyboard Scan
(1)       0 : =FFF4              VEC_MFT:        equ     $FFF4   ; Multi-Function Timer
(1)       0 : =FFF6              VEC_SCI:        equ     $FFF6   ; Serial Communications Interface
(1)       0 : =FFF8              VEC_TIMER:      equ     $FFF8   ; 16-Bit Timer
(1)       0 :
(1)       0 :                    ;;; Internal Register Area
(1)       0 : =1                 PORTB:  equ     $01     ; Port B Data Register
(1)       0 : =2                 PORTC:  equ     $02     ; Port C Data Register
(1)       0 : =3                 PORTD:  equ     $03     ; Port D Data Register
(1)       0 : =5                 DDRB:   equ     $05     ; Port B Data Direction Register
(1)       0 : =6                 DDRC:   equ     $06     ; Port C Data Direction Register
(1)       0 : =7                 DDRD:   equ     $07     ; Port D Data Direction Register
(1)       0 : =8                 MFTCSR: equ     $08     ; Multi-Function Timer Control/Status Register
(1)       0 : =9                 MFTCR:  equ     $09     ; Multi-Function Timer Counter Register
(1)       0 : =A                 TCR:    equ     $0A     ; 16-Bit Timer Control Register
(1)       0 : =B                 TSR:    equ     $0B     ; 16-Bit Timer Status Register
(1)       0 : =C                 ICR:    equ     $0C     ; 16-Bit Timer Input Capture Register
(1)       0 : =E                 OCR:    equ     $0E     ; 16-Bit Timer Output Compare Register
(1)       0 : =10                CNTR:   equ     $10     ; 16-Bit Timer Counter Register
(1)       0 : =12                ACNTR:  equ     $12     ; 16-Bit Timer Alternate Counter Register
(1)       0 : =14                SCBR:   equ     $14     ; Serial Communications Baud Rate Register
(1)       0 : =6                 SCBR_SCP_gp:    equ     6 ; SCI Prescaler; 0=/1 1=/3 2=/4 3=/13
(1)       0 : =3                 SCBR_SCT_gp:    equ     3 ; SCI Transmit Baud Rate; n=1/(1<<n)
(1)       0 : =0                 SCBR_SCR_gp:    equ     0 ; SCI Receive Baud Rate;  0<=n<=7
(1)       0 : =15                SCCR1:  equ     $15     ; Serial Communications Control Register 1
(1)       0 : =7                 SCCR1_R8_bp:    equ     7 ; Receive Data Bit 8
(1)       0 : =6                 SCCR1_T8_bp:    equ     6 ; Transmit Data Bit 8
(1)       0 : =5                 SCCR1_SCKM_bp:  equ     5 ; Serial Clock Mode 0=-PB4 is GPIO
(1)       0 : =4                 SCCR1_M_bp:     equ     4 ; Mode 1=9-bit, 0=8-nit
(1)       0 : =3                 SCCR1_WAKE_bp:  equ     3 ; Wake-Up Select 1=MSB cause wake-up
(1)       0 : =2                 SCCR1_CPOL_bp:  equ     2 ; Clock Polarity
(1)       0 : =1                 SCCR1_CPHL_bp:  equ     1 ; Clock Phase
(1)       0 : =0                 SCCR1_LBCL_bp:  equ     0 ; Last Bit Clock
(1)       0 : =16                SCCR2:  equ     $16     ; Serial Communications Control Register 2
(1)       0 : =7                 SCCR2_TIE_bp:   equ     7 ; Transmit Interrupt Enable
(1)       0 : =6                 SCCR2_TCIE_bp:  equ     6 ; Transmit Complete Interrupt Enable
(1)       0 : =5                 SCCR2_RIE_bp:   equ     5 ; Receive Interrupt Enable
(1)       0 : =4                 SCCR2_ILIE_bp:  equ     4 ; Idle Line Interrupt Enable
(1)       0 : =3                 SCCR2_TE_bp:    equ     3 ; Transmit Enable
(1)       0 : =2                 SCCR2_RE_bp:    equ     2 ; Receive Enable
(1)       0 : =1                 SCCR2_RWU_bp:   equ     1 ; Receiver Wake-up
(1)       0 : =0                 SCCR2_SBK_bp:   equ     0 ; Send Break
(1)       0 : =17                SCSR:   equ     $17     ; Serial Communications Status Register
(1)       0 : =7                 SCSR_TDRE_bp    equ     7 ; Transmit Data Register Empty Flag
(1)       0 : =6                 SCSR_TC_bp:     equ     6 ; Transmit Complete Flag
(1)       0 : =5                 SCSR_RDRF_bp:   equ     5 ; Receive Data Register Full Flag
(1)       0 : =4                 SCSR_IDLE_bp:   equ     4 ; Idle Line Detected Flag
(1)       0 : =3                 SCSR_OR_bp:     equ     3 ; Overrun Error Flag
(1)       0 : =2                 SCSR_NF_bp:     equ     2 ; Noise Error Flag
(1)       0 : =1                 SCSR_FE_bp      equ     1 ; Framing Error Flag
(1)       0 : =18                SCDR:   equ     $18     ; Serial Communications Data Register
(1)       0 : =19                CNFGR:  equ     $19     ; Configuration Register
(1)       0 : =1A                EICSR:  equ     $1A     ; External Interrupt Control/Status Register
(1)       0 : =7                 EICSR_KSF_bp:   equ     7 ; Keyboard Scan Request Flag
(1)       0 : =6                 EICSR_KSEN_bp:  equ     6 ; Keyboard Scan Enable
(1)       0 : =5                 EICSR_KSA_bp:   equ     5 ; Keyboard Scan Acknowledge
(1)       0 : =4                 EICSR_KSEL_bp:  equ     4 ; Keyboard Scan Edge/Level
(1)       0 : =3                 EICSR_IRQF_bp:  equ     3 ; Interrupt Request Flag
(1)       0 : =2                 EICSR_IRQEN_bp: equ     2 ; Interrupt Request Enable
(1)       0 : =1                 EICSR_IRQA_bp:  equ     1 ; Interrupt Request Acknowledge
(1)       0 : =0                 EICSR_IRQEL_bp: equ     0 ; Interrupt Request Edge/Level
(1)       0 :
(1)       0 : =40                RAM_START:      equ     $0040   ; Internal RAM $0040-$023F
(1)       0 : =FF                STACK_TOP:      equ     $00FF   ; Stack $00FF->$0040
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =FFE0              ACIA:   equ     $FFE0
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =FFE0              ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     %11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     %00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     %00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     %00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     %00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     %00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     %00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     %00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     %00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     %00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     %00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     %00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     %00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     %00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     %01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     %00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     %00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     %01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     %01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     %10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =FFE0              ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     %00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     %00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     %00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     %00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     %00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     %00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     %01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     %10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =FFE1              ACIA_data:      equ     ACIA+1          ; Data register
          0 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
          0 : =B4                RX_INT_TX_INT:  equ     WSB_8N1_gc|RIEB_bm|TCB_EI_gc
          0 :
         40 :                            org     RAM_START
         40 :                    save_a: rmb     1
         41 :                    save_x: rmb     1
         42 :
         80 :                            org     $0080
         80 : =10                rx_queue_size:  equ     16
         80 :                    rx_queue:
         80 :                            rmb     rx_queue_size
         90 : =20                tx_queue_size:  equ     32
         90 :                    tx_queue:
         90 :                            rmb     tx_queue_size
         B0 :
       FFFA :                            org     VEC_IRQ
       FFFA : 10 F5                      fdb     isr_irq
       FFFC :
       FFFC :                            org     VEC_SWI
       FFFC : FF FC                      fdb     VEC_SWI         ; halt to system
       FFFE :
       FFFE :                            org     VEC_RESET
       FFFE : 10 00                      fdb     initialize
      10000 :
       1000 :                            org     $1000
       1000 :                    initialize:
       1000 : AE 80                      ldx     #rx_queue
       1002 : A6 10                      lda     #rx_queue_size
       1004 : CD 10 9D                   jsr     queue_init
       1007 : AE 90                      ldx     #tx_queue
       1009 : A6 20                      lda     #tx_queue_size
       100B : CD 10 9D                   jsr     queue_init
       100E :                            ;; initialize ACIA
       100E : A6 03                      lda     #CDS_RESET_gc   ; master reset
       1010 : C7 FF E0                   sta     ACIA_control
       1013 : A6 94                      lda     #RX_INT_TX_NO
       1015 : C7 FF E0                   sta     ACIA_control
       1018 : 9A                         cli                     ; enable IRQ
       1019 :                    loop:
       1019 : AD 67                      bsr     getchar
       101B : 24 FC                      bcc     loop
       101D : B7 40                      sta     save_a
       101F : 27 16                      beq     halt_to_system
       1021 : AD 67                      bsr     putchar         ; echo
       1023 : A6 20                      lda     #' '            ; space
       1025 : AD 63                      bsr     putchar
       1027 : B6 40                      lda     save_a
       1029 : AD 15                      bsr     put_hex8        ; print in hex
       102B : A6 20                      lda     #' '            ; space
       102D : AD 5B                      bsr     putchar
       102F : B6 40                      lda     save_a
       1031 : AD 2F                      bsr     put_bin8        ; print in binary
       1033 : AD 03                      bsr     newline
       1035 : 20 E2                      bra     loop
       1037 :                    halt_to_system:
       1037 : 83                         swi
       1038 :
       1038 :                    ;;; Put newline
       1038 :                    ;;; @clobber A
       1038 :                    newline:
       1038 : A6 0D                      lda     #$0D
       103A : AD 4E                      bsr     putchar
       103C : A6 0A                      lda     #$0A
       103E : 20 4A                      bra     putchar
       1040 :
       1040 :                    ;;; Print uint8_t in hex
       1040 :                    ;;; @param A(save_a) uint8_t value to be printed in hex.
       1040 :                    put_hex8:
       1040 : B7 40                      sta     save_a
       1042 : A6 30                      lda     #'0'
       1044 : AD 44                      bsr     putchar
       1046 : A6 78                      lda     #'x'
       1048 : AD 40                      bsr     putchar
       104A : B6 40                      lda     save_a
       104C : 44                         lsra
       104D : 44                         lsra
       104E : 44                         lsra
       104F : 44                         lsra
       1050 : AD 02                      bsr     put_hex4
       1052 : B6 40                      lda     save_a
       1054 :                    put_hex4:
       1054 : A4 0F                      and     #$0f
       1056 : A1 0A                      cmp     #10
       1058 : 25 04                      blo     put_hex8_dec
       105A : AB 37                      add     #'A'-10
       105C : 20 2C                      bra     putchar
       105E :                    put_hex8_dec:
       105E : AB 30                      add     #'0'
       1060 : 20 28                      bra     putchar
       1062 :
       1062 :                    ;;; Print uint8_t in binary
       1062 :                    ;;; @param A(save_a) uint8_t value to be printed in binary.
       1062 :                    put_bin8:
       1062 : B7 40                      sta     save_a
       1064 : A6 30                      lda     #'0'
       1066 : AD 22                      bsr     putchar
       1068 : A6 62                      lda     #'b'
       106A : AD 1E                      bsr     putchar
       106C : AD 05                      bsr     put_bin4
       106E : AD 03                      bsr     put_bin4
       1070 : B6 40                      lda     save_a
       1072 : 81                         rts
       1073 :                    put_bin4:
       1073 : AD 00                      bsr     put_bin2
       1075 :                    put_bin2:
       1075 : AD 00                      bsr     put_bin1
       1077 :                    put_bin1:
       1077 : A6 30                      lda     #'0'
       1079 : 38 40                      lsl     save_a
       107B : 24 0D                      bcc     putchar
       107D : 3C 40                      inc     save_a          ; rotate save_a
       107F : 4C                         inca
       1080 : 20 08                      bra     putchar
       1082 :
       1082 :                    ;;; Get character
       1082 :                    ;;; @clobber X
       1082 :                    ;;; @return A
       1082 :                    ;;; @return CC.C 0 if no char received
       1082 :                    getchar:
       1082 : AE 80                      ldx     #rx_queue
       1084 : 9B                         sei                     ; disable IRQ
       1085 : CD 10 D4                   jsr     queue_remove
       1088 : 9A                         cli                     ; enable IRQ
       1089 : 81                         rts
       108A :
       108A :                    ;;; Put character
       108A :                    ;;; @param A
       108A :                    ;;; @clobber A
       108A :                    putchar:
       108A : BF 41                      stx     save_x          ; save X
       108C : AE 90                      ldx     #tx_queue
       108E :                    putchar_retry:
       108E : 9B                         sei                     ; disable IRQ
       108F : CD 10 A9                   jsr     queue_add
       1092 : 9A                         cli                     ; enable IRQ
       1093 : 24 F9                      bcc     putchar_retry   ; branch if queue is full
       1095 : A6 B4                      lda     #RX_INT_TX_INT  ; enable Tx interrupt
       1097 : C7 FF E0                   sta     ACIA_control
       109A :                    putchar_exit:
       109A : BE 41                      ldx     save_x          ; restore X
       109C : 81                         rts
       109D :
       109D :                            include "queue.inc"
(1)    109D :                    ;;; [queue] queue structure
(1)    109D : =0                 queue_len:      equ     0       ; queue length
(1)    109D : =1                 queue_size:     equ     1       ; buffer size
(1)    109D : =2                 queue_put:      equ     2       ; queue put index
(1)    109D : =3                 queue_get:      equ     3       ; queue get index
(1)    109D : =4                 queue_buf:      equ     4       ; buffer start offset
(1)    109D :
(1)    109D :                    ;;; [queue] Initialize queue
(1)    109D :                    ;;; @param X queue work space pointer
(1)    109D :                    ;;; @param A queue work space size
(1)    109D :                    ;;; @clobber A
(1)    109D :                    queue_init:
(1)    109D : 7F                         clr     queue_len,x
(1)    109E : 6F 02                      clr     queue_put,x
(1)    10A0 : 6F 03                      clr     queue_get,x
(1)    10A2 : A0 04                      sub     #queue_buf
(1)    10A4 : E7 01                      sta     queue_size,x
(1)    10A6 : 81                         rts
(1)    10A7 :
(1)    10A7 :                    ;;; [queue] Add an element to queue
(1)    10A7 :                    ;;; @param X queue work space pointer
(1)    10A7 :                    ;;; @param A an element
(1)    10A7 :                    ;;; @return CC.C 0 if queue is full
(1)    10A7 :                    queue_add_X:
(1)    10A7 :                            rmb     1               ; save X
(1)    10A8 :                    queue_add_A:
(1)    10A8 :                            rmb     1               ; save X
(1)    10A9 :                    queue_add:
(1)    10A9 : C7 10 A8                   sta     queue_add_A     ; save A
(1)    10AC : F6                         lda     queue_len,x
(1)    10AD : E1 01                      cmp     queue_size,x
(1)    10AF : 24 1E                      bhs     queue_add_return ; carry is cleared
(1)    10B1 : 7C                         inc     queue_len,x      ; increment queue length
(1)    10B2 : E6 02                      lda     queue_put,x      ; 8 bits offset
(1)    10B4 : 4C                         inca
(1)    10B5 : E7 02                      sta     queue_put,x     ; update put pointer
(1)    10B7 : E1 01                      cmp     queue_size,x
(1)    10B9 : 25 02                      blo     queue_add_elem
(1)    10BB : 6F 02                      clr     queue_put,x
(1)    10BD :                    queue_add_elem:
(1)    10BD : 4A                         deca                    ; restore put pointer
(1)    10BE : AB 04                      add     #queue_buf
(1)    10C0 : CF 10 A7                   stx     queue_add_X     ; save X
(1)    10C3 : CB 10 A7                   add     queue_add_X
(1)    10C6 : 97                         tax
(1)    10C7 : C6 10 A8                   lda     queue_add_A
(1)    10CA : F7                         sta     ,x              ; put element
(1)    10CB : CE 10 A7                   ldx     queue_add_X     ; restore X
(1)    10CE : 99                         sec                     ; set carry
(1)    10CF :                    queue_add_return:
(1)    10CF : C6 10 A8                   lda     queue_add_A     ; restore A
(1)    10D2 : 81                         rts
(1)    10D3 :
(1)    10D3 :                    ;;; [queue] Remove an element from queue
(1)    10D3 :                    ;;; @param X queue work space pointer
(1)    10D3 :                    ;;; @return A an element
(1)    10D3 :                    ;;; @return CC.C 0 if queue is empty
(1)    10D3 :                    queue_remove_X:
(1)    10D3 :                            rmb     1
(1)    10D4 :                    queue_remove:
(1)    10D4 : 7D                         tst     queue_len,x
(1)    10D5 : 26 02                      bne     queue_remove_has_elem
(1)    10D7 : 98                         clc                     ; clear carry
(1)    10D8 : 81                         rts
(1)    10D9 :                    queue_remove_has_elem:
(1)    10D9 : 7A                         dec     queue_len,x     ; decrement queue length
(1)    10DA : E6 03                      lda     queue_get,x     ; 8 bits offset
(1)    10DC : 4C                         inca
(1)    10DD : E7 03                      sta     queue_get,x     ; update get pointer
(1)    10DF : E1 01                      cmp     queue_size,x
(1)    10E1 : 25 02                      blo     queue_remove_elem
(1)    10E3 : 6F 03                      clr     queue_get,x
(1)    10E5 :                    queue_remove_elem:
(1)    10E5 : 4A                         deca                    ; restore get pointer
(1)    10E6 : AB 04                      add     #queue_buf
(1)    10E8 : CF 10 D3                   stx     queue_remove_X  ; save X
(1)    10EB : CB 10 D3                   add     queue_remove_X
(1)    10EE : 97                         tax
(1)    10EF : F6                         lda     ,x              ; get element
(1)    10F0 : CE 10 D3                   ldx     queue_remove_X  ; restore X
(1)    10F3 : 99                         sec                     ; set carry
(1)    10F4 :                    queue_remove_return:
(1)    10F4 : 81                         rts
(1)    10F5 :
(1)    10F5 :                    ;;; Local Variables:
(1)    10F5 :                    ;;; mode: asm
(1)    10F5 :                    ;;; End:
(1)    10F5 :                    ;;; vim: set ft=asm et ts=4 sw=4:
       10F5 :
       10F5 :                    isr_irq:
       10F5 : C6 FF E0                   lda     ACIA_status
       10F8 : A5 80                      bit     #IRQF_bm
       10FA : 27 20                      beq     isr_irq_exit
       10FC : C6 FF E0                   lda     ACIA_status
       10FF : A5 01                      bit     #RDRF_bm
       1101 : 27 08                      beq     isr_irq_send
       1103 : C6 FF E1                   lda     ACIA_data       ; receive character
       1106 : AE 80                      ldx     #rx_queue
       1108 : CD 10 A9                   jsr     queue_add
       110B :                    isr_irq_send:
       110B : C6 FF E0                   lda     ACIA_status
       110E : A5 02                      bit     #TDRE_bm
       1110 : 27 0A                      beq     isr_irq_exit
       1112 : AE 90                      ldx     #tx_queue
       1114 : CD 10 D4                   jsr     queue_remove
       1117 : 24 04                      bcc     isr_irq_send_empty
       1119 : C7 FF E1                   sta     ACIA_data       ; send character
       111C :                    isr_irq_exit:
       111C : 80                         rti
       111D :                    isr_irq_send_empty:
       111D : A6 94                      lda     #RX_INT_TX_NO
       111F : C7 FF E0                   sta     ACIA_control    ; disable Tx interrupt
       1122 : 80                         rti
