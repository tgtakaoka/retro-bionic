          0 :                            include "mc68hc05c0.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            include "mc68hc05.inc"
(2)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :                    ;;; MC68HC05
(2)       0 :                            cpu     68hc05
(2)       0 :                    ;;; Condition Code Register (CC)
(2)       0 : =1                 CC_CARRY      equ  %00000001   ; set to 1 if carry occurred
(2)       0 : =2                 CC_ZERO       equ  %00000010   ; set to 1 if result is zero
(2)       0 : =4                 CC_NEGATIVE   equ  %00000100   ; set to 1 if result is negative
(2)       0 : =8                 CC_IRQ        equ  %00001000   ; if 1, IRQ is masked
(2)       0 : =10                CC_HALF_CARRY equ  %00010000   ; if 1, decimal carry from least digit occurred
(2)       0 :                    ;;; Vector
(2)       0 : =FFFA              VEC_IRQ:        equ     $FFFA   ; External Interrupt
(2)       0 : =FFFC              VEC_SWI:        equ     $FFFC   ; Software
(2)       0 : =FFFE              VEC_RESET:      equ     $FFFE   ; Reset
(1)       0 :                    ;;; MC68HC05C0
(1)       0 :                            option  "pc-bits", 16
(1)       0 :                    ;;; Vector
(1)       0 : =FFF2              VEC_KEY:        equ     $FFF2   ; Keyboard Scan
(1)       0 : =FFF4              VEC_MFT:        equ     $FFF4   ; Multi-Function Timer
(1)       0 : =FFF6              VEC_SCI:        equ     $FFF6   ; Serial Communications Interface
(1)       0 : =FFF8              VEC_TIMER:      equ     $FFF8   ; 16-Bit Timer
(1)       0 :
(1)       0 :                    ;;; Internal Register Area
(1)       0 : =1                 PORTB:  equ     $01     ; Port B Data Register
(1)       0 : =2                 PORTC:  equ     $02     ; Port C Data Register
(1)       0 : =3                 PORTD:  equ     $03     ; Port D Data Register
(1)       0 : =5                 DDRB:   equ     $05     ; Port B Data Direction Register
(1)       0 : =6                 DDRC:   equ     $06     ; Port C Data Direction Register
(1)       0 : =7                 DDRD:   equ     $07     ; Port D Data Direction Register
(1)       0 : =8                 MFTCSR: equ     $08     ; Multi-Function Timer Control/Status Register
(1)       0 : =9                 MFTCR:  equ     $09     ; Multi-Function Timer Counter Register
(1)       0 : =A                 TCR:    equ     $0A     ; 16-Bit Timer Control Register
(1)       0 : =B                 TSR:    equ     $0B     ; 16-Bit Timer Status Register
(1)       0 : =C                 ICR:    equ     $0C     ; 16-Bit Timer Input Capture Register
(1)       0 : =E                 OCR:    equ     $0E     ; 16-Bit Timer Output Compare Register
(1)       0 : =10                CNTR:   equ     $10     ; 16-Bit Timer Counter Register
(1)       0 : =12                ACNTR:  equ     $12     ; 16-Bit Timer Alternate Counter Register
(1)       0 : =14                SCBR:   equ     $14     ; Serial Communications Baud Rate Register
(1)       0 : =6                 SCBR_SCP_gp:    equ     6 ; SCI Prescaler; 0=/1 1=/3 2=/4 3=/13
(1)       0 : =3                 SCBR_SCT_gp:    equ     3 ; SCI Transmit Baud Rate; n=1/(1<<n)
(1)       0 : =0                 SCBR_SCR_gp:    equ     0 ; SCI Receive Baud Rate;  0<=n<=7
(1)       0 : =15                SCCR1:  equ     $15     ; Serial Communications Control Register 1
(1)       0 : =7                 SCCR1_R8_bp:    equ     7 ; Receive Data Bit 8
(1)       0 : =6                 SCCR1_T8_bp:    equ     6 ; Transmit Data Bit 8
(1)       0 : =5                 SCCR1_SCKM_bp:  equ     5 ; Serial Clock Mode 0=-PB4 is GPIO
(1)       0 : =4                 SCCR1_M_bp:     equ     4 ; Mode 1=9-bit, 0=8-nit
(1)       0 : =3                 SCCR1_WAKE_bp:  equ     3 ; Wake-Up Select 1=MSB cause wake-up
(1)       0 : =2                 SCCR1_CPOL_bp:  equ     2 ; Clock Polarity
(1)       0 : =1                 SCCR1_CPHL_bp:  equ     1 ; Clock Phase
(1)       0 : =0                 SCCR1_LBCL_bp:  equ     0 ; Last Bit Clock
(1)       0 : =16                SCCR2:  equ     $16     ; Serial Communications Control Register 2
(1)       0 : =7                 SCCR2_TIE_bp:   equ     7 ; Transmit Interrupt Enable
(1)       0 : =6                 SCCR2_TCIE_bp:  equ     6 ; Transmit Complete Interrupt Enable
(1)       0 : =5                 SCCR2_RIE_bp:   equ     5 ; Receive Interrupt Enable
(1)       0 : =4                 SCCR2_ILIE_bp:  equ     4 ; Idle Line Interrupt Enable
(1)       0 : =3                 SCCR2_TE_bp:    equ     3 ; Transmit Enable
(1)       0 : =2                 SCCR2_RE_bp:    equ     2 ; Receive Enable
(1)       0 : =1                 SCCR2_RWU_bp:   equ     1 ; Receiver Wake-up
(1)       0 : =0                 SCCR2_SBK_bp:   equ     0 ; Send Break
(1)       0 : =17                SCSR:   equ     $17     ; Serial Communications Status Register
(1)       0 : =7                 SCSR_TDRE_bp    equ     7 ; Transmit Data Register Empty Flag
(1)       0 : =6                 SCSR_TC_bp:     equ     6 ; Transmit Complete Flag
(1)       0 : =5                 SCSR_RDRF_bp:   equ     5 ; Receive Data Register Full Flag
(1)       0 : =4                 SCSR_IDLE_bp:   equ     4 ; Idle Line Detected Flag
(1)       0 : =3                 SCSR_OR_bp:     equ     3 ; Overrun Error Flag
(1)       0 : =2                 SCSR_NF_bp:     equ     2 ; Noise Error Flag
(1)       0 : =1                 SCSR_FE_bp      equ     1 ; Framing Error Flag
(1)       0 : =18                SCDR:   equ     $18     ; Serial Communications Data Register
(1)       0 : =19                CNFGR:  equ     $19     ; Configuration Register
(1)       0 : =1A                EICSR:  equ     $1A     ; External Interrupt Control/Status Register
(1)       0 : =7                 EICSR_KSF_bp:   equ     7 ; Keyboard Scan Request Flag
(1)       0 : =6                 EICSR_KSEN_bp:  equ     6 ; Keyboard Scan Enable
(1)       0 : =5                 EICSR_KSA_bp:   equ     5 ; Keyboard Scan Acknowledge
(1)       0 : =4                 EICSR_KSEL_bp:  equ     4 ; Keyboard Scan Edge/Level
(1)       0 : =3                 EICSR_IRQF_bp:  equ     3 ; Interrupt Request Flag
(1)       0 : =2                 EICSR_IRQEN_bp: equ     2 ; Interrupt Request Enable
(1)       0 : =1                 EICSR_IRQA_bp:  equ     1 ; Interrupt Request Acknowledge
(1)       0 : =0                 EICSR_IRQEL_bp: equ     0 ; Interrupt Request Edge/Level
(1)       0 :
(1)       0 : =40                RAM_START:      equ     $0040   ; Internal RAM $0040-$023F
(1)       0 : =FF                STACK_TOP:      equ     $00FF   ; Stack $00FF->$0040
          0 :
         80 :                            org     $0080
         80 : =10                rx_queue_size:  equ     16
         80 :                    rx_queue:
         80 :                            rmb     rx_queue_size
         90 :
       FFF6 :                            org     VEC_SCI
       FFF6 : 10 8E                      fdb     isr_sci
       FFF8 :
       FFFC :                            org     VEC_SWI
       FFFC : FF FC                      fdb     VEC_SWI         ; halt to system
       FFFE :
       FFFE :                            org     VEC_RESET
       FFFE : 10 00                      fdb     initialize
      10000 :
       1000 :                            org     $1000
       1000 :                    initialize:
       1000 : AE 80                      ldx     #rx_queue
       1002 : A6 10                      lda     #rx_queue_size
       1004 : CD 10 36                   jsr     queue_init
       1007 :                            ;; Initialize SCI
       1007 : 3F 15                      clr     SCCR1
       1009 : A6 5B                      lda     #(1<<SCBR_SCP_gp)|(3<<SCBR_SCT_gp)|(3<<SCBR_SCR_gp)
       100B : B7 14                      sta     SCBR            ; prescaler=1/3 Tx/Rx=1/8
       100D : 16 16                      bset    SCCR2_TE_bp,SCCR2  ; Enable Tx
       100F : 14 16                      bset    SCCR2_RE_bp,SCCR2  ; Enable Rx
       1011 : 1A 16                      bset    SCCR2_RIE_bp,SCCR2 ; Enable Rx interrupt
       1013 : 10 1A                      bset    EICSR_IRQEL_bp,EICSR ; Negative-edge and level sensitive #IRQ
       1015 : 14 1A                      bset    EICSR_IRQEN_bp,EICSR ; Enable IRQ
       1017 :                    loop:
       1017 : AE 80                      ldx     #rx_queue
       1019 : 9B                         sei                     ; Disable IRQ
       101A : CD 10 6D                   jsr     queue_remove
       101D : 9A                         cli                     ; Enable IRQ
       101E : 24 F7                      bcc     loop
       1020 : 4D                         tsta
       1021 : 27 0C                      beq     halt_to_system
       1023 : AD 0B                      bsr     putchar
       1025 : A1 0D                      cmp     #$0D            ; carriage return
       1027 : 26 EE                      bne     loop
       1029 : A6 0A                      lda     #$0A            ; newline
       102B : AD 03                      bsr     putchar
       102D : 20 E8                      bra     loop
       102F :                    halt_to_system:
       102F : 83                         swi
       1030 :
       1030 :                    putchar:
       1030 : 0F 17 FD                   brclr   SCSR_TDRE_bp,SCSR,putchar
       1033 : B7 18                      sta     SCDR
       1035 : 81                         rts
       1036 :
       1036 :                            include "queue.inc"
(1)    1036 :                    ;;; [queue] queue structure
(1)    1036 : =0                 queue_len:      equ     0       ; queue length
(1)    1036 : =1                 queue_size:     equ     1       ; buffer size
(1)    1036 : =2                 queue_put:      equ     2       ; queue put index
(1)    1036 : =3                 queue_get:      equ     3       ; queue get index
(1)    1036 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)    1036 :
(1)    1036 :                    ;;; [queue] Initialize queue
(1)    1036 :                    ;;; @param X queue work space pointer
(1)    1036 :                    ;;; @param A queue work space size
(1)    1036 :                    ;;; @clobber A
(1)    1036 :                    queue_init:
(1)    1036 : 7F                         clr     queue_len,x
(1)    1037 : 6F 02                      clr     queue_put,x
(1)    1039 : 6F 03                      clr     queue_get,x
(1)    103B : A0 04                      sub     #queue_buf
(1)    103D : E7 01                      sta     queue_size,x
(1)    103F : 81                         rts
(1)    1040 :
(1)    1040 :                    ;;; [queue] Add an element to queue
(1)    1040 :                    ;;; @param X queue work space pointer
(1)    1040 :                    ;;; @param A an element
(1)    1040 :                    ;;; @return CC.C 0 if queue is full
(1)    1040 :                    queue_add_X:
(1)    1040 :                            rmb     1               ; save X
(1)    1041 :                    queue_add_A:
(1)    1041 :                            rmb     1               ; save X
(1)    1042 :                    queue_add:
(1)    1042 : C7 10 41                   sta     queue_add_A     ; save A
(1)    1045 : F6                         lda     queue_len,x
(1)    1046 : E1 01                      cmp     queue_size,x
(1)    1048 : 24 1E                      bhs     queue_add_return ; carry is cleared
(1)    104A : 7C                         inc     queue_len,x      ; increment queue length
(1)    104B : E6 02                      lda     queue_put,x      ; 8 bits offset
(1)    104D : 4C                         inca
(1)    104E : E7 02                      sta     queue_put,x     ; update put pointer
(1)    1050 : E1 01                      cmp     queue_size,x
(1)    1052 : 25 02                      blo     queue_add_elem
(1)    1054 : 6F 02                      clr     queue_put,x
(1)    1056 :                    queue_add_elem:
(1)    1056 : 4A                         deca                    ; restore put pointer
(1)    1057 : AB 04                      add     #queue_buf
(1)    1059 : CF 10 40                   stx     queue_add_X     ; save X
(1)    105C : CB 10 40                   add     queue_add_X
(1)    105F : 97                         tax
(1)    1060 : C6 10 41                   lda     queue_add_A
(1)    1063 : F7                         sta     ,x              ; put element
(1)    1064 : CE 10 40                   ldx     queue_add_X     ; restore X
(1)    1067 : 99                         sec                     ; set carry
(1)    1068 :                    queue_add_return:
(1)    1068 : C6 10 41                   lda     queue_add_A     ; restore A
(1)    106B : 81                         rts
(1)    106C :
(1)    106C :                    ;;; [queue] Remove an element from queue
(1)    106C :                    ;;; @param X queue work space pointer
(1)    106C :                    ;;; @return A an element
(1)    106C :                    ;;; @return CC.C 0 if queue is empty
(1)    106C :                    queue_remove_X:
(1)    106C :                            rmb     1
(1)    106D :                    queue_remove:
(1)    106D : 7D                         tst     queue_len,x
(1)    106E : 26 02                      bne     queue_remove_has_elem
(1)    1070 : 98                         clc                     ; clear carry
(1)    1071 : 81                         rts
(1)    1072 :                    queue_remove_has_elem:
(1)    1072 : 7A                         dec     queue_len,x     ; decrement queue length
(1)    1073 : E6 03                      lda     queue_get,x     ; 8 bits offset
(1)    1075 : 4C                         inca
(1)    1076 : E7 03                      sta     queue_get,x     ; update get pointer
(1)    1078 : E1 01                      cmp     queue_size,x
(1)    107A : 25 02                      blo     queue_remove_elem
(1)    107C : 6F 03                      clr     queue_get,x
(1)    107E :                    queue_remove_elem:
(1)    107E : 4A                         deca                    ; restore get pointer
(1)    107F : AB 04                      add     #queue_buf
(1)    1081 : CF 10 6C                   stx     queue_remove_X  ; save X
(1)    1084 : CB 10 6C                   add     queue_remove_X
(1)    1087 : 97                         tax
(1)    1088 : F6                         lda     ,x              ; get element
(1)    1089 : CE 10 6C                   ldx     queue_remove_X  ; restore X
(1)    108C : 99                         sec                     ; set carry
(1)    108D :                    queue_remove_return:
(1)    108D : 81                         rts
(1)    108E :
(1)    108E :                    ;;; Local Variables:
(1)    108E :                    ;;; mode: asm
(1)    108E :                    ;;; End:
(1)    108E :                    ;;; vim: set ft=asm et ts=4 sw=4:
       108E :
       108E :                    isr_sci:
       108E : 0B 17 07                   brclr   SCSR_RDRF_bp,SCSR,isr_sci_exit
       1091 : B6 18                      lda     SCDR
       1093 : AE 80                      ldx     #rx_queue
       1095 : CD 10 42                   jsr     queue_add
       1098 :                    isr_sci_exit:
       1098 : 80                         rti
