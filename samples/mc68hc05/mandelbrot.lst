          0 :                            include "mc68hc05c0.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            include "mc68hc05.inc"
(2)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :                    ;;; MC68HC05
(2)       0 :                            cpu     68hc05
(2)       0 :                    ;;; Condition Code Register (CC)
(2)       0 : =1                 CC_CARRY      equ  %00000001   ; set to 1 if carry occurred
(2)       0 : =2                 CC_ZERO       equ  %00000010   ; set to 1 if result is zero
(2)       0 : =4                 CC_NEGATIVE   equ  %00000100   ; set to 1 if result is negative
(2)       0 : =8                 CC_IRQ        equ  %00001000   ; if 1, IRQ is masked
(2)       0 : =10                CC_HALF_CARRY equ  %00010000   ; if 1, decimal carry from least digit occurred
(1)       0 :                    ;;; MC68HC05C0
(1)       0 :                            option  "pc-bits", 16
(1)       0 :                    ;;; Vector
(1)       0 : =FFF2              VEC_KEY:        equ     $FFF2   ; Keyboard Scan
(1)       0 : =FFF4              VEC_MFT:        equ     $FFF4   ; Multi-Function Timer
(1)       0 : =FFF6              VEC_SCI:        equ     $FFF6   ; Serial Communications Interface
(1)       0 : =FFF8              VEC_TIMER:      equ     $FFF8   ; 16-Bit Timer
(1)       0 : =FFFA              VEC_IRQ:        equ     $FFFA   ; External Interrupt
(1)       0 : =FFFC              VEC_SWI:        equ     $FFFC   ; Software
(1)       0 : =FFFE              VEC_RESET:      equ     $FFFE   ; Reset
(1)       0 :
(1)       0 :                    ;;; Internal Register Area
(1)       0 : =1                 PORTB:  equ     $01     ; Port B Data Register
(1)       0 : =2                 PORTC:  equ     $02     ; Port C Data Register
(1)       0 : =3                 PORTD:  equ     $03     ; Port D Data Register
(1)       0 : =5                 DDRB:   equ     $05     ; Port B Data Direction Register
(1)       0 : =6                 DDRC:   equ     $06     ; Port C Data Direction Register
(1)       0 : =7                 DDRD:   equ     $07     ; Port D Data Direction Register
(1)       0 : =8                 MFTCSR: equ     $08     ; Multi-Function Timer Control/Status Register
(1)       0 : =9                 MFTCR:  equ     $09     ; Multi-Function Timer Counter Register
(1)       0 : =A                 TCR:    equ     $0A     ; 16-Bit Timer Control Register
(1)       0 : =B                 TSR:    equ     $0B     ; 16-Bit Timer Status Register
(1)       0 : =C                 ICR:    equ     $0C     ; 16-Bit Timer Input Capture Register
(1)       0 : =E                 OCR:    equ     $0E     ; 16-Bit Timer Output Compare Register
(1)       0 : =10                CNTR:   equ     $10     ; 16-Bit Timer Counter Register
(1)       0 : =12                ACNTR:  equ     $12     ; 16-Bit Timer Alternate Counter Register
(1)       0 : =14                SCBR:   equ     $14     ; Serial Communications Baud Rate Register
(1)       0 : =15                SCCR1:  equ     $15     ; Serial Communications Control Register 1
(1)       0 : =16                SCCR2:  equ     $16     ; Serial Communications Control Register 2
(1)       0 : =17                SCSR:   equ     $17     ; Serial Communications Status Register
(1)       0 : =18                SCDR:   equ     $18     ; Serial Communications Data Register
(1)       0 : =19                CNFGR:  equ     $19     ; Configuration Register
(1)       0 : =1A                EICSR:  equ     $1A     ; External Interrupt Control/Status Register
(1)       0 :                            
(1)       0 : =40                RAM_START:      equ     $0040   ; Internal RAM $0040-$023F
(1)       0 : =FF                STACK_TOP:      equ     $00FF   ; Stack $00FF->$0040
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =FFE0              ACIA:   equ     $FFE0
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =FFE0              ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     %11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     %00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     %00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     %00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     %00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     %00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     %00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     %00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     %00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     %00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     %00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     %00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     %00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     %00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     %01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     %00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     %00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     %01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     %01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     %10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =FFE0              ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     %00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     %00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     %00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     %00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     %00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     %00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     %01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     %10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =FFE1              ACIA_data:      equ     ACIA+1          ; Data register
          0 :
          0 : =10                rx_queue_size:  equ     16
          0 : =20                tx_queue_size:  equ     32
          0 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
          0 : =B4                RX_INT_TX_INT:  equ     WSB_8N1_gc|RIEB_bm|TCB_EI_gc
          0 :
         40 :                            org     RAM_START
         40 :                    save_a: rmb     1
         41 :                    save_x: rmb     1
         42 :                    rx_queue:
         42 :                            rmb     rx_queue_size
         52 :                    tx_queue:
         52 :                            rmb     tx_queue_size
         72 :
         72 :                    ;;; Working space for mandelbrot.inc
         72 : =32                F:      equ     50
         72 :                    vC:     rmb     2
         74 :                    vD:     rmb     2
         76 :                    vA:     rmb     2
         78 :                    vB:     rmb     2
         7A :                    vS:     rmb     2
         7C :                    vP:     rmb     2
         7E :                    vQ:     rmb     2
         80 :                    vY:     rmb     1
         81 :                    vX:     rmb     1
         82 :                    vI:     rmb     1
         83 :
         83 :                    ;;; Working space for arith.inc
         83 :                    R0:
         83 :                    R0H:    rmb     1
         84 :                    R0L:    rmb     1
         85 :                    R1:
         85 :                    R1H:    rmb     1
         86 :                    R1L:    rmb     1
         87 :                    R2:
         87 :                    R2H:    rmb     1
         88 :                    R2L:    rmb     1
         89 :                    arith_work:
         89 :                            rmb     1
         8A :                    SP:     rmb     1
        100 :                            org     $0100
        100 :                    stack:  rmb     200
        1C8 :
       FFFA :                            org     VEC_IRQ
       FFFA : 14 45                      fdb     isr_irq
       FFFC :
       FFFC :                            org     VEC_SWI
       FFFC : FF FC                      fdb     VEC_SWI         ; halt to system
       FFFE :
       FFFE :                            org     VEC_RESET
       FFFE : 10 00                      fdb     initialize
      10000 :
       1000 :                            org     $1000
       1000 :                    initialize:
       1000 : AE 42                      ldx     #rx_queue
       1002 : A6 10                      lda     #rx_queue_size
       1004 : CD 13 ED                   jsr     queue_init
       1007 : AE 52                      ldx     #tx_queue
       1009 : A6 20                      lda     #tx_queue_size
       100B : CD 13 ED                   jsr     queue_init
       100E :                            ;; initialize ACIA
       100E : A6 03                      lda     #CDS_RESET_gc   ; master reset
       1010 : C7 FF E0                   sta     ACIA_control
       1013 : A6 94                      lda     #RX_INT_TX_NO
       1015 : C7 FF E0                   sta     ACIA_control
       1018 : 9A                         cli                     ; enable IRQ
       1019 :
       1019 : 3F 8A                      clr     SP
       101B :                    loop:
       101B : CD 10 5E                   jsr     mandelbrot
       101E : CD 10 2F                   jsr     newline
       1021 : 20 F8                      bra     loop
       1023 :
       1023 :                    ;;; Get character
       1023 :                    ;;; @clobber X
       1023 :                    ;;; @return A
       1023 :                    ;;; @return CC.C 0 if no char received
       1023 :                    getchar:
       1023 : AE 42                      ldx     #rx_queue
       1025 : 9B                         sei                     ; disable IRQ
       1026 : CD 14 24                   jsr     queue_remove
       1029 : 9A                         cli                     ; enable IRQ
       102A : 81                         rts
       102B :
       102B :                    ;;; Put character
       102B :                    ;;; @param A
       102B :                    ;;; @clobber A
       102B :                    putspace:
       102B : A6 20                      lda     #' '
       102D : 20 06                      bra     putchar
       102F :                    newline:
       102F : A6 0D                      lda     #$0D
       1031 : AD 02                      bsr     putchar
       1033 : A6 0A                      lda     #$0A
       1035 :                    putchar:
       1035 : BF 41                      stx     save_x          ; save X
       1037 : AE 52                      ldx     #tx_queue
       1039 :                    putchar_retry:
       1039 : 9B                         sei                     ; disable IRQ
       103A : CD 13 F9                   jsr     queue_add
       103D : 9A                         cli                     ; enable IRQ
       103E : 24 F9                      bcc     putchar_retry   ; branch if queue is full
       1040 : A6 B4                      lda     #RX_INT_TX_INT  ; enable Tx interrupt
       1042 : C7 FF E0                   sta     ACIA_control
       1045 :                    putchar_exit:
       1045 : BE 41                      ldx     save_x          ; restore X
       1047 : 81                         rts
       1048 :
       1048 :                            include "mandelbrot.inc"
(1)    1048 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    1048 :                    ;;; Print variable: "A=variable "
(1)    1048 :                    ;;; @param R0 variable
(1)    1048 :                    ;;; @param A variable letter
(1)    1048 :                    ;;; @clobber R0
(1)    1048 :                    print:
(1)    1048 : CD 10 35                   jsr     putchar         ; print variable letter
(1)    104B : A6 3D                      lda     #'='
(1)    104D : CD 10 35                   jsr     putchar         ; '='
(1)    1050 : CD 12 75                   jsr     print_int16
(1)    1053 : CC 10 2B                   jmp     putspace
(1)    1056 :
(1)    1056 :                    ;;; Load 8 bit variable
(1)    1056 :                    ;;; @param X variable
(1)    1056 :                    ;;; @return X:A value
(1)    1056 :                    load_8bit:
(1)    1056 : F6                         lda     0,X
(1)    1057 : 2A 03                      bpl     load_8bit_plus
(1)    1059 : AE FF                      ldx     #-1
(1)    105B : 81                         rts
(1)    105C :                    load_8bit_plus:
(1)    105C : 5F                         clrx
(1)    105D : 81                         rts
(1)    105E :
(1)    105E :                    mandelbrot:
(1)    105E : A6 F4                      lda     #-12
(1)    1060 : B7 80                      sta     vY              ; Y=-12
(1)    1062 :                    loop_y:
(1)    1062 : A6 CF                      lda     #-49
(1)    1064 : B7 81                      sta     vX              ; X=-49
(1)    1066 :                    loop_x:
(1)    1066 : AE 81                      ldx     #vX
(1)    1068 : CD 10 56                   jsr     load_8bit
(1)    106B : CD 12 D4                   jsr     set_R1          ; R1=X
(1)    106E : 5F                         clrx
(1)    106F : A6 E5                      lda     #229
(1)    1071 : CD 12 D9                   jsr     set_R2
(1)    1074 : CD 13 5A                   jsr     mul16           ; R0=X*229
(1)    1077 : AE 85                      ldx     #R1
(1)    1079 : CD 12 F6                   jsr     store_R0
(1)    107C : 5F                         clrx
(1)    107D : A6 64                      lda     #100
(1)    107F : CD 12 D9                   jsr     set_R2
(1)    1082 : CD 13 C5                   jsr     div16           ; R0=X*229/100
(1)    1085 : AE 72                      ldx     #vC
(1)    1087 : CD 12 F6                   jsr     store_R0        ; C=X*229/100
(1)    108A : AE 76                      ldx     #vA
(1)    108C : CD 12 F6                   jsr     store_R0        ; A=C
(1)    108F : AE 80                      ldx     #vY
(1)    1091 : CD 10 56                   jsr     load_8bit
(1)    1094 : CD 12 D4                   jsr     set_R1          ; R1=Y
(1)    1097 : AE 01                      ldx     #416>>8
(1)    1099 : A6 A0                      lda     #416&255
(1)    109B : CD 12 D9                   jsr     set_R2
(1)    109E : CD 13 5A                   jsr     mul16           ; R0=Y*416
(1)    10A1 : AE 85                      ldx     #R1
(1)    10A3 : CD 12 F6                   jsr     store_R0
(1)    10A6 : 5F                         clrx
(1)    10A7 : A6 64                      lda     #100
(1)    10A9 : CD 12 D9                   jsr     set_R2
(1)    10AC : CD 13 C5                   jsr     div16           ; R0=Y*416/100
(1)    10AF : AE 74                      ldx     #vD
(1)    10B1 : CD 12 F6                   jsr     store_R0        ; D=Y*416/100
(1)    10B4 : AE 78                      ldx     #vB
(1)    10B6 : CD 12 F6                   jsr     store_R0        ; B=D
(1)    10B9 : 3F 82                      clr     vI              ; I=0
(1)    10BB :
(1)    10BB :                            ;; ldx     #vY
(1)    10BB :                            ;; jsr     load_8bit
(1)    10BB :                            ;; jsr     set_R0          ; Y
(1)    10BB :                            ;; lda     #'Y'
(1)    10BB :                            ;; jsr     print
(1)    10BB :                            ;; ldx     #vX
(1)    10BB :                            ;; jsr     load_8bit
(1)    10BB :                            ;; jsr     set_R0          ; X
(1)    10BB :                            ;; lda     #'X'
(1)    10BB :                            ;; jsr     print
(1)    10BB :                            ;; ldx     #vC
(1)    10BB :                            ;; jsr     load_R0         ; C
(1)    10BB :                            ;; lda     #'C'
(1)    10BB :                            ;; jsr     print
(1)    10BB :                            ;; ldx     #vD
(1)    10BB :                            ;; jsr     load_R0         ; D
(1)    10BB :                            ;; lda     #'D'
(1)    10BB :                            ;; jsr     print
(1)    10BB :                            ;; jsr     newline
(1)    10BB :
(1)    10BB :                    loop_i:
(1)    10BB : AE 78                      ldx     #vB
(1)    10BD : CD 12 E6                   jsr     load_R1         ; R1=B
(1)    10C0 : 5F                         clrx
(1)    10C1 : A6 32                      lda     #F
(1)    10C3 : CD 12 D9                   jsr     set_R2          ; R2=F
(1)    10C6 : CD 13 C5                   jsr     div16           ; R0=B/F
(1)    10C9 : AE 7E                      ldx     #vQ
(1)    10CB : CD 12 F6                   jsr     store_R0        ; Q=B/F
(1)    10CE : AE 85                      ldx     #R1
(1)    10D0 : CD 12 F6                   jsr     store_R0        ; R1=Q
(1)    10D3 : 5F                         clrx
(1)    10D4 : A6 32                      lda     #F
(1)    10D6 : CD 12 D9                   jsr     set_R2          ; R2=F
(1)    10D9 : CD 13 5A                   jsr     mul16           ; R0=Q*F
(1)    10DC : AE 87                      ldx     #R2
(1)    10DE : CD 12 F6                   jsr     store_R0        ; R2=Q*F
(1)    10E1 : AE 78                      ldx     #vB
(1)    10E3 : CD 12 E6                   jsr     load_R1         ; R1=B
(1)    10E6 : CD 13 0B                   jsr     sub16           ; R0=B-Q*F
(1)    10E9 : AE 7A                      ldx     #vS
(1)    10EB : CD 12 F6                   jsr     store_R0        ; S=B-Q*F
(1)    10EE : AE 76                      ldx     #vA
(1)    10F0 : CD 12 E6                   jsr     load_R1         ; R1=A
(1)    10F3 : CD 12 EE                   jsr     load_R2         ; R2=A
(1)    10F6 : CD 13 5A                   jsr     mul16           ; R0=A*A
(1)    10F9 : AE 83                      ldx     #R0
(1)    10FB : CD 12 94                   jsr     push_RX         ; push A*A
(1)    10FE : AE 78                      ldx     #vB
(1)    1100 : CD 12 E6                   jsr     load_R1         ; R1=B
(1)    1103 : CD 12 EE                   jsr     load_R2         ; R2=B
(1)    1106 : CD 13 5A                   jsr     mul16           ; R0=B*B
(1)    1109 : AE 87                      ldx     #R2
(1)    110B : CD 12 F6                   jsr     store_R0        ; R2=B*B
(1)    110E : AE 85                      ldx     #R1
(1)    1110 : CD 12 AC                   jsr     pop_RX          ; R1=A*A
(1)    1113 : CD 13 0B                   jsr     sub16           ; R0=A*A-B*B
(1)    1116 : AE 85                      ldx     #R1
(1)    1118 : CD 12 F6                   jsr     store_R0        ; R1=A*A-B*B
(1)    111B : 5F                         clrx
(1)    111C : A6 32                      lda     #F
(1)    111E : CD 12 D9                   jsr     set_R2
(1)    1121 : CD 13 C5                   jsr     div16           ; R0=(A*A-B*B)/F
(1)    1124 : AE 85                      ldx     #R1
(1)    1126 : CD 12 F6                   jsr     store_R0        ; R1=(A*A-B*B)/F
(1)    1129 : AE 72                      ldx     #vC
(1)    112B : CD 12 EE                   jsr     load_R2         ; R2=C
(1)    112E : CD 12 FE                   jsr     add16           ; R0=(A*A-B*B)/F+C
(1)    1131 : AE 83                      ldx     #R0
(1)    1133 : CD 12 94                   jsr     push_RX         ; push (A*A-B*B)/F+C
(1)    1136 : AE 76                      ldx     #vA
(1)    1138 : CD 12 E6                   jsr     load_R1         ; R1=A
(1)    113B : AE 7E                      ldx     #vQ
(1)    113D : CD 12 EE                   jsr     load_R2         ; R2=Q
(1)    1140 : CD 13 5A                   jsr     mul16           ; R0=A*Q
(1)    1143 : AE 83                      ldx     #R0
(1)    1145 : CD 12 94                   jsr     push_RX         ; push A*Q
(1)    1148 : AE 76                      ldx     #vA
(1)    114A : CD 12 E6                   jsr     load_R1         ; R1=A
(1)    114D : AE 7A                      ldx     #vS
(1)    114F : CD 12 EE                   jsr     load_R2         ; R2=S
(1)    1152 : CD 13 5A                   jsr     mul16           ; R0=A*S
(1)    1155 : AE 85                      ldx     #R1
(1)    1157 : CD 12 F6                   jsr     store_R0        ; R1=A*S
(1)    115A : 5F                         clrx
(1)    115B : A6 32                      lda     #F
(1)    115D : CD 12 D9                   jsr     set_R2
(1)    1160 : CD 13 C5                   jsr     div16           ; R0=A*S/F
(1)    1163 : AE 87                      ldx     #R2
(1)    1165 : CD 12 F6                   jsr     store_R0        ; R2=A*S/F
(1)    1168 : AE 85                      ldx     #R1
(1)    116A : CD 12 AC                   jsr     pop_RX          ; R1=A*Q
(1)    116D : CD 12 FE                   jsr     add16           ; R0=A*Q+A*S/F
(1)    1170 : AE 85                      ldx     #R1
(1)    1172 : CD 12 F6                   jsr     store_R0        ; R1=A*Q+A*S/F
(1)    1175 : AE 87                      ldx     #R2
(1)    1177 : CD 12 F6                   jsr     store_R0        ; R2=A*Q+A*S/F
(1)    117A : CD 12 FE                   jsr     add16           ; R0=2*(A*Q+A*S/F)
(1)    117D : AE 85                      ldx     #R1
(1)    117F : CD 12 F6                   jsr     store_R0        ; R1=2*(A*Q+A*S/F)
(1)    1182 : AE 74                      ldx     #vD
(1)    1184 : CD 12 EE                   jsr     load_R2         ; R2=D
(1)    1187 : CD 12 FE                   jsr     add16           ; R0=2*(A*Q+A*S/F)+D
(1)    118A : AE 78                      ldx     #vB
(1)    118C : CD 12 F6                   jsr     store_R0        ; B=2*(A*Q+A*S/F)+D
(1)    118F : AE 83                      ldx     #R0
(1)    1191 : CD 12 AC                   jsr     pop_RX          ; R0=(A*A-B*B)/F+C
(1)    1194 : AE 76                      ldx     #vA
(1)    1196 : CD 12 F6                   jsr     store_R0        ; A=(A*A-B*B)/F+C
(1)    1199 : AE 85                      ldx     #R1
(1)    119B : CD 12 F6                   jsr     store_R0        ; R1=A
(1)    119E : 5F                         clrx
(1)    119F : A6 32                      lda     #F
(1)    11A1 : CD 12 D9                   jsr     set_R2          ; R2=F
(1)    11A4 : CD 13 C5                   jsr     div16           ; R0=A/F
(1)    11A7 : AE 7C                      ldx     #vP
(1)    11A9 : CD 12 F6                   jsr     store_R0        ; P=A/F
(1)    11AC : AE 78                      ldx     #vB
(1)    11AE : CD 12 E6                   jsr     load_R1         ; R1=B
(1)    11B1 : 5F                         clrx
(1)    11B2 : A6 32                      lda     #F
(1)    11B4 : CD 12 D9                   jsr     set_R2          ; R2=F
(1)    11B7 : CD 13 C5                   jsr     div16           ; R0=B/F
(1)    11BA : AE 7E                      ldx     #vQ
(1)    11BC : CD 12 F6                   jsr     store_R0        ; Q=B/F
(1)    11BF :
(1)    11BF :                            ;; jsr     putspace
(1)    11BF :                            ;; ldx     #vI
(1)    11BF :                            ;; jsr     load_8bit
(1)    11BF :                            ;; jsr     set_R0          ; I
(1)    11BF :                            ;; lda     #'I'
(1)    11BF :                            ;; jsr     print
(1)    11BF :                            ;; ldx     #vA
(1)    11BF :                            ;; jsr     load_R0         ; A
(1)    11BF :                            ;; lda     #'A'
(1)    11BF :                            ;; jsr     print
(1)    11BF :                            ;; ldx     #vB
(1)    11BF :                            ;; jsr     load_R0         ; B
(1)    11BF :                            ;; lda     #'B'
(1)    11BF :                            ;; jsr     print
(1)    11BF :                            ;; ldx     #vP
(1)    11BF :                            ;; jsr     load_R0         ; P
(1)    11BF :                            ;; lda     #'P'
(1)    11BF :                            ;; jsr     print
(1)    11BF :                            ;; ldx     #vQ
(1)    11BF :                            ;; jsr     load_R0         ; Q
(1)    11BF :                            ;; lda     #'Q'
(1)    11BF :                            ;; jsr     print
(1)    11BF :                            ;; jsr     newline
(1)    11BF :
(1)    11BF : AE 7C                      ldx     #vP
(1)    11C1 : CD 12 E6                   jsr     load_R1         ; R1=P
(1)    11C4 : CD 12 EE                   jsr     load_R2         ; R2=P
(1)    11C7 : CD 13 5A                   jsr     mul16           ; R0=P*P
(1)    11CA : AE 83                      ldx     #R0
(1)    11CC : CD 12 94                   jsr     push_RX         ; push P*P
(1)    11CF : AE 7E                      ldx     #vQ
(1)    11D1 : CD 12 E6                   jsr     load_R1         ; R1=Q
(1)    11D4 : CD 12 EE                   jsr     load_R2         ; R2=Q
(1)    11D7 : CD 13 5A                   jsr     mul16           ; R0=Q*Q
(1)    11DA : AE 85                      ldx     #R1
(1)    11DC : CD 12 F6                   jsr     store_R0        ; R1=Q*Q
(1)    11DF : AE 87                      ldx     #R2
(1)    11E1 : CD 12 AC                   jsr     pop_RX          ; R2=P*P
(1)    11E4 : CD 12 FE                   jsr     add16           ; R0=Q*Q+P*P
(1)    11E7 : AE 87                      ldx     #R2
(1)    11E9 : CD 12 F6                   jsr     store_R0        ; R2=Q*Q+P*P
(1)    11EC : 5F                         clrx
(1)    11ED : A6 04                      lda     #4
(1)    11EF : CD 12 D4                   jsr     set_R1          ; R1=4
(1)    11F2 : CD 13 18                   jsr     cmp16           ; compare 4 and Q*Q+P*P
(1)    11F5 : 2B 0F                      bmi     print_i         ; if 4<P*P+Q*Q
(1)    11F7 : 3C 82                      inc     vI              ; I+=1
(1)    11F9 : B6 82                      lda     vI
(1)    11FB : A1 10                      cmp     #16
(1)    11FD : 2A 03                      bpl     print_space
(1)    11FF : CC 10 BB                   jmp     loop_i          ; if I<16
(1)    1202 :                    print_space:
(1)    1202 : A6 20                      lda     #' '
(1)    1204 : 20 0C                      bra     print_char
(1)    1206 :                    print_i:
(1)    1206 : B6 82                      lda     vI
(1)    1208 : A0 0A                      sub     #10
(1)    120A : 2A 04                      bpl     print_i2       ; if I>=10
(1)    120C : AB 3A                      add     #10+'0'
(1)    120E : 20 02                      bra     print_char
(1)    1210 :                    print_i2:
(1)    1210 : AB 41                      add     #'A'
(1)    1212 :                    print_char:
(1)    1212 :                            ;; sta     arith_work
(1)    1212 :                            ;; lda     #'@'
(1)    1212 :                            ;; jsr     putchar
(1)    1212 :                            ;; lda     #'='
(1)    1212 :                            ;; jsr     putchar
(1)    1212 :                            ;; lda     arith_work
(1)    1212 :                            ;; jsr     putchar
(1)    1212 :                            ;; jsr     newline
(1)    1212 :
(1)    1212 : CD 10 35                   jsr     putchar
(1)    1215 : CD 10 23                   jsr     getchar
(1)    1218 : 24 04                      bcc     next_x
(1)    121A : 4D                         tsta
(1)    121B : 26 01                      bne     next_x
(1)    121D : 83                         swi                     ; halt to system
(1)    121E :                    next_x: 
(1)    121E : 3C 81                      inc     vX              ; X+=1
(1)    1220 : B6 81                      lda     vX
(1)    1222 : A1 1E                      cmp     #30
(1)    1224 : 2A 03                      bpl     next_y
(1)    1226 : CC 10 66                   jmp     loop_x          ; if X<30
(1)    1229 :                    next_y:
(1)    1229 : CD 10 2F                   jsr     newline
(1)    122C : 3C 80                      inc     vY              ; Y+=1
(1)    122E : B6 80                      lda     vY
(1)    1230 : A1 0D                      cmp     #13
(1)    1232 : 2A 03                      bpl     mandelbrot_end
(1)    1234 : CC 10 62                   jmp     loop_y          ; if Y<13
(1)    1237 :                    mandelbrot_end:
(1)    1237 : 81                         rts
       1238 :                            include "arith.inc"
(1)    1238 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    1238 :                    ;;; Print unsigned 16-bit integer as decimal
(1)    1238 :                    ;;; @param R0 value
(1)    1238 :                    ;;; @clobber A X R0 R1 R2
(1)    1238 :                    print_uint16:
(1)    1238 : 5F                         clrx
(1)    1239 :                    print_uint16_loop:
(1)    1239 : B6 83                      lda     R0H
(1)    123B : B7 85                      sta     R1H
(1)    123D : B6 84                      lda     R0L
(1)    123F : B7 86                      sta     R1L             ; dividend = value
(1)    1241 : BA 83                      ora     R0H
(1)    1243 : 27 13                      beq     print_uint16_zero ; branch if value == 0
(1)    1245 : 3F 87                      clr     R2H
(1)    1247 : A6 0A                      lda     #10
(1)    1249 : B7 88                      sta     R2L             ; divisor=10
(1)    124B : CD 13 7E                   jsr     udiv16          ; R0=value/10
(1)    124E : B6 86                      lda     R1L
(1)    1250 : AA 30                      ora     #'0'
(1)    1252 : D7 12 6D                   sta     print_uint16_buf,x
(1)    1255 : 5C                         incx
(1)    1256 : 20 E1                      bra     print_uint16_loop
(1)    1258 :                    print_uint16_zero:
(1)    1258 : 5D                         tstx
(1)    1259 : 26 05                      bne     print_uint16_print
(1)    125B : A6 30                      lda     #'0'
(1)    125D : CC 10 35                   jmp     putchar
(1)    1260 :                    print_uint16_print:
(1)    1260 : 5A                         decx
(1)    1261 : D6 12 6D                   lda     print_uint16_buf,x
(1)    1264 : AA 30                      ora     #'0'
(1)    1266 : CD 10 35                   jsr     putchar
(1)    1269 : 5D                         tstx
(1)    126A : 26 F4                      bne     print_uint16_print
(1)    126C : 81                         rts
(1)    126D :                    print_uint16_buf:
(1)    126D :                            rmb     8
(1)    1275 :
(1)    1275 :                    ;;; Print signed 16-bit integer as decimal
(1)    1275 :                    ;;; @param R0 value
(1)    1275 :                    ;;; @clobber A X R0
(1)    1275 :                    print_int16:
(1)    1275 : AE 85                      ldx     #R1
(1)    1277 : AD 1B                      bsr     push_RX         ; push R1
(1)    1279 : AE 87                      ldx     #R2
(1)    127B : AD 17                      bsr     push_RX         ; push R2
(1)    127D : B6 83                      lda     R0H
(1)    127F : 2A 09                      bpl     print_int16_print
(1)    1281 : A6 2D                      lda     #'-'
(1)    1283 : CD 10 35                   jsr     putchar
(1)    1286 : AE 83                      ldx     #R0
(1)    1288 : AD 3C                      bsr     negate_RX
(1)    128A :                    print_int16_print:
(1)    128A : AD AC                      bsr     print_uint16
(1)    128C : AE 87                      ldx     #R2
(1)    128E : AD 1C                      bsr     pop_RX          ; pop R2
(1)    1290 : AE 85                      ldx     #R1
(1)    1292 : 20 18                      bra     pop_RX          ; pop R1
(1)    1294 :
(1)    1294 :                    ;;; Push register
(1)    1294 :                    ;;; @param X register
(1)    1294 :                    ;;; @clobber A
(1)    1294 :                    push_RX:
(1)    1294 : BF 89                      stx     arith_work      ; save X
(1)    1296 : F6                         lda     0,X             ; high(register)
(1)    1297 : BE 8A                      ldx     SP
(1)    1299 : D7 01 00                   sta     stack,X         ; push high(register)
(1)    129C : BE 89                      ldx     arith_work
(1)    129E : E6 01                      lda     1,X             ; low(register)
(1)    12A0 : BE 8A                      ldx     SP
(1)    12A2 : D7 01 01                   sta     stack+1,X       ; push low(register)
(1)    12A5 : 5C                         incx
(1)    12A6 : 5C                         incx
(1)    12A7 : BF 8A                      stx     SP              ; update stack pointer
(1)    12A9 : BE 89                      ldx     arith_work      ; restore X
(1)    12AB : 81                         rts
(1)    12AC :
(1)    12AC :                    ;;; Pop register
(1)    12AC :                    ;;; @param X register
(1)    12AC :                    ;;; @clobber A
(1)    12AC :                    pop_RX:
(1)    12AC : BF 89                      stx     arith_work      ; save X
(1)    12AE : BE 8A                      ldx     SP
(1)    12B0 : 5A                         decx
(1)    12B1 : 5A                         decx
(1)    12B2 : BF 8A                      stx     SP              ; update stack pointer
(1)    12B4 : D6 01 00                   lda     stack,X         ; pop high(register)
(1)    12B7 : BE 89                      ldx     arith_work
(1)    12B9 : F7                         sta     0,X             ; high(register)
(1)    12BA : BE 8A                      ldx     SP
(1)    12BC : D6 01 01                   lda     stack+1,X       ; pop low(register)
(1)    12BF : BE 8A                      ldx     SP
(1)    12C1 : BE 89                      ldx     arith_work      ; restore X
(1)    12C3 : E7 01                      sta     1,X             ; low(register)
(1)    12C5 : 81                         rts
(1)    12C6 :
(1)    12C6 :                    ;;; Negate RX
(1)    12C6 :                    ;;; @param X register
(1)    12C6 :                    negate_RX:
(1)    12C6 : 4F                         clra
(1)    12C7 : E0 01                      sub     1,x
(1)    12C9 : E7 01                      sta     1,x
(1)    12CB : 4F                         clra
(1)    12CC : F2                         sbc     0,x
(1)    12CD : F7                         sta     0,x
(1)    12CE : 81                         rts
(1)    12CF :
(1)    12CF :                    ;;; Set value to R0
(1)    12CF :                    ;;; @param X high(value)
(1)    12CF :                    ;;; @param A low(value)
(1)    12CF :                    set_R0:
(1)    12CF : BF 83                      stx     R0H
(1)    12D1 : B7 84                      sta     R0L
(1)    12D3 : 81                         rts
(1)    12D4 :
(1)    12D4 :                    ;;; Set value to R1
(1)    12D4 :                    ;;; @param X high(value)
(1)    12D4 :                    ;;; @param A low(value)
(1)    12D4 :                    set_R1:
(1)    12D4 : BF 85                      stx     R1H
(1)    12D6 : B7 86                      sta     R1L
(1)    12D8 : 81                         rts
(1)    12D9 :
(1)    12D9 :                    ;;; Set value to R2
(1)    12D9 :                    ;;; @param X high(value)
(1)    12D9 :                    ;;; @param A low(value)
(1)    12D9 :                    set_R2:
(1)    12D9 : BF 87                      stx     R2H
(1)    12DB : B7 88                      sta     R2L
(1)    12DD : 81                         rts
(1)    12DE :
(1)    12DE :                    ;;; Load register to R0
(1)    12DE :                    ;;; @param X register
(1)    12DE :                    ;;; @clobber A
(1)    12DE :                    load_R0:
(1)    12DE : F6                         lda     0,x
(1)    12DF : B7 83                      sta     R0H
(1)    12E1 : E6 01                      lda     1,x
(1)    12E3 : B7 84                      sta     R0L
(1)    12E5 : 81                         rts
(1)    12E6 :
(1)    12E6 :                    ;;; Load register to R1
(1)    12E6 :                    ;;; @param X register
(1)    12E6 :                    ;;; @clobber A
(1)    12E6 :                    load_R1:
(1)    12E6 : F6                         lda     0,x
(1)    12E7 : B7 85                      sta     R1H
(1)    12E9 : E6 01                      lda     1,x
(1)    12EB : B7 86                      sta     R1L
(1)    12ED : 81                         rts
(1)    12EE :
(1)    12EE :                    ;;; Load register to R2
(1)    12EE :                    ;;; @param X register
(1)    12EE :                    ;;; @clobber A
(1)    12EE :                    load_R2:
(1)    12EE : F6                         lda     0,x
(1)    12EF : B7 87                      sta     R2H
(1)    12F1 : E6 01                      lda     1,x
(1)    12F3 : B7 88                      sta     R2L
(1)    12F5 : 81                         rts
(1)    12F6 :
(1)    12F6 :                    ;;; store R0 to register
(1)    12F6 :                    ;;; @param X register
(1)    12F6 :                    ;;; @clobber A
(1)    12F6 :                    store_R0:
(1)    12F6 : B6 83                      lda     R0H
(1)    12F8 : F7                         sta     0,x
(1)    12F9 : B6 84                      lda     R0L
(1)    12FB : E7 01                      sta     1,x
(1)    12FD : 81                         rts
(1)    12FE :
(1)    12FE :                    ;;; Addition: R0 = R1 + R2
(1)    12FE :                    ;;; @clobber A
(1)    12FE :                    add16:
(1)    12FE : B6 86                      lda     R1L
(1)    1300 : BB 88                      add     R2L
(1)    1302 : B7 84                      sta     R0L
(1)    1304 : B6 85                      lda     R1H
(1)    1306 : B9 87                      adc     R2H
(1)    1308 : B7 83                      sta     R0H
(1)    130A : 81                         rts
(1)    130B :
(1)    130B :                    ;;; Subtraction: R0 = R1 + R2
(1)    130B :                    ;;; @clobber A
(1)    130B :                    sub16:
(1)    130B : B6 86                      lda     R1L
(1)    130D : B0 88                      sub     R2L
(1)    130F : B7 84                      sta     R0L
(1)    1311 : B6 85                      lda     R1H
(1)    1313 : B2 87                      sbc     R2H
(1)    1315 : B7 83                      sta     R0H
(1)    1317 : 81                         rts
(1)    1318 :
(1)    1318 :                    ;;; Signed compare R0=sign(R1-R2)
(1)    1318 :                    ;;; @return R0=A=0;  BEQ (minuend == subtrahend)
(1)    1318 :                    ;;;         R0=A=1;  BPL (minuend > subtrahend)
(1)    1318 :                    ;;;         R0=A=-1; BMI (minuend < subtrahend)
(1)    1318 :                    ;;; @clobber A
(1)    1318 :                    cmp16:
(1)    1318 : AD F1                      bsr     sub16
(1)    131A : B6 83                      lda     R0H
(1)    131C : BA 84                      ora     R0L
(1)    131E : 27 1A                      beq     cmp16_end       ; return with R0=0
(1)    1320 : B6 83                      lda     R0H
(1)    1322 : B8 85                      eor     R1H
(1)    1324 : B7 84                      sta     R0L             ; R0L=(minuend-subtrahend)^minuend
(1)    1326 : B6 85                      lda     R1H
(1)    1328 : B8 87                      eor     R2H             ; minuend^subtrahend
(1)    132A : B4 84                      and     R0L             ; overflow flag
(1)    132C : B8 83                      eor     R0H
(1)    132E : 2B 06                      bmi     cmp16_lt
(1)    1330 :                    cmp16_gt:
(1)    1330 : 3F 83                      clr     R0H
(1)    1332 : A6 01                      lda     #1
(1)    1334 : 20 04                      bra     cmp16_end
(1)    1336 :                    cmp16_lt:
(1)    1336 : A6 FF                      lda     #-1
(1)    1338 : B7 83                      sta     R0H
(1)    133A :                    cmp16_end:
(1)    133A : B7 84                      sta     R0L
(1)    133C : 81                         rts
(1)    133D :
(1)    133D :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)    133D :                    ;;; @param R1 multiplicand
(1)    133D :                    ;;; @param R2 multiplier
(1)    133D :                    ;;; @return R0 result
(1)    133D :                    umul16:
(1)    133D : B6 87                      lda     R2H             ; A=high(multiplier)
(1)    133F : BE 86                      ldx     R1L             ; X=low(multiplicand)
(1)    1341 : 42                         mul                     ; X:A=low(multiplicand)*high(multiplier)
(1)    1342 : B7 83                      sta     R0H             ; high(result)=A
(1)    1344 : B6 88                      lda     R2L             ; A=low(multiplier)
(1)    1346 : BE 85                      ldx     R1H             ; X=high(multiplicand)
(1)    1348 : 42                         mul                     ; X:A=high(multiplicand)*low(multiplier)
(1)    1349 : BB 83                      add     R0H
(1)    134B : B7 83                      sta     R0H             ; high(result)+=A
(1)    134D : B6 88                      lda     R2L             ; A=low(multiplier)
(1)    134F : BE 86                      ldx     R1L             ; X=low(multiplicand)
(1)    1351 : 42                         mul                     ; X:A=result
(1)    1352 : B7 84                      sta     R0L             ; low(result)=A
(1)    1354 : 9F                         txa
(1)    1355 : BB 83                      add     R0H
(1)    1357 : B7 83                      sta     R0H             ; high(result)+=X
(1)    1359 : 81                         rts
(1)    135A :
(1)    135A :                    ;;; Multiply; result = multiplicand * multiplier
(1)    135A :                    ;;; @param R1 multiplicand
(1)    135A :                    ;;; @param R2 multiplier
(1)    135A :                    ;;; @return R0 result
(1)    135A :                    ;;; @clobber R1 R2
(1)    135A :                    mul16:
(1)    135A : B6 85                      lda     R1H
(1)    135C : B8 87                      eor     R2H
(1)    135E : B7 89                      sta     arith_work      ; save hi(multiplicand^multiplier)
(1)    1360 : B6 87                      lda     R2H             ; A=hi(multiplier)
(1)    1362 : 2A 05                      bpl     mul16_multiplicand
(1)    1364 : AE 87                      ldx     #R2
(1)    1366 : CD 12 C6                   jsr     negate_RX       ; negate multiplier
(1)    1369 :                    mul16_multiplicand:
(1)    1369 : B6 85                      lda     R1H             ; A=hi(multiplicand)
(1)    136B : 2A 05                      bpl     mul16_multiply
(1)    136D : AE 85                      ldx     #R1
(1)    136F : CD 12 C6                   jsr     negate_RX       ; negate multiplicand
(1)    1372 :                    mul16_multiply:
(1)    1372 : AD C9                      bsr     umul16          ; R0=result
(1)    1374 : B6 89                      lda     arith_work      ; A=(multiplicand^multiplier)
(1)    1376 : 2A 05                      bpl     mul16_end
(1)    1378 : AE 83                      ldx     #R0
(1)    137A : CD 12 C6                   jsr     negate_RX       ; negate result
(1)    137D :                    mul16_end:
(1)    137D : 81                         rts
(1)    137E :
(1)    137E :                    ;;; Unsigned division: dividend / divisor = quotient ... remainder
(1)    137E :                    ;;; @praram R1 dividend
(1)    137E :                    ;;; @praram R2 divisor
(1)    137E :                    ;;; @return R0 quotient
(1)    137E :                    ;;; @return R1 remainder
(1)    137E :                    ;;; @clobber R2
(1)    137E :                    udiv16:
(1)    137E : B6 87                      lda     R2H
(1)    1380 : BA 88                      ora     R2L
(1)    1382 : 27 40                      beq     udiv16_end      ; branch if R2==0
(1)    1384 : A6 01                      lda     #1              ; A=bits
(1)    1386 : B7 89                      sta     arith_work      ; bits=1
(1)    1388 : 20 06                      bra     udiv16_prep
(1)    138A :                    udiv16_prep_loop:
(1)    138A : 38 88                      lsl     R2L
(1)    138C : 39 87                      rol     R2H             ; divisor <<= 1
(1)    138E : 3C 89                      inc     arith_work      ; ++bits
(1)    1390 :                    udiv16_prep:
(1)    1390 : B6 87                      lda     R2H
(1)    1392 : 2A F6                      bpl     udiv16_prep_loop ; while msb(divisor) == 0
(1)    1394 : 3F 83                      clr     R0H
(1)    1396 : 3F 84                      clr     R0L             ; quotient=0
(1)    1398 : 20 08                      bra     udiv16_enter_loop
(1)    139A :                    udiv16_loop:
(1)    139A : 34 87                      lsr     R2H
(1)    139C : 36 88                      ror     R2L             ; divisor >>= 1
(1)    139E : 38 84                      lsl     R0L
(1)    13A0 : 39 83                      rol     R0H             ; quotient <<= 1
(1)    13A2 :                    udiv16_enter_loop:
(1)    13A2 : B6 86                      lda     R1L
(1)    13A4 : B0 88                      sub     R2L
(1)    13A6 : B7 86                      sta     R1L
(1)    13A8 : B6 85                      lda     R1H
(1)    13AA : B2 87                      sbc     R2H
(1)    13AC : B7 85                      sta     R1H             ; dividend -= divisor
(1)    13AE : 25 04                      bcs     udiv16_readd
(1)    13B0 : 3C 84                      inc     R0L             ; quotient |= 1
(1)    13B2 : 20 0C                      bra     udiv16_next
(1)    13B4 :                    udiv16_readd:
(1)    13B4 : B6 86                      lda     R1L
(1)    13B6 : BB 88                      add     R2L
(1)    13B8 : B7 86                      sta     R1L
(1)    13BA : B6 85                      lda     R1H
(1)    13BC : B9 87                      adc     R2H
(1)    13BE : B7 85                      sta     R1H             ; dividend += divisor
(1)    13C0 :                    udiv16_next:
(1)    13C0 : 3A 89                      dec     arith_work      ; --bits
(1)    13C2 : 26 D6                      bne     udiv16_loop     ; while bits != 0
(1)    13C4 :                    udiv16_end:
(1)    13C4 : 81                         rts
(1)    13C5 :
(1)    13C5 :                    ;;; Division; dividend / divisor = quotient ... remainder
(1)    13C5 :                    ;;; @param R1 dividend
(1)    13C5 :                    ;;; @param R2 divisor
(1)    13C5 :                    ;;; @return R0 quotient
(1)    13C5 :                    ;;; @return R1 remainder
(1)    13C5 :                    ;;; @clobber R2
(1)    13C5 :                    div16:
(1)    13C5 : B6 85                      lda     R1H
(1)    13C7 : B8 87                      eor     R2H
(1)    13C9 : C7 13 EC                   sta     div16_sign      ; save hi(dividend^divisor)
(1)    13CC : B6 87                      lda     R2H             ; A=hi(divisor)
(1)    13CE : 2A 05                      bpl     div16_dividend
(1)    13D0 : AE 87                      ldx     #R2
(1)    13D2 : CD 12 C6                   jsr     negate_RX       ; negate divisor
(1)    13D5 :                    div16_dividend:
(1)    13D5 : B6 85                      lda     R1H             ; A=hi(dividend)
(1)    13D7 : 2A 05                      bpl     div16_divide
(1)    13D9 : AE 85                      ldx     #R1
(1)    13DB : CD 12 C6                   jsr     negate_RX       ; negate dividend
(1)    13DE :                    div16_divide:
(1)    13DE : CD 13 7E                   jsr     udiv16          ; R0=quotient
(1)    13E1 : C6 13 EC                   lda     div16_sign      ; A=(dividend^divisor)
(1)    13E4 : 2A 05                      bpl     div16_end
(1)    13E6 : AE 83                      ldx     #R0
(1)    13E8 : CD 12 C6                   jsr     negate_RX       ; negate result
(1)    13EB :                    div16_end:
(1)    13EB : 81                         rts
(1)    13EC :                    div16_sign:
(1)    13EC :                            rmb     1
       13ED :                            include "queue.inc"
(1)    13ED :                    ;;; [queue] queue structure
(1)    13ED : =0                 queue_len:      equ     0       ; queue length
(1)    13ED : =1                 queue_size:     equ     1       ; buffer size
(1)    13ED : =2                 queue_put:      equ     2       ; queue put index
(1)    13ED : =3                 queue_get:      equ     3       ; queue get index
(1)    13ED : =4                 queue_buf:      equ     4       ; buffer start offset
(1)    13ED :
(1)    13ED :                    ;;; [queue] Initialize queue
(1)    13ED :                    ;;; @param X queue work space pointer
(1)    13ED :                    ;;; @param A queue work space size
(1)    13ED :                    ;;; @clobber A
(1)    13ED :                    queue_init:
(1)    13ED : 7F                         clr     queue_len,x
(1)    13EE : 6F 02                      clr     queue_put,x
(1)    13F0 : 6F 03                      clr     queue_get,x
(1)    13F2 : A0 04                      sub     #queue_buf
(1)    13F4 : E7 01                      sta     queue_size,x
(1)    13F6 : 81                         rts
(1)    13F7 :
(1)    13F7 :                    ;;; [queue] Add an element to queue
(1)    13F7 :                    ;;; @param X queue work space pointer
(1)    13F7 :                    ;;; @param A an element
(1)    13F7 :                    ;;; @return CC.C 0 if queue is full
(1)    13F7 :                    queue_add_X:
(1)    13F7 :                            rmb     1               ; save X
(1)    13F8 :                    queue_add_A:
(1)    13F8 :                            rmb     1               ; save X
(1)    13F9 :                    queue_add:
(1)    13F9 : C7 13 F8                   sta     queue_add_A     ; save A
(1)    13FC : F6                         lda     queue_len,x
(1)    13FD : E1 01                      cmp     queue_size,x
(1)    13FF : 24 1E                      bhs     queue_add_return ; carry is cleared
(1)    1401 : 7C                         inc     queue_len,x      ; increment queue length
(1)    1402 : E6 02                      lda     queue_put,x      ; 8 bits offset
(1)    1404 : 4C                         inca
(1)    1405 : E7 02                      sta     queue_put,x     ; update put pointer
(1)    1407 : E1 01                      cmp     queue_size,x
(1)    1409 : 25 02                      blo     queue_add_elem
(1)    140B : 6F 02                      clr     queue_put,x
(1)    140D :                    queue_add_elem:
(1)    140D : 4A                         deca                    ; restore put pointer
(1)    140E : AB 04                      add     #queue_buf
(1)    1410 : CF 13 F7                   stx     queue_add_X     ; save X
(1)    1413 : CB 13 F7                   add     queue_add_X
(1)    1416 : 97                         tax
(1)    1417 : C6 13 F8                   lda     queue_add_A
(1)    141A : F7                         sta     ,x              ; put element
(1)    141B : CE 13 F7                   ldx     queue_add_X     ; restore X
(1)    141E : 99                         sec                     ; set carry
(1)    141F :                    queue_add_return:
(1)    141F : C6 13 F8                   lda     queue_add_A     ; restore A
(1)    1422 : 81                         rts
(1)    1423 :
(1)    1423 :                    ;;; [queue] Remove an element from queue
(1)    1423 :                    ;;; @param X queue work space pointer
(1)    1423 :                    ;;; @return A an element
(1)    1423 :                    ;;; @return CC.C 0 if queue is empty
(1)    1423 :                    queue_remove_X:
(1)    1423 :                            rmb     1
(1)    1424 :                    queue_remove:
(1)    1424 : 7D                         tst     queue_len,x
(1)    1425 : 26 02                      bne     queue_remove_has_elem
(1)    1427 : 98                         clc                     ; clear carry
(1)    1428 : 81                         rts
(1)    1429 :                    queue_remove_has_elem:
(1)    1429 : 7A                         dec     queue_len,x     ; decrement queue length
(1)    142A : E6 03                      lda     queue_get,x     ; 8 bits offset
(1)    142C : 4C                         inca
(1)    142D : E7 03                      sta     queue_get,x     ; update get pointer
(1)    142F : E1 01                      cmp     queue_size,x
(1)    1431 : 25 02                      blo     queue_remove_elem
(1)    1433 : 6F 03                      clr     queue_get,x
(1)    1435 :                    queue_remove_elem:
(1)    1435 : 4A                         deca                    ; restore get pointer
(1)    1436 : AB 04                      add     #queue_buf
(1)    1438 : CF 14 23                   stx     queue_remove_X  ; save X
(1)    143B : CB 14 23                   add     queue_remove_X
(1)    143E : 97                         tax
(1)    143F : F6                         lda     ,x              ; get element
(1)    1440 : CE 14 23                   ldx     queue_remove_X  ; restore X
(1)    1443 : 99                         sec                     ; set carry
(1)    1444 :                    queue_remove_return:
(1)    1444 : 81                         rts
(1)    1445 :
(1)    1445 :                    ;;; Local Variables:
(1)    1445 :                    ;;; mode: asm
(1)    1445 :                    ;;; End:
(1)    1445 :                    ;;; vim: set ft=asm et ts=4 sw=4:
       1445 :
       1445 :                    isr_irq:
       1445 : C6 FF E0                   lda     ACIA_status
       1448 : A5 80                      bit     #IRQF_bm
       144A : 27 20                      beq     isr_irq_exit
       144C : C6 FF E0                   lda     ACIA_status
       144F : A5 01                      bit     #RDRF_bm
       1451 : 27 08                      beq     isr_irq_send
       1453 : C6 FF E1                   lda     ACIA_data       ; receive character
       1456 : AE 42                      ldx     #rx_queue
       1458 : CD 13 F9                   jsr     queue_add
       145B :                    isr_irq_send:
       145B : C6 FF E0                   lda     ACIA_status
       145E : A5 02                      bit     #TDRE_bm
       1460 : 27 0A                      beq     isr_irq_exit
       1462 : AE 52                      ldx     #tx_queue
       1464 : CD 14 24                   jsr     queue_remove
       1467 : 24 04                      bcc     isr_irq_send_empty
       1469 : C7 FF E1                   sta     ACIA_data       ; send character
       146C :                    isr_irq_exit:
       146C : 80                         rti
       146D :                    isr_irq_send_empty:
       146D : A6 94                      lda     #RX_INT_TX_NO
       146F : C7 FF E0                   sta     ACIA_control    ; disable Tx interrupt
       1472 : 80                         rti
