          0 :                            include "mc68hc05c0.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            include "mc68hc05.inc"
(2)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :                    ;;; MC68HC05
(2)       0 :                            cpu     68hc05
(2)       0 :                    ;;; Condition Code Register (CC)
(2)       0 : =1                 CC_CARRY      equ  %00000001   ; set to 1 if carry occurred
(2)       0 : =2                 CC_ZERO       equ  %00000010   ; set to 1 if result is zero
(2)       0 : =4                 CC_NEGATIVE   equ  %00000100   ; set to 1 if result is negative
(2)       0 : =8                 CC_IRQ        equ  %00001000   ; if 1, IRQ is masked
(2)       0 : =10                CC_HALF_CARRY equ  %00010000   ; if 1, decimal carry from least digit occurred
(2)       0 :                    ;;; Vector
(2)       0 : =FFFA              VEC_IRQ:        equ     $FFFA   ; External Interrupt
(2)       0 : =FFFC              VEC_SWI:        equ     $FFFC   ; Software
(2)       0 : =FFFE              VEC_RESET:      equ     $FFFE   ; Reset
(1)       0 :                    ;;; MC68HC05C0
(1)       0 :                            option  "pc-bits", 16
(1)       0 :                    ;;; Vector
(1)       0 : =FFF2              VEC_KEY:        equ     $FFF2   ; Keyboard Scan
(1)       0 : =FFF4              VEC_MFT:        equ     $FFF4   ; Multi-Function Timer
(1)       0 : =FFF6              VEC_SCI:        equ     $FFF6   ; Serial Communications Interface
(1)       0 : =FFF8              VEC_TIMER:      equ     $FFF8   ; 16-Bit Timer
(1)       0 :
(1)       0 :                    ;;; Internal Register Area
(1)       0 : =1                 PORTB:  equ     $01     ; Port B Data Register
(1)       0 : =2                 PORTC:  equ     $02     ; Port C Data Register
(1)       0 : =3                 PORTD:  equ     $03     ; Port D Data Register
(1)       0 : =5                 DDRB:   equ     $05     ; Port B Data Direction Register
(1)       0 : =6                 DDRC:   equ     $06     ; Port C Data Direction Register
(1)       0 : =7                 DDRD:   equ     $07     ; Port D Data Direction Register
(1)       0 : =8                 MFTCSR: equ     $08     ; Multi-Function Timer Control/Status Register
(1)       0 : =9                 MFTCR:  equ     $09     ; Multi-Function Timer Counter Register
(1)       0 : =A                 TCR:    equ     $0A     ; 16-Bit Timer Control Register
(1)       0 : =B                 TSR:    equ     $0B     ; 16-Bit Timer Status Register
(1)       0 : =C                 ICR:    equ     $0C     ; 16-Bit Timer Input Capture Register
(1)       0 : =E                 OCR:    equ     $0E     ; 16-Bit Timer Output Compare Register
(1)       0 : =10                CNTR:   equ     $10     ; 16-Bit Timer Counter Register
(1)       0 : =12                ACNTR:  equ     $12     ; 16-Bit Timer Alternate Counter Register
(1)       0 : =14                SCBR:   equ     $14     ; Serial Communications Baud Rate Register
(1)       0 : =6                 SCBR_SCP_gp:    equ     6 ; SCI Prescaler; 0=/1 1=/3 2=/4 3=/13
(1)       0 : =3                 SCBR_SCT_gp:    equ     3 ; SCI Transmit Baud Rate; n=1/(1<<n)
(1)       0 : =0                 SCBR_SCR_gp:    equ     0 ; SCI Receive Baud Rate;  0<=n<=7
(1)       0 : =15                SCCR1:  equ     $15     ; Serial Communications Control Register 1
(1)       0 : =7                 SCCR1_R8_bp:    equ     7 ; Receive Data Bit 8
(1)       0 : =6                 SCCR1_T8_bp:    equ     6 ; Transmit Data Bit 8
(1)       0 : =5                 SCCR1_SCKM_bp:  equ     5 ; Serial Clock Mode 0=-PB4 is GPIO
(1)       0 : =4                 SCCR1_M_bp:     equ     4 ; Mode 1=9-bit, 0=8-nit
(1)       0 : =3                 SCCR1_WAKE_bp:  equ     3 ; Wake-Up Select 1=MSB cause wake-up
(1)       0 : =2                 SCCR1_CPOL_bp:  equ     2 ; Clock Polarity
(1)       0 : =1                 SCCR1_CPHL_bp:  equ     1 ; Clock Phase
(1)       0 : =0                 SCCR1_LBCL_bp:  equ     0 ; Last Bit Clock
(1)       0 : =16                SCCR2:  equ     $16     ; Serial Communications Control Register 2
(1)       0 : =7                 SCCR2_TIE_bp:   equ     7 ; Transmit Interrupt Enable
(1)       0 : =6                 SCCR2_TCIE_bp:  equ     6 ; Transmit Complete Interrupt Enable
(1)       0 : =5                 SCCR2_RIE_bp:   equ     5 ; Receive Interrupt Enable
(1)       0 : =4                 SCCR2_ILIE_bp:  equ     4 ; Idle Line Interrupt Enable
(1)       0 : =3                 SCCR2_TE_bp:    equ     3 ; Transmit Enable
(1)       0 : =2                 SCCR2_RE_bp:    equ     2 ; Receive Enable
(1)       0 : =1                 SCCR2_RWU_bp:   equ     1 ; Receiver Wake-up
(1)       0 : =0                 SCCR2_SBK_bp:   equ     0 ; Send Break
(1)       0 : =17                SCSR:   equ     $17     ; Serial Communications Status Register
(1)       0 : =7                 SCSR_TDRE_bp    equ     7 ; Transmit Data Register Empty Flag
(1)       0 : =6                 SCSR_TC_bp:     equ     6 ; Transmit Complete Flag
(1)       0 : =5                 SCSR_RDRF_bp:   equ     5 ; Receive Data Register Full Flag
(1)       0 : =4                 SCSR_IDLE_bp:   equ     4 ; Idle Line Detected Flag
(1)       0 : =3                 SCSR_OR_bp:     equ     3 ; Overrun Error Flag
(1)       0 : =2                 SCSR_NF_bp:     equ     2 ; Noise Error Flag
(1)       0 : =1                 SCSR_FE_bp      equ     1 ; Framing Error Flag
(1)       0 : =18                SCDR:   equ     $18     ; Serial Communications Data Register
(1)       0 : =19                CNFGR:  equ     $19     ; Configuration Register
(1)       0 : =1A                EICSR:  equ     $1A     ; External Interrupt Control/Status Register
(1)       0 : =7                 EICSR_KSF_bp:   equ     7 ; Keyboard Scan Request Flag
(1)       0 : =6                 EICSR_KSEN_bp:  equ     6 ; Keyboard Scan Enable
(1)       0 : =5                 EICSR_KSA_bp:   equ     5 ; Keyboard Scan Acknowledge
(1)       0 : =4                 EICSR_KSEL_bp:  equ     4 ; Keyboard Scan Edge/Level
(1)       0 : =3                 EICSR_IRQF_bp:  equ     3 ; Interrupt Request Flag
(1)       0 : =2                 EICSR_IRQEN_bp: equ     2 ; Interrupt Request Enable
(1)       0 : =1                 EICSR_IRQA_bp:  equ     1 ; Interrupt Request Acknowledge
(1)       0 : =0                 EICSR_IRQEL_bp: equ     0 ; Interrupt Request Edge/Level
(1)       0 :
(1)       0 : =40                RAM_START:      equ     $0040   ; Internal RAM $0040-$023F
(1)       0 : =FF                STACK_TOP:      equ     $00FF   ; Stack $00FF->$0040
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =FFE0              ACIA:   equ     $FFE0
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =FFE0              ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     %11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     %00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     %00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     %00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     %00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     %00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     %00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     %00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     %00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     %00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     %00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     %00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     %00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     %00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     %01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     %00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     %00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     %01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     %01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     %10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =FFE0              ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     %00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     %00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     %00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     %00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     %00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     %00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     %01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     %10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =FFE1              ACIA_data:      equ     ACIA+1          ; Data register
          0 :
          0 : =10                rx_queue_size:  equ     16
          0 : =20                tx_queue_size:  equ     32
          0 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
          0 : =B4                RX_INT_TX_INT:  equ     WSB_8N1_gc|RIEB_bm|TCB_EI_gc
          0 :
         80 :                            org     $80
         80 :                    ;;; Working space for mandelbrot.inc
         80 : =32                F:      equ     50
         80 :                    vC:     rmb     2
         82 :                    vD:     rmb     2
         84 :                    vA:     rmb     2
         86 :                    vB:     rmb     2
         88 :                    vS:     rmb     2
         8A :                    vP:     rmb     2
         8C :                    vQ:     rmb     2
         8E :                    vT:     rmb     2
         90 :                    vY:     rmb     1
         91 :                    vX:     rmb     1
         92 :                    vI:     rmb     1
         93 :
         93 :                    ;;; Working space for arith.inc
         93 :                    R0:
         93 :                    R0H:    rmb     1
         94 :                    R0L:    rmb     1
         95 :                    R1:
         95 :                    R1H:    rmb     1
         96 :                    R1L:    rmb     1
         97 :                    R2:
         97 :                    R2H:    rmb     1
         98 :                    R2L:    rmb     1
         99 :                    arith_work:
         99 :                            rmb     1
         9A :                    SP:     rmb     1
         9B :
         9B :                    cputype:
         9B :                            rmb     1
         9C :                    save_a: rmb     1
         9D :                    save_x: rmb     1
         9E :                    rx_queue:
         9E :                            rmb     rx_queue_size
         AE :                    tx_queue:
         AE :                            rmb     tx_queue_size
         CE :
        100 :                            org     $0100
        100 :                    stack:  rmb     20
        114 :
       FFFA :                            org     VEC_IRQ
       FFFA : 14 20                      fdb     isr_irq
       FFFC :
       FFFC :                            org     VEC_SWI
       FFFC : FF FC                      fdb     VEC_SWI         ; halt to system
       FFFE :
       FFFE :                            org     VEC_RESET
       FFFE : 10 00                      fdb     initialize
      10000 :
       1000 :                            org     $1000
       1000 :                    initialize:
       1000 : AE 9E                      ldx     #rx_queue
       1002 : A6 10                      lda     #rx_queue_size
       1004 : CD 13 C8                   jsr     queue_init
       1007 : AE AE                      ldx     #tx_queue
       1009 : A6 20                      lda     #tx_queue_size
       100B : CD 13 C8                   jsr     queue_init
       100E :                            ;; initialize ACIA
       100E : A6 03                      lda     #CDS_RESET_gc   ; master reset
       1010 : C7 FF E0                   sta     ACIA_control
       1013 : A6 94                      lda     #RX_INT_TX_NO
       1015 : C7 FF E0                   sta     ACIA_control
       1018 : 9A                         cli                     ; enable IRQ
       1019 :
       1019 : 3F 9A                      clr     SP
       101B :                    loop:
       101B : CD 10 65                   jsr     mandelbrot
       101E : CD 10 2F                   jsr     newline
       1021 : 20 F8                      bra     loop
       1023 :
       1023 :                    ;;; Get character
       1023 :                    ;;; @clobber X
       1023 :                    ;;; @return A
       1023 :                    ;;; @return CC.C 0 if no char received
       1023 :                    getchar:
       1023 : AE 9E                      ldx     #rx_queue
       1025 : 9B                         sei                     ; disable IRQ
       1026 : CD 13 FF                   jsr     queue_remove
       1029 : 9A                         cli                     ; enable IRQ
       102A : 81                         rts
       102B :
       102B :                    ;;; Put character
       102B :                    ;;; @param A
       102B :                    ;;; @clobber A
       102B :                    putspace:
       102B : A6 20                      lda     #' '
       102D : 20 06                      bra     putchar
       102F :                    newline:
       102F : A6 0D                      lda     #$0D
       1031 : AD 02                      bsr     putchar
       1033 : A6 0A                      lda     #$0A
       1035 :                    putchar:
       1035 : BF 9D                      stx     save_x          ; save X
       1037 : AE AE                      ldx     #tx_queue
       1039 :                    putchar_retry:
       1039 : 9B                         sei                     ; disable IRQ
       103A : CD 13 D4                   jsr     queue_add
       103D : 9A                         cli                     ; enable IRQ
       103E : 24 F9                      bcc     putchar_retry   ; branch if queue is full
       1040 : A6 B4                      lda     #RX_INT_TX_INT  ; enable Tx interrupt
       1042 : C7 FF E0                   sta     ACIA_control
       1045 :                    putchar_exit:
       1045 : BE 9D                      ldx     save_x          ; restore X
       1047 : 81                         rts
       1048 :
       1048 :                            include "mandelbrot.inc"
(1)    1048 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    1048 :                    ;;; Print variable: "A=variable "
(1)    1048 :                    ;;; @param R1 variable
(1)    1048 :                    ;;; @param A variable letter
(1)    1048 :                    ;;; @clobber R0
(1)    1048 :                    print:
(1)    1048 : CD 10 35                   jsr     putchar         ; print variable letter
(1)    104B : A6 3D                      lda     #'='
(1)    104D : CD 10 35                   jsr     putchar         ; '='
(1)    1050 : BE 95                      ldx     R1H
(1)    1052 : B6 96                      lda     R1L
(1)    1054 : BF 93                      stx     R0H
(1)    1056 : B7 94                      sta     R0L
(1)    1058 : CD 12 65                   jsr     print_int16
(1)    105B : CC 10 2B                   jmp     putspace
(1)    105E :
(1)    105E :                    ;;; Sign extend 80bit value
(1)    105E :                    ;;; @param A variable
(1)    105E :                    ;;; @param CC condition of A
(1)    105E :                    ;;; @return X:A value
(1)    105E :                    sex_A:
(1)    105E : 2B 02                      bmi     sex_A_negative
(1)    1060 : 5F                         clrx
(1)    1061 : 81                         rts
(1)    1062 :                    sex_A_negative:
(1)    1062 : AE FF                      ldx     #-1
(1)    1064 : 81                         rts
(1)    1065 :
(1)    1065 :                    mandelbrot:
(1)    1065 : A6 F4                      lda     #-12
(1)    1067 : B7 90                      sta     vY              ; Y=-12
(1)    1069 :                    loop_y:
(1)    1069 : A6 CF                      lda     #-49
(1)    106B : B7 91                      sta     vX              ; X=-49
(1)    106D :                    loop_x:
(1)    106D : B6 91                      lda     vX
(1)    106F : CD 10 5E                   jsr     sex_A
(1)    1072 : CD 12 92                   jsr     set_R1          ; R1=X
(1)    1075 : 5F                         clrx
(1)    1076 : A6 E5                      lda     #229
(1)    1078 : CD 12 97                   jsr     set_R2          ; R2=229
(1)    107B : CD 13 1D                   jsr     mul16           ; R0=X*229
(1)    107E : CD 12 92                   jsr     set_R1
(1)    1081 : 5F                         clrx
(1)    1082 : A6 64                      lda     #100
(1)    1084 : CD 12 97                   jsr     set_R2          ; R2=100
(1)    1087 : CD 13 94                   jsr     div16           ; R0=X*229/100
(1)    108A : BF 80                      stx     vC
(1)    108C : B7 81                      sta     vC+1            ; C=X*229/100
(1)    108E : BF 84                      stx     vA
(1)    1090 : B7 85                      sta     vA+1            ; A=C
(1)    1092 : B6 90                      lda     vY
(1)    1094 : CD 10 5E                   jsr     sex_A
(1)    1097 : CD 12 92                   jsr     set_R1          ; R1=Y
(1)    109A : AE 01                      ldx     #416>>8
(1)    109C : A6 A0                      lda     #416&255
(1)    109E : CD 12 97                   jsr     set_R2          ; R2=416
(1)    10A1 : CD 13 1D                   jsr     mul16           ; R0=Y*416
(1)    10A4 : CD 12 92                   jsr     set_R1
(1)    10A7 : 5F                         clrx
(1)    10A8 : A6 64                      lda     #100
(1)    10AA : CD 12 97                   jsr     set_R2          ; R2=100
(1)    10AD : CD 13 94                   jsr     div16           ; R0=Y*416/100
(1)    10B0 : BF 82                      stx     vD
(1)    10B2 : B7 83                      sta     vD+1            ; D=Y*416/100
(1)    10B4 : BF 86                      stx     vB
(1)    10B6 : B7 87                      sta     vB+1            ; B=D
(1)    10B8 : 3F 92                      clr     vI              ; I=0
(1)    10BA :
(1)    10BA :                            ;; lda     vY              ; Y
(1)    10BA :                            ;; jsr     sex_A
(1)    10BA :                            ;; jsr     set_R1
(1)    10BA :                            ;; lda     #'Y'
(1)    10BA :                            ;; jsr     print
(1)    10BA :                            ;; lda     vX              ; X
(1)    10BA :                            ;; jsr     sex_A
(1)    10BA :                            ;; jsr     set_R1
(1)    10BA :                            ;; lda     #'X'
(1)    10BA :                            ;; jsr     print
(1)    10BA :                            ;; ldx     vC              ; C
(1)    10BA :                            ;; lda     vC+1
(1)    10BA :                            ;; jsr     set_R1
(1)    10BA :                            ;; lda     #'C'
(1)    10BA :                            ;; jsr     print
(1)    10BA :                            ;; ldx     vD              ; D
(1)    10BA :                            ;; lda     vD+1
(1)    10BA :                            ;; jsr     set_R1
(1)    10BA :                            ;; lda     #'D'
(1)    10BA :                            ;; jsr     print
(1)    10BA :                            ;; jsr     newline
(1)    10BA :
(1)    10BA :                    loop_i:
(1)    10BA : BE 86                      ldx     vB
(1)    10BC : B6 87                      lda     vB+1
(1)    10BE : CD 12 92                   jsr     set_R1          ; R1=B
(1)    10C1 : 5F                         clrx
(1)    10C2 : A6 32                      lda     #F
(1)    10C4 : CD 12 97                   jsr     set_R2          ; R2=F
(1)    10C7 : CD 13 94                   jsr     div16           ; R0=B/F
(1)    10CA : BF 8C                      stx     vQ
(1)    10CC : B7 8D                      sta     vQ+1            ; Q=B/F
(1)    10CE : CD 12 92                   jsr     set_R1          ; R1=Q
(1)    10D1 : 5F                         clrx
(1)    10D2 : A6 32                      lda     #F
(1)    10D4 : CD 12 97                   jsr     set_R2          ; R2=F
(1)    10D7 : CD 13 1D                   jsr     mul16           ; R0=Q*F
(1)    10DA : CD 12 97                   jsr     set_R2          ; R2=Q*F
(1)    10DD : BE 86                      ldx     vB
(1)    10DF : B6 87                      lda     vB+1
(1)    10E1 : CD 12 92                   jsr     set_R1          ; R1=B
(1)    10E4 : CD 12 CB                   jsr     sub16           ; R0=B-Q*F
(1)    10E7 : BF 88                      stx     vS
(1)    10E9 : B7 89                      sta     vS+1            ; S=B-Q*F
(1)    10EB : BE 84                      ldx     vA
(1)    10ED : B6 85                      lda     vA+1
(1)    10EF : CD 12 92                   jsr     set_R1          ; R1=A
(1)    10F2 : CD 12 97                   jsr     set_R2          ; R2=A
(1)    10F5 : CD 13 1D                   jsr     mul16           ; R0=A*A
(1)    10F8 : CD 12 9C                   jsr     push_XA         ; push A*A
(1)    10FB : BE 86                      ldx     vB
(1)    10FD : B6 87                      lda     vB+1
(1)    10FF : CD 12 92                   jsr     set_R1          ; R1=B
(1)    1102 : CD 12 97                   jsr     set_R2          ; R2=B
(1)    1105 : CD 13 1D                   jsr     mul16           ; R0=B*B
(1)    1108 : CD 12 97                   jsr     set_R2          ; R2=B*B
(1)    110B : CD 12 AE                   jsr     pull_XA
(1)    110E : CD 12 92                   jsr     set_R1          ; R1=A*A
(1)    1111 : CD 12 CB                   jsr     sub16           ; R0=A*A-B*B
(1)    1114 : CD 12 92                   jsr     set_R1          ; R1=A*A-B*B
(1)    1117 : 5F                         clrx
(1)    1118 : A6 32                      lda     #F
(1)    111A : CD 12 97                   jsr     set_R2          ; R2=F
(1)    111D : CD 13 94                   jsr     div16           ; R0=(A*A-B*B)/F
(1)    1120 : CD 12 92                   jsr     set_R1          ; R1=(A*A-B*B)/F
(1)    1123 : BE 80                      ldx     vC
(1)    1125 : B6 81                      lda     vC+1
(1)    1127 : CD 12 97                   jsr     set_R2          ; R2=C
(1)    112A : CD 12 BB                   jsr     add16           ; R0=(A*A-B*B)/F+C
(1)    112D : CD 12 9C                   jsr     push_XA         ; push (A*A-B*B)/F+C
(1)    1130 : BE 84                      ldx     vA
(1)    1132 : B6 85                      lda     vA+1
(1)    1134 : CD 12 92                   jsr     set_R1          ; R1=A
(1)    1137 : BE 8C                      ldx     vQ
(1)    1139 : B6 8D                      lda     vQ+1
(1)    113B : CD 12 97                   jsr     set_R2          ; R2=Q
(1)    113E : CD 13 1D                   jsr     mul16           ; R0=A*Q
(1)    1141 : CD 12 9C                   jsr     push_XA         ; push A*Q
(1)    1144 : BE 84                      ldx     vA
(1)    1146 : B6 85                      lda     vA+1
(1)    1148 : CD 12 92                   jsr     set_R1          ; R1=A
(1)    114B : BE 88                      ldx     vS
(1)    114D : B6 89                      lda     vS+1
(1)    114F : CD 12 97                   jsr     set_R2          ; R2=S
(1)    1152 : CD 13 1D                   jsr     mul16           ; R0=A*S
(1)    1155 : CD 12 92                   jsr     set_R1          ; R1=A*S
(1)    1158 : 5F                         clrx
(1)    1159 : A6 32                      lda     #F
(1)    115B : CD 12 97                   jsr     set_R2          ; R2=F
(1)    115E : CD 13 94                   jsr     div16           ; R0=A*S/F
(1)    1161 : CD 12 97                   jsr     set_R2          ; R2=A*S/F
(1)    1164 : CD 12 AE                   jsr     pull_XA         ; pull A*Q
(1)    1167 : CD 12 92                   jsr     set_R1          ; R1=A*Q
(1)    116A : CD 12 BB                   jsr     add16           ; R0=A*Q+A*S/F
(1)    116D : CD 12 92                   jsr     set_R1          ; R1=A*Q+A*S/F
(1)    1170 : CD 12 97                   jsr     set_R2          ; R2=A*Q+A*S/F
(1)    1173 : CD 12 BB                   jsr     add16           ; R0=2*(A*Q+A*S/F)
(1)    1176 : CD 12 92                   jsr     set_R1          ; R1=2*(A*Q+A*S/F)
(1)    1179 : BE 82                      ldx     vD
(1)    117B : B6 83                      lda     vD+1
(1)    117D : CD 12 97                   jsr     set_R2          ; R2=D
(1)    1180 : CD 12 BB                   jsr     add16           ; R0=2*(A*Q+A*S/F)+D
(1)    1183 : BF 86                      stx     vB
(1)    1185 : B7 87                      sta     vB+1            ; B=2*(A*Q+A*S/F)+D
(1)    1187 : CD 12 AE                   jsr     pull_XA         ; pull (A*A-B*B)/F+C
(1)    118A : BF 84                      stx     vA
(1)    118C : B7 85                      sta     vA+1            ; A=(A*A-B*B)/F+C
(1)    118E : CD 12 92                   jsr     set_R1          ; R1=A
(1)    1191 : 5F                         clrx
(1)    1192 : A6 32                      lda     #F
(1)    1194 : CD 12 97                   jsr     set_R2          ; R2=F
(1)    1197 : CD 13 94                   jsr     div16           ; R0=A/F
(1)    119A : BF 8A                      stx     vP
(1)    119C : B7 8B                      sta     vP+1            ; P=A/F
(1)    119E : CD 12 92                   jsr     set_R1
(1)    11A1 : CD 12 97                   jsr     set_R2
(1)    11A4 : CD 13 1D                   jsr     mul16           ; R0=P*P
(1)    11A7 : CD 12 9C                   jsr     push_XA         ; push P*P
(1)    11AA : BE 86                      ldx     vB
(1)    11AC : B6 87                      lda     vB+1
(1)    11AE : CD 12 92                   jsr     set_R1          ; R1=B
(1)    11B1 : 5F                         clrx
(1)    11B2 : A6 32                      lda     #F
(1)    11B4 : CD 12 97                   jsr     set_R2          ; R2=F
(1)    11B7 : CD 13 94                   jsr     div16           ; R0=B/F
(1)    11BA : BF 8C                      stx     vQ
(1)    11BC : B7 8D                      sta     vQ+1            ; Q=B/F
(1)    11BE : CD 12 92                   jsr     set_R1
(1)    11C1 : CD 12 97                   jsr     set_R2
(1)    11C4 : CD 13 1D                   jsr     mul16           ; R0=Q*Q
(1)    11C7 : CD 12 97                   jsr     set_R2          ; R2=Q*Q
(1)    11CA : CD 12 AE                   jsr     pull_XA         ; pull P*P
(1)    11CD : CD 12 92                   jsr     set_R1          ; R1=P*P
(1)    11D0 : CD 12 BB                   jsr     add16           ; R0=P*P+Q*Q
(1)    11D3 : BF 8E                      stx     vT
(1)    11D5 : B7 8F                      sta     vT+1            ; T=P*P+Q*Q
(1)    11D7 :
(1)    11D7 :                            ;; jsr     putspace
(1)    11D7 :                            ;; lda     vI              ; I
(1)    11D7 :                            ;; jsr     sex_A
(1)    11D7 :                            ;; jsr     set_R1
(1)    11D7 :                            ;; lda     #'I'
(1)    11D7 :                            ;; jsr     print
(1)    11D7 :                            ;; ldx     vA              ; A
(1)    11D7 :                            ;; lda     vA+1
(1)    11D7 :                            ;; jsr     set_R1
(1)    11D7 :                            ;; lda     #'A'
(1)    11D7 :                            ;; jsr     print
(1)    11D7 :                            ;; ldx     vB              ; B
(1)    11D7 :                            ;; lda     vB+1
(1)    11D7 :                            ;; jsr     set_R1
(1)    11D7 :                            ;; lda     #'B'
(1)    11D7 :                            ;; jsr     print
(1)    11D7 :                            ;; ldx     vP              ; P
(1)    11D7 :                            ;; lda     vP+1
(1)    11D7 :                            ;; jsr     set_R1
(1)    11D7 :                            ;; lda     #'P'
(1)    11D7 :                            ;; jsr     print
(1)    11D7 :                            ;; ldx     vQ              ; Q
(1)    11D7 :                            ;; lda     vQ+1
(1)    11D7 :                            ;; jsr     set_R1
(1)    11D7 :                            ;; lda     #'Q'
(1)    11D7 :                            ;; jsr     print
(1)    11D7 :                            ;; ldx     vT              ; T
(1)    11D7 :                            ;; lda     vT+1
(1)    11D7 :                            ;; jsr     set_R1
(1)    11D7 :                            ;; lda     #'T'
(1)    11D7 :                            ;; jsr     print
(1)    11D7 :                            ;; jsr     newline
(1)    11D7 :
(1)    11D7 : BE 8E                      ldx     vT
(1)    11D9 : B6 8F                      lda     vT+1
(1)    11DB : CD 12 97                   jsr     set_R2          ; R2=T
(1)    11DE : 5F                         clrx
(1)    11DF : A6 04                      lda     #4
(1)    11E1 : CD 12 92                   jsr     set_R1          ; R1=4
(1)    11E4 : CD 12 DB                   jsr     cmp16           ; compare 4 and Q*Q+P*P
(1)    11E7 : 2B 0F                      bmi     print_i         ; if 4<P*P+Q*Q
(1)    11E9 : 3C 92                      inc     vI              ; I+=1
(1)    11EB : B6 92                      lda     vI
(1)    11ED : A1 10                      cmp     #16
(1)    11EF : 2A 03                      bpl     print_space
(1)    11F1 : CC 10 BA                   jmp     loop_i          ; if I<16
(1)    11F4 :                    print_space:
(1)    11F4 : A6 20                      lda     #' '
(1)    11F6 : 20 0C                      bra     print_char
(1)    11F8 :                    print_i:
(1)    11F8 : B6 92                      lda     vI
(1)    11FA : A0 0A                      sub     #10
(1)    11FC : 2A 04                      bpl     print_i2       ; if I>=10
(1)    11FE : AB 3A                      add     #10+'0'
(1)    1200 : 20 02                      bra     print_char
(1)    1202 :                    print_i2:
(1)    1202 : AB 41                      add     #'A'
(1)    1204 :                    print_char:
(1)    1204 : CD 10 35                   jsr     putchar
(1)    1207 :
(1)    1207 :                            ;; sta     arith_work
(1)    1207 :                            ;; lda     #'@'
(1)    1207 :                            ;; jsr     putchar
(1)    1207 :                            ;; lda     #'='
(1)    1207 :                            ;; jsr     putchar
(1)    1207 :                            ;; lda     arith_work
(1)    1207 :                            ;; jsr     putchar
(1)    1207 :                            ;; jsr     newline
(1)    1207 :
(1)    1207 : CD 10 23                   jsr     getchar
(1)    120A : 24 04                      bcc     next_x
(1)    120C : 4D                         tsta
(1)    120D : 26 01                      bne     next_x
(1)    120F : 83                         swi                     ; halt to system
(1)    1210 :                    next_x:
(1)    1210 : 3C 91                      inc     vX              ; X+=1
(1)    1212 : B6 91                      lda     vX
(1)    1214 : A1 1E                      cmp     #30
(1)    1216 : 2A 03                      bpl     next_y
(1)    1218 : CC 10 6D                   jmp     loop_x          ; if X<30
(1)    121B :                    next_y:
(1)    121B : CD 10 2F                   jsr     newline
(1)    121E : 3C 90                      inc     vY              ; Y+=1
(1)    1220 : B6 90                      lda     vY
(1)    1222 : A1 0D                      cmp     #13
(1)    1224 : 2A 03                      bpl     mandelbrot_end
(1)    1226 : CC 10 69                   jmp     loop_y          ; if Y<13
(1)    1229 :                    mandelbrot_end:
(1)    1229 : 81                         rts
       122A :                            include "arith.inc"
(1)    122A :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    122A :                    ;;; Print unsigned 16-bit integer as decimal
(1)    122A :                    ;;; @param R0 value
(1)    122A :                    ;;; @clobber A X R0 R1 R2
(1)    122A :                    print_uint16:
(1)    122A : 5F                         clrx
(1)    122B :                    print_uint16_loop:
(1)    122B : B6 93                      lda     R0H
(1)    122D : B7 95                      sta     R1H
(1)    122F : B6 94                      lda     R0L
(1)    1231 : B7 96                      sta     R1L             ; dividend = value
(1)    1233 : BA 93                      ora     R0H
(1)    1235 : 27 13                      beq     print_uint16_zero ; branch if value == 0
(1)    1237 : 3F 97                      clr     R2H
(1)    1239 : A6 0A                      lda     #10
(1)    123B : B7 98                      sta     R2L             ; divisor=10
(1)    123D : CD 13 4D                   jsr     udiv16          ; R0=value/10
(1)    1240 : B6 96                      lda     R1L
(1)    1242 : AA 30                      ora     #'0'
(1)    1244 : D7 12 5D                   sta     print_uint16_buf,x
(1)    1247 : 5C                         incx
(1)    1248 : 20 E1                      bra     print_uint16_loop
(1)    124A :                    print_uint16_zero:
(1)    124A : 5D                         tstx
(1)    124B : 26 05                      bne     print_uint16_print
(1)    124D : A6 30                      lda     #'0'
(1)    124F : CC 10 35                   jmp     putchar
(1)    1252 :                    print_uint16_print:
(1)    1252 : 5A                         decx
(1)    1253 : D6 12 5D                   lda     print_uint16_buf,x
(1)    1256 : CD 10 35                   jsr     putchar
(1)    1259 : 5D                         tstx
(1)    125A : 26 F6                      bne     print_uint16_print
(1)    125C : 81                         rts
(1)    125D :                    print_uint16_buf:
(1)    125D :                            rmb     8
(1)    1265 :
(1)    1265 :                    ;;; Print signed 16-bit integer as decimal
(1)    1265 :                    ;;; @param R0 value
(1)    1265 :                    ;;; @clobber A X R0
(1)    1265 :                    print_int16:
(1)    1265 : BE 95                      ldx     R1H
(1)    1267 : B6 96                      lda     R1L
(1)    1269 : AD 31                      bsr     push_XA         ; push R1
(1)    126B : BE 97                      ldx     R2H
(1)    126D : B6 98                      lda     R2L
(1)    126F : AD 2B                      bsr     push_XA         ; push R2
(1)    1271 : B6 93                      lda     R0H
(1)    1273 : 2A 0E                      bpl     print_int16_print
(1)    1275 : A6 2D                      lda     #'-'
(1)    1277 : CD 10 35                   jsr     putchar
(1)    127A : B6 93                      lda     R0H
(1)    127C : 40                         nega
(1)    127D : 30 94                      neg     R0L
(1)    127F : A2 00                      sbc     #0
(1)    1281 : B7 93                      sta     R0H
(1)    1283 :                    print_int16_print:
(1)    1283 : AD A5                      bsr     print_uint16
(1)    1285 : AD 27                      bsr     pull_XA         ; pull R2
(1)    1287 : BF 97                      stx     R2H
(1)    1289 : B7 98                      sta     R2L
(1)    128B : AD 21                      bsr     pull_XA         ; pull R1
(1)    128D : BF 95                      stx     R1H
(1)    128F : B7 96                      sta     R1L
(1)    1291 : 81                         rts
(1)    1292 :
(1)    1292 :                    ;;; Set value to R1
(1)    1292 :                    ;;; @param X high(value)
(1)    1292 :                    ;;; @param A low(value)
(1)    1292 :                    set_R1:
(1)    1292 : BF 95                      stx     R1H
(1)    1294 : B7 96                      sta     R1L
(1)    1296 : 81                         rts
(1)    1297 :
(1)    1297 :                    ;;; Set value to R2
(1)    1297 :                    ;;; @param X high(value)
(1)    1297 :                    ;;; @param A low(value)
(1)    1297 :                    set_R2:
(1)    1297 : BF 97                      stx     R2H
(1)    1299 : B7 98                      sta     R2L
(1)    129B : 81                         rts
(1)    129C :
(1)    129C :                    ;;; Push X:A
(1)    129C :                    ;;; @param X:A value
(1)    129C :                    ;;; @clobber X:A
(1)    129C :                    push_XA:
(1)    129C : B7 99                      sta     arith_work      ; save A
(1)    129E : 9F                         txa
(1)    129F : BE 9A                      ldx     SP
(1)    12A1 : D7 01 00                   sta     stack,X         ; push high(value))
(1)    12A4 : B6 99                      lda     arith_work
(1)    12A6 : D7 01 01                   sta     stack+1,X       ; push low(register)
(1)    12A9 : 5C                         incx
(1)    12AA : 5C                         incx
(1)    12AB : BF 9A                      stx     SP              ; update stack pointer
(1)    12AD : 81                         rts
(1)    12AE :
(1)    12AE :                    ;;; Pull X:A
(1)    12AE :                    ;;; @return X:A value
(1)    12AE :                    pull_XA:
(1)    12AE : BE 9A                      ldx     SP
(1)    12B0 : 5A                         decx
(1)    12B1 : 5A                         decx
(1)    12B2 : BF 9A                      stx     SP              ; update stack pointer
(1)    12B4 : D6 01 01                   lda     stack+1,X       ; pull low(value)
(1)    12B7 : DE 01 00                   ldx     stack,X         ; pull high(value)
(1)    12BA : 81                         rts
(1)    12BB :
(1)    12BB :                    ;;; Addition: R0 = R1 + R2
(1)    12BB :                    ;;; @return X:A addition
(1)    12BB :                    ;;; @clobber A
(1)    12BB :                    add16:
(1)    12BB : B6 96                      lda     R1L
(1)    12BD : BB 98                      add     R2L
(1)    12BF : B7 94                      sta     R0L
(1)    12C1 : B6 95                      lda     R1H
(1)    12C3 : B9 97                      adc     R2H
(1)    12C5 : B7 93                      sta     R0H
(1)    12C7 : 97                         tax
(1)    12C8 : B6 94                      lda     R0L
(1)    12CA : 81                         rts
(1)    12CB :
(1)    12CB :                    ;;; Subtraction: R0 = R1 + R2
(1)    12CB :                    ;;; @return X:A subtraction
(1)    12CB :                    ;;; @clobber A
(1)    12CB :                    sub16:
(1)    12CB : B6 96                      lda     R1L
(1)    12CD : B0 98                      sub     R2L
(1)    12CF : B7 94                      sta     R0L
(1)    12D1 : B6 95                      lda     R1H
(1)    12D3 : B2 97                      sbc     R2H
(1)    12D5 : B7 93                      sta     R0H
(1)    12D7 : 97                         tax
(1)    12D8 : B6 94                      lda     R0L
(1)    12DA : 81                         rts
(1)    12DB :
(1)    12DB :                    ;;; Signed compare R0=sign(R1-R2)
(1)    12DB :                    ;;; @return R0=A=0;  BEQ (minuend == subtrahend)
(1)    12DB :                    ;;;         R0=A=1;  BPL (minuend > subtrahend)
(1)    12DB :                    ;;;         R0=A=-1; BMI (minuend < subtrahend)
(1)    12DB :                    ;;; @clobber A
(1)    12DB :                    cmp16:
(1)    12DB : AD EE                      bsr     sub16
(1)    12DD : B6 93                      lda     R0H
(1)    12DF : BA 94                      ora     R0L
(1)    12E1 : 27 1A                      beq     cmp16_end       ; return with R0=0
(1)    12E3 : B6 93                      lda     R0H
(1)    12E5 : B8 95                      eor     R1H
(1)    12E7 : B7 94                      sta     R0L             ; R0L=(minuend-subtrahend)^minuend
(1)    12E9 : B6 95                      lda     R1H
(1)    12EB : B8 97                      eor     R2H             ; minuend^subtrahend
(1)    12ED : B4 94                      and     R0L             ; overflow flag
(1)    12EF : B8 93                      eor     R0H
(1)    12F1 : 2B 06                      bmi     cmp16_lt
(1)    12F3 :                    cmp16_gt:
(1)    12F3 : 3F 93                      clr     R0H
(1)    12F5 : A6 01                      lda     #1
(1)    12F7 : 20 04                      bra     cmp16_end
(1)    12F9 :                    cmp16_lt:
(1)    12F9 : A6 FF                      lda     #-1
(1)    12FB : B7 93                      sta     R0H
(1)    12FD :                    cmp16_end:
(1)    12FD : B7 94                      sta     R0L
(1)    12FF : 81                         rts
(1)    1300 :
(1)    1300 :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)    1300 :                    ;;; @param R1 multiplicand
(1)    1300 :                    ;;; @param R2 multiplier
(1)    1300 :                    ;;; @return R0 result
(1)    1300 :                    umul16:
(1)    1300 : B6 97                      lda     R2H             ; A=high(multiplier)
(1)    1302 : BE 96                      ldx     R1L             ; X=low(multiplicand)
(1)    1304 : 42                         mul                     ; X:A=low(multiplicand)*high(multiplier)
(1)    1305 : B7 93                      sta     R0H             ; high(result)=A
(1)    1307 : B6 98                      lda     R2L             ; A=low(multiplier)
(1)    1309 : BE 95                      ldx     R1H             ; X=high(multiplicand)
(1)    130B : 42                         mul                     ; X:A=high(multiplicand)*low(multiplier)
(1)    130C : BB 93                      add     R0H
(1)    130E : B7 93                      sta     R0H             ; high(result)+=A
(1)    1310 : B6 98                      lda     R2L             ; A=low(multiplier)
(1)    1312 : BE 96                      ldx     R1L             ; X=low(multiplicand)
(1)    1314 : 42                         mul                     ; X:A=result
(1)    1315 : B7 94                      sta     R0L             ; low(result)=A
(1)    1317 : 9F                         txa
(1)    1318 : BB 93                      add     R0H
(1)    131A : B7 93                      sta     R0H             ; high(result)+=X
(1)    131C : 81                         rts
(1)    131D :
(1)    131D :                    ;;; Multiply; result = multiplicand * multiplier
(1)    131D :                    ;;; @param R1 multiplicand
(1)    131D :                    ;;; @param R2 multiplier
(1)    131D :                    ;;; @return R0 result
(1)    131D :                    ;;; @return X:A result
(1)    131D :                    ;;; @clobber R1 R2
(1)    131D :                    mul16:
(1)    131D : B6 95                      lda     R1H
(1)    131F : B8 97                      eor     R2H
(1)    1321 : B7 99                      sta     arith_work      ; save hi(multiplicand^multiplier)
(1)    1323 : B6 97                      lda     R2H             ; A=hi(multiplier)
(1)    1325 : 2A 07                      bpl     mul16_multiplicand
(1)    1327 : 40                         nega
(1)    1328 : 30 98                      neg     R2L
(1)    132A : A2 00                      sbc     #0
(1)    132C : B7 97                      sta     R2H             ; negate multiplier
(1)    132E :                    mul16_multiplicand:
(1)    132E : B6 95                      lda     R1H             ; A=hi(multiplicand)
(1)    1330 : 2A 07                      bpl     mul16_multiply
(1)    1332 : 40                         nega
(1)    1333 : 30 96                      neg     R1L
(1)    1335 : A2 00                      sbc     #0
(1)    1337 : B7 95                      sta     R1H             ; negate multiplicand
(1)    1339 :                    mul16_multiply:
(1)    1339 : AD C5                      bsr     umul16          ; R0=result
(1)    133B : B6 99                      lda     arith_work      ; A=(multiplicand^multiplier)
(1)    133D : 2A 09                      bpl     mul16_end
(1)    133F : B6 93                      lda     R0H
(1)    1341 : 40                         nega
(1)    1342 : 30 94                      neg     R0L
(1)    1344 : A2 00                      sbc     #0
(1)    1346 : B7 93                      sta     R0H             ; negate result
(1)    1348 :                    mul16_end:
(1)    1348 : BE 93                      ldx     R0H
(1)    134A : B6 94                      lda     R0L
(1)    134C : 81                         rts
(1)    134D :
(1)    134D :                    ;;; Unsigned division: dividend / divisor = quotient ... remainder
(1)    134D :                    ;;; @praram R1 dividend
(1)    134D :                    ;;; @praram R2 divisor
(1)    134D :                    ;;; @return R0 quotient
(1)    134D :                    ;;; @return R1 remainder
(1)    134D :                    ;;; @clobber R2
(1)    134D :                    udiv16:
(1)    134D : BF 99                      stx     arith_work
(1)    134F : B6 97                      lda     R2H
(1)    1351 : BA 98                      ora     R2L
(1)    1353 : 27 3C                      beq     udiv16_end      ; branch if R2==0
(1)    1355 : AE 01                      ldx     #1              ; X=bits
(1)    1357 : 20 05                      bra     udiv16_prep
(1)    1359 :                    udiv16_prep_loop:
(1)    1359 : 38 98                      lsl     R2L
(1)    135B : 39 97                      rol     R2H             ; divisor <<= 1
(1)    135D : 5C                         incx                    ; ++bits
(1)    135E :                    udiv16_prep:
(1)    135E : B6 97                      lda     R2H
(1)    1360 : 2A F7                      bpl     udiv16_prep_loop ; while msb(divisor) == 0
(1)    1362 : 3F 93                      clr     R0H
(1)    1364 : 3F 94                      clr     R0L             ; quotient=0
(1)    1366 : 20 08                      bra     udiv16_enter_loop
(1)    1368 :                    udiv16_loop:
(1)    1368 : 34 97                      lsr     R2H
(1)    136A : 36 98                      ror     R2L             ; divisor >>= 1
(1)    136C : 38 94                      lsl     R0L
(1)    136E : 39 93                      rol     R0H             ; quotient <<= 1
(1)    1370 :                    udiv16_enter_loop:
(1)    1370 : B6 96                      lda     R1L
(1)    1372 : B0 98                      sub     R2L
(1)    1374 : B7 96                      sta     R1L
(1)    1376 : B6 95                      lda     R1H
(1)    1378 : B2 97                      sbc     R2H
(1)    137A : B7 95                      sta     R1H             ; dividend -= divisor
(1)    137C : 25 04                      bcs     udiv16_readd
(1)    137E : 3C 94                      inc     R0L             ; quotient |= 1
(1)    1380 : 20 0C                      bra     udiv16_next
(1)    1382 :                    udiv16_readd:
(1)    1382 : B6 96                      lda     R1L
(1)    1384 : BB 98                      add     R2L
(1)    1386 : B7 96                      sta     R1L
(1)    1388 : B6 95                      lda     R1H
(1)    138A : B9 97                      adc     R2H
(1)    138C : B7 95                      sta     R1H             ; dividend += divisor
(1)    138E :                    udiv16_next:
(1)    138E : 5A                         decx                    ; --bits
(1)    138F : 26 D7                      bne     udiv16_loop     ; while bits != 0
(1)    1391 :                    udiv16_end:
(1)    1391 : BE 99                      ldx     arith_work
(1)    1393 : 81                         rts
(1)    1394 :
(1)    1394 :                    ;;; Division; dividend / divisor = quotient ... remainder
(1)    1394 :                    ;;; @param R1 dividend
(1)    1394 :                    ;;; @param R2 divisor
(1)    1394 :                    ;;; @return R0 quotient
(1)    1394 :                    ;;; @return X:A quotient
(1)    1394 :                    ;;; @return R1 remainder
(1)    1394 :                    ;;; @clobber R2
(1)    1394 :                    div16:
(1)    1394 : B6 95                      lda     R1H
(1)    1396 : B8 97                      eor     R2H
(1)    1398 : C7 13 C7                   sta     div16_sign      ; save hi(dividend^divisor)
(1)    139B : B6 97                      lda     R2H             ; A=hi(divisor)
(1)    139D : 2A 07                      bpl     div16_dividend
(1)    139F : 40                         nega
(1)    13A0 : 30 98                      neg     R2L
(1)    13A2 : A2 00                      sbc     #0
(1)    13A4 : B7 97                      sta     R2H             ; negate divisor
(1)    13A6 :                    div16_dividend:
(1)    13A6 : B6 95                      lda     R1H             ; A=hi(dividend)
(1)    13A8 : 2A 07                      bpl     div16_divide
(1)    13AA : 40                         nega
(1)    13AB : 30 96                      neg     R1L
(1)    13AD : A2 00                      sbc     #0
(1)    13AF : B7 95                      sta     R1H             ; negate dividend
(1)    13B1 :                    div16_divide:
(1)    13B1 : CD 13 4D                   jsr     udiv16          ; R0=quotient
(1)    13B4 : C6 13 C7                   lda     div16_sign      ; A=(dividend^divisor)
(1)    13B7 : 2A 09                      bpl     div16_end
(1)    13B9 : B6 93                      lda     R0H
(1)    13BB : 40                         nega
(1)    13BC : 30 94                      neg     R0L
(1)    13BE : A2 00                      sbc     #0
(1)    13C0 : B7 93                      sta     R0H             ; negate result
(1)    13C2 :                    div16_end:
(1)    13C2 : BE 93                      ldx     R0H
(1)    13C4 : B6 94                      lda     R0L
(1)    13C6 : 81                         rts
(1)    13C7 :                    div16_sign:
(1)    13C7 :                            rmb     1
       13C8 :                            include "queue.inc"
(1)    13C8 :                    ;;; [queue] queue structure
(1)    13C8 : =0                 queue_len:      equ     0       ; queue length
(1)    13C8 : =1                 queue_size:     equ     1       ; buffer size
(1)    13C8 : =2                 queue_put:      equ     2       ; queue put index
(1)    13C8 : =3                 queue_get:      equ     3       ; queue get index
(1)    13C8 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)    13C8 :
(1)    13C8 :                    ;;; [queue] Initialize queue
(1)    13C8 :                    ;;; @param X queue work space pointer
(1)    13C8 :                    ;;; @param A queue work space size
(1)    13C8 :                    ;;; @clobber A
(1)    13C8 :                    queue_init:
(1)    13C8 : 7F                         clr     queue_len,x
(1)    13C9 : 6F 02                      clr     queue_put,x
(1)    13CB : 6F 03                      clr     queue_get,x
(1)    13CD : A0 04                      sub     #queue_buf
(1)    13CF : E7 01                      sta     queue_size,x
(1)    13D1 : 81                         rts
(1)    13D2 :
(1)    13D2 :                    ;;; [queue] Add an element to queue
(1)    13D2 :                    ;;; @param X queue work space pointer
(1)    13D2 :                    ;;; @param A an element
(1)    13D2 :                    ;;; @return CC.C 0 if queue is full
(1)    13D2 :                    queue_add_X:
(1)    13D2 :                            rmb     1               ; save X
(1)    13D3 :                    queue_add_A:
(1)    13D3 :                            rmb     1               ; save X
(1)    13D4 :                    queue_add:
(1)    13D4 : C7 13 D3                   sta     queue_add_A     ; save A
(1)    13D7 : F6                         lda     queue_len,x
(1)    13D8 : E1 01                      cmp     queue_size,x
(1)    13DA : 24 1E                      bhs     queue_add_return ; carry is cleared
(1)    13DC : 7C                         inc     queue_len,x      ; increment queue length
(1)    13DD : E6 02                      lda     queue_put,x      ; 8 bits offset
(1)    13DF : 4C                         inca
(1)    13E0 : E7 02                      sta     queue_put,x     ; update put pointer
(1)    13E2 : E1 01                      cmp     queue_size,x
(1)    13E4 : 25 02                      blo     queue_add_elem
(1)    13E6 : 6F 02                      clr     queue_put,x
(1)    13E8 :                    queue_add_elem:
(1)    13E8 : 4A                         deca                    ; restore put pointer
(1)    13E9 : AB 04                      add     #queue_buf
(1)    13EB : CF 13 D2                   stx     queue_add_X     ; save X
(1)    13EE : CB 13 D2                   add     queue_add_X
(1)    13F1 : 97                         tax
(1)    13F2 : C6 13 D3                   lda     queue_add_A
(1)    13F5 : F7                         sta     ,x              ; put element
(1)    13F6 : CE 13 D2                   ldx     queue_add_X     ; restore X
(1)    13F9 : 99                         sec                     ; set carry
(1)    13FA :                    queue_add_return:
(1)    13FA : C6 13 D3                   lda     queue_add_A     ; restore A
(1)    13FD : 81                         rts
(1)    13FE :
(1)    13FE :                    ;;; [queue] Remove an element from queue
(1)    13FE :                    ;;; @param X queue work space pointer
(1)    13FE :                    ;;; @return A an element
(1)    13FE :                    ;;; @return CC.C 0 if queue is empty
(1)    13FE :                    queue_remove_X:
(1)    13FE :                            rmb     1
(1)    13FF :                    queue_remove:
(1)    13FF : 7D                         tst     queue_len,x
(1)    1400 : 26 02                      bne     queue_remove_has_elem
(1)    1402 : 98                         clc                     ; clear carry
(1)    1403 : 81                         rts
(1)    1404 :                    queue_remove_has_elem:
(1)    1404 : 7A                         dec     queue_len,x     ; decrement queue length
(1)    1405 : E6 03                      lda     queue_get,x     ; 8 bits offset
(1)    1407 : 4C                         inca
(1)    1408 : E7 03                      sta     queue_get,x     ; update get pointer
(1)    140A : E1 01                      cmp     queue_size,x
(1)    140C : 25 02                      blo     queue_remove_elem
(1)    140E : 6F 03                      clr     queue_get,x
(1)    1410 :                    queue_remove_elem:
(1)    1410 : 4A                         deca                    ; restore get pointer
(1)    1411 : AB 04                      add     #queue_buf
(1)    1413 : CF 13 FE                   stx     queue_remove_X  ; save X
(1)    1416 : CB 13 FE                   add     queue_remove_X
(1)    1419 : 97                         tax
(1)    141A : F6                         lda     ,x              ; get element
(1)    141B : CE 13 FE                   ldx     queue_remove_X  ; restore X
(1)    141E : 99                         sec                     ; set carry
(1)    141F :                    queue_remove_return:
(1)    141F : 81                         rts
(1)    1420 :
(1)    1420 :                    ;;; Local Variables:
(1)    1420 :                    ;;; mode: asm
(1)    1420 :                    ;;; End:
(1)    1420 :                    ;;; vim: set ft=asm et ts=4 sw=4:
       1420 :
       1420 :                    isr_irq:
       1420 : C6 FF E0                   lda     ACIA_status
       1423 : A5 80                      bit     #IRQF_bm
       1425 : 27 1D                      beq     isr_irq_exit
       1427 : A5 01                      bit     #RDRF_bm
       1429 : 27 08                      beq     isr_irq_send
       142B : C6 FF E1                   lda     ACIA_data       ; receive character
       142E : AE 9E                      ldx     #rx_queue
       1430 : CD 13 D4                   jsr     queue_add
       1433 :                    isr_irq_send:
       1433 : C6 FF E0                   lda     ACIA_status
       1436 : A5 02                      bit     #TDRE_bm
       1438 : 27 0A                      beq     isr_irq_exit
       143A : AE AE                      ldx     #tx_queue
       143C : CD 13 FF                   jsr     queue_remove
       143F : 24 04                      bcc     isr_irq_send_empty
       1441 : C7 FF E1                   sta     ACIA_data       ; send character
       1444 :                    isr_irq_exit:
       1444 : 80                         rti
       1445 :                    isr_irq_send_empty:
       1445 : A6 94                      lda     #RX_INT_TX_NO
       1447 : C7 FF E0                   sta     ACIA_control    ; disable Tx interrupt
       144A : 80                         rti
       144B :
       144B :                    ;;; MC68HC05 compatibility
       FFFA :                            org     $FFFA
       FFFA : 14 20                      fdb     isr_irq         ; IRQ
       FFFC : FF FC                      fdb     $FFFC           ; SWI: halt to system
       FFFE : 10 00                      fdb     initialize      ; RESET
