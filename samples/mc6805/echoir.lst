          0 :                            include "mc146805e.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            include "mc6805.inc"
(2)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :                    ;;; MC6805
(2)       0 :                            cpu     6805
(2)       0 :                    ;;; Condition Code Register (CC)
(2)       0 : =1                 CC_CARRY      equ  %00000001   ; set to 1 if carry occurred
(2)       0 : =2                 CC_ZERO       equ  %00000010   ; set to 1 if result is zero
(2)       0 : =4                 CC_NEGATIVE   equ  %00000100   ; set to 1 if result is negative
(2)       0 : =8                 CC_IRQ        equ  %00001000   ; if 1, IRQ is masked
(2)       0 : =10                CC_HALF_CARRY equ  %00010000   ; if 1, decimal carry from least digit occurred
(2)       0 :
(2)       0 :                    ;;; Internal Register Area
(2)       0 : =0                 PORTA:  equ     $00          ; $00: Port A Data Register
(2)       0 : =1                 PORTB:  equ     $01          ; $01: Port B Data Register
(2)       0 : =4                 DDRA:   equ     $04          ; $04: Port A Data Direction Register
(2)       0 : =5                 DDRB:   equ     $05          ; $05: Port B Data Direction Register
(2)       0 : =8                 TDR:    equ     $08          ; $08: Timer Data Register
(2)       0 : =9                 TCR:    equ     $09          ; $09: Timer Control Register
(2)       0 :
(2)       0 :                    ;;; Port 2 Data Register
(2)       0 :
(2)       0 :                    ;;; Timer Control Register
(2)       0 : =7                 TCR_SCALER_gm:  equ     %00000111 ; Prescaler
(2)       0 : =0                 TCR_DIV1_gc:    equ     %00000000 ; - 1/1
(2)       0 : =1                 TCR_DIV2_gc:    equ     %00000001 ; - 1/2
(2)       0 : =2                 TCR_DIV4_gc:    equ     %00000010 ; - 1/4
(2)       0 : =3                 TCR_DIV8_gc:    equ     %00000011 ; - 1/8
(2)       0 : =4                 TCR_DIV16_gc:   equ     %00000100 ; - 1/16
(2)       0 : =5                 TCR_DIV32_gc:   equ     %00000101 ; - 1/32
(2)       0 : =6                 TCR_DIV64_gc:   equ     %00000110 ; - 1/64
(2)       0 : =7                 TCR_DIV128_gc:  equ     %00000111 ; - 1/128
(2)       0 : =18                TCR_CS_gm:      equ     %00011000 ; Timer clock source
(2)       0 : =0                 TCR_AS_gc:      equ     %00000000 ; - Internal Clock (AS)
(2)       0 : =8                 TCR_AS_AND_gc:  equ     %00001000 ; - Internal Clock (AS) AND TIMER input
(2)       0 : =10                TCR_DISABLE_gc: equ     %00010000 ; - Timer input is disabled
(2)       0 : =18                TCR_TIMER_gc:   equ     %00011000 ; - TIMER input
(2)       0 : =20                TCR_TOF_bm:     equ     %00100000 ; Timer Overflow Flag
(2)       0 : =40                TCR_IM_bm:      equ     %01000000 ; Timer interrupt mask
(2)       0 : =80                TCR_IF_bm:      equ     %10000000 ; Timer interrupt request flag
(1)       0 :                    ;;; MC146805E
(1)       0 :                            cpu     146805
(1)       0 :                    ;;; Vector
(1)       0 : =1FFA              VEC_IRQ:        equ     $1FFA   ; $1FFA: Maskable Interrupt Request
(1)       0 : =1FFC              VEC_SWI:        equ     $1FFC   ; $1FFC: Software Interrupt
(1)       0 : =1FFE              VEC_RESET:      equ     $1FFE   ; $1FFE: Reset
(1)       0 :
(1)       0 : =10                RAM_START:      equ     $0010   ; Internal RAM $0010-$007F
(1)       0 : =7F                STACK_TOP:      equ     $007F   ; Stack $007F->$0010
          0 :                            cpu     6805
          0 :                            option  pc-bits,16
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =17F8              ACIA:   equ     $17F8
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =17F8              ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     %11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     %00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     %00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     %00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     %00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     %00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     %00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     %00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     %00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     %00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     %00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     %00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     %00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     %00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     %01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     %00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     %00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     %01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     %01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     %10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =17F8              ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     %00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     %00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     %00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     %00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     %00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     %00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     %01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     %10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =17F9              ACIA_data:      equ     ACIA+1          ; Data register
          0 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
          0 :
         40 :                            org     $40
         40 :                    cputype:
         40 :                            rmb     1
         41 :                    save_a: rmb     1
         42 :
         80 :                            org     $0080
         80 : =10                rx_queue_size:  equ     16
         80 :                    rx_queue:
         80 :                            rmb     rx_queue_size
         90 :
       1FFA :                            org     VEC_IRQ
       1FFA : 10 D0                      fdb     isr_irq
       1FFC :
       1FFC :                            org     VEC_SWI
       1FFC : 1F FC                      fdb     VEC_SWI         ; halt to system
       1FFE :
       1FFE :                            org     VEC_RESET
       1FFE : 10 00                      fdb     initialize
       2000 :
       1000 :                            org     $1000
       1000 :                    initialize:
       1000 :                            include "cputype.inc"
(1)    1000 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    1000 : 9C                         rsp                     ; 6805:SP=$7F. 68HC05:SP=$FF
(1)    1001 : 3F 40                      clr     cputype
(1)    1003 : 3F 7E                      clr     $7E             ; clear return address of 6805
(1)    1005 : 3F FE                      clr     $FE             ; clear return address of 68HC05
(1)    1007 : AD 32                      bsr     check_cpu
(1)    1009 : 20 37                      bra     continue
(1)    100B :                    store_ACIA_control:
(1)    100B : 3D 40                      tst     cputype
(1)    100D : 26 04                      bne     *+6
(1)    100F : C7 17 F8                   sta     ACIA_control
(1)    1012 : 81                         rts
(1)    1013 : C7 FF E0                   sta     $FFE0
(1)    1016 : 81                         rts
(1)    1017 :                    load_ACIA_status:
(1)    1017 : 3D 40                      tst     cputype
(1)    1019 : 26 04                      bne     *+6
(1)    101B : C6 17 F8                   lda     ACIA_status
(1)    101E : 81                         rts
(1)    101F : C6 FF E0                   lda     $FFE0
(1)    1022 : 81                         rts
(1)    1023 :                    load_ACIA_data:
(1)    1023 : 3D 40                      tst     cputype
(1)    1025 : 26 04                      bne     *+6
(1)    1027 : C6 17 F9                   lda     ACIA_data
(1)    102A : 81                         rts
(1)    102B : C6 FF E1                   lda     $FFE1
(1)    102E : 81                         rts
(1)    102F :                    store_ACIA_data:
(1)    102F : 3D 40                      tst     cputype
(1)    1031 : 26 04                      bne     *+6
(1)    1033 : C7 17 F9                   sta     ACIA_data
(1)    1036 : 81                         rts
(1)    1037 : C7 FF E1                   sta     $FFE1
(1)    103A : 81                         rts
(1)    103B :                    check_cpu:
(1)    103B : 3D 7E                      tst     $7E
(1)    103D : 26 02                      bne     cpu6805         ; found return address at 6805 stack
(1)    103F : 3C 40                      inc     cputype         ; 0:6805, 1:68HC05
(1)    1041 :                    cpu6805:
(1)    1041 : 81                         rts
(1)    1042 :                    continue:
       1042 : AE 80                      ldx     #rx_queue
       1044 : A6 10                      lda     #rx_queue_size
       1046 : CD 10 78                   jsr     queue_init
       1049 :                            ;; initialize ACIA
       1049 : A6 03                      lda     #CDS_RESET_gc   ; Master reset
       104B : AD BE                      bsr     store_ACIA_control
       104D : A6 94                      lda     #RX_INT_TX_NO
       104F : AD BA                      bsr     store_ACIA_control
       1051 : 9A                         cli                     ; Enable IRQ
       1052 :                    loop:
       1052 : AE 80                      ldx     #rx_queue
       1054 : 9B                         sei                     ; Disable IRQ
       1055 : CD 10 AF                   jsr     queue_remove
       1058 : 9A                         cli                     ; Enable IRQ
       1059 : 24 F7                      bcc     loop
       105B : 4D                         tsta
       105C : 27 0C                      beq     halt_to_system
       105E : AD 0B                      bsr     putchar
       1060 : A1 0D                      cmp     #$0D            ; carriage return
       1062 : 26 EE                      bne     loop
       1064 : A6 0A                      lda     #$0A            ; newline
       1066 : AD 03                      bsr     putchar
       1068 : 20 E8                      bra     loop
       106A :                    halt_to_system:
       106A : 83                         swi
       106B :
       106B :                    putchar:
       106B : B7 41                      sta     save_a
       106D :                    putchar_loop:
       106D : AD A8                      bsr     load_ACIA_status
       106F : A5 02                      bit     #TDRE_bm
       1071 : 27 FA                      beq     putchar_loop
       1073 :                    putchar_data:
       1073 : B6 41                      lda     save_a
       1075 : AD B8                      bsr     store_ACIA_data
       1077 : 81                         rts
       1078 :
       1078 :                            include "queue.inc"
(1)    1078 :                    ;;; [queue] queue structure
(1)    1078 : =0                 queue_len:      equ     0       ; queue length
(1)    1078 : =1                 queue_size:     equ     1       ; buffer size
(1)    1078 : =2                 queue_put:      equ     2       ; queue put index
(1)    1078 : =3                 queue_get:      equ     3       ; queue get index
(1)    1078 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)    1078 :
(1)    1078 :                    ;;; [queue] Initialize queue
(1)    1078 :                    ;;; @param X queue work space pointer
(1)    1078 :                    ;;; @param A queue work space size
(1)    1078 :                    ;;; @clobber A
(1)    1078 :                    queue_init:
(1)    1078 : 7F                         clr     queue_len,x
(1)    1079 : 6F 02                      clr     queue_put,x
(1)    107B : 6F 03                      clr     queue_get,x
(1)    107D : A0 04                      sub     #queue_buf
(1)    107F : E7 01                      sta     queue_size,x
(1)    1081 : 81                         rts
(1)    1082 :
(1)    1082 :                    ;;; [queue] Add an element to queue
(1)    1082 :                    ;;; @param X queue work space pointer
(1)    1082 :                    ;;; @param A an element
(1)    1082 :                    ;;; @return CC.C 0 if queue is full
(1)    1082 :                    queue_add_X:
(1)    1082 :                            rmb     1               ; save X
(1)    1083 :                    queue_add_A:
(1)    1083 :                            rmb     1               ; save X
(1)    1084 :                    queue_add:
(1)    1084 : C7 10 83                   sta     queue_add_A     ; save A
(1)    1087 : F6                         lda     queue_len,x
(1)    1088 : E1 01                      cmp     queue_size,x
(1)    108A : 24 1E                      bhs     queue_add_return ; carry is cleared
(1)    108C : 7C                         inc     queue_len,x      ; increment queue length
(1)    108D : E6 02                      lda     queue_put,x      ; 8 bits offset
(1)    108F : 4C                         inca
(1)    1090 : E7 02                      sta     queue_put,x     ; update put pointer
(1)    1092 : E1 01                      cmp     queue_size,x
(1)    1094 : 25 02                      blo     queue_add_elem
(1)    1096 : 6F 02                      clr     queue_put,x
(1)    1098 :                    queue_add_elem:
(1)    1098 : 4A                         deca                    ; restore put pointer
(1)    1099 : AB 04                      add     #queue_buf
(1)    109B : CF 10 82                   stx     queue_add_X     ; save X
(1)    109E : CB 10 82                   add     queue_add_X
(1)    10A1 : 97                         tax
(1)    10A2 : C6 10 83                   lda     queue_add_A
(1)    10A5 : F7                         sta     ,x              ; put element
(1)    10A6 : CE 10 82                   ldx     queue_add_X     ; restore X
(1)    10A9 : 99                         sec                     ; set carry
(1)    10AA :                    queue_add_return:
(1)    10AA : C6 10 83                   lda     queue_add_A     ; restore A
(1)    10AD : 81                         rts
(1)    10AE :
(1)    10AE :                    ;;; [queue] Remove an element from queue
(1)    10AE :                    ;;; @param X queue work space pointer
(1)    10AE :                    ;;; @return A an element
(1)    10AE :                    ;;; @return CC.C 0 if queue is empty
(1)    10AE :                    queue_remove_X:
(1)    10AE :                            rmb     1
(1)    10AF :                    queue_remove:
(1)    10AF : 7D                         tst     queue_len,x
(1)    10B0 : 26 02                      bne     queue_remove_has_elem
(1)    10B2 : 98                         clc                     ; clear carry
(1)    10B3 : 81                         rts
(1)    10B4 :                    queue_remove_has_elem:
(1)    10B4 : 7A                         dec     queue_len,x     ; decrement queue length
(1)    10B5 : E6 03                      lda     queue_get,x     ; 8 bits offset
(1)    10B7 : 4C                         inca
(1)    10B8 : E7 03                      sta     queue_get,x     ; update get pointer
(1)    10BA : E1 01                      cmp     queue_size,x
(1)    10BC : 25 02                      blo     queue_remove_elem
(1)    10BE : 6F 03                      clr     queue_get,x
(1)    10C0 :                    queue_remove_elem:
(1)    10C0 : 4A                         deca                    ; restore get pointer
(1)    10C1 : AB 04                      add     #queue_buf
(1)    10C3 : CF 10 AE                   stx     queue_remove_X  ; save X
(1)    10C6 : CB 10 AE                   add     queue_remove_X
(1)    10C9 : 97                         tax
(1)    10CA : F6                         lda     ,x              ; get element
(1)    10CB : CE 10 AE                   ldx     queue_remove_X  ; restore X
(1)    10CE : 99                         sec                     ; set carry
(1)    10CF :                    queue_remove_return:
(1)    10CF : 81                         rts
(1)    10D0 :
(1)    10D0 :                    ;;; Local Variables:
(1)    10D0 :                    ;;; mode: asm
(1)    10D0 :                    ;;; End:
(1)    10D0 :                    ;;; vim: set ft=asm et ts=4 sw=4:
       10D0 :
       10D0 :                    isr_irq:
       10D0 : CD 10 17                   jsr     load_ACIA_status
       10D3 : A5 80                      bit     #IRQF_bm
       10D5 : 27 0C                      beq     isr_irq_return
       10D7 :                    isr_irq_receive:
       10D7 : A5 01                      bit     #RDRF_bm
       10D9 : 27 08                      beq     isr_irq_recv_end
       10DB : CD 10 23                   jsr     load_ACIA_data
       10DE : AE 80                      ldx     #rx_queue
       10E0 : CD 10 84                   jsr     queue_add
       10E3 :                    isr_irq_recv_end:
       10E3 :                    isr_irq_return:
       10E3 : 80                         rti
       10E4 :
       10E4 :                    ;;; MC68HC05 compatibility
       FFFA :                            org     $FFFA
       FFFA : 10 D0                      fdb     isr_irq         ; IRQ
       FFFC : FF FC                      fdb     $FFFC           ; SWI: halt to system
       FFFE : 10 00                      fdb     initialize      ; RESET
