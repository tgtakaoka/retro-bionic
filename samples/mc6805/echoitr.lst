          0 :                            include "mc146805e.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            include "mc6805.inc"
(2)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :
(2)       0 :                    ;;; MC6805
(2)       0 :                    ;;; Condition Code Register (CC)
(2)       0 : =1                 CC_CARRY      equ  %00000001   ; set to 1 if carry occurred
(2)       0 : =2                 CC_ZERO       equ  %00000010   ; set to 1 if result is zero
(2)       0 : =4                 CC_NEGATIVE   equ  %00000100   ; set to 1 if result is negative
(2)       0 : =8                 CC_IRQ        equ  %00001000   ; if 1, IRQ is masked
(2)       0 : =10                CC_HALF_CARRY equ  %00010000   ; if 1, decimal carry from least digit occurred
(2)       0 :
(2)       0 :                    ;;; Internal Register Area
(2)       0 : =0                 PORTA:  equ     $00          ; $00: Port A Data Register
(2)       0 : =1                 PORTB:  equ     $01          ; $01: Port B Data Register
(2)       0 : =4                 DDRA:   equ     $04          ; $04: Port A Data Direction Register
(2)       0 : =5                 DDRB:   equ     $05          ; $05: Port B Data Direction Register
(2)       0 : =8                 TDR:    equ     $08          ; $08: Timer Data Register
(2)       0 : =9                 TCR:    equ     $09          ; $09: Timer Control Register
(2)       0 :
(2)       0 :                    ;;; Port 2 Data Register
(2)       0 :
(2)       0 :                    ;;; Timer Control Register
(2)       0 : =7                 TCR_SCALER_gm:  equ     %00000111 ; Prescaler
(2)       0 : =0                 TCR_DIV1_gc:    equ     %00000000 ; - 1/1
(2)       0 : =1                 TCR_DIV2_gc:    equ     %00000001 ; - 1/2
(2)       0 : =2                 TCR_DIV4_gc:    equ     %00000010 ; - 1/4
(2)       0 : =3                 TCR_DIV8_gc:    equ     %00000011 ; - 1/8
(2)       0 : =4                 TCR_DIV16_gc:   equ     %00000100 ; - 1/16
(2)       0 : =5                 TCR_DIV32_gc:   equ     %00000101 ; - 1/32
(2)       0 : =6                 TCR_DIV64_gc:   equ     %00000110 ; - 1/64
(2)       0 : =7                 TCR_DIV128_gc:  equ     %00000111 ; - 1/128
(2)       0 : =18                TCR_CS_gm:      equ     %00011000 ; Timer clock source
(2)       0 : =0                 TCR_AS_gc:      equ     %00000000 ; - Internal Clock (AS)
(2)       0 : =8                 TCR_AS_AND_gc:  equ     %00001000 ; - Internal Clock (AS) AND TIMER input
(2)       0 : =10                TCR_DISABLE_gc: equ     %00010000 ; - Timer input is disabled
(2)       0 : =18                TCR_TIMER_gc:   equ     %00011000 ; - TIMER input
(2)       0 : =20                TCR_TOF_bm:     equ     %00100000 ; Timer Overflow Flag
(2)       0 : =40                TCR_IM_bm:      equ     %01000000 ; Timer interrupt mask
(2)       0 : =80                TCR_IF_bm:      equ     %10000000 ; Timer interrupt request flag
(1)       0 :                    ;;; MC146805E
(1)       0 :                    ;;; Vector
(1)       0 : =1FFA              VEC_IRQ:        equ     $1FFA   ; $1FFA: Maskable Interrupt Request
(1)       0 : =1FFC              VEC_SWI:        equ     $1FFC   ; $1FFC: Software Interrupt
(1)       0 : =1FFE              VEC_RESET:      equ     $1FFE   ; $1FFE: Reset
(1)       0 :
(1)       0 : =10                RAM_START:      equ     $0010   ; Internal RAM $0010-$007F
(1)       0 : =7F                STACK_TOP:      equ     $007F   ; Stack $007F->$0010
          0 :                            cpu     mc146805
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =17F8              ACIA:   equ     $17F8
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =17F8              ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     %11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     %00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     %00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     %00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     %00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     %00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     %00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     %00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     %00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     %00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     %00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     %00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     %00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     %00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     %01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     %00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     %00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     %01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     %01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     %10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =17F8              ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     %00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     %00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     %00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     %00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     %00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     %00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     %01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     %10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =17F9              ACIA_data:      equ     ACIA+1          ; Data register
          0 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
          0 : =B4                RX_INT_TX_INT:  equ     WSB_8N1_gc|RIEB_bm|TCB_EI_gc
          0 :
         10 :                            org     RAM_START
         10 :                    save_a: rmb     1
         11 :                    save_x: rmb     1
         12 :
         80 :                            org     $0080
         80 : =10                rx_queue_size:  equ     16
         80 :                    rx_queue:
         80 :                            rmb     rx_queue_size
         90 : =20                tx_queue_size:  equ     32
         90 :                    tx_queue:
         90 :                            rmb     tx_queue_size
         B0 :
       1FFA :                            org     VEC_IRQ
       1FFA : 01 F8                      fdb     isr_irq
       1FFC :
       1FFC :                            org     VEC_SWI
       1FFC : 1F FC                      fdb     VEC_SWI         ; halt to system
       1FFE :
       1FFE :                            org     VEC_RESET
       1FFE : 01 00                      fdb     initialize
       2000 :
        100 :                            org     $0100
        100 :                    initialize:
        100 : AE 80                      ldx     #rx_queue
        102 : A6 10                      lda     #rx_queue_size
        104 : CD 01 A0                   jsr     queue_init
        107 : AE 90                      ldx     #tx_queue
        109 : A6 20                      lda     #tx_queue_size
        10B : CD 01 A0                   jsr     queue_init
        10E :                            ;; initialize ACIA
        10E : A6 03                      lda     #CDS_RESET_gc   ; master reset
        110 : C7 17 F8                   sta     ACIA_control
        113 : A6 94                      lda     #RX_INT_TX_NO
        115 : C7 17 F8                   sta     ACIA_control
        118 : 9A                         cli                     ; enable IRQ
        119 : 20 01                      bra     loop
        11B :
        11B :                    wait:
        11B : 8F                         wait
        11C :                    loop:
        11C : AD 67                      bsr     getchar
        11E : 24 FB                      bcc     wait
        120 : B7 10                      sta     save_a
        122 : 27 16                      beq     halt_to_system
        124 : AD 67                      bsr     putchar         ; echo
        126 : A6 20                      lda     #' '            ; space
        128 : AD 63                      bsr     putchar
        12A : B6 10                      lda     save_a
        12C : AD 15                      bsr     put_hex8        ; print in hex
        12E : A6 20                      lda     #' '            ; space
        130 : AD 5B                      bsr     putchar
        132 : B6 10                      lda     save_a
        134 : AD 2F                      bsr     put_bin8        ; print in binary
        136 : AD 03                      bsr     newline
        138 : 20 E2                      bra     loop
        13A :                    halt_to_system:
        13A : 83                         swi
        13B :
        13B :                    ;;; Put newline
        13B :                    ;;; @clobber A
        13B :                    newline:
        13B : A6 0D                      lda     #$0D
        13D : AD 4E                      bsr     putchar
        13F : A6 0A                      lda     #$0A
        141 : 20 4A                      bra     putchar
        143 :
        143 :                    ;;; Print uint8_t in hex
        143 :                    ;;; @param A(save_a) uint8_t value to be printed in hex.
        143 :                    put_hex8:
        143 : B7 10                      sta     save_a
        145 : A6 30                      lda     #'0'
        147 : AD 44                      bsr     putchar
        149 : A6 78                      lda     #'x'
        14B : AD 40                      bsr     putchar
        14D : B6 10                      lda     save_a
        14F : 44                         lsra
        150 : 44                         lsra
        151 : 44                         lsra
        152 : 44                         lsra
        153 : AD 02                      bsr     put_hex4
        155 : B6 10                      lda     save_a
        157 :                    put_hex4:
        157 : A4 0F                      and     #$0f
        159 : A1 0A                      cmp     #10
        15B : 25 04                      blo     put_hex8_dec
        15D : AB 37                      add     #'A'-10
        15F : 20 2C                      bra     putchar
        161 :                    put_hex8_dec:
        161 : AB 30                      add     #'0'
        163 : 20 28                      bra     putchar
        165 :
        165 :                    ;;; Print uint8_t in binary
        165 :                    ;;; @param A(save_a) uint8_t value to be printed in binary.
        165 :                    put_bin8:
        165 : B7 10                      sta     save_a
        167 : A6 30                      lda     #'0'
        169 : AD 22                      bsr     putchar
        16B : A6 62                      lda     #'b'
        16D : AD 1E                      bsr     putchar
        16F : AD 05                      bsr     put_bin4
        171 : AD 03                      bsr     put_bin4
        173 : B6 10                      lda     save_a
        175 : 81                         rts
        176 :                    put_bin4:
        176 : AD 00                      bsr     put_bin2
        178 :                    put_bin2:
        178 : AD 00                      bsr     put_bin1
        17A :                    put_bin1:
        17A : A6 30                      lda     #'0'
        17C : 38 10                      lsl     save_a
        17E : 24 0D                      bcc     putchar
        180 : 3C 10                      inc     save_a          ; rotate save_a
        182 : 4C                         inca
        183 : 20 08                      bra     putchar
        185 :
        185 :                    ;;; Get character
        185 :                    ;;; @clobber X
        185 :                    ;;; @return A
        185 :                    ;;; @return CC.C 0 if no char received
        185 :                    getchar:
        185 : AE 80                      ldx     #rx_queue
        187 : 9B                         sei                     ; disable IRQ
        188 : CD 01 D7                   jsr     queue_remove
        18B : 9A                         cli                     ; enable IRQ
        18C : 81                         rts
        18D :
        18D :                    ;;; Put character
        18D :                    ;;; @param A
        18D :                    ;;; @clobber A
        18D :                    putchar:
        18D : BF 11                      stx     save_x          ; save X
        18F : AE 90                      ldx     #tx_queue
        191 :                    putchar_retry:
        191 : 9B                         sei                     ; disable IRQ
        192 : CD 01 AC                   jsr     queue_add
        195 : 9A                         cli                     ; enable IRQ
        196 : 24 F9                      bcc     putchar_retry   ; branch if queue is full
        198 : A6 B4                      lda     #RX_INT_TX_INT  ; enable Tx interrupt
        19A : C7 17 F8                   sta     ACIA_control
        19D :                    putchar_exit:
        19D : BE 11                      ldx     save_x          ; restore X
        19F : 81                         rts
        1A0 :
        1A0 :                            include "queue.inc"
(1)     1A0 :                    ;;; [queue] queue structure
(1)     1A0 : =0                 queue_len:      equ     0       ; queue length
(1)     1A0 : =1                 queue_size:     equ     1       ; buffer size
(1)     1A0 : =2                 queue_put:      equ     2       ; queue put index
(1)     1A0 : =3                 queue_get:      equ     3       ; queue get index
(1)     1A0 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     1A0 :
(1)     1A0 :                    ;;; [queue] Initialize queue
(1)     1A0 :                    ;;; @param X queue work space pointer
(1)     1A0 :                    ;;; @param A queue work space size
(1)     1A0 :                    ;;; @clobber A
(1)     1A0 :                    queue_init:
(1)     1A0 : 7F                         clr     queue_len,x
(1)     1A1 : 6F 02                      clr     queue_put,x
(1)     1A3 : 6F 03                      clr     queue_get,x
(1)     1A5 : A0 04                      sub     #queue_buf
(1)     1A7 : E7 01                      sta     queue_size,x
(1)     1A9 : 81                         rts
(1)     1AA :
(1)     1AA :                    ;;; [queue] Add an element to queue
(1)     1AA :                    ;;; @param X queue work space pointer
(1)     1AA :                    ;;; @param A an element
(1)     1AA :                    ;;; @return CC.C 0 if queue is full
(1)     1AA :                    queue_add_X:
(1)     1AA :                            rmb     1               ; save X
(1)     1AB :                    queue_add_A:
(1)     1AB :                            rmb     1               ; save X
(1)     1AC :                    queue_add:
(1)     1AC : C7 01 AB                   sta     queue_add_A     ; save A
(1)     1AF : F6                         lda     queue_len,x
(1)     1B0 : E1 01                      cmp     queue_size,x
(1)     1B2 : 24 1E                      bhs     queue_add_return ; carry is cleared
(1)     1B4 : 7C                         inc     queue_len,x      ; increment queue length
(1)     1B5 : E6 02                      lda     queue_put,x      ; 8 bits offset
(1)     1B7 : 4C                         inca
(1)     1B8 : E7 02                      sta     queue_put,x     ; update put pointer
(1)     1BA : E1 01                      cmp     queue_size,x
(1)     1BC : 25 02                      blo     queue_add_elem
(1)     1BE : 6F 02                      clr     queue_put,x
(1)     1C0 :                    queue_add_elem:
(1)     1C0 : 4A                         deca                    ; restore put pointer
(1)     1C1 : AB 04                      add     #queue_buf
(1)     1C3 : CF 01 AA                   stx     queue_add_X     ; save X
(1)     1C6 : CB 01 AA                   add     queue_add_X
(1)     1C9 : 97                         tax
(1)     1CA : C6 01 AB                   lda     queue_add_A
(1)     1CD : F7                         sta     ,x              ; put element
(1)     1CE : CE 01 AA                   ldx     queue_add_X     ; restore X
(1)     1D1 : 99                         sec                     ; set carry
(1)     1D2 :                    queue_add_return:
(1)     1D2 : C6 01 AB                   lda     queue_add_A     ; restore A
(1)     1D5 : 81                         rts
(1)     1D6 :
(1)     1D6 :                    ;;; [queue] Remove an element from queue
(1)     1D6 :                    ;;; @param X queue work space pointer
(1)     1D6 :                    ;;; @return A an element
(1)     1D6 :                    ;;; @return CC.C 0 if queue is empty
(1)     1D6 :                    queue_remove_X:
(1)     1D6 :                            rmb     1
(1)     1D7 :                    queue_remove:
(1)     1D7 : 7D                         tst     queue_len,x
(1)     1D8 : 26 02                      bne     queue_remove_has_elem
(1)     1DA : 98                         clc                     ; clear carry
(1)     1DB : 81                         rts
(1)     1DC :                    queue_remove_has_elem:
(1)     1DC : 7A                         dec     queue_len,x     ; decrement queue length
(1)     1DD : E6 03                      lda     queue_get,x     ; 8 bits offset
(1)     1DF : 4C                         inca
(1)     1E0 : E7 03                      sta     queue_get,x     ; update get pointer
(1)     1E2 : E1 01                      cmp     queue_size,x
(1)     1E4 : 25 02                      blo     queue_remove_elem
(1)     1E6 : 6F 03                      clr     queue_get,x
(1)     1E8 :                    queue_remove_elem:
(1)     1E8 : 4A                         deca                    ; restore get pointer
(1)     1E9 : AB 04                      add     #queue_buf
(1)     1EB : CF 01 D6                   stx     queue_remove_X  ; save X
(1)     1EE : CB 01 D6                   add     queue_remove_X
(1)     1F1 : 97                         tax
(1)     1F2 : F6                         lda     ,x              ; get element
(1)     1F3 : CE 01 D6                   ldx     queue_remove_X  ; restore X
(1)     1F6 : 99                         sec                     ; set carry
(1)     1F7 :                    queue_remove_return:
(1)     1F7 : 81                         rts
(1)     1F8 :
(1)     1F8 :                    ;;; Local Variables:
(1)     1F8 :                    ;;; mode: asm
(1)     1F8 :                    ;;; End:
(1)     1F8 :                    ;;; vim: set ft=asm et ts=4 sw=4:
        1F8 :
        1F8 :                    isr_irq:
        1F8 : C6 17 F8                   lda     ACIA_status
        1FB : A5 80                      bit     #IRQF_bm
        1FD : 27 20                      beq     isr_irq_exit
        1FF : C6 17 F8                   lda     ACIA_status
        202 : A5 01                      bit     #RDRF_bm
        204 : 27 08                      beq     isr_irq_send
        206 : C6 17 F9                   lda     ACIA_data       ; receive character
        209 : AE 80                      ldx     #rx_queue
        20B : CD 01 AC                   jsr     queue_add
        20E :                    isr_irq_send:
        20E : C6 17 F8                   lda     ACIA_status
        211 : A5 02                      bit     #TDRE_bm
        213 : 27 0A                      beq     isr_irq_exit
        215 : AE 90                      ldx     #tx_queue
        217 : CD 01 D7                   jsr     queue_remove
        21A : 24 04                      bcc     isr_irq_send_empty
        21C : C7 17 F9                   sta     ACIA_data       ; send character
        21F :                    isr_irq_exit:
        21F : 80                         rti
        220 :                    isr_irq_send_empty:
        220 : A6 94                      lda     #RX_INT_TX_NO
        222 : C7 17 F8                   sta     ACIA_control    ; disable Tx interrupt
        225 : 80                         rti
