          0 :                            include "mc146805e.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            include "mc6805.inc"
(2)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :                    ;;; MC6805
(2)       0 :                            cpu     6805
(2)       0 :                    ;;; Condition Code Register (CC)
(2)       0 : =1                 CC_CARRY      equ  %00000001   ; set to 1 if carry occurred
(2)       0 : =2                 CC_ZERO       equ  %00000010   ; set to 1 if result is zero
(2)       0 : =4                 CC_NEGATIVE   equ  %00000100   ; set to 1 if result is negative
(2)       0 : =8                 CC_IRQ        equ  %00001000   ; if 1, IRQ is masked
(2)       0 : =10                CC_HALF_CARRY equ  %00010000   ; if 1, decimal carry from least digit occurred
(2)       0 :
(2)       0 :                    ;;; Internal Register Area
(2)       0 : =0                 PORTA:  equ     $00          ; $00: Port A Data Register
(2)       0 : =1                 PORTB:  equ     $01          ; $01: Port B Data Register
(2)       0 : =4                 DDRA:   equ     $04          ; $04: Port A Data Direction Register
(2)       0 : =5                 DDRB:   equ     $05          ; $05: Port B Data Direction Register
(2)       0 : =8                 TDR:    equ     $08          ; $08: Timer Data Register
(2)       0 : =9                 TCR:    equ     $09          ; $09: Timer Control Register
(2)       0 :
(2)       0 :                    ;;; Port 2 Data Register
(2)       0 :
(2)       0 :                    ;;; Timer Control Register
(2)       0 : =7                 TCR_SCALER_gm:  equ     %00000111 ; Prescaler
(2)       0 : =0                 TCR_DIV1_gc:    equ     %00000000 ; - 1/1
(2)       0 : =1                 TCR_DIV2_gc:    equ     %00000001 ; - 1/2
(2)       0 : =2                 TCR_DIV4_gc:    equ     %00000010 ; - 1/4
(2)       0 : =3                 TCR_DIV8_gc:    equ     %00000011 ; - 1/8
(2)       0 : =4                 TCR_DIV16_gc:   equ     %00000100 ; - 1/16
(2)       0 : =5                 TCR_DIV32_gc:   equ     %00000101 ; - 1/32
(2)       0 : =6                 TCR_DIV64_gc:   equ     %00000110 ; - 1/64
(2)       0 : =7                 TCR_DIV128_gc:  equ     %00000111 ; - 1/128
(2)       0 : =18                TCR_CS_gm:      equ     %00011000 ; Timer clock source
(2)       0 : =0                 TCR_AS_gc:      equ     %00000000 ; - Internal Clock (AS)
(2)       0 : =8                 TCR_AS_AND_gc:  equ     %00001000 ; - Internal Clock (AS) AND TIMER input
(2)       0 : =10                TCR_DISABLE_gc: equ     %00010000 ; - Timer input is disabled
(2)       0 : =18                TCR_TIMER_gc:   equ     %00011000 ; - TIMER input
(2)       0 : =20                TCR_TOF_bm:     equ     %00100000 ; Timer Overflow Flag
(2)       0 : =40                TCR_IM_bm:      equ     %01000000 ; Timer interrupt mask
(2)       0 : =80                TCR_IF_bm:      equ     %10000000 ; Timer interrupt request flag
(1)       0 :                    ;;; MC146805E
(1)       0 :                            cpu     146805
(1)       0 :                    ;;; Vector
(1)       0 : =1FFA              VEC_IRQ:        equ     $1FFA   ; $1FFA: Maskable Interrupt Request
(1)       0 : =1FFC              VEC_SWI:        equ     $1FFC   ; $1FFC: Software Interrupt
(1)       0 : =1FFE              VEC_RESET:      equ     $1FFE   ; $1FFE: Reset
(1)       0 :
(1)       0 : =10                RAM_START:      equ     $0010   ; Internal RAM $0010-$007F
(1)       0 : =7F                STACK_TOP:      equ     $007F   ; Stack $007F->$0010
          0 :                            cpu     6805
          0 :                            option  pc-bits,16
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =17F8              ACIA:   equ     $17F8
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =17F8              ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     %11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     %00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     %00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     %00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     %00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     %00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     %00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     %00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     %00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     %00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     %00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     %00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     %00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     %00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     %01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     %00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     %00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     %01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     %01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     %10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =17F8              ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     %00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     %00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     %00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     %00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     %00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     %00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     %01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     %10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =17F9              ACIA_data:      equ     ACIA+1          ; Data register
          0 :
         40 :                            org     $40
         40 :                    cputype:
         40 :                            rmb     1
         41 :                    R0:
         41 :                    R0H:    rmb     1
         42 :                    R0L:    rmb     1
         43 :                    R1:
         43 :                    R1H:    rmb     1
         44 :                    R1L:    rmb     1
         45 :                    R2:
         45 :                    R2H:    rmb     1
         46 :                    R2L:    rmb     1
         47 :                    arith_work:
         47 :                            rmb     1
         48 :                    SP:     rmb     1
         49 :
        100 :                            org     $0100
        100 :                    stack:  rmb     20
        114 :
       1FFC :                            org     VEC_SWI
       1FFC : 1F FC                      fdb     VEC_SWI         ; for halt to system
       1FFE :
       1FFE :                            org     VEC_RESET
       1FFE : 10 00                      fdb     initialize
       2000 :
       1000 :                            org     $1000
       1000 :                    initialize:
       1000 :                            include "cputype.inc"
(1)    1000 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    1000 : 9C                         rsp                     ; 6805:SP=$7F. 68HC05:SP=$FF
(1)    1001 : 3F 40                      clr     cputype
(1)    1003 : 3F 7E                      clr     $7E             ; clear return address of 6805
(1)    1005 : 3F FE                      clr     $FE             ; clear return address of 68HC05
(1)    1007 : AD 32                      bsr     check_cpu
(1)    1009 : 20 37                      bra     continue
(1)    100B :                    store_ACIA_control:
(1)    100B : 3D 40                      tst     cputype
(1)    100D : 26 04                      bne     *+6
(1)    100F : C7 17 F8                   sta     ACIA_control
(1)    1012 : 81                         rts
(1)    1013 : C7 FF E0                   sta     $FFE0
(1)    1016 : 81                         rts
(1)    1017 :                    load_ACIA_status:
(1)    1017 : 3D 40                      tst     cputype
(1)    1019 : 26 04                      bne     *+6
(1)    101B : C6 17 F8                   lda     ACIA_status
(1)    101E : 81                         rts
(1)    101F : C6 FF E0                   lda     $FFE0
(1)    1022 : 81                         rts
(1)    1023 :                    load_ACIA_data:
(1)    1023 : 3D 40                      tst     cputype
(1)    1025 : 26 04                      bne     *+6
(1)    1027 : C6 17 F9                   lda     ACIA_data
(1)    102A : 81                         rts
(1)    102B : C6 FF E1                   lda     $FFE1
(1)    102E : 81                         rts
(1)    102F :                    store_ACIA_data:
(1)    102F : 3D 40                      tst     cputype
(1)    1031 : 26 04                      bne     *+6
(1)    1033 : C7 17 F9                   sta     ACIA_data
(1)    1036 : 81                         rts
(1)    1037 : C7 FF E1                   sta     $FFE1
(1)    103A : 81                         rts
(1)    103B :                    check_cpu:
(1)    103B : 3D 7E                      tst     $7E
(1)    103D : 26 02                      bne     cpu6805         ; found return address at 6805 stack
(1)    103F : 3C 40                      inc     cputype         ; 0:6805, 1:68HC05
(1)    1041 :                    cpu6805:
(1)    1041 : 81                         rts
(1)    1042 :                    continue:
       1042 : A6 03                      lda     #CDS_RESET_gc   ; Master reset
       1044 : AD C5                      bsr     store_ACIA_control
       1046 : A6 14                      lda     #WSB_8N1_gc     ; 8 bits + No Parity + 1 Stop Bits
       1048 :                                                    ; Transmit, Receive interrupts disabled
       1048 : AD C1                      bsr     store_ACIA_control
       104A :
       104A : 3F 48                      clr     SP
       104C : CD 10 BC                   jsr     arith
       104F : 83                         swi                     ; halt to stop
       1050 :
       1050 :                    ;;; Print out char
       1050 :                    ;;; @param A char
       1050 :                    ;;; @clobber A
       1050 :                    putspace:
       1050 : A6 20                      lda     #' '
       1052 : 20 06                      bra     putchar
       1054 :                    newline:
       1054 : A6 0D                      lda     #$0D
       1056 : AD 02                      bsr     putchar
       1058 : A6 0A                      lda     #$0A
       105A :                    putchar:
       105A : C7 10 69                   sta     putchar_a
       105D :                    putchar_loop:
       105D : AD B8                      bsr     load_ACIA_status
       105F : A5 02                      bit     #TDRE_bm
       1061 : 27 FA                      beq     putchar_loop
       1063 :                    putchar_data:
       1063 : C6 10 69                   lda     putchar_a
       1066 : AD C7                      bsr     store_ACIA_data
       1068 : 81                         rts
       1069 :                    putchar_a:
       1069 :                            rmb     1
       106A :
       106A :                    ;;; Print "R1 op R2"
       106A :                    ;;; @params A op letter
       106A :                    ;;; @clobber R2 R3 R4
       106A :                    expr:
       106A : C7 10 8C                   sta     expr_op
       106D : BE 43                      ldx     R1H
       106F : B6 44                      lda     R1L
       1071 : BF 41                      stx     R0H
       1073 : B7 42                      sta     R0L             ; R0=R1
       1075 : CD 13 6E                   jsr     print_int16     ; print R1
       1078 : AD D6                      bsr     putspace
       107A : C6 10 8C                   lda     expr_op
       107D : AD DB                      bsr     putchar         ; print op
       107F : AD CF                      bsr     putspace
       1081 : BE 45                      ldx     R2H
       1083 : B6 46                      lda     R2L
       1085 : BF 41                      stx     R0H
       1087 : B7 42                      sta     R0L             ; R0=R2
       1089 : CC 13 6E                   jmp     print_int16     ; print R2
       108C :                    expr_op:
       108C :                            rmb     1
       108D :
       108D :                    ;;; Print " = R0\n"
       108D :                    ;;; @clobber R0 R1 R2
       108D :                    answer:
       108D : CD 10 50                   jsr     putspace
       1090 : A6 3D                      lda     #'='
       1092 : CD 10 5A                   jsr     putchar
       1095 : CD 10 50                   jsr     putspace
       1098 : CD 13 6E                   jsr     print_int16     ; print R0
       109B : CC 10 54                   jmp     newline
       109E :
       109E :                    ;;; Print "R1 rel R2"
       109E :                    ;;; @clobber R0
       109E :                    comp:
       109E : CD 13 E4                   jsr     cmp16
       10A1 : B6 42                      lda     R0L
       10A3 : 27 0C                      beq     comp_eq
       10A5 : 2B 0E                      bmi     comp_lt
       10A7 : 2A 04                      bpl     comp_gt
       10A9 : A6 3F                      lda     #'?'
       10AB : 20 0A                      bra     comp_out
       10AD :                    comp_gt:
       10AD : A6 3E                      lda     #'>'
       10AF : 20 06                      bra     comp_out
       10B1 :                    comp_eq:
       10B1 : A6 3D                      lda     #'='
       10B3 : 20 02                      bra     comp_out
       10B5 :                    comp_lt:
       10B5 : A6 3C                      lda     #'<'
       10B7 :                    comp_out:
       10B7 : AD B1                      bsr     expr
       10B9 : CC 10 54                   jmp     newline
       10BC :
       10BC :                    arith:
       10BC : AE 46                      ldx     #18000>>8
       10BE : A6 50                      lda     #18000&255
       10C0 : CD 13 9B                   jsr     set_R1
       10C3 : AE 6D                      ldx     #28000>>8
       10C5 : A6 60                      lda     #28000&255
       10C7 : CD 13 A0                   jsr     set_R2
       10CA : A6 2B                      lda     #'+'
       10CC : CD 10 6A                   jsr     expr
       10CF : CD 13 C4                   jsr     add16           ; R0=R1+R2
       10D2 : CD 10 8D                   jsr     answer          ; -19536
       10D5 :
       10D5 : AE 46                      ldx     #18000>>8
       10D7 : A6 50                      lda     #18000&255
       10D9 : CD 13 9B                   jsr     set_R1
       10DC : AE B9                      ldx     #(-18000)>>8
       10DE : A6 B0                      lda     #(-18000)&255
       10E0 : CD 13 A0                   jsr     set_R2
       10E3 : A6 2B                      lda     #'+'
       10E5 : CD 10 6A                   jsr     expr
       10E8 : CD 13 C4                   jsr     add16           ; R0=R1+R2
       10EB : CD 10 8D                   jsr     answer          ; 0
       10EE :
       10EE : AE B9                      ldx     #(-18000)>>8
       10F0 : A6 B0                      lda     #(-18000)&255
       10F2 : CD 13 9B                   jsr     set_R1
       10F5 : AE B9                      ldx     #(-18000)>>8
       10F7 : A6 B0                      lda     #(-18000)&255
       10F9 : CD 13 A0                   jsr     set_R2
       10FC : A6 2B                      lda     #'+'
       10FE : CD 10 6A                   jsr     expr
       1101 : CD 13 C4                   jsr     add16           ; R0=R1+R2
       1104 : CD 10 8D                   jsr     answer          ; 29536
       1107 :
       1107 : AE B9                      ldx     #(-18000)>>8
       1109 : A6 B0                      lda     #(-18000)&255
       110B : CD 13 9B                   jsr     set_R1
       110E : AE 92                      ldx     #(-28000)>>8
       1110 : A6 A0                      lda     #(-28000)&255
       1112 : CD 13 A0                   jsr     set_R2
       1115 : A6 2D                      lda     #'-'
       1117 : CD 10 6A                   jsr     expr
       111A : CD 13 D4                   jsr     sub16           ; R0=R1-R2
       111D : CD 10 8D                   jsr     answer          ; -19536
       1120 :
       1120 : AE 46                      ldx     #18000>>8
       1122 : A6 50                      lda     #18000&255
       1124 : CD 13 9B                   jsr     set_R1
       1127 : AE B9                      ldx     #(-18000)>>8
       1129 : A6 B0                      lda     #(-18000)&255
       112B : CD 13 A0                   jsr     set_R2
       112E : A6 2D                      lda     #'-'
       1130 : CD 10 6A                   jsr     expr
       1133 : CD 13 D4                   jsr     sub16           ; R0=R1-R2
       1136 : CD 10 8D                   jsr     answer          ; 29536
       1139 :
       1139 : AE 92                      ldx     #(-28000)>>8
       113B : A6 A0                      lda     #(-28000)&255
       113D : CD 13 9B                   jsr     set_R1
       1140 : AE B9                      ldx     #(-18000)>>8
       1142 : A6 B0                      lda     #(-18000)&255
       1144 : CD 13 A0                   jsr     set_R2
       1147 : A6 2D                      lda     #'-'
       1149 : CD 10 6A                   jsr     expr
       114C : CD 13 D4                   jsr     sub16           ; R0=R1-R2
       114F : CD 10 8D                   jsr     answer          ; -10000
       1152 :
       1152 : AE 00                      ldx     #100>>8
       1154 : A6 64                      lda     #100&255
       1156 : CD 13 9B                   jsr     set_R1
       1159 : AE 01                      ldx     #300>>8
       115B : A6 2C                      lda     #300&255
       115D : CD 13 A0                   jsr     set_R2
       1160 : A6 2A                      lda     #'*'
       1162 : CD 10 6A                   jsr     expr
       1165 : CD 14 2C                   jsr     mul16           ; R0=R1*R2
       1168 : CD 10 8D                   jsr     answer          ; 30000
       116B :
       116B : AE 00                      ldx     #200>>8
       116D : A6 C8                      lda     #200&255
       116F : CD 13 9B                   jsr     set_R1
       1172 : AE 00                      ldx     #100>>8
       1174 : A6 64                      lda     #100&255
       1176 : CD 13 A0                   jsr     set_R2
       1179 : A6 2A                      lda     #'*'
       117B : CD 10 6A                   jsr     expr
       117E : CD 14 2C                   jsr     mul16           ; R0=R1*R2
       1181 : CD 10 8D                   jsr     answer          ; 20000
       1184 :
       1184 : AE 01                      ldx     #300>>8
       1186 : A6 2C                      lda     #300&255
       1188 : CD 13 9B                   jsr     set_R1
       118B : AE FF                      ldx     #(-200)>>8
       118D : A6 38                      lda     #(-200)&255
       118F : CD 13 A0                   jsr     set_R2
       1192 : A6 2A                      lda     #'*'
       1194 : CD 10 6A                   jsr     expr
       1197 : CD 14 2C                   jsr     mul16           ; R0=R1*R2
       119A : CD 10 8D                   jsr     answer          ; 5536
       119D :
       119D : AE 00                      ldx     #100>>8
       119F : A6 64                      lda     #100&255
       11A1 : CD 13 9B                   jsr     set_R1
       11A4 : AE FE                      ldx     #(-300)>>8
       11A6 : A6 D4                      lda     #(-300)&255
       11A8 : CD 13 A0                   jsr     set_R2
       11AB : A6 2A                      lda     #'*'
       11AD : CD 10 6A                   jsr     expr
       11B0 : CD 14 2C                   jsr     mul16           ; R0=R1*R2
       11B3 : CD 10 8D                   jsr     answer          ; -30000
       11B6 :
       11B6 : AE FF                      ldx     #(-200)>>8
       11B8 : A6 38                      lda     #(-200)&255
       11BA : CD 13 9B                   jsr     set_R1
       11BD : AE FF                      ldx     #(-100)>>8
       11BF : A6 9C                      lda     #(-100)&255
       11C1 : CD 13 A0                   jsr     set_R2
       11C4 : A6 2A                      lda     #'*'
       11C6 : CD 10 6A                   jsr     expr
       11C9 : CD 14 2C                   jsr     mul16           ; R0=R1*R2
       11CC : CD 10 8D                   jsr     answer          ; 20000
       11CF :
       11CF : AE 75                      ldx     #30000>>8
       11D1 : A6 30                      lda     #30000&255
       11D3 : CD 13 9B                   jsr     set_R1
       11D6 : AE 00                      ldx     #100>>8
       11D8 : A6 64                      lda     #100&255
       11DA : CD 13 A0                   jsr     set_R2
       11DD : A6 2F                      lda     #'/'
       11DF : CD 10 6A                   jsr     expr
       11E2 : CD 14 A3                   jsr     div16           ; R0=R1/R2
       11E5 : CD 10 8D                   jsr     answer          ; 30
       11E8 :
       11E8 : AE FF                      ldx     #(-200)>>8
       11EA : A6 38                      lda     #(-200)&255
       11EC : CD 13 9B                   jsr     set_R1
       11EF : AE 00                      ldx     #100>>8
       11F1 : A6 64                      lda     #100&255
       11F3 : CD 13 A0                   jsr     set_R2
       11F6 : A6 2F                      lda     #'/'
       11F8 : CD 10 6A                   jsr     expr
       11FB : CD 14 A3                   jsr     div16           ; R0=R1/R2
       11FE : CD 10 8D                   jsr     answer          ; -2
       1201 :
       1201 : AE 8A                      ldx     #(-30000)>>8
       1203 : A6 D0                      lda     #(-30000)&255
       1205 : CD 13 9B                   jsr     set_R1
       1208 : AE FF                      ldx     #(-200)>>8
       120A : A6 38                      lda     #(-200)&255
       120C : CD 13 A0                   jsr     set_R2
       120F : A6 2F                      lda     #'/'
       1211 : CD 10 6A                   jsr     expr
       1214 : CD 14 A3                   jsr     div16           ; R0=R1/R2
       1217 : CD 10 8D                   jsr     answer          ; 150
       121A :
       121A : AE 8A                      ldx     #(-30000)>>8
       121C : A6 D0                      lda     #(-30000)&255
       121E : CD 13 9B                   jsr     set_R1
       1221 : AE 00                      ldx     #78>>8
       1223 : A6 4E                      lda     #78&255
       1225 : CD 13 A0                   jsr     set_R2
       1228 : A6 2F                      lda     #'/'
       122A : CD 10 6A                   jsr     expr
       122D : CD 14 A3                   jsr     div16           ; R0=R1/R2
       1230 : CD 10 8D                   jsr     answer          ; -384
       1233 :
       1233 : AE 13                      ldx     #5000>>8
       1235 : A6 88                      lda     #5000&255
       1237 : CD 13 9B                   jsr     set_R1
       123A : AE 0F                      ldx     #4000>>8
       123C : A6 A0                      lda     #4000&255
       123E : CD 13 A0                   jsr     set_R2
       1241 : CD 10 9E                   jsr     comp
       1244 :
       1244 : AE 13                      ldx     #5000>>8
       1246 : A6 88                      lda     #5000&255
       1248 : CD 13 9B                   jsr     set_R1
       124B : AE 13                      ldx     #5000>>8
       124D : A6 88                      lda     #5000&255
       124F : CD 13 A0                   jsr     set_R2
       1252 : CD 10 9E                   jsr     comp
       1255 :
       1255 : AE 0F                      ldx     #4000>>8
       1257 : A6 A0                      lda     #4000&255
       1259 : CD 13 9B                   jsr     set_R1
       125C : AE 13                      ldx     #5000>>8
       125E : A6 88                      lda     #5000&255
       1260 : CD 13 A0                   jsr     set_R2
       1263 : CD 10 9E                   jsr     comp
       1266 :
       1266 : AE EC                      ldx     #(-5000)>>8
       1268 : A6 78                      lda     #(-5000)&255
       126A : CD 13 9B                   jsr     set_R1
       126D : AE F0                      ldx     #(-4000)>>8
       126F : A6 60                      lda     #(-4000)&255
       1271 : CD 13 A0                   jsr     set_R2
       1274 : CD 10 9E                   jsr     comp
       1277 :
       1277 : AE EC                      ldx     #(-5000)>>8
       1279 : A6 78                      lda     #(-5000)&255
       127B : CD 13 9B                   jsr     set_R1
       127E : AE EC                      ldx     #(-5000)>>8
       1280 : A6 78                      lda     #(-5000)&255
       1282 : CD 13 A0                   jsr     set_R2
       1285 : CD 10 9E                   jsr     comp
       1288 :
       1288 : AE F0                      ldx     #(-4000)>>8
       128A : A6 60                      lda     #(-4000)&255
       128C : CD 13 9B                   jsr     set_R1
       128F : AE EC                      ldx     #(-5000)>>8
       1291 : A6 78                      lda     #(-5000)&255
       1293 : CD 13 A0                   jsr     set_R2
       1296 : CD 10 9E                   jsr     comp
       1299 :
       1299 : AE 7F                      ldx     #32700>>8
       129B : A6 BC                      lda     #32700&255
       129D : CD 13 9B                   jsr     set_R1
       12A0 : AE 7F                      ldx     #32600>>8
       12A2 : A6 58                      lda     #32600&255
       12A4 : CD 13 A0                   jsr     set_R2
       12A7 : CD 10 9E                   jsr     comp
       12AA :
       12AA : AE 7F                      ldx     #32700>>8
       12AC : A6 BC                      lda     #32700&255
       12AE : CD 13 9B                   jsr     set_R1
       12B1 : AE 7F                      ldx     #32700>>8
       12B3 : A6 BC                      lda     #32700&255
       12B5 : CD 13 A0                   jsr     set_R2
       12B8 : CD 10 9E                   jsr     comp
       12BB :
       12BB : AE 7F                      ldx     #32600>>8
       12BD : A6 58                      lda     #32600&255
       12BF : CD 13 9B                   jsr     set_R1
       12C2 : AE 7F                      ldx     #32700>>8
       12C4 : A6 BC                      lda     #32700&255
       12C6 : CD 13 A0                   jsr     set_R2
       12C9 : CD 10 9E                   jsr     comp
       12CC :
       12CC : AE 80                      ldx     #(-32700)>>8
       12CE : A6 44                      lda     #(-32700)&255
       12D0 : CD 13 9B                   jsr     set_R1
       12D3 : AE 80                      ldx     #(-32600)>>8
       12D5 : A6 A8                      lda     #(-32600)&255
       12D7 : CD 13 A0                   jsr     set_R2
       12DA : CD 10 9E                   jsr     comp
       12DD :
       12DD : AE 80                      ldx     #(-32700)>>8
       12DF : A6 44                      lda     #(-32700)&255
       12E1 : CD 13 9B                   jsr     set_R1
       12E4 : AE 80                      ldx     #(-32700)>>8
       12E6 : A6 44                      lda     #(-32700)&255
       12E8 : CD 13 A0                   jsr     set_R2
       12EB : CD 10 9E                   jsr     comp
       12EE :
       12EE : AE 80                      ldx     #(-32600)>>8
       12F0 : A6 A8                      lda     #(-32600)&255
       12F2 : CD 13 9B                   jsr     set_R1
       12F5 : AE 80                      ldx     #(-32700)>>8
       12F7 : A6 44                      lda     #(-32700)&255
       12F9 : CD 13 A0                   jsr     set_R2
       12FC : CD 10 9E                   jsr     comp
       12FF :
       12FF : AE 46                      ldx     #18000>>8
       1301 : A6 50                      lda     #18000&255
       1303 : CD 13 9B                   jsr     set_R1
       1306 : AE 92                      ldx     #(-28000)>>8
       1308 : A6 A0                      lda     #(-28000)&255
       130A : CD 13 A0                   jsr     set_R2
       130D : CD 10 9E                   jsr     comp
       1310 :
       1310 : AE 92                      ldx     #(-28000)>>8
       1312 : A6 A0                      lda     #(-28000)&255
       1314 : CD 13 9B                   jsr     set_R1
       1317 : AE 92                      ldx     #(-28000)>>8
       1319 : A6 A0                      lda     #(-28000)&255
       131B : CD 13 A0                   jsr     set_R2
       131E : CD 10 9E                   jsr     comp
       1321 :
       1321 : AE 92                      ldx     #(-28000)>>8
       1323 : A6 A0                      lda     #(-28000)&255
       1325 : CD 13 9B                   jsr     set_R1
       1328 : AE 46                      ldx     #18000>>8
       132A : A6 50                      lda     #18000&255
       132C : CD 13 A0                   jsr     set_R2
       132F : CD 10 9E                   jsr     comp
       1332 : 81                         rts
       1333 :
       1333 :                            include "arith.inc"
(1)    1333 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    1333 :                    ;;; Print unsigned 16-bit integer as decimal
(1)    1333 :                    ;;; @param R0 value
(1)    1333 :                    ;;; @clobber A X R0 R1 R2
(1)    1333 :                    print_uint16:
(1)    1333 : 5F                         clrx
(1)    1334 :                    print_uint16_loop:
(1)    1334 : B6 41                      lda     R0H
(1)    1336 : B7 43                      sta     R1H
(1)    1338 : B6 42                      lda     R0L
(1)    133A : B7 44                      sta     R1L             ; dividend = value
(1)    133C : BA 41                      ora     R0H
(1)    133E : 27 13                      beq     print_uint16_zero ; branch if value == 0
(1)    1340 : 3F 45                      clr     R2H
(1)    1342 : A6 0A                      lda     #10
(1)    1344 : B7 46                      sta     R2L             ; divisor=10
(1)    1346 : CD 14 5C                   jsr     udiv16          ; R0=value/10
(1)    1349 : B6 44                      lda     R1L
(1)    134B : AA 30                      ora     #'0'
(1)    134D : D7 13 66                   sta     print_uint16_buf,x
(1)    1350 : 5C                         incx
(1)    1351 : 20 E1                      bra     print_uint16_loop
(1)    1353 :                    print_uint16_zero:
(1)    1353 : 5D                         tstx
(1)    1354 : 26 05                      bne     print_uint16_print
(1)    1356 : A6 30                      lda     #'0'
(1)    1358 : CC 10 5A                   jmp     putchar
(1)    135B :                    print_uint16_print:
(1)    135B : 5A                         decx
(1)    135C : D6 13 66                   lda     print_uint16_buf,x
(1)    135F : CD 10 5A                   jsr     putchar
(1)    1362 : 5D                         tstx
(1)    1363 : 26 F6                      bne     print_uint16_print
(1)    1365 : 81                         rts
(1)    1366 :                    print_uint16_buf:
(1)    1366 :                            rmb     8
(1)    136E :
(1)    136E :                    ;;; Print signed 16-bit integer as decimal
(1)    136E :                    ;;; @param R0 value
(1)    136E :                    ;;; @clobber A X R0
(1)    136E :                    print_int16:
(1)    136E : BE 43                      ldx     R1H
(1)    1370 : B6 44                      lda     R1L
(1)    1372 : AD 31                      bsr     push_XA         ; push R1
(1)    1374 : BE 45                      ldx     R2H
(1)    1376 : B6 46                      lda     R2L
(1)    1378 : AD 2B                      bsr     push_XA         ; push R2
(1)    137A : B6 41                      lda     R0H
(1)    137C : 2A 0E                      bpl     print_int16_print
(1)    137E : A6 2D                      lda     #'-'
(1)    1380 : CD 10 5A                   jsr     putchar
(1)    1383 : B6 41                      lda     R0H
(1)    1385 : 40                         nega
(1)    1386 : 30 42                      neg     R0L
(1)    1388 : A2 00                      sbc     #0
(1)    138A : B7 41                      sta     R0H
(1)    138C :                    print_int16_print:
(1)    138C : AD A5                      bsr     print_uint16
(1)    138E : AD 27                      bsr     pull_XA         ; pull R2
(1)    1390 : BF 45                      stx     R2H
(1)    1392 : B7 46                      sta     R2L
(1)    1394 : AD 21                      bsr     pull_XA         ; pull R1
(1)    1396 : BF 43                      stx     R1H
(1)    1398 : B7 44                      sta     R1L
(1)    139A : 81                         rts
(1)    139B :
(1)    139B :                    ;;; Set value to R1
(1)    139B :                    ;;; @param X high(value)
(1)    139B :                    ;;; @param A low(value)
(1)    139B :                    set_R1:
(1)    139B : BF 43                      stx     R1H
(1)    139D : B7 44                      sta     R1L
(1)    139F : 81                         rts
(1)    13A0 :
(1)    13A0 :                    ;;; Set value to R2
(1)    13A0 :                    ;;; @param X high(value)
(1)    13A0 :                    ;;; @param A low(value)
(1)    13A0 :                    set_R2:
(1)    13A0 : BF 45                      stx     R2H
(1)    13A2 : B7 46                      sta     R2L
(1)    13A4 : 81                         rts
(1)    13A5 :
(1)    13A5 :                    ;;; Push X:A
(1)    13A5 :                    ;;; @param X:A value
(1)    13A5 :                    ;;; @clobber X:A
(1)    13A5 :                    push_XA:
(1)    13A5 : B7 47                      sta     arith_work      ; save A
(1)    13A7 : 9F                         txa
(1)    13A8 : BE 48                      ldx     SP
(1)    13AA : D7 01 00                   sta     stack,X         ; push high(value))
(1)    13AD : B6 47                      lda     arith_work
(1)    13AF : D7 01 01                   sta     stack+1,X       ; push low(register)
(1)    13B2 : 5C                         incx
(1)    13B3 : 5C                         incx
(1)    13B4 : BF 48                      stx     SP              ; update stack pointer
(1)    13B6 : 81                         rts
(1)    13B7 :
(1)    13B7 :                    ;;; Pull X:A
(1)    13B7 :                    ;;; @return X:A value
(1)    13B7 :                    pull_XA:
(1)    13B7 : BE 48                      ldx     SP
(1)    13B9 : 5A                         decx
(1)    13BA : 5A                         decx
(1)    13BB : BF 48                      stx     SP              ; update stack pointer
(1)    13BD : D6 01 01                   lda     stack+1,X       ; pull low(value)
(1)    13C0 : DE 01 00                   ldx     stack,X         ; pull high(value)
(1)    13C3 : 81                         rts
(1)    13C4 :
(1)    13C4 :                    ;;; Addition: R0 = R1 + R2
(1)    13C4 :                    ;;; @return X:A addition
(1)    13C4 :                    ;;; @clobber A
(1)    13C4 :                    add16:
(1)    13C4 : B6 44                      lda     R1L
(1)    13C6 : BB 46                      add     R2L
(1)    13C8 : B7 42                      sta     R0L
(1)    13CA : B6 43                      lda     R1H
(1)    13CC : B9 45                      adc     R2H
(1)    13CE : B7 41                      sta     R0H
(1)    13D0 : 97                         tax
(1)    13D1 : B6 42                      lda     R0L
(1)    13D3 : 81                         rts
(1)    13D4 :
(1)    13D4 :                    ;;; Subtraction: R0 = R1 + R2
(1)    13D4 :                    ;;; @return X:A subtraction
(1)    13D4 :                    ;;; @clobber A
(1)    13D4 :                    sub16:
(1)    13D4 : B6 44                      lda     R1L
(1)    13D6 : B0 46                      sub     R2L
(1)    13D8 : B7 42                      sta     R0L
(1)    13DA : B6 43                      lda     R1H
(1)    13DC : B2 45                      sbc     R2H
(1)    13DE : B7 41                      sta     R0H
(1)    13E0 : 97                         tax
(1)    13E1 : B6 42                      lda     R0L
(1)    13E3 : 81                         rts
(1)    13E4 :
(1)    13E4 :                    ;;; Signed compare R0=sign(R1-R2)
(1)    13E4 :                    ;;; @return R0=A=0;  BEQ (minuend == subtrahend)
(1)    13E4 :                    ;;;         R0=A=1;  BPL (minuend > subtrahend)
(1)    13E4 :                    ;;;         R0=A=-1; BMI (minuend < subtrahend)
(1)    13E4 :                    ;;; @clobber A
(1)    13E4 :                    cmp16:
(1)    13E4 : AD EE                      bsr     sub16
(1)    13E6 : B6 41                      lda     R0H
(1)    13E8 : BA 42                      ora     R0L
(1)    13EA : 27 1A                      beq     cmp16_end       ; return with R0=0
(1)    13EC : B6 41                      lda     R0H
(1)    13EE : B8 43                      eor     R1H
(1)    13F0 : B7 42                      sta     R0L             ; R0L=(minuend-subtrahend)^minuend
(1)    13F2 : B6 43                      lda     R1H
(1)    13F4 : B8 45                      eor     R2H             ; minuend^subtrahend
(1)    13F6 : B4 42                      and     R0L             ; overflow flag
(1)    13F8 : B8 41                      eor     R0H
(1)    13FA : 2B 06                      bmi     cmp16_lt
(1)    13FC :                    cmp16_gt:
(1)    13FC : 3F 41                      clr     R0H
(1)    13FE : A6 01                      lda     #1
(1)    1400 : 20 04                      bra     cmp16_end
(1)    1402 :                    cmp16_lt:
(1)    1402 : A6 FF                      lda     #-1
(1)    1404 : B7 41                      sta     R0H
(1)    1406 :                    cmp16_end:
(1)    1406 : B7 42                      sta     R0L
(1)    1408 : 81                         rts
(1)    1409 :
(1)    1409 :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)    1409 :                    ;;; @param R1 multiplicand
(1)    1409 :                    ;;; @param R2 multiplier
(1)    1409 :                    ;;; @return R0 result
(1)    1409 :                    ;;; @clobber R0 R1 R2
(1)    1409 :                    umul16:
(1)    1409 : 3F 41                      clr     R0H
(1)    140B : 3F 42                      clr     R0L
(1)    140D : 20 16                      bra     umul16_check
(1)    140F :                    umul16_loop:
(1)    140F : 34 45                      lsr     R2H
(1)    1411 : 36 46                      ror     R2L             ; multiplier >>=1
(1)    1413 : 24 0C                      bcc     umul16_next     ; if lsb(multiplier) == 0
(1)    1415 : B6 44                      lda     R1L
(1)    1417 : BB 42                      add     R0L
(1)    1419 : B7 42                      sta     R0L
(1)    141B : B6 43                      lda     R1H
(1)    141D : B9 41                      adc     R0H
(1)    141F : B7 41                      sta     R0H             ; result += multiplicand
(1)    1421 :                    umul16_next:
(1)    1421 : 38 44                      lsl     R1L
(1)    1423 : 39 43                      rol     R1H             ; multiplicand <<= 1
(1)    1425 :                    umul16_check:
(1)    1425 : B6 45                      lda     R2H
(1)    1427 : BA 46                      ora     R2L
(1)    1429 : 26 E4                      bne     umul16_loop     ; while multiplier != 0
(1)    142B :                    umul16_end:
(1)    142B : 81                         rts
(1)    142C :
(1)    142C :                    ;;; Multiply; result = multiplicand * multiplier
(1)    142C :                    ;;; @param R1 multiplicand
(1)    142C :                    ;;; @param R2 multiplier
(1)    142C :                    ;;; @return R0 result
(1)    142C :                    ;;; @return X:A result
(1)    142C :                    ;;; @clobber R1 R2
(1)    142C :                    mul16:
(1)    142C : B6 43                      lda     R1H
(1)    142E : B8 45                      eor     R2H
(1)    1430 : B7 47                      sta     arith_work      ; save hi(multiplicand^multiplier)
(1)    1432 : B6 45                      lda     R2H             ; A=hi(multiplier)
(1)    1434 : 2A 07                      bpl     mul16_multiplicand
(1)    1436 : 40                         nega
(1)    1437 : 30 46                      neg     R2L
(1)    1439 : A2 00                      sbc     #0
(1)    143B : B7 45                      sta     R2H             ; negate multiplier
(1)    143D :                    mul16_multiplicand:
(1)    143D : B6 43                      lda     R1H             ; A=hi(multiplicand)
(1)    143F : 2A 07                      bpl     mul16_multiply
(1)    1441 : 40                         nega
(1)    1442 : 30 44                      neg     R1L
(1)    1444 : A2 00                      sbc     #0
(1)    1446 : B7 43                      sta     R1H             ; negate multiplicand
(1)    1448 :                    mul16_multiply:
(1)    1448 : AD BF                      bsr     umul16          ; R0=result
(1)    144A : B6 47                      lda     arith_work      ; A=(multiplicand^multiplier)
(1)    144C : 2A 09                      bpl     mul16_end
(1)    144E : B6 41                      lda     R0H
(1)    1450 : 40                         nega
(1)    1451 : 30 42                      neg     R0L
(1)    1453 : A2 00                      sbc     #0
(1)    1455 : B7 41                      sta     R0H             ; negate result
(1)    1457 :                    mul16_end:
(1)    1457 : BE 41                      ldx     R0H
(1)    1459 : B6 42                      lda     R0L
(1)    145B : 81                         rts
(1)    145C :
(1)    145C :                    ;;; Unsigned division: dividend / divisor = quotient ... remainder
(1)    145C :                    ;;; @praram R1 dividend
(1)    145C :                    ;;; @praram R2 divisor
(1)    145C :                    ;;; @return R0 quotient
(1)    145C :                    ;;; @return R1 remainder
(1)    145C :                    ;;; @clobber R2
(1)    145C :                    udiv16:
(1)    145C : BF 47                      stx     arith_work
(1)    145E : B6 45                      lda     R2H
(1)    1460 : BA 46                      ora     R2L
(1)    1462 : 27 3C                      beq     udiv16_end      ; branch if R2==0
(1)    1464 : AE 01                      ldx     #1              ; X=bits
(1)    1466 : 20 05                      bra     udiv16_prep
(1)    1468 :                    udiv16_prep_loop:
(1)    1468 : 38 46                      lsl     R2L
(1)    146A : 39 45                      rol     R2H             ; divisor <<= 1
(1)    146C : 5C                         incx                    ; ++bits
(1)    146D :                    udiv16_prep:
(1)    146D : B6 45                      lda     R2H
(1)    146F : 2A F7                      bpl     udiv16_prep_loop ; while msb(divisor) == 0
(1)    1471 : 3F 41                      clr     R0H
(1)    1473 : 3F 42                      clr     R0L             ; quotient=0
(1)    1475 : 20 08                      bra     udiv16_enter_loop
(1)    1477 :                    udiv16_loop:
(1)    1477 : 34 45                      lsr     R2H
(1)    1479 : 36 46                      ror     R2L             ; divisor >>= 1
(1)    147B : 38 42                      lsl     R0L
(1)    147D : 39 41                      rol     R0H             ; quotient <<= 1
(1)    147F :                    udiv16_enter_loop:
(1)    147F : B6 44                      lda     R1L
(1)    1481 : B0 46                      sub     R2L
(1)    1483 : B7 44                      sta     R1L
(1)    1485 : B6 43                      lda     R1H
(1)    1487 : B2 45                      sbc     R2H
(1)    1489 : B7 43                      sta     R1H             ; dividend -= divisor
(1)    148B : 25 04                      bcs     udiv16_readd
(1)    148D : 3C 42                      inc     R0L             ; quotient |= 1
(1)    148F : 20 0C                      bra     udiv16_next
(1)    1491 :                    udiv16_readd:
(1)    1491 : B6 44                      lda     R1L
(1)    1493 : BB 46                      add     R2L
(1)    1495 : B7 44                      sta     R1L
(1)    1497 : B6 43                      lda     R1H
(1)    1499 : B9 45                      adc     R2H
(1)    149B : B7 43                      sta     R1H             ; dividend += divisor
(1)    149D :                    udiv16_next:
(1)    149D : 5A                         decx                    ; --bits
(1)    149E : 26 D7                      bne     udiv16_loop     ; while bits != 0
(1)    14A0 :                    udiv16_end:
(1)    14A0 : BE 47                      ldx     arith_work
(1)    14A2 : 81                         rts
(1)    14A3 :
(1)    14A3 :                    ;;; Division; dividend / divisor = quotient ... remainder
(1)    14A3 :                    ;;; @param R1 dividend
(1)    14A3 :                    ;;; @param R2 divisor
(1)    14A3 :                    ;;; @return R0 quotient
(1)    14A3 :                    ;;; @return X:A quotient
(1)    14A3 :                    ;;; @return R1 remainder
(1)    14A3 :                    ;;; @clobber R2
(1)    14A3 :                    div16:
(1)    14A3 : B6 43                      lda     R1H
(1)    14A5 : B8 45                      eor     R2H
(1)    14A7 : C7 14 D6                   sta     div16_sign      ; save hi(dividend^divisor)
(1)    14AA : B6 45                      lda     R2H             ; A=hi(divisor)
(1)    14AC : 2A 07                      bpl     div16_dividend
(1)    14AE : 40                         nega
(1)    14AF : 30 46                      neg     R2L
(1)    14B1 : A2 00                      sbc     #0
(1)    14B3 : B7 45                      sta     R2H             ; negate divisor
(1)    14B5 :                    div16_dividend:
(1)    14B5 : B6 43                      lda     R1H             ; A=hi(dividend)
(1)    14B7 : 2A 07                      bpl     div16_divide
(1)    14B9 : 40                         nega
(1)    14BA : 30 44                      neg     R1L
(1)    14BC : A2 00                      sbc     #0
(1)    14BE : B7 43                      sta     R1H             ; negate dividend
(1)    14C0 :                    div16_divide:
(1)    14C0 : CD 14 5C                   jsr     udiv16          ; R0=quotient
(1)    14C3 : C6 14 D6                   lda     div16_sign      ; A=(dividend^divisor)
(1)    14C6 : 2A 09                      bpl     div16_end
(1)    14C8 : B6 41                      lda     R0H
(1)    14CA : 40                         nega
(1)    14CB : 30 42                      neg     R0L
(1)    14CD : A2 00                      sbc     #0
(1)    14CF : B7 41                      sta     R0H             ; negate result
(1)    14D1 :                    div16_end:
(1)    14D1 : BE 41                      ldx     R0H
(1)    14D3 : B6 42                      lda     R0L
(1)    14D5 : 81                         rts
(1)    14D6 :                    div16_sign:
(1)    14D6 :                            rmb     1
       14D7 :
       14D7 :                    ;;; MC68HC05 compatibility
       FFFC :                            org     $FFFC
       FFFC : FF FC                      fdb     $FFFC           ; SWI: halt to system
       FFFE : 10 00                      fdb     initialize      ; RESET
