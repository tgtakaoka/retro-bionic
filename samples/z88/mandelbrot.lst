          0 :                     ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     z88
          0 :                            option  "reg-alias", "disable"
          0 :                            option  "optimize-index", "enable"
          0 :
          0 :                            include "z88.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; Z88
(1)       0 : =D5                FLAGS:  equ     %D5                  ; R/W: Flags register
(1)       0 : =80                F_CARRY:        equ     %(2)10000000 ; set to 1 if carry
(1)       0 : =40                F_ZERO:         equ     %(2)01000000 ; set to 1 if zero
(1)       0 : =20                F_SIGN:         equ     %(2)00100000 ; set to 1 if negative
(1)       0 : =10                F_OVERFLOW:     equ     %(2)00010000 ; set to 1 if overflow
(1)       0 : =8                 F_DECIMAL_ADJ:  equ     %(2)00001000 ; decimal adjust
(1)       0 : =4                 F_HALF_CARRY:   equ     %(2)00000100 ; set to 1 if carry from bit-3
(1)       0 : =2                 F_FAST_INTR:    equ     %(2)00000010 ; fast interrupt status
(1)       0 : =1                 F_BANK:         equ     %(2)00000001 ; bank address
(1)       0 :                    ;;;
(1)       0 : =D6                RP0:    equ     %D6             ; R/W: Register Pointer 0
(1)       0 : =D7                RP1:    equ     %D7             ; R/W: Register Pointer 1
(1)       0 : =D8                SPH:    equ     %D8             ; R/W: Stack Pointer High
(1)       0 : =D9                SPL:    equ     %D9             ; R/W: Stack Pointer Low
(1)       0 : =DA                IPH:    equ     %DA             ; R/W: Instruction Pointer High
(1)       0 : =DB                IPL:    equ     %DB             ; R/W: Instruction Pointer Low
(1)       0 :                    ;;; Interrupt
(1)       0 : =DC                IRQ:    equ     %DC             ; R/W: Interrupt Request
(1)       0 : =1                 IRQ_IRQ0:       equ     IMR_IRQ0
(1)       0 : =2                 IRQ_IRQ1:       equ     IMR_IRQ1
(1)       0 : =4                 IRQ_IRQ2:       equ     IMR_IRQ2
(1)       0 : =8                 IRQ_IRQ3:       equ     IMR_IRQ3
(1)       0 : =10                IRQ_IRQ4:       equ     IMR_IRQ4
(1)       0 : =20                IRQ_IRQ5:       equ     IMR_IRQ5
(1)       0 : =40                IRQ_IRQ6:       equ     IMR_IRQ6
(1)       0 : =80                IRQ_IRQ7:       equ     IMR_IRQ7
(1)       0 : =DD                IMR:    equ     %DD             ; R/W: Interrupt Mask
(1)       0 : =1                 IMR_IRQ0:       equ     (1 SHL 0)
(1)       0 : =2                 IMR_IRQ1:       equ     (1 SHL 1)
(1)       0 : =4                 IMR_IRQ2:       equ     (1 SHL 2)
(1)       0 : =8                 IMR_IRQ3:       equ     (1 SHL 3)
(1)       0 : =10                IMR_IRQ4:       equ     (1 SHL 4)
(1)       0 : =20                IMR_IRQ5:       equ     (1 SHL 5)
(1)       0 : =40                IMR_IRQ6:       equ     (1 SHL 6)
(1)       0 : =80                IMR_IRQ7:       equ     (1 SHL 7)
(1)       0 : =DE                SYM:    equ     %DE                  ; R/W; System Mode
(1)       0 : =1                 SYM_INTR:       equ     %(2)00000001 ; Global interrupt enable
(1)       0 : =2                 SYM_FAST:       equ     %(2)00000010 ; Fast interrupt enable
(1)       0 : =7                 SYM_FAST_gm:    equ     %(2)111      ; Fast interrupt select mask
(1)       0 : =2                 SYM_FAST_gp:    equ     2            ; Fast interrupt select position
(1)       0 :                    ;;; Interrupt vectors
(1)       0 : =0                 VEC_RESERVE0:   equ     %0000   ; Reserved
(1)       0 : =2                 VEC_RESERVE1:   equ     %0002   ; Reserved
(1)       0 : =4                 VEC_IRQ3_P32:   equ     %0004   ; IRQ3: P32 external
(1)       0 : =6                 VEC_IRQ3_P22:   equ     %0006   ; IRQ3: P22 external
(1)       0 : =8                 VEC_IRQ0_P23:   equ     %0008   ; IRQ0: P23 external
(1)       0 : =A                 VEC_IRQ0_P33:   equ     %000A   ; IRQ0: P33 external
(1)       0 : =C                 VEC_IRQ2:       equ     %000C   ; IRQ2: Counter 0 zero/P26,P27 external
(1)       0 : =E                 VEC_IRQ5:       equ     %000E   ; IRQ5: Counter 1 zero/P36,P37 external
(1)       0 : =10                VEC_UART_ERROR: equ     %0010   ; IRQ6: UART overrun/framing/parity error
(1)       0 : =12                VEC_UART_BREAK: equ     %0012   ; IRQ6: UART break/control char/wake-up
(1)       0 : =14                VEC_UART_RECV:  equ     %0014   ; IRQ6: UART receive/P30 external
(1)       0 : =16                VEC_IRQ6_P20:   equ     %0016   ; IRQ6: P20 external
(1)       0 : =18                VEC_IRQ1_P21:   equ     %0018   ; IRQ1: UART zero/P21 external
(1)       0 : =1A                VEC_UART_TRNS:  equ     %001A   ; IRQ1: UART transmit/P31 external
(1)       0 : =1C                VEC_IRQ4:       equ     %001C   ; IRQ4: P24/P25 external
(1)       0 : =1E                VEC_IRQ7:       equ     %001E   ; IRQ7: P34/P35 external
(1)       0 :                    ;;; Reset origin
(1)       0 : =20                ORG_RESET:      equ     %0020   ; RESET
(1)       0 :                    ;;; I/O Ports
(1)       0 : =D0                PORT0:  equ     %D0                  ; Port 0
(1)       0 : =D1                PORT1:  equ     %D1                  ; Port 1
(1)       0 : =D2                PORT2:  equ     %D2                  ; Port 2
(1)       0 : =D3                PORT3:  equ     %D3                  ; Port 3
(1)       0 : =D4                PORT4:  equ     %D4                  ; Port 4
(1)       0 : =F0                P0M:    equ     %F0                  ; W/O: Port 0 mode
(1)       0 : =FF                P0M_ADRH:       equ     %(2)11111111  ; Port 0 is A15-A8
(1)       0 : =F1                PM:     equ     %F1                   ; W/O: Port mode
(1)       0 : =20                PM_P1BUS:       equ     %(2)00100000  ; Port 1 is AD7-AD0
(1)       0 : =8                 PM_DM:          equ     %(2)00001000  ; P35: 1=#DM, 0=I/O
(1)       0 : =F4                H0C:    equ     %F4                   ; W/O: Handshake 0 Control
(1)       0 : =F5                H1C:    equ     %F5                   ; W/O: Handshake 1 Control
(1)       0 : =F6                P4D:    equ     %F6             ; W/O: Port 4 direction: 1=in, 0=out
(1)       0 : =F7                P4OD:   equ     %F7 ; W/O: Port 4 open-drain: 1=open-drain, 0=push-pull
(1)       0 : =F8                P2AM:   equ     %F8 ; W/O: Port 2/3 A mode; P31,P30,P21,P20
(1)       0 : =F9                P2BM:   equ     %F9 ; W/O: Port 2/3 B mode; P33,P32,P23,P21
(1)       0 : =FA                P2CM:   equ     %FA ; W/O: Port 2/3 C mode; P35,P34,P25,P24
(1)       0 : =FB                P2DM:   equ     %FB ; W/O: Port 2/3 D mode; P37,P36,P27,P26
(1)       0 : =0                 P2M_IN_gm:      equ     %(2)00     ; input
(1)       0 : =1                 P2M_INTR_gm:    equ     %(2)01     ; input, interrupt enabled
(1)       0 : =2                 P2M_OUTPP_gm:   equ     %(2)10     ; output, push-pull
(1)       0 : =3                 P2M_OUTOD_gm:   equ     %(2)11     ; output, open-drain
(1)       0 : =FC                P2AIP:  equ     %FC ; W/O: Port 2/3 A interrupt pending; P33,P32,P23,P22,P31,P30,P21,P20
(1)       0 : =FD                P2BIP:  equ     %FD ; W/O: Port 2/3 B interrupt pending; P37,P36,P27,P26,P35,P34,P25,P24
(1)       0 : =FE                EMT:    equ     %FE ; W/O: External Memory Timing
(1)       0 : =2                 EMT_STACK_DM:   equ     %(2)00000010 ; Stack is on data memory
(1)       0 : =FF                IPR:    equ     %FF             ; W/O: Interrupt Priority Register
(1)       0 : =2                 IPR_BCA:        equ     %(2)00000010 ; B > C > A
(1)       0 : =10                IPR_ABC:        equ     %(2)00010000 ; A > B > C
(1)       0 : =12                IPR_BAC:        equ     %(2)00010010 ; B > A > C
(1)       0 : =80                IPR_CAB:        equ     %(2)10000000 ; C > A > B
(1)       0 : =82                IPR_CBA:        equ     %(2)10000010 ; C > B > A
(1)       0 : =90                IPR_ACB:        equ     %(2)10010000 ; A > C > B
(1)       0 : =1                 IPR_A10:        equ     %(2)00000001 ; Group A: IRQ1 > IRQ0
(1)       0 : =0                 IPR_B234:       equ     %(2)00000000 ; Group B: IRQ2 > IRQ3 > IRQ4
(1)       0 : =8                 IPR_B243:       equ     %(2)00001000 ; Group B: IRQ2 > IRQ4 > IRQ3
(1)       0 : =4                 IPR_B342:       equ     %(2)00000100 ; Group B: IRQ3 > IRQ4 > IRQ2
(1)       0 : =C                 IPR_B432:       equ     %(2)00001100 ; Group B: IRQ4 > IRQ3 > IRQ2
(1)       0 : =0                 IPR_C567:       equ     %(2)00000000 ; Group C: IRQ5 > IRQ6 > IRQ7
(1)       0 : =40                IPR_C576:       equ     %(2)01000000 ; Group C: IRQ5 > IRQ7 > IRQ6
(1)       0 : =20                IPR_C675:       equ     %(2)00100000 ; Group C: IRQ6 > IRQ7 > IRQ5
(1)       0 : =60                IPR_C765:       equ     %(2)01100000 ; Group C: IRQ7 > IRQ6 > IRQ5
(1)       0 :                    ;;; UART
(1)       0 : =EB                UTC:    equ     %EB                  ; UART Transmit Control
(1)       0 : =1                 UTC_TDMAENB:    equ     %(2)00000001 ; Transmit DMA enable
(1)       0 : =2                 UTC_TBE:        equ     %(2)00000010 ; Transmit buffer empty
(1)       0 : =4                 UTC_ZC:         equ     %(2)00000100 ; Zero count
(1)       0 : =8                 UTC_TENB:       equ     %(2)00001000 ; Transmit enable
(1)       0 : =10                UTC_WUENB:      equ     %(2)00010000 ; Wake-up enable
(1)       0 : =20                UTC_STPBT2:     equ     %(2)00100000 ; 2 stop bits, 0=1 stop bit
(1)       0 : =40                UTC_SENBRK:     equ     %(2)01000000 ; Send break
(1)       0 : =80                UTC_TXDTSEL:    equ     %(2)10000000 ; Transmit data select, 1=P31 is TXD
(1)       0 : =EC                URC:    equ     %EC                  ; UART Receive Control
(1)       0 : =1                 URC_RCA:        equ     %(2)00000001 ; Receive character available
(1)       0 : =2                 URC_RENB:       equ     %(2)00000010 ; Receive enable
(1)       0 : =4                 URC_PERR:       equ     %(2)00000100 ; Parity error
(1)       0 : =8                 URC_OVERR:      equ     %(2)00001000 ; Overrun error
(1)       0 : =10                URC_FERR:       equ     %(2)00010000 ; Framing error
(1)       0 : =20                URC_BRKD:       equ     %(2)00100000 ; Break detect
(1)       0 : =40                URC_CCD:        equ     %(2)01000000 ; Control Character detect
(1)       0 : =80                URC_WUD:        equ     %(2)10000000 ; Wake-up detect
(1)       0 : =ED                UIE:    equ     %ED                  ; UART Interrupt Enable
(1)       0 : =1                 UIE_RCAIE:      equ     %(2)00000001 ; Receive character available interrupt enable
(1)       0 : =2                 UIE_RDMAENB:    equ     %(2)00000010 ; Receive DMA enable
(1)       0 : =4                 UIE_TIE:        equ     %(2)00000100 ; Transmit interrupt enable
(1)       0 : =8                 UIE_ZCIE:       equ     %(2)00001000 ; Zero count interrupt enable
(1)       0 : =10                UIE_REIE:       equ     %(2)00010000 ; Receive error interrupt enable
(1)       0 : =20                UIE_BRKIE:      equ     %(2)00100000 ; Break interrupt enable
(1)       0 : =40                UIE_CCIE:       equ     %(2)01000000 ; Control Character interrupt enable
(1)       0 : =80                UIE_WUIE:       equ     %(2)10000000 ; Wake-up interrupt enable
(1)       0 : =EF                UIO:    equ     %EF                  ; UART Data
(1)       0 : =FA                UMA:    equ     %FA                  ; BANK1: UART Mode A
(1)       0 : =4                 UMA_EVNPAR:     equ     %(2)00000100 ; Even parity
(1)       0 : =8                 UMA_PARENB:     equ     %(2)00001000 ; Parity enable
(1)       0 : =20                UMA_BCP7:       equ     %(2)00100000 ; 7 bits per Character
(1)       0 : =30                UMA_BCP8:       equ     %(2)00110000 ; 8 bits per Character
(1)       0 : =0                 UMA_CR1:        equ     %(2)00000000 ; Clock rate x1
(1)       0 : =40                UMA_CR16:       equ     %(2)01000000 ; Clock rate x16
(1)       0 : =80                UMA_CR32:       equ     %(2)10000000 ; Clock rate x32
(1)       0 : =C0                UMA_CR64:       equ     %(2)11000000 ; Clock rate x64
(1)       0 : =FB                UMB:    equ     %FB                  ; BANK1: UART Mode B
(1)       0 : =1                 UMB_LBENB:      equ     %(2)00000001 ; Loopback enable
(1)       0 : =2                 UMB_BRGENB:     equ     %(2)00000010 ; Baud-rate generator enable
(1)       0 : =4                 UMB_BRGSRC:     equ     %(2)00000100 ; Baud-rate generator source; 1=XTAL/4, 0=P20
(1)       0 : =8                 UMB_TCIS:       equ     %(2)00001000 ; Transmit clock input select; 1=Baud-rate G., 0=P21
(1)       0 : =10                UMB_RCIS:       equ     %(2)00010000 ; Receive clock input select; 1=Baud-rate G., 0=P20
(1)       0 : =20                UMB_AE:         equ     %(2)00100000 ; Auto-echo
(1)       0 : =0                 UMB_COS_P21:    equ     %(2)00000000 ; P21=I/O
(1)       0 : =40                UMB_COS_SYSTEM: equ     %(2)01000000 ; P21=System clock (XTAL/2)
(1)       0 : =80                UMB_COS_BAUD:   equ     %(2)10000000 ; P21=Baud-rate generator output
(1)       0 : =C0                UMB_COS_TDR:    equ     %(2)11000000 ; P21=Transmit data rate
(1)       0 :                    ;;; UBRG=1/(2 x baud-rate x UMA_CR x BRG-input) - 1
(1)       0 : =F8                UBG0:   equ     %F8             ; BANK1: UART Baud-Rate Generator 0
(1)       0 : =F9                UBG1:   equ     %f9             ; BANK1: UART Baud-Rate Generator 1
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =FF00              USART:          equ     %FF00
          0 : =0                 USARTD:         equ     0       ; Data register
          0 : =1                 USARTS:         equ     1       ; Status register
          0 : =1                 USARTC:         equ     1       ; Control register
          0 : =2                 USARTRI:        equ     2       ; Receive interrupt name (IRQ0~2)
          0 : =3                 USARTTI:        equ     3       ; Transmit interrupt name (IRQ0~2)
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     %(2)11000000
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 SHL MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 SHL MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 SHL MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     %(2)00100000
(1)       0 : =10                MODE_PARITY_bm: equ     %(2)00010000
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     %(2)00001100
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 SHL MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 SHL MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 SHL MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 SHL MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     %(2)00000011
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 SHL MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ     (2 SHL MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ     (3 SHL MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     %(2)10000000   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     %(2)01000000   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     %(2)00100000   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     %(2)00010000   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     %(2)00001000   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     %(2)00000100   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     %(2)00000010   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     %(2)00000001   ; Transmit enable
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     %(2)10000000   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     %(2)01000000   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     %(2)00100000   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     %(2)00010000   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     %(2)00001000   ; Parity Error
(1)       0 : =4                 ST_TxEMPTY_bm:  equ     %(2)00000100   ; Transmitter empty
(1)       0 : =2                 ST_RxRDY_bm:    equ     %(2)00000010   ; Receiver ready
(1)       0 : =1                 ST_TxRDY_bm:    equ     %(2)00000001   ; Transmitter ready
(1)       0 :                    ;;; Interrupt name for receive/transmit interrupt
(1)       0 : =0                 INTR_NONE:      equ     0
(1)       0 : =1                 INTR_IRQ0:      equ     1
(1)       0 : =2                 INTR_IRQ1:      equ     2
(1)       0 : =3                 INTR_IRQ2:      equ     3
          0 :                    ;;; Async 1stop 8data x16
          0 : =4E                ASYNC_MODE:     equ     MODE_STOP1_gc LOR MODE_LEN8_gc LOR MODE_BAUD_X16
          0 :                    ;;; RTS/DTR, error reset, Rx enable, Tx enable
          0 : =37                RX_EN_TX_EN:    equ     CMD_RTS_bm LOR CMD_DTR_bm LOR CMD_ER_bm LOR CMD_RxEN_bm LOR CMD_TxEN_bm
          0 : =36                RX_EN_TX_DIS:   equ     CMD_RTS_bm LOR CMD_DTR_bm LOR CMD_ER_bm LOR CMD_RxEN_bm
          0 :
       2000 :                            org     %2000
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       ds      rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       ds      tx_queue_size
       2100 :
       1000 :                            org     %1000
       1000 : =1000              stack:  equ     $
       1000 :
          8 :                            org     VEC_IRQ0_P23
          8 : 13 79                      dw      isr_intr_rx
          A :
         18 :                            org     VEC_IRQ1_P21
         18 : 13 9E                      dw      isr_intr_tx
         1A :
         20 :                            org     ORG_RESET
         20 :                            setrp   %C0
         20 :                    init_config:
         20 : E6 FE 02                   ld      EMT, #EMT_STACK_DM ; stack is on external data memory
         23 : E6 F0 FF                   ld      P0M, #P0M_ADRH     ; Port 0 is address bus high
         26 : E6 F1 28                   ld      PM, #PM_P1BUS | PM_DM ; Port 1 is data bus and address bus low
         29 : C6 D8 10 00                ldw     SPH, #stack
         2D : C6 C2 20 00                ldw     RR2, #rx_queue
         31 : 1C 80                      ld      R1, #rx_queue_size
         33 : F6 12 E1                   call    queue_init
         36 : C6 C2 20 80                ldw     RR2, #tx_queue
         3A : 1C 80                      ld      R1, #tx_queue_size
         3C : F6 12 E1                   call    queue_init
         3F :
         3F :                    init_usart:
         3F : C6 C2 FF 00                ldw     RR2, #USART
         43 : B0 C0                      clr     R0
         45 : F7 03 01                   lde     USARTC(RR2), R0
         48 : F7 03 01                   lde     USARTC(RR2), R0
         4B : F7 03 01                   lde     USARTC(RR2), R0 ; safest way to sync mode
         4E : 0C 40                      ld      R0, #CMD_IR_bm
         50 : F7 03 01                   lde     USARTC(RR2), R0 ; reset
         53 : FF                         nop
         54 : FF                         nop
         55 : 0C 4E                      ld      R0, #ASYNC_MODE
         57 : F7 03 01                   lde     USARTC(RR2), R0 ; async 1stop 8data x16
         5A : FF                         nop
         5B : FF                         nop
         5C : 0C 36                      ld      R0, #RX_EN_TX_DIS
         5E : F7 03 01                   lde     USARTC(RR2), R0 ; RTS/DTR, error reset, Rx enable, Tx disable
         61 : 0C 01                      ld      R0, #INTR_IRQ0
         63 : F7 03 02                   lde     USARTRI(RR2), R0 ; enable RxRDY interrupt using IRQ0
         66 : 0C 02                      ld      R0, #INTR_IRQ1
         68 : F7 03 03                   lde     USARTTI(RR2), R0 ; enable TxRDY interrupt using IRQ1
         6B :
         6B : E6 F9 04                   ld      P2BM, #P2M_INTR_gm SHL 2 ; P23=input, interrupt enabled
         6E : E6 F8 04                   ld      P2AM, #P2M_INTR_gm SHL 2 ; P21=input, interrupt enabled
         71 : E6 FF 10                   ld      IPR, #IPR_ABC ; (IRQ0 > IRQ1) > (IRQ2,3,4) > (IRQ5,6,7)
         74 : E6 DD 03                   ld      IMR, #IMR_IRQ0 LOR IMR_IRQ1 ; enable IRQ0, IRQ1
         77 : 9F                         ei
         78 :
         78 :                    loop:
         78 : F6 10 00                   call    mandelbrot
         7B : F6 00 B3                   call    newline
         7E : 8B F8                      jr      loop
         80 :
         80 :                    ;;; Get character
         80 :                    ;;; @return R0
         80 :                    ;;; @return FLAGS.C 0 if no character
         80 :                    getchar:
         80 : 70 C3                      push    R3
         82 : 70 C2                      push    R2
         84 : C6 C2 20 00                ldw     RR2, #rx_queue
         88 : 8F                         di
         89 : F6 13 41                   call    queue_remove
         8C : 9F                         ei
         8D : 50 C2                      pop     R2
         8F : 50 C3                      pop     R3
         91 : AF                         ret
         92 :
         92 :                    ;;; Put character
         92 :                    ;;; @param R0
         92 :                    putchar:
         92 : 70 C0                      push    R0
         94 : 70 C3                      push    R3
         96 : 70 C2                      push    R2
         98 : C6 C2 20 80                ldw     RR2, #tx_queue
         9C :                    putchar_retry:
         9C : 8F                         di
         9D : F6 13 09                   call    queue_add
         A0 : 9F                         ei
         A1 : FB F9                      jr      nc, putchar_retry ; branch if queue is full
         A3 : C6 C2 FF 00                ldw     RR2, #USART
         A7 : 0C 37                      ld      R0, #RX_EN_TX_EN
         A9 : F7 03 01                   lde     USARTC(RR2), R0 ; enable TX
         AC :                    putchar_exit:
         AC : 50 C2                      pop     R2
         AE : 50 C3                      pop     R3
         B0 : 50 C0                      pop     R0
         B2 : AF                         ret
         B3 :
         B3 :                    ;;; Put newline
         B3 :                    ;;; @clobber R0
         B3 :                    newline:
         B3 : 0C 0D                      ld      R0, #%0D
         B5 : F6 00 92                   call    putchar
         B8 : 0C 0A                      ld      R0, #%0A
         BA : 8B D6                      jr      putchar
         BC :
         BC :                    ;;; Put space
         BC :                    ;;; @clobber R0
         BC :                    putspace:
         BC : 0C 20                      ld      R0, #' '
         BE : 8B D2                      jr      putchar
         C0 :
         C0 :                            include "mandelbrot.inc"
(1)      C0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)      40 :                            org     %40
(1)      40 :                    c229:   ds      2
(1)      42 :                    c416:   ds      2
(1)      44 :                    c100:   ds      2
(1)      46 :                    vF:     ds      2
(1)      48 :                    vC:     ds      2
(1)      4A :                    vD:     ds      2
(1)      4C :                    vA:     ds      2
(1)      4E :                    vB:     ds      2
(1)      50 :                    vP:     ds      2
(1)      52 :                    vQ:     ds      2
(1)      54 :                    vS:     ds      2
(1)      56 :                    vT:     ds      2
(1)      58 :                    tmp:    ds      2
(1)      5A :                    vY:     ds      2
(1)      5C :                    vX:     ds      2
(1)      5E :                    vI:     ds      2
(1)      60 :
(1)    1000 :                            org     %1000
(1)    1000 :                    mandelbrot:
(1)    1000 : C6 40 00 E5                ldw     c229, #229
(1)    1004 : C6 42 01 A0                ldw     c416, #416
(1)    1008 : C6 44 00 64                ldw     c100, #100
(1)    100C : C6 46 00 32                ldw     vF, #50         ; F=50
(1)    1010 : C6 5A FF F4                ldw     vY, #-12        ; Y=-12
(1)    1014 :                    loop_y:
(1)    1014 : C6 5C FF CF                ldw     vX, #-49        ; X=-49
(1)    1018 :                    loop_x:
(1)    1018 : C4 5C 48                   ldw     vC, vX          ; C=X
(1)    101B : 4C 48                      ld      R4, #vC
(1)    101D : 5C 40                      ld      R5, #c229
(1)    101F : F6 12 05                   call    mulsi2          ; C=X*229
(1)    1022 : 5C 44                      ld      R5, #c100
(1)    1024 : F6 12 B3                   call    divsi2          ; C=X*229/100
(1)    1027 : C4 5A 4A                   ldw     vD, vY          ; D=Y
(1)    102A : 4C 4A                      ld      R4, #vD
(1)    102C : 5C 42                      ld      R5, #c416
(1)    102E : F6 12 05                   call    mulsi2          ; D=Y*416
(1)    1031 : 5C 44                      ld      R5, #c100
(1)    1033 : F6 12 B3                   call    divsi2          ; D=Y*416/100
(1)    1036 : C4 48 4C                   ldw     vA, vC          ; A=C
(1)    1039 : C4 4A 4E                   ldw     vB, vD          ; B=D
(1)    103C : C6 5E 00 00                ldw     vI, #0          ; I=0
(1)    1040 :
(1)    1040 :                            ;; ld      R2, #'Y'
(1)    1040 :                            ;; ldw     RR0, vY
(1)    1040 :                            ;; call    print
(1)    1040 :                            ;; ld      R2, #'X'
(1)    1040 :                            ;; ldw     RR0, vX
(1)    1040 :                            ;; call    print
(1)    1040 :                            ;; ld      R2, #'C'
(1)    1040 :                            ;; ldw     RR0, vC
(1)    1040 :                            ;; call    print
(1)    1040 :                            ;; ld      R2, #'D'
(1)    1040 :                            ;; ldw     RR0, vD
(1)    1040 :                            ;; call    print
(1)    1040 :                            ;; call    newline
(1)    1040 :
(1)    1040 :                    loop_i:
(1)    1040 : C4 4E 52                   ldw     vQ, vB          ; Q=B
(1)    1043 : 4C 52                      ld      R4, #vQ
(1)    1045 : 5C 46                      ld      R5, #vF
(1)    1047 : F6 12 B3                   call    divsi2          ; Q=B/F
(1)    104A : C4 52 58                   ldw     tmp, vQ         ; tmp=Q
(1)    104D : 4C 58                      ld      R4, #tmp
(1)    104F : 5C 46                      ld      R5, #vF
(1)    1051 : F6 12 05                   call    mulsi2          ; tmp=Q*F
(1)    1054 : C4 4E 54                   ldw     vS, vB          ; S=B
(1)    1057 : 4C 54                      ld      R4, #vS
(1)    1059 : 5C 58                      ld      R5, #tmp
(1)    105B : F6 11 A1                   call    subsi2          ; S=B-Q*F
(1)    105E : C4 4E 58                   ldw     tmp, vB
(1)    1061 : 4C 58                      ld      R4, #tmp
(1)    1063 : F6 12 05                   call    mulsi2          ; tmp=B*B
(1)    1066 : C4 4C 56                   ldw     vT, vA
(1)    1069 : 4C 56                      ld      R4, #vT
(1)    106B : 5C 4C                      ld      R5, #vA
(1)    106D : F6 12 05                   call    mulsi2          ; T=A*A
(1)    1070 : 5C 58                      ld      R5, #tmp
(1)    1072 : F6 11 A1                   call    subsi2          ; T=A*A-B*B
(1)    1075 : 5C 46                      ld      R5, #vF
(1)    1077 : F6 12 B3                   call    divsi2          ; T=(A*A-B*B)/F
(1)    107A : 5C 48                      ld      R5, #vC
(1)    107C : F6 11 91                   call    addsi2          ; T=(A*A-B*B)/F+C
(1)    107F : C4 4C 58                   ldw     tmp, vA
(1)    1082 : 4C 58                      ld      R4, #tmp
(1)    1084 : 5C 54                      ld      R5, #vS
(1)    1086 : F6 12 05                   call    mulsi2          ; tmp=A*S
(1)    1089 : 5C 46                      ld      R5, #vF
(1)    108B : F6 12 B3                   call    divsi2          ; tmp=A*S/F
(1)    108E : C4 4C 4E                   ldw     vB, vA          ; B=A
(1)    1091 : 4C 4E                      ld      R4, #vB
(1)    1093 : 5C 52                      ld      R5, #vQ
(1)    1095 : F6 12 05                   call    mulsi2          ; B=A*Q
(1)    1098 : 5C 58                      ld      R5, #tmp
(1)    109A : F6 11 91                   call    addsi2          ; B=A*Q+A*S/F
(1)    109D : 5C 4E                      ld      R5, #vB
(1)    109F : F6 11 91                   call    addsi2          ; B=2*(A*Q+A*S/F)
(1)    10A2 : 5C 4A                      ld      R5, #vD
(1)    10A4 : F6 11 91                   call    addsi2          ; B=2*(A*Q+A*S/F)+D
(1)    10A7 : C4 56 4C                   ldw     vA, vT          ; A=T
(1)    10AA : C4 4C 50                   ldw     vP, vA
(1)    10AD : 4C 50                      ld      R4, #vP
(1)    10AF : 5C 46                      ld      R5, #vF
(1)    10B1 : F6 12 B3                   call    divsi2          ; P=A/F
(1)    10B4 : C4 4E 52                   ldw     vQ, vB
(1)    10B7 : 4C 52                      ld      R4, #vQ
(1)    10B9 : F6 12 B3                   call    divsi2          ; Q=B/F
(1)    10BC : C4 52 58                   ldw     tmp, vQ
(1)    10BF : 4C 58                      ld      R4, #tmp
(1)    10C1 : 5C 52                      ld      R5, #vQ
(1)    10C3 : F6 12 05                   call    mulsi2          ; tmp=Q*Q
(1)    10C6 : C4 50 56                   ldw     vT, vP
(1)    10C9 : 4C 56                      ld      R4, #vT
(1)    10CB : 5C 50                      ld      R5, #vP
(1)    10CD : F6 12 05                   call    mulsi2          ; T=P*P
(1)    10D0 : 5C 58                      ld      R5, #tmp
(1)    10D2 : F6 11 91                   call    addsi2          ; T=P*P+Q*Q
(1)    10D5 :
(1)    10D5 :                            ;; call    putspace
(1)    10D5 :                            ;; ld      R2, #'I'
(1)    10D5 :                            ;; ldw     RR0, vI
(1)    10D5 :                            ;; call    print
(1)    10D5 :                            ;; ld      R2, #'A'
(1)    10D5 :                            ;; ldw     RR0, vA
(1)    10D5 :                            ;; call    print
(1)    10D5 :                            ;; ld      R2, #'B'
(1)    10D5 :                            ;; ldw     RR0, vB
(1)    10D5 :                            ;; call    print
(1)    10D5 :                            ;; ld      R2, #'P'
(1)    10D5 :                            ;; ldw     RR0, vP
(1)    10D5 :                            ;; call    print
(1)    10D5 :                            ;; ld      R2, #'Q'
(1)    10D5 :                            ;; ldw     RR0, vQ
(1)    10D5 :                            ;; call    print
(1)    10D5 :                            ;; ld      R2, #'T'
(1)    10D5 :                            ;; ldw     RR0, vT
(1)    10D5 :                            ;; call    print
(1)    10D5 :                            ;; call    newline
(1)    10D5 :
(1)    10D5 : C4 56 C0                   ldw     RR0, vT
(1)    10D8 : 42 00                      or      R0, R0
(1)    10DA : EB 13                      jr      nz, print_i     ; if T(>=0)>4
(1)    10DC : 26 C1 05                   sub     R1, #4+1
(1)    10DF : DB 0E                      jr      pl, print_i     ; if 4<T
(1)    10E1 : 20 5F                      inc     vI+1
(1)    10E3 : 08 5F                      ld      R0, vI+1
(1)    10E5 : 26 C0 10                   sub     R0, #16
(1)    10E8 : 5D 10 40                   jp      mi, loop_i      ; if I<16
(1)    10EB : 0C 20                      ld      R0, #' '
(1)    10ED : 8B 0D                      jr      print_char
(1)    10EF :                    print_i:
(1)    10EF : 08 5F                      ld      R0, vI+1
(1)    10F1 : 06 C0 30                   add     R0, #'0'
(1)    10F4 : A6 C0 3A                   cp      R0, #'9'+1
(1)    10F7 : 7B 03                      jr      c, print_char   ; if I<'9'+1
(1)    10F9 : 06 C0 07                   add     R0, #'A'-'0'-10
(1)    10FC :                    print_char:
(1)    10FC : F6 00 92                   call    putchar
(1)    10FF :
(1)    10FF :                            ;; push    R0
(1)    10FF :                            ;; ld      R0, #'@'
(1)    10FF :                            ;; call    putchar
(1)    10FF :                            ;; ld      R0, #'='
(1)    10FF :                            ;; call    putchar
(1)    10FF :                            ;; pop     R0
(1)    10FF :                            ;; call    putchar
(1)    10FF :                            ;; call    newline
(1)    10FF :
(1)    10FF : F6 00 80                   call    getchar
(1)    1102 : FB 05                      jr      nc, next_x
(1)    1104 : 42 00                      or      R0, R0
(1)    1106 : EB 01                      jr      nz, next_x
(1)    1108 : 3F                         wfi                     ; halt to system
(1)    1109 :                    next_x:
(1)    1109 : A0 5C                      incw    vX
(1)    110B : C4 5C C0                   ldw     RR0, vX
(1)    110E : 42 00                      or      R0, R0
(1)    1110 : ED 10 18                   jp      nz, loop_x      ; if X<0
(1)    1113 : 26 C1 1E                   sub     R1, #30
(1)    1116 : 5D 10 18                   jp      mi, loop_x      ; if X<30
(1)    1119 : F6 00 B3                   call    newline
(1)    111C : A0 5A                      incw    vY
(1)    111E : C4 5A C0                   ldw     RR0, vY
(1)    1121 : 42 00                      or      R0, R0
(1)    1123 : ED 10 14                   jp      nz, loop_y      ; if Y<0
(1)    1126 : 26 C1 0D                   sub     R1, #13
(1)    1129 : 5D 10 14                   jp      mi, loop_y      ; if X<13
(1)    112C : AF                         ret
(1)    112D :
(1)    112D :                    ;;; Print variable
(1)    112D :                    ;;; @param R2 variable name
(1)    112D :                    ;;; @param RR0 variable value
(1)    112D :                    print:
(1)    112D : 70 C0                      push    R0
(1)    112F : 08 C2                      ld      R0, R2
(1)    1131 : F6 00 92                   call    putchar
(1)    1134 : 0C 3D                      ld      R0, #'='
(1)    1136 : F6 00 92                   call    putchar
(1)    1139 : 50 C0                      pop     R0
(1)    113B : F6 11 6D                   call    print_int16
(1)    113E : 8D 00 BC                   jp      putspace
       1141 :                            include "arith.inc"
(1)    1141 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    1141 :                            cpu     z88
(1)    1141 :                            option  optimize-index, on
(1)    1141 :
(1)    1141 :                    ;;; Print unsigned 16-bit integer as decimal
(1)    1141 :                    ;;; @param RR0: value
(1)    1141 :                    ;;; @clobber RR0
(1)    1141 :                    print_uint16:
(1)    1141 : A0 C0                      incw    RR0
(1)    1143 : 80 C0                      decw    RR0
(1)    1145 : EB 06                      jr      nz, print_uint16_inner
(1)    1147 : 0C 30                      ld      R0, #'0'
(1)    1149 : F6 00 92                   call    putchar
(1)    114C :                    print_uint16_end:
(1)    114C : AF                         ret
(1)    114D :                    print_uint16_inner:
(1)    114D : A0 C0                      incw    RR0
(1)    114F : 80 C0                      decw    RR0
(1)    1151 : 6B F9                      jr      z, print_uint16_end
(1)    1153 : C4 C0 CE                   ldw     RR14, RR0
(1)    1156 : C6 CC 00 0A                ldw     RR12, #10
(1)    115A : F6 12 33                   call    udiv16
(1)    115D : 70 CF                      push    R15
(1)    115F : C4 CC C0                   ldw     RR0, RR12
(1)    1162 : F6 11 4D                   call    print_uint16_inner
(1)    1165 : 50 C0                      pop     R0
(1)    1167 : 06 C0 30                   add     R0, #'0'
(1)    116A : 8D 00 92                   jp      putchar
(1)    116D :
(1)    116D :                    ;;; Print signed 16-bit integer as decimal
(1)    116D :                    ;;; @param RR0: value
(1)    116D :                    ;;; @clobber RR0
(1)    116D :                    print_int16:
(1)    116D : 37 0E D1                   btjrf   print_uint16, R0, #7
(1)    1170 : 70 C0                      push    R0
(1)    1172 : 0C 2D                      ld      R0, #'-'
(1)    1174 : F6 00 92                   call    putchar
(1)    1177 : 50 C0                      pop     R0
(1)    1179 : 60 C1                      com     R1
(1)    117B : 60 C0                      com     R0
(1)    117D : A0 C0                      incw    RR0
(1)    117F : 8D 11 41                   jp      print_uint16
(1)    1182 :
(1)    1182 :                    ;;; Negation; result = -value
(1)    1182 :                    ;;; @param @R4: result
(1)    1182 :                    ;;; @param @R5: value
(1)    1182 :                    ;;; @clobber R14, R15
(1)    1182 :                    negsi2:
(1)    1182 : C5 C5 CE                   ldw     RR14, @R5
(1)    1185 : 60 CE                      com     R14
(1)    1187 : 60 CF                      com     R15
(1)    1189 : A0 CE                      incw    RR14
(1)    118B : D7 4E                      ld      0(R4), R14
(1)    118D : 97 F4 01                   ld      1(R4), R15
(1)    1190 : AF                         ret
(1)    1191 :
(1)    1191 :                    ;;; Signed addition: summand += addend
(1)    1191 :                    ;;; @param @R4: summand
(1)    1191 :                    ;;; @param @R5: addend
(1)    1191 :                    ;;; @clobber R14, R15
(1)    1191 :                    addsi2:
(1)    1191 : C5 C4 CE                   ldw     RR14, @R4
(1)    1194 : 5E                         inc     R5
(1)    1195 : 03 F5                      add     R15, @R5
(1)    1197 : 00 C5                      dec     R5
(1)    1199 : 13 E5                      adc     R14, @R5
(1)    119B : D7 4E                      ld      0(R4), R14
(1)    119D : 97 F4 01                   ld      1(R4), R15
(1)    11A0 : AF                         ret
(1)    11A1 :
(1)    11A1 :                    ;;; Singed subtraction: minuend -= subtrahend
(1)    11A1 :                    ;;; @param @R4: minuend
(1)    11A1 :                    ;;; @param @R5: subtrahend
(1)    11A1 :                    ;;; @clobber R14, R15
(1)    11A1 :                    subsi2:
(1)    11A1 : C5 C4 CE                   ldw     RR14, @R4
(1)    11A4 : 5E                         inc     R5
(1)    11A5 : 23 F5                      sub     R15, @R5
(1)    11A7 : 00 C5                      dec     R5
(1)    11A9 : 33 E5                      sbc     R14, @R5
(1)    11AB : D7 4E                      ld      0(R4), R14
(1)    11AD : 97 F4 01                   ld      1(R4), R15
(1)    11B0 : AF                         ret
(1)    11B1 :
(1)    11B1 :                    ;;; Signed comparison: minuend - subtrahend
(1)    11B1 :                    ;;; @param @R4: minuend
(1)    11B1 :                    ;;; @param @R5: subtrahend
(1)    11B1 :                    ;;; @clobber R14, R15
(1)    11B1 :                    cmpsi2:
(1)    11B1 : C5 C4 CE                   ldw     RR14, @R4
(1)    11B4 : 5E                         inc     R5
(1)    11B5 : 23 F5                      sub     R15, @R5
(1)    11B7 : 00 C5                      dec     R5
(1)    11B9 : 33 E5                      sbc     R14, @R5        ; RR14=@R4-@R5
(1)    11BB : F6 11 BF                   call    addsub_flags    ; set C,Z,S,V
(1)    11BE : AF                         ret
(1)    11BF :
(1)    11BF :                    ;;; Set add/sub flags
(1)    11BF :                    ;;; @param @R4: operand 1
(1)    11BF :                    ;;; @param @R5: operand 2
(1)    11BF :                    ;;; @param RR14: result
(1)    11BF :                    ;;; @param FLAGS
(1)    11BF :                    ;;; @return FLAGS: C, Z, S, V
(1)    11BF :                    addsub_flags:
(1)    11BF : 70 CF                      push    R15
(1)    11C1 : 70 CE                      push    R14
(1)    11C3 : 70 CD                      push    R13
(1)    11C5 : D8 D5                      ld      R13, FLAGS
(1)    11C7 : 46 CD 50                   or      R13, #F_ZERO LOR F_OVERFLOW ; set Z, V
(1)    11CA : 42 FE                      or      R15, R14
(1)    11CC : 6B 03                      jr      z, addsub_flags_z
(1)    11CE : B6 CD 40                   xor     R13, #F_ZERO    ; clear Z
(1)    11D1 :                    addsub_flags_z:
(1)    11D1 : B3 E4                      xor     R14, @R4
(1)    11D3 : B3 E5                      xor     R14, @R5        ; R14:7 carry into S
(1)    11D5 : FB 03                      jr      nc, addsub_flags_nc
(1)    11D7 : B6 CE 80                   xor     R14, #%80       ; R14:7=C^(carry into S)
(1)    11DA :                    addsub_flags_nc:
(1)    11DA : 5B 03                      jr      mi, addsub_flags_v
(1)    11DC : B6 CD 10                   xor     R13, #F_OVERFLOW ; clear V
(1)    11DF :                    addsub_flags_v:
(1)    11DF : D9 D5                      ld      FLAGS, R13
(1)    11E1 : 50 CD                      pop     R13
(1)    11E3 : 50 CE                      pop     R14
(1)    11E5 : 50 CF                      pop     R15
(1)    11E7 : AF                         ret
(1)    11E8 :
(1)    11E8 :                    ;;; Unsigned multiplication: product = multiplicand * multiplier
(1)    11E8 :                    ;;; @param RR14: multiplicand
(1)    11E8 :                    ;;; @param RR12: multiplier
(1)    11E8 :                    ;;; @return RR14: product
(1)    11E8 :                    ;;; @clobber RR10
(1)    11E8 :                    umul16:
(1)    11E8 : C4 CE CA                   ldw     RR10, RR14   ; RR10=multiplicand
(1)    11EB : 84 CD CE                   mult    RR14, R13    ; RR14=high(multiplicand)*low(multiplier)
(1)    11EE : 70 CF                      push    R15          ; save a part 1 of high(product)
(1)    11F0 : E8 CB                      ld      R14, R11
(1)    11F2 : 84 CC CE                   mult    RR14, R12    ; RR14=low(multiplicand)*high(multiplier)
(1)    11F5 : 70 CF                      push    R15          ; save a part 2 of high(product)
(1)    11F7 : E8 CB                      ld      R14, R11
(1)    11F9 : 84 CD CE                   mult    RR14, R13     ; RR14=low(multiplicand)*low(multiplier)
(1)    11FC : 50 CA                      pop     R10
(1)    11FE : 02 EA                      add     R14, R10        ; add a part 1 of high(product)
(1)    1200 : 50 CA                      pop     R10
(1)    1202 : 02 EA                      add     R14, R10        ; add a part 2 of high(product)
(1)    1204 : AF                         ret
(1)    1205 :
(1)    1205 :                    ;;; Signed multiplication: multiplicand *= multiplier
(1)    1205 :                    ;;; @param @R4: multiplicand
(1)    1205 :                    ;;; @param @R5: multiplier
(1)    1205 :                    ;;; @clobber R10-R15
(1)    1205 :                    mulsi2:
(1)    1205 : C5 C4 CE                   ldw     RR14, @R4
(1)    1208 : C5 C5 CC                   ldw     RR12, @R5
(1)    120B : 37 CE 06                   btjrf   mulsi2_abs_muliplicand, R12, #7
(1)    120E : 60 CC                      com     R12
(1)    1210 : 60 CD                      com     R13
(1)    1212 : A0 CC                      incw    RR12            ; multiplicand = -multiplicand
(1)    1214 :                    mulsi2_abs_muliplicand:
(1)    1214 : 37 EE 06                   btjrf   mulsi2_multiply, R14, #7
(1)    1217 : 60 CE                      com     R14
(1)    1219 : 60 CF                      com     R15
(1)    121B : A0 CE                      incw    RR14            ; multiplier = -multiplier
(1)    121D :                    mulsi2_multiply:
(1)    121D : F6 11 E8                   call    umul16          ; result = multiplicand * multiplier
(1)    1220 : C7 C4                      ld      R12, @R4
(1)    1222 : B3 C5                      xor     R12, @R5        ; R12=sign(@R4)^sign(@R5)
(1)    1224 : 37 CE 06                   btjrf   mulsi2_end, R12, #7
(1)    1227 : 60 CE                      com     R14
(1)    1229 : 60 CF                      com     R15
(1)    122B : A0 CE                      incw    RR14            ; result = -result
(1)    122D :                    mulsi2_end:
(1)    122D : D7 4E                      ld      0(R4), R14
(1)    122F : 97 F4 01                   ld      1(R4), R15
(1)    1232 : AF                         ret
(1)    1233 :
(1)    1233 :                    ;;; Unsigned division: dividend / divisor = quotient ... reminder
(1)    1233 :                    ;;; @praram RR14: dividend
(1)    1233 :                    ;;; @praram RR12: divisor
(1)    1233 :                    ;;; @return RR14: reminder
(1)    1233 :                    ;;; @return RR12: quotient
(1)    1233 :                    ;;; @clobber R10-R15
(1)    1233 :                    udiv16:
(1)    1233 : A0 CC                      incw    RR12
(1)    1235 : 80 CC                      decw    RR12
(1)    1237 : 6D 12 B2                   jp      z, udiv16_end   ; divide by zero erro
(1)    123A : CE                         inc     R12
(1)    123B : 00 CC                      dec     R12
(1)    123D : EB 3C                      jr      nz, udiv16_16   ; branch if high(divisor)!=0
(1)    123F : C4 CE CA                   ldw     RR10, RR14
(1)    1242 : 94 CD CA                   div     RR10, R13       ; calculate RR14/R13
(1)    1245 : 4B 09                      jr      ov, udiv16_8    ; branch if quotient is overflowed
(1)    1247 : CC 00                      ld      R12, #0         ; R10=reminder, R11=quotient
(1)    1249 : D8 CB                      ld      R13, R11
(1)    124B : E8 CC                      ld      R14, R12
(1)    124D : F8 CA                      ld      R15, R10
(1)    124F : AF                         ret
(1)    1250 :                    udiv16_8:
(1)    1250 : 70 C9                      push    R9              ; save R9
(1)    1252 : 98 CD                      ld      R9, R13         ; R9=divisor
(1)    1254 : 70 CF                      push    R15             ; save low(dividend)
(1)    1256 : B8 CE                      ld      R11, R14        ; high(dividend)
(1)    1258 : AC 00                      ld      R10, #0
(1)    125A : 94 C9 CA                   div     RR10, R9
(1)    125D : C8 CB                      ld      R12, R11        ; high(quotient)=high(dividend)/divisor
(1)    125F : E8 CA                      ld      R14, R10        ; high(reminder)=high(dividend)%divisor
(1)    1261 : 50 CB                      pop     R11             ; low(dividend)
(1)    1263 : AC 00                      ld      R10, #0
(1)    1265 : 94 C9 CA                   div     RR10, R9
(1)    1268 : D8 CB                      ld      R13, R11        ; low(quotient)=low(dividend)/divisor
(1)    126A : F8 CA                      ld      R15, R10        ; low(reminder)=low(dividend)%divisor
(1)    126C : 94 C9 CE                   div     RR14, R9        ; R14=reminder, R15=quotient
(1)    126F : 02 DF                      add     R13, R15        ; adjust quotient
(1)    1271 : 16 CC 00                   adc     R12, #0
(1)    1274 : F8 CE                      ld      R15, R14        ; reminder
(1)    1276 : E8 CC                      ld      R14, R12
(1)    1278 : 50 C9                      pop     R9
(1)    127A : AF                         ret
(1)    127B :                    udiv16_16:
(1)    127B : 70 C9                      push    R9
(1)    127D : 9C 01                      ld      R9, #1          ; R9=bits
(1)    127F : 8D 12 88                   jp      udiv16_prep
(1)    1282 :                    udiv16_prep_loop:
(1)    1282 : CF                         rcf                     ; divisor <<= 1
(1)    1283 : 10 CD                      rlc     R13
(1)    1285 : 10 CC                      rlc     R12
(1)    1287 : 9E                         inc     R9
(1)    1288 :                    udiv16_prep:                    ; while msb(divisor) == 0
(1)    1288 : 37 CE F7                   btjrf   udiv16_prep_loop, R12, #7
(1)    128B : C6 CA 00 00                ldw     RR10, #0        ; RR10=quotient
(1)    128F : 8D 12 9C                   jp      udiv16_enter_loop
(1)    1292 :                    udiv16_loop:
(1)    1292 : CF                         rcf                     ; divisor >>= 1
(1)    1293 : C0 CC                      rrc     R12
(1)    1295 : C0 CD                      rrc     R13
(1)    1297 : CF                         rcf                     ; quotient <<= 1
(1)    1298 : 10 CB                      rlc     R11
(1)    129A : 10 CA                      rlc     R10
(1)    129C :                    udiv16_enter_loop:
(1)    129C : 22 FD                      sub     R15, R13        ; dividend -= divisor
(1)    129E : 32 EC                      sbc     R14, R12
(1)    12A0 : 7D 12 A7                   jp      c, udiv16_readd ; if dividend < 0
(1)    12A3 : BE                         inc     R11             ; quotient |= 1
(1)    12A4 : 8D 12 AB                   jp      udiv16_next
(1)    12A7 :                    udiv16_readd:
(1)    12A7 : 02 FD                      add     R15, R13        ; dividend += divisor
(1)    12A9 : 12 EC                      adc     R14, R12        ; FLAG.D is always cleared
(1)    12AB :                    udiv16_next:
(1)    12AB : 9A E5                      djnz    R9, udiv16_loop ; RR14=reminder
(1)    12AD : C4 CA CC                   ldw     RR12, RR10      ; RR12=quotient
(1)    12B0 : 50 C9                      pop     R9
(1)    12B2 :                    udiv16_end:
(1)    12B2 : AF                         ret
(1)    12B3 :
(1)    12B3 :                    ;;; Signed division: dividend *= divisor
(1)    12B3 :                    ;;; @param @R4: dividend
(1)    12B3 :                    ;;; @param @R5: divisor
(1)    12B3 :                    ;;; @clobber R10-R15
(1)    12B3 :                    divsi2:
(1)    12B3 : C5 C4 CE                   ldw     RR14, @R4
(1)    12B6 : C5 C5 CC                   ldw     RR12, @R5
(1)    12B9 : 37 EE 06                   btjrf   divsi2_abs_dividend, R14, #7
(1)    12BC : 60 CE                      com     R14
(1)    12BE : 60 CF                      com     R15
(1)    12C0 : A0 CE                      incw    RR14            ; dividend = -dividend
(1)    12C2 :                    divsi2_abs_dividend:
(1)    12C2 : 37 CE 06                   btjrf   divsi2_divide, R12, #7
(1)    12C5 : 60 CC                      com     R12
(1)    12C7 : 60 CD                      com     R13
(1)    12C9 : A0 CC                      incw    RR12            ; divisor = -divisor
(1)    12CB :                    divsi2_divide:
(1)    12CB : F6 12 33                   call    udiv16
(1)    12CE : C7 E4                      ld      R14, @R4
(1)    12D0 : B3 E5                      xor     R14, @R5        ; R14=sign(@R4)^sign(@R5)
(1)    12D2 : 37 EE 06                   btjrf   divsi2_end, R14, #7
(1)    12D5 : 60 CC                      com     R12
(1)    12D7 : 60 CD                      com     R13
(1)    12D9 : A0 CC                      incw    RR12            ; dividend = = -dividend
(1)    12DB :                    divsi2_end:
(1)    12DB : D7 4C                      ld      0(R4), R12
(1)    12DD : 97 D4 01                   ld      1(R4), R13
(1)    12E0 : AF                         ret
       12E1 :                            include "queue.inc"
(1)    12E1 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    12E1 :                    ;;; [queue] queue structure
(1)    12E1 : =0                 queue_len:      equ     0       ; queue length
(1)    12E1 : =1                 queue_size:     equ     1       ; buffer size
(1)    12E1 : =2                 queue_put:      equ     2       ; queue put index
(1)    12E1 : =3                 queue_get:      equ     3       ; queue get index
(1)    12E1 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)    12E1 :
(1)    12E1 :                    ;;; [queue] Initialize queue
(1)    12E1 :                    ;;; @param RR2 queue work space pointer
(1)    12E1 :                    ;;; @param R1 queue work space size
(1)    12E1 :                    ;;; @clobber R1
(1)    12E1 :                    queue_init:
(1)    12E1 : 70 C0                      push    R0
(1)    12E3 : 70 C2                      push    R2
(1)    12E5 : 70 C3                      push    R3
(1)    12E7 : B0 C0                      clr     R0
(1)    12E9 : D3 03                      lde     queue_len(RR2), R0
(1)    12EB : 08 C1                      ld      R0, R1
(1)    12ED : 26 C0 04                   sub     R0, #queue_buf
(1)    12F0 : F7 03 01                   lde     queue_size(RR2), R0
(1)    12F3 : A0 C2                      incw    RR2
(1)    12F5 : A0 C2                      incw    RR2             ; RR2 points queue_put
(1)    12F7 : 06 C0 02                   add     R0, #2          ; for queue_put and queue_get
(1)    12FA : B0 C1                      clr     R1
(1)    12FC :                    queue_init_loop:
(1)    12FC : D3 13                      lde     @RR2, R1
(1)    12FE : A0 C2                      incw    RR2
(1)    1300 : 0A FA                      djnz    R0, queue_init_loop
(1)    1302 : 50 C3                      pop     R3
(1)    1304 : 50 C2                      pop     R2
(1)    1306 : 50 C0                      pop     R0
(1)    1308 : AF                         ret
(1)    1309 :
(1)    1309 :                    ;;; [queue] Add an element to queue
(1)    1309 :                    ;;; @param RR2 queue work space pointer
(1)    1309 :                    ;;; @param R0 an element
(1)    1309 :                    ;;; @return FLAGS.C 0 if queue is full
(1)    1309 :                    queue_add:
(1)    1309 : 70 C1                      push    R1
(1)    130B : 70 C4                      push    R4              ; save R1, R4
(1)    130D : C3 13                      lde     R1, queue_len(RR2)
(1)    130F : 1E                         inc     R1              ; queue_len++
(1)    1310 : E7 43 01                   lde     R4, queue_size(RR2)
(1)    1313 : A2 14                      cp      R1, R4
(1)    1315 : 7B 05                      jr      c, queue_add_store ; queue_len < queue_size
(1)    1317 : 50 C4                      pop     R4                 ; restore R1, R4
(1)    1319 : 50 C1                      pop     R1
(1)    131B : AF                         ret                     ; return with FLAGS.C=0
(1)    131C :                    queue_add_store:
(1)    131C : D3 13                      lde     queue_len(RR2), R1 ; update queue_len
(1)    131E : E7 13 02                   lde     R1, queue_put(RR2)
(1)    1321 : 70 C3                      push    R3              ; save RR2
(1)    1323 : 70 C2                      push    R2
(1)    1325 : 02 31                      add     R3, R1
(1)    1327 : 16 C2 00                   adc     R2, #0          ; RR2=&queue_buf[queue_put]
(1)    132A : F7 03 04                   lde     queue_buf(RR2), R0 ; store an element
(1)    132D : 50 C2                      pop     R2              ; restore RR2 points to queue_put
(1)    132F : 50 C3                      pop     R3
(1)    1331 : 1E                         inc     R1              ; queue_put++
(1)    1332 : A2 14                      cp      R1, R4
(1)    1334 : 7B 02                      jr      c, queue_add_update ; queue_put < queue_size
(1)    1336 : B0 C1                      clr     R1
(1)    1338 :                    queue_add_update:
(1)    1338 : F7 13 02                   lde     queue_put(RR2), R1
(1)    133B : 50 C4                      pop     R4              ; restpre R1, R4
(1)    133D : 50 C1                      pop     R1
(1)    133F : DF                         scf                     ; set carry flag
(1)    1340 : AF                         ret
(1)    1341 :
(1)    1341 :                    ;;; [queue] Remove an element from queue
(1)    1341 :                    ;;; @param RR2 queue work space pointer
(1)    1341 :                    ;;; @return R0 an element
(1)    1341 :                    ;;; @return FLAGS.C 0 if queue is empty
(1)    1341 :                    queue_remove:
(1)    1341 : 70 C1                      push    R1              ; save R1
(1)    1343 : C3 13                      lde     R1, queue_len(RR2)
(1)    1345 : 42 11                      or      R1, R1
(1)    1347 : EB 04                      jr      nz, queue_remove_elem ; queue_len > 0
(1)    1349 : 50 C1                      pop     R1
(1)    134B : CF                         rcf                           ; reset carry flag
(1)    134C : AF                         ret
(1)    134D :                    queue_remove_elem:
(1)    134D : 00 C1                      dec     R1              ; queue_len--
(1)    134F : D3 13                      lde     queue_len(RR2), R1 ; update queue_len
(1)    1351 : E7 13 03                   lde     R1, queue_get(RR2)
(1)    1354 : 70 C3                      push    R3
(1)    1356 : 70 C2                      push    R2
(1)    1358 : 02 31                      add     R3, R1
(1)    135A : 16 C2 00                   adc     R2, #0          ; RR2=&queue_buf[queue_get]
(1)    135D : E7 03 04                   lde     R0, queue_buf(RR2) ; read an element
(1)    1360 : 50 C2                      pop     R2              ; restore RR2 points to queue_get
(1)    1362 : 50 C3                      pop     R3
(1)    1364 : 1E                         inc     R1              ; queue_get++
(1)    1365 : 70 C4                      push    R4              ; save R4
(1)    1367 : E7 43 01                   lde     R4, queue_size(RR2)
(1)    136A : A2 14                      cp      R1, R4
(1)    136C : 50 C4                      pop     R4              ; restore R4
(1)    136E : 7B 02                      jr      c, queue_remove_update ; queue_get < queue_size
(1)    1370 : B0 C1                      clr     R1
(1)    1372 :                    queue_remove_update:
(1)    1372 : F7 13 03                   lde     queue_get(RR2), R1 ; update queue_get
(1)    1375 : 50 C1                      pop     R1
(1)    1377 : DF                         scf                     ; set carry
(1)    1378 : AF                         ret
       1379 :
       1379 :                            setrp   -1
       1379 :                    isr_intr_rx:
       1379 : E6 FC 20                   ld      P2AIP, #1 SHL 5 ; clear P23 IRQ0
       137C : 70 C0                      push    R0
       137E : 70 C2                      push    R2
       1380 : 70 C3                      push    R3
       1382 : C6 C2 FF 00                ldw     RR2, #USART
       1386 : E7 03 01                   lde     R0, USARTS(RR2)
       1389 : 56 C0 02                   and     R0, #ST_RxRDY_bm
       138C : 6B 09                      jr      z, isr_intr_rx_exit
       138E : C3 03                      lde     R0, USARTD(RR2)
       1390 : C6 C2 20 00                ldw     RR2, #rx_queue
       1394 : F6 13 09                   call    queue_add
       1397 :                    isr_intr_rx_exit:
       1397 : 50 C3                      pop     R3
       1399 : 50 C2                      pop     R2
       139B : 50 C0                      pop     R0
       139D : BF                         iret
       139E :
       139E :                    isr_intr_tx:
       139E : E6 FC 02                   ld      P2AIP, #1 SHL 1 ; clear P21 IRQ1
       13A1 : 70 C0                      push    R0
       13A3 : 70 C2                      push    R2
       13A5 : 70 C3                      push    R3
       13A7 : C6 C2 FF 00                ldw     RR2, #USART
       13AB : E7 03 01                   lde     R0, USARTS(RR2)
       13AE : 56 C0 01                   and     R0, #ST_TxRDY_bm
       13B1 : 6B 0F                      jr      z, isr_intr_tx_exit
       13B3 : C6 C2 20 80                ldw     RR2, #tx_queue
       13B7 : F6 13 41                   call    queue_remove
       13BA : C6 C2 FF 00                ldw     RR2, #USART
       13BE : FB 09                      jr      nc, isr_intr_send_empty
       13C0 : D3 03                      lde     USARTD(RR2), R0
       13C2 :                    isr_intr_tx_exit:
       13C2 : 50 C3                      pop     R3
       13C4 : 50 C2                      pop     R2
       13C6 : 50 C0                      pop     R0
       13C8 : BF                         iret
       13C9 :                    isr_intr_send_empty:
       13C9 : 0C 36                      ld      R0, #RX_EN_TX_DIS
       13CB : F7 03 01                   lde     USARTC(RR2), R0 ; disable Tx
       13CE : 50 C3                      pop     R3
       13D0 : 50 C2                      pop     R2
       13D2 : 50 C0                      pop     R0
       13D4 : BF                         iret
       13D5 :
       13D5 :                            end
