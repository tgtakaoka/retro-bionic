          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     ins8060
          0 :                            include "ins8060.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; INS8060
(1)       0 :                    ;;; Status Register
(1)       0 : =80                S_CY    =       X'80           ; Carry bit
(1)       0 : =80                S_L     =       X'80           ; Link bit
(1)       0 : =40                S_OV    =       X'40           ; Overflow bit
(1)       0 : =20                S_SB    =       X'20           ; Sense B bit
(1)       0 : =10                S_SA    =       X'10           ; Sense A bit
(1)       0 : =8                 S_IE    =       X'08           ; Interrupt Enable bit
(1)       0 : =4                 S_F2    =       X'04           ; Flag 2 bit
(1)       0 : =2                 S_F1    =       X'02           ; Flag 1 bit
(1)       0 : =1                 S_F0    =       X'01           ; flag 0 bit
(1)       0 :
(1)       0 :                    ;;; Dynamic Offset by E register
(1)       0 : =80                OFFSET_E        =       X'80    ; offset by E register
(1)       0 :
(1)       0 :                    ;;; Transfer locations
(1)       0 : =1                 ORG_RESTART     =       X'0001  ; Restart transfer location
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA    =       X'DF00
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control    =       ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm          =       X'03   ; Group mask
(1)       0 : =0                 CDS_DIV1_gc     =       X'00   ; /1
(1)       0 : =1                 CDS_DIV16_gc    =       X'01   ; /16
(1)       0 : =2                 CDS_DIV64_gc    =       X'02   ; /64
(1)       0 : =3                 CDS_RESET_gc    =       X'03   ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm          =       X'1C   ; Group mask
(1)       0 : =0                 WSB_7E2_gc      =       X'00   ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc      =       X'04   ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc      =       X'08   ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc      =       X'0C   ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc      =       X'10   ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc      =       X'14   ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc      =       X'18   ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc      =       X'1C   ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm          =       X'60   ; Group mask
(1)       0 : =0                 TCB_DI_gc       =       X'00   ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc       =       X'20   ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc      =       X'40   ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc    =       X'60   ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                    ; Transmit Break Level
(1)       0 : =80                RIEB_bm         =       X'80   ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status     =       ACIA+0
(1)       0 : =1                 RDRF_bm         =       X'01   ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm         =       X'02   ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm         =       X'04   ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm         =       X'08   ; Clear To Send Flag
(1)       0 : =10                FERR_bm         =       X'10   ; Frame Error Flag
(1)       0 : =20                OVRN_bm         =       X'20   ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm         =       X'40   ; Parity Error Flag
(1)       0 : =80                IRQF_bm         =       X'80   ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data       =       ACIA+1  ; Data register
          0 : =0                 ACIA_C  =       0               ; ACIA control offset
          0 : =0                 ACIA_S  =       0               ; ACIA status offset
          0 : =1                 ACIA_D  =       1               ; ACIA data register offset
          0 :
          0 : =10                rx_queue_size   =       16
          0 : =30                tx_queue_size   =       48
          0 : =94                RX_INT_TX_NO    =       WSB_8N1_gc|RIEB_bm
          0 : =B4                RX_INT_TX_INT   =       WSB_8N1_gc|RIEB_bm|TCB_EI_gc
          0 :
       2000 :                            .=      X'2000
       2000 :                    rx_queue:
       2010 :                            .=      .+rx_queue_size
       2010 :                    tx_queue:
       2040 :                            .=      .+tx_queue_size
       2040 :
          1 :                            .=      ORG_RESTART
          1 : C4 FF                      ldi     L(stack)
          3 : 32                         xpal    P2
          4 : C4 0F                      ldi     H(stack)
          6 : 36                         xpah    P2
          7 : C4 3E                      ldi     L(ADDR(isr_sensea))
          9 : 33                         xpal    P3              ; setup interrupt entry P3
          A : C4 17                      ldi     H(ADDR(isr_sensea))
          C : 37                         xpah    P3
          D : C4 FF                      ldi     L(ADDR(initialize))
          F : 31                         xpal    P1
         10 : C4 1F                      ldi     H(ADDR(initialize))
         12 : 35                         xpah    P1
         13 : 3D                         xppc    P1
         14 :
       1000 :                            .=      X'1000
       1000 : =FFF               stack   =       .-1
       1000 :                    initialize:
       1000 : C4 68                      ldi     L(ADDR(queue_init))
       1002 : 31                         xpal    P1
       1003 : C4 16                      ldi     H(ADDR(queue_init))
       1005 : 35                         xpah    P1              ; P1=queue_init
       1006 : C4 10                      ldi     rx_queue_size
       1008 : 3D                         xppc    P1              ; call queue_init
       1009 : 00 20                      .dbyte  rx_queue
       100B : C4 30                      ldi     tx_queue_size
       100D : 3D                         xppc    P1              ; call queue init
       100E : 10 20                      .dbyte  tx_queue
       1010 :
       1010 :                            ;; initialize ACIA
       1010 : C4 00                      ldi     L(ACIA)
       1012 : 31                         xpal    P1
       1013 : C4 DF                      ldi     H(ACIA)
       1015 : 35                         xpah    P1
       1016 : C4 03                      ldi     CDS_RESET_gc    ; Master reset
       1018 : C9 00                      st      ACIA_C(P1)
       101A : C4 94                      ldi     RX_INT_TX_NO    ; 8 bits + No Parity + 1 Stop Bits
       101C :                                                    ; Transmit, Receive interrupts disabled
       101C : C9 00                      st      ACIA_C(P1)      ;
       101E : 05                         ien                     ; enable interrupt
       101F :
       101F :                    loop:
       101F : C4 A1                      ldi     L(ADDR(mandelbrot))
       1021 : 31                         xpal    P1
       1022 : C4 10                      ldi     H(ADDR(mandelbrot))
       1024 : 35                         xpah    P1
       1025 : 3D                         xppc    P1              ; call mandelbrot
       1026 : C4 48                      ldi     L(ADDR(newline))
       1028 : 31                         xpal    P1
       1029 : C4 16                      ldi     H(ADDR(newline))
       102B : 35                         xpah    P1
       102C : 3D                         xppc    P1              ; call mandelbrot
       102D : 90 F0                      jmp     loop
       102F :
       102F :                            include "mandelbrot.inc"
(1)    102F :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    102F :
(1)    102F : 32 00              cF:     .dbyte  50              ; constant
(1)    1031 : F4 FF              c_12:   .dbyte  -12
(1)    1033 : CF FF              c_49:   .dbyte  -49
(1)    1035 : E5 00              c229:   .dbyte  229
(1)    1037 : 64 00              c100:   .dbyte  100
(1)    1039 : A0 01              c416:   .dbyte  416
(1)    103B : 1E 00              c30:    .dbyte  30
(1)    103D : 0D 00              c13:    .dbyte  13
(1)    103F : =103F              vBASE   =       .
(1)    103F : 00 00              vC:     .dbyte  0
(1)    1041 : 00 00              vD:     .dbyte  0
(1)    1043 : 00 00              vA:     .dbyte  0
(1)    1045 : 00 00              vB:     .dbyte  0
(1)    1047 : 00 00              vS:     .dbyte  0
(1)    1049 : 00 00              vP:     .dbyte  0
(1)    104B : 00 00              vQ:     .dbyte  0
(1)    104D : 00 00              vT:     .dbyte  0
(1)    104F : 00 00              vT1:    .dbyte  0
(1)    1051 : 00 00              vT2:    .dbyte  0
(1)    1053 : 00 00              vY:     .dbyte  0
(1)    1055 : 00 00              vX:     .dbyte  0
(1)    1057 : 00 00              vI:     .dbyte  0
(1)    1059 :
(1)    1059 :                    ;;; Print variable "vname=value "
(1)    1059 :                    ;;;   xppc   P1
(1)    1059 :                    ;;;   .byte  vname
(1)    1059 :                    ;;;   .dbyte &value
(1)    1059 :                    ;;; @local P[1:0] &value
(1)    1059 :                    ;;; @local P[3:2] return address
(1)    1059 :                    print_exit:
(1)    1059 : C6 02                      ld      @2(P2)          ; discard local
(1)    105B : C6 01                      ld      @1(P2)
(1)    105D : 31                         xpal    P1
(1)    105E : C6 01                      ld      @1(P2)
(1)    1060 : 35                         xpah    P1
(1)    1061 : 3D                         xppc    P1              ; return
(1)    1062 :                    print:
(1)    1062 : C5 01                      ld      @1(P1)          ; point vname
(1)    1064 : C5 01                      ld      @1(P1)
(1)    1066 : 01                         xae                     ; E=vname
(1)    1067 : C5 01                      ld      @1(P1)
(1)    1069 : CE FC                      st      @-4(P2)         ; P2[1:0]=&value
(1)    106B : C1 00                      ld      0(P1)           ; P1=return address
(1)    106D : CA 01                      st      1(P2)
(1)    106F : C2 00                      ld      0(P2)           ; P2[1:0]=&value
(1)    1071 : 31                         xpal    P1
(1)    1072 : CA 02                      st      2(P2)           ; P2[3:2]=return address
(1)    1074 : C2 01                      ld      1(P2)
(1)    1076 : 35                         xpah    P1              ; P1=&value
(1)    1077 : CA 03                      st      3(P2)
(1)    1079 : C1 00                      ld      0(P1)           ; vDEBUG=value
(1)    107B : C8 24                      st      vDEBUG
(1)    107D : C1 01                      ld      1(P1)
(1)    107F : C8 21                      st      vDEBUG+1
(1)    1081 : C4 23                      ldi     L(ADDR(putchar))
(1)    1083 : 31                         xpal    P1
(1)    1084 : C4 16                      ldi     H(ADDR(putchar))
(1)    1086 : 35                         xpah    P1              ; P1=ADDR(putchar)
(1)    1087 : 40                         lde                     ; A=vname
(1)    1088 : 3D                         xppc    P1              ; print vname
(1)    1089 : C4 3D                      ldi     '='
(1)    108B : 3D                         xppc    P1              ; print '='
(1)    108C : C4 D1                      ldi     L(ADDR(print_int16))
(1)    108E : 31                         xpal    P1
(1)    108F : C4 12                      ldi     H(ADDR(print_int16))
(1)    1091 : 35                         xpah    P1
(1)    1092 : 3D                         xppc    P1
(1)    1093 : A0 10                      .dbyte  vDEBUG
(1)    1095 : C4 23                      ldi     L(ADDR(putchar))
(1)    1097 : 31                         xpal    P1
(1)    1098 : C4 16                      ldi     H(ADDR(putchar))
(1)    109A : 35                         xpah    P1              ; P1=ADDR(putchar)
(1)    109B : C4 20                      ldi     ' '
(1)    109D : 3D                         xppc    P1              ; print space
(1)    109E : 90 B9                      jmp     print_exit
(1)    10A0 : 02 00              vDEBUG: .dbyte  2
(1)    10A2 :
(1)    10A2 :                    mandelbrot:
(1)    10A2 : C4 10                      ldi     H(vY)
(1)    10A4 : 35                         xpah    P1
(1)    10A5 : CE FF                      st      @-1(P2)
(1)    10A7 : C4 53                      ldi     L(vY)
(1)    10A9 : 31                         xpal    P1
(1)    10AA : CE FF                      st      @-1(P2)         ; save return address
(1)    10AC : C4 F4                      ldi     -12
(1)    10AE : C9 00                      st      0(P1)
(1)    10B0 : C4 FF                      ldi     -1
(1)    10B2 : C9 01                      st      1(P1)           ; Y=-12
(1)    10B4 :                    loop_y:
(1)    10B4 : C4 55                      ldi     L(vX)
(1)    10B6 : 31                         xpal    P1
(1)    10B7 : C4 10                      ldi     H(vX)
(1)    10B9 : 35                         xpah    P1
(1)    10BA : C4 CF                      ldi     -49
(1)    10BC : C9 00                      st      0(P1)
(1)    10BE : C4 FF                      ldi     -1
(1)    10C0 : C9 01                      st      1(P1)           ; X=-49
(1)    10C2 :                    loop_x:
(1)    10C2 : C4 3F                      ldi     L(vBASE)
(1)    10C4 : 31                         xpal    P1
(1)    10C5 : C4 10                      ldi     H(vBASE)
(1)    10C7 : 35                         xpah    P1              ; P1=vBASE
(1)    10C8 : C1 16                      ld      (vX-vBASE)(P1)
(1)    10CA : C9 00                      st      (vC-vBASE)(P1)  ; C=X
(1)    10CC : C1 17                      ld      (vX-vBASE+1)(P1)
(1)    10CE : C9 01                      st      (vC-vBASE+1)(P1)
(1)    10D0 : C1 14                      ld      (vY-vBASE)(P1)
(1)    10D2 : C9 02                      st      (vD-vBASE)(P1)  ; D=Y
(1)    10D4 : C1 15                      ld      (vY-vBASE+1)(P1)
(1)    10D6 : C9 03                      st      (vD-vBASE+1)(P1)
(1)    10D8 : C4 41                      ldi     L(ADDR(mulsi2))
(1)    10DA : 31                         xpal    P1
(1)    10DB : C4 14                      ldi     H(ADDR(mulsi2))
(1)    10DD : 35                         xpah    P1              ; P1=ADDR(mulsi2)
(1)    10DE : 3D                         xppc    P1              ; C=X*229
(1)    10DF : 35 10                      .dbyte  c229
(1)    10E1 : 3F 10                      .dbyte  vC
(1)    10E3 : 3D                         xppc    P1              ; D=Y*416
(1)    10E4 : 39 10                      .dbyte  c416
(1)    10E6 : 41 10                      .dbyte  vD
(1)    10E8 : C4 F1                      ldi     L(ADDR(divsi2))
(1)    10EA : 31                         xpal    P1
(1)    10EB : C4 14                      ldi     H(ADDR(divsi2))
(1)    10ED : 35                         xpah    P1              ; P1=ADDR(divsi2)
(1)    10EE : 3D                         xppc    P1              ; C=X*229/100
(1)    10EF : 37 10                      .dbyte  c100
(1)    10F1 : 3F 10                      .dbyte  vC
(1)    10F3 : 3D                         xppc    P1              ; D=Y*416/100
(1)    10F4 : 37 10                      .dbyte  c100
(1)    10F6 : 41 10                      .dbyte  vD
(1)    10F8 : C4 3F                      ldi     L(vBASE)
(1)    10FA : 31                         xpal    P1
(1)    10FB : C4 10                      ldi     H(vBASE)
(1)    10FD : 35                         xpah    P1              ; P1=vBASE
(1)    10FE : C1 00                      ld      (vC-vBASE)(P1)
(1)    1100 : C9 04                      st      (vA-vBASE)(P1)  ; A=C
(1)    1102 : C1 01                      ld      (vC-vBASE+1)(P1)
(1)    1104 : C9 05                      st      (vA-vBASE+1)(P1)
(1)    1106 : C1 02                      ld      (vD-vBASE)(P1)
(1)    1108 : C9 06                      st      (vB-vBASE)(P1)  ; B=D
(1)    110A : C1 03                      ld      (vD-vBASE+1)(P1)
(1)    110C : C9 07                      st      (vB-vBASE+1)(P1)
(1)    110E : C4 00                      ldi     0
(1)    1110 : C9 18                      st      (vI-vBASE)(P1)  ; I=0
(1)    1112 : C9 19                      st      (vI-vBASE+1)(P1)
(1)    1114 :
(1)    1114 :                            ;; ldi     L(ADDR(print))
(1)    1114 :                            ;; xpal    P1
(1)    1114 :                            ;; ldi     H(ADDR(print))
(1)    1114 :                            ;; xpah    P1              ; P1=ADDR(print)
(1)    1114 :                            ;; xppc    P1              ; print Y
(1)    1114 :                            ;; .byte   'Y'
(1)    1114 :                            ;; .dbyte  vY
(1)    1114 :                            ;; xppc    P1              ; print X
(1)    1114 :                            ;; .byte   'X'
(1)    1114 :                            ;; .dbyte  vX
(1)    1114 :                            ;; xppc    P1              ; print C
(1)    1114 :                            ;; .byte   'C'
(1)    1114 :                            ;; .dbyte  vC
(1)    1114 :                            ;; xppc    P1              ; print D
(1)    1114 :                            ;; .byte   'D'
(1)    1114 :                            ;; .dbyte  vD
(1)    1114 :                            ;; ldi     L(ADDR(newline))
(1)    1114 :                            ;; xpal    P1
(1)    1114 :                            ;; ldi     H(ADDR(newline))
(1)    1114 :                            ;; xpah    P1              ; P1=ADDR(newline)
(1)    1114 :                            ;; xppc    P1
(1)    1114 :
(1)    1114 :                    loop_i:
(1)    1114 : C4 3F                      ldi     L(vBASE)
(1)    1116 : 31                         xpal    P1
(1)    1117 : C4 10                      ldi     H(vBASE)
(1)    1119 : 35                         xpah    P1              ; P1=vBASE
(1)    111A : C1 06                      ld      (vB-vBASE)(P1)
(1)    111C : C9 0C                      st      (vQ-vBASE)(P1)  ; Q=B
(1)    111E : C9 10                      st      (vT1-vBASE)(P1) ; T1=B
(1)    1120 : C1 07                      ld      (vB-vBASE+1)(P1)
(1)    1122 : C9 0D                      st      (vQ-vBASE+1)(P1)
(1)    1124 : C9 11                      st      (vT1-vBASE+1)(P1)
(1)    1126 : C4 F1                      ldi     L(ADDR(divsi2))
(1)    1128 : 31                         xpal    P1
(1)    1129 : C4 14                      ldi     H(ADDR(divsi2))
(1)    112B : 35                         xpah    P1              ; P1=ADDR(divsi2)
(1)    112C : 3D                         xppc    P1              ; Q=B/F
(1)    112D : 2F 10                      .dbyte  cF
(1)    112F : 4B 10                      .dbyte  vQ
(1)    1131 : C4 3F                      ldi     L(vBASE)
(1)    1133 : 31                         xpal    P1
(1)    1134 : C4 10                      ldi     H(vBASE)
(1)    1136 : 35                         xpah    P1              ; P1=vBASE
(1)    1137 : C1 0C                      ld      (vQ-vBASE)(P1)
(1)    1139 : C9 0E                      st      (vT-vBASE)(P1)  ; T=Q=B/F
(1)    113B : C1 0D                      ld      (vQ-vBASE+1)(P1)
(1)    113D : C9 0F                      st      (vT-vBASE+1)(P1)
(1)    113F : C1 04                      ld      (vA-vBASE)(P1)
(1)    1141 : C9 12                      st      (vT2-vBASE)(P1) ; T2=A
(1)    1143 : C1 05                      ld      (vA-vBASE+1)(P1)
(1)    1145 : C9 13                      st      (vT2-vBASE+1)(P1)
(1)    1147 : C4 41                      ldi     L(ADDR(mulsi2))
(1)    1149 : 31                         xpal    P1
(1)    114A : C4 14                      ldi     H(ADDR(mulsi2))
(1)    114C : 35                         xpah    P1              ; P1=ADDR(mulsi2)
(1)    114D : 3D                         xppc    P1              ; T=Q*F
(1)    114E : 2F 10                      .dbyte  cF
(1)    1150 : 4D 10                      .dbyte  vT
(1)    1152 : 3D                         xppc    P1              ; T1=B*B
(1)    1153 : 45 10                      .dbyte  vB
(1)    1155 : 4F 10                      .dbyte  vT1
(1)    1157 : 3D                         xppc    P1              ; T2=A*A
(1)    1158 : 43 10                      .dbyte  vA
(1)    115A : 51 10                      .dbyte  vT2
(1)    115C : C4 3F                      ldi     L(vBASE)
(1)    115E : 31                         xpal    P1
(1)    115F : C4 10                      ldi     H(vBASE)
(1)    1161 : 35                         xpah    P1              ; P1=vBASE
(1)    1162 : 03                         scl
(1)    1163 : C1 06                      ld      (vB-vBASE)(P1)
(1)    1165 : F9 0E                      cad     (vT-vBASE)(P1)
(1)    1167 : C9 08                      st      (vS-vBASE)(P1)  ; S=B-Q*F
(1)    1169 : C1 07                      ld      (vB-vBASE+1)(P1)
(1)    116B : F9 0F                      cad     (vT-vBASE+1)(P1)
(1)    116D : C9 09                      st      (vS-vBASE+1)(P1)
(1)    116F : 03                         scl
(1)    1170 : C1 12                      ld      (vT2-vBASE)(P1)
(1)    1172 : F9 10                      cad     (vT1-vBASE)(P1)
(1)    1174 : C9 12                      st      (vT2-vBASE)(P1) ; T2=A*A-B*B
(1)    1176 : C1 13                      ld      (vT2-vBASE+1)(P1)
(1)    1178 : F9 11                      cad     (vT1-vBASE+1)(P1)
(1)    117A : C9 13                      st      (vT2-vBASE+1)(P1)
(1)    117C : C1 04                      ld      (vA-vBASE)(P1)
(1)    117E : C9 0E                      st      (vT-vBASE)(P1)  ; T=A
(1)    1180 : C9 10                      st      (vT1-vBASE)(P1) ; T1=A
(1)    1182 : C1 05                      ld      (vA-vBASE+1)(P1)
(1)    1184 : C9 0F                      st      (vT-vBASE+1)(P1)
(1)    1186 : C9 11                      st      (vT1-vBASE+1)(P1)
(1)    1188 : C4 41                      ldi     L(ADDR(mulsi2))
(1)    118A : 31                         xpal    P1
(1)    118B : C4 14                      ldi     H(ADDR(mulsi2))
(1)    118D : 35                         xpah    P1              ; P1=ADDR(mulsi2)
(1)    118E : 3D                         xppc    P1              ; T=A*S
(1)    118F : 47 10                      .dbyte  vS
(1)    1191 : 4D 10                      .dbyte  vT
(1)    1193 : 3D                         xppc    P1              ; T1=A*Q
(1)    1194 : 4B 10                      .dbyte  vQ
(1)    1196 : 4F 10                      .dbyte  vT1
(1)    1198 : C4 F1                      ldi     L(ADDR(divsi2))
(1)    119A : 31                         xpal    P1
(1)    119B : C4 14                      ldi     H(ADDR(divsi2))
(1)    119D : 35                         xpah    P1              ; P1=ADDR(divsi2)
(1)    119E : 3D                         xppc    P1              ; T2=(A*A-B*B)/F
(1)    119F : 2F 10                      .dbyte  cF
(1)    11A1 : 51 10                      .dbyte  vT2
(1)    11A3 : 3D                         xppc    P1              ; T=A*S/F
(1)    11A4 : 2F 10                      .dbyte  cF
(1)    11A6 : 4D 10                      .dbyte  vT
(1)    11A8 : C4 3F                      ldi     L(vBASE)
(1)    11AA : 31                         xpal    P1
(1)    11AB : C4 10                      ldi     H(vBASE)
(1)    11AD : 35                         xpah    P1              ; P1=vBASE
(1)    11AE : 02                         ccl
(1)    11AF : C1 00                      ld      (vC-vBASE)(P1)
(1)    11B1 : F1 12                      add     (vT2-vBASE)(P1)
(1)    11B3 : C9 04                      st      (vA-vBASE)(P1) ; A=(A*A-B*B)/F+C
(1)    11B5 : C9 0A                      st      (vP-vBASE)(P1) ; P=A
(1)    11B7 : C1 01                      ld      (vC-vBASE+1)(P1)
(1)    11B9 : F1 13                      add     (vT2-vBASE+1)(P1)
(1)    11BB : C9 05                      st      (vA-vBASE+1)(P1)
(1)    11BD : C9 0B                      st      (vP-vBASE+1)(P1)
(1)    11BF : 02                         ccl
(1)    11C0 : C1 0E                      ld      (vT-vBASE)(P1)
(1)    11C2 : F1 10                      add     (vT1-vBASE)(P1)
(1)    11C4 : C9 10                      st      (vT1-vBASE)(P1) ; T1=A*Q+A*S/F
(1)    11C6 : C1 0F                      ld      (vT-vBASE+1)(P1)
(1)    11C8 : F1 11                      add     (vT1-vBASE+1)(P1)
(1)    11CA : C9 11                      st      (vT1-vBASE+1)(P1)
(1)    11CC : 02                         ccl
(1)    11CD : C1 10                      ld      (vT1-vBASE)(P1)
(1)    11CF : F1 10                      add     (vT1-vBASE)(P1)
(1)    11D1 : C9 06                      st      (vB-vBASE)(P1)  ; B=2*(A*Q+A*S/F)
(1)    11D3 : C1 11                      ld      (vT1-vBASE+1)(P1)
(1)    11D5 : F1 11                      add     (vT1-vBASE+1)(P1)
(1)    11D7 : C9 07                      st      (vB-vBASE+1)(P1)
(1)    11D9 : 02                         ccl
(1)    11DA : C1 06                      ld      (vB-vBASE)(P1)
(1)    11DC : F1 02                      add     (vD-vBASE)(P1)
(1)    11DE : C9 06                      st      (vB-vBASE)(P1)  ; B=2*(A*Q+A*S/F)+D
(1)    11E0 : C9 0C                      st      (vQ-vBASE)(P1)  ; Q=B
(1)    11E2 : C1 07                      ld      (vB-vBASE+1)(P1)
(1)    11E4 : F1 03                      add     (vD-vBASE+1)(P1)
(1)    11E6 : C9 07                      st      (vB-vBASE+1)(P1)
(1)    11E8 : C9 0D                      st      (vQ-vBASE+1)(P1)
(1)    11EA : C4 F1                      ldi     L(ADDR(divsi2))
(1)    11EC : 31                         xpal    P1
(1)    11ED : C4 14                      ldi     H(ADDR(divsi2))
(1)    11EF : 35                         xpah    P1              ; P1=ADDR(divsi2)
(1)    11F0 : 3D                         xppc    P1              ; P=A/F
(1)    11F1 : 2F 10                      .dbyte  cF
(1)    11F3 : 49 10                      .dbyte  vP
(1)    11F5 : 3D                         xppc    P1              ; Q=B/F
(1)    11F6 : 2F 10                      .dbyte  cF
(1)    11F8 : 4B 10                      .dbyte  vQ
(1)    11FA : C4 3F                      ldi     L(vBASE)
(1)    11FC : 31                         xpal    P1
(1)    11FD : C4 10                      ldi     H(vBASE)
(1)    11FF : 35                         xpah    P1              ; P1=vBASE
(1)    1200 : C1 0A                      ld      (vP-vBASE)(P1)
(1)    1202 : C9 0E                      st      (vT-vBASE)(P1)  ; T=P
(1)    1204 : C1 0B                      ld      (vP-vBASE+1)(P1)
(1)    1206 : C9 0F                      st      (vT-vBASE+1)(P1)
(1)    1208 : C1 0C                      ld      (vQ-vBASE)(P1)
(1)    120A : C9 10                      st      (vT1-vBASE)(P1) ; T1=Q
(1)    120C : C1 0D                      ld      (vQ-vBASE+1)(P1)
(1)    120E : C9 11                      st      (vT1-vBASE+1)(P1)
(1)    1210 : C4 41                      ldi     L(ADDR(mulsi2))
(1)    1212 : 31                         xpal    P1
(1)    1213 : C4 14                      ldi     H(ADDR(mulsi2))
(1)    1215 : 35                         xpah    P1              ; P1=ADDR(mulsi2)
(1)    1216 : 3D                         xppc    P1              ; T=P*P
(1)    1217 : 49 10                      .dbyte  vP
(1)    1219 : 4D 10                      .dbyte  vT
(1)    121B : 3D                         xppc    P1              ; T1=Q*Q
(1)    121C : 4B 10                      .dbyte  vQ
(1)    121E : 4F 10                      .dbyte  vT1
(1)    1220 : C4 3F                      ldi     L(vBASE)
(1)    1222 : 31                         xpal    P1
(1)    1223 : C4 10                      ldi     H(vBASE)
(1)    1225 : 35                         xpah    P1              ; P1=vBASE
(1)    1226 : 02                         ccl
(1)    1227 : C1 10                      ld      (vT1-vBASE)(P1)
(1)    1229 : F1 0E                      add     (vT-vBASE)(P1)
(1)    122B : C9 0E                      st      (vT-vBASE)(P1)  ; T=P*P+Q*Q
(1)    122D : C1 11                      ld      (vT1-vBASE+1)(P1)
(1)    122F : F1 0F                      add     (vT-vBASE+1)(P1)
(1)    1231 : C9 0F                      st      (vT-vBASE+1)(P1)
(1)    1233 :
(1)    1233 :                            ;; ldi     L(ADDR(putchar))
(1)    1233 :                            ;; xpal    P1
(1)    1233 :                            ;; ldi     H(ADDR(putchar))
(1)    1233 :                            ;; xpah    P1              ; P1=ADDR(putchar)
(1)    1233 :                            ;; ldi     ' '
(1)    1233 :                            ;; xppc    P1              ; print space
(1)    1233 :                            ;; ldi     L(ADDR(print))
(1)    1233 :                            ;; xpal    P1
(1)    1233 :                            ;; ldi     H(ADDR(print))
(1)    1233 :                            ;; xpah    P1              ; P1=ADDR(print)
(1)    1233 :                            ;; xppc    P1              ; print I
(1)    1233 :                            ;; .byte   'I'
(1)    1233 :                            ;; .dbyte  vI
(1)    1233 :                            ;; xppc    P1              ; print A
(1)    1233 :                            ;; .byte   'A'
(1)    1233 :                            ;; .dbyte  vA
(1)    1233 :                            ;; xppc    P1              ; print B
(1)    1233 :                            ;; .byte   'B'
(1)    1233 :                            ;; .dbyte  vB
(1)    1233 :                            ;; xppc    P1              ; print P
(1)    1233 :                            ;; .byte   'P'
(1)    1233 :                            ;; .dbyte  vP
(1)    1233 :                            ;; xppc    P1              ; print Q
(1)    1233 :                            ;; .byte   'Q'
(1)    1233 :                            ;; .dbyte  vQ
(1)    1233 :                            ;; xppc    P1              ; print T
(1)    1233 :                            ;; .byte   'T'
(1)    1233 :                            ;; .dbyte  vT
(1)    1233 :                            ;; ldi     L(ADDR(newline))
(1)    1233 :                            ;; xpal    P1
(1)    1233 :                            ;; ldi     H(ADDR(newline))
(1)    1233 :                            ;; xpah    P1              ; P1=ADDR(newline)
(1)    1233 :                            ;; xppc    P1              ; newline
(1)    1233 :
(1)    1233 : C4 4D                      ldi     L(vT)
(1)    1235 : 31                         xpal    P1
(1)    1236 : C4 10                      ldi     H(vT)
(1)    1238 : 35                         xpah    P1              ; P1=&vT
(1)    1239 : C1 01                      ld      1(P1)           ; H(T)
(1)    123B : 9C 1F                      jnz     next_i
(1)    123D : 03                         scl                     ; clear borrow
(1)    123E : C4 04                      ldi     4
(1)    1240 : F9 00                      cad     0(P1)           ; 4-L(T)
(1)    1242 : 94 18                      jp      next_i          ; branch if 4<T
(1)    1244 :                    print_i:
(1)    1244 : C4 57                      ldi     L(vI)
(1)    1246 : 31                         xpal    P1
(1)    1247 : C4 10                      ldi     H(vI)
(1)    1249 : 35                         xpah    P1              ; P1=&vI
(1)    124A : C1 00                      ld      0(P1)
(1)    124C : 03                         scl                     ; clear borrow
(1)    124D : FC 0A                      cai     10              ; A=I-10
(1)    124F : 94 06                      jp      print_i_hex
(1)    1251 : C1 00                      ld      0(P1)
(1)    1253 : DC 30                      ori     '0'
(1)    1255 : 90 1B                      jmp     print_char
(1)    1257 :                    print_i_hex:
(1)    1257 : 02                         ccl
(1)    1258 : F4 41                      adi     'A'
(1)    125A : 90 16                      jmp     print_char
(1)    125C :                    next_i:
(1)    125C : C4 57                      ldi     L(vI)
(1)    125E : 31                         xpal    P1
(1)    125F : C4 10                      ldi     H(vI)
(1)    1261 : 35                         xpah    P1              ; P1=&vI
(1)    1262 : A9 00                      ild     0(P1)           ; I+=1
(1)    1264 : 03                         scl                     ; clear borrow
(1)    1265 : FC 10                      cai     16              ; I-16
(1)    1267 : 94 07                      jp      print_space     ; branch if I >= 16
(1)    1269 : C4 13                      ldi     L(ADDR(loop_i))
(1)    126B : 31                         xpal    P1
(1)    126C : C4 11                      ldi     H(ADDR(loop_i))
(1)    126E : 35                         xpah    P1
(1)    126F : 3D                         xppc    P1              ; jump to loop_i
(1)    1270 :                    print_space:
(1)    1270 : C4 20                      ldi     ' '
(1)    1272 :                    print_char:
(1)    1272 : 01                         xae                     ; E=char
(1)    1273 : C4 23                      ldi     L(ADDR(putchar))
(1)    1275 : 31                         xpal    P1
(1)    1276 : C4 16                      ldi     H(ADDR(putchar))
(1)    1278 : 35                         xpah    P1
(1)    1279 : 40                         lde
(1)    127A : 3D                         xppc    P1              ; print char
(1)    127B :
(1)    127B :                            ;; ldi     '@'
(1)    127B :                            ;; xppc    P1              ; print '@='
(1)    127B :                            ;; ldi     '='
(1)    127B :                            ;; xppc    P1
(1)    127B :                            ;; lde
(1)    127B :                            ;; xppc    P1
(1)    127B :                            ;; ldi     L(ADDR(newline))
(1)    127B :                            ;; xpal    P1
(1)    127B :                            ;; ldi     H(ADDR(newline))
(1)    127B :                            ;; xpah    P1              ; P1=ADDR(newline)
(1)    127B :                            ;; xppc    P1
(1)    127B :
(1)    127B : C4 02                      ldi     L(ADDR(getchar))
(1)    127D : 31                         xpal    P1
(1)    127E : C4 16                      ldi     H(ADDR(getchar))
(1)    1280 : 35                         xpah    P1              ; P1=ADDR(getchar)
(1)    1281 : 3D                         xppc    P1
(1)    1282 : 98 04                      jz      next_x
(1)    1284 : 40                         lde
(1)    1285 : 9C 01                      jnz     next_x
(1)    1287 : 00                         halt                    ; halt to system
(1)    1288 :
(1)    1288 :                    next_x:
(1)    1288 : C4 55                      ldi     L(vX)
(1)    128A : 31                         xpal    P1
(1)    128B : C4 10                      ldi     H(vX)
(1)    128D : 35                         xpah    P1              ; P1=&X
(1)    128E : A9 00                      ild     0(P1)           ; L(X)++
(1)    1290 : 9C 02                      jnz     check_x
(1)    1292 : A9 01                      ild     1(P1)           ; H(X)++
(1)    1294 :                    check_x:
(1)    1294 : C1 01                      ld      1(P1)           ; H(X)
(1)    1296 : 9C 07                      jnz     jump_loop_x     ; branch if X<0
(1)    1298 : 03                         scl                     ; clear borrow
(1)    1299 : C1 00                      ld      0(P1)           ; L(X)
(1)    129B : FC 1E                      cai     30              ; X-30
(1)    129D : 94 07                      jp      next_y          ; branch if X>=30
(1)    129F :                    jump_loop_x:
(1)    129F : C4 C1                      ldi     L(ADDR(loop_x))
(1)    12A1 : 31                         xpal    P1
(1)    12A2 : C4 10                      ldi     H(ADDR(loop_x))
(1)    12A4 : 35                         xpah    P1
(1)    12A5 : 3D                         xppc    P1              ; jump to loop_x
(1)    12A6 :                    next_y:
(1)    12A6 : C4 48                      ldi     L(ADDR(newline))
(1)    12A8 : 31                         xpal    P1
(1)    12A9 : C4 16                      ldi     H(ADDR(newline))
(1)    12AB : 35                         xpah    P1              ; P1=ADDR(newline)
(1)    12AC : 3D                         xppc    P1
(1)    12AD : C4 53                      ldi     L(vY)
(1)    12AF : 31                         xpal    P1
(1)    12B0 : C4 10                      ldi     H(vY)
(1)    12B2 : 35                         xpah    P1              ; P1=&Y
(1)    12B3 : A9 00                      ild     0(P1)           ; L(Y)++
(1)    12B5 : 9C 02                      jnz     check_y
(1)    12B7 : A9 01                      ild     1(P1)           ; H(Y)++
(1)    12B9 :                    check_y:
(1)    12B9 : C1 01                      ld      1(P1)           ; H(Y)
(1)    12BB : 9C 07                      jnz     jump_loop_y     ; branch if Y<0
(1)    12BD : 03                         scl                     ; clear borrow
(1)    12BE : C1 00                      ld      0(P1)           ; L(Y)
(1)    12C0 : FC 0D                      cai     13              ; Y-13
(1)    12C2 : 94 07                      jp      mandelbrot_end  ; branch if Y>=13
(1)    12C4 :                    jump_loop_y:
(1)    12C4 : C4 B3                      ldi     L(ADDR(loop_y))
(1)    12C6 : 31                         xpal    P1
(1)    12C7 : C4 10                      ldi     H(ADDR(loop_y))
(1)    12C9 : 35                         xpah    P1
(1)    12CA : 3D                         xppc    P1              ; jump to loop_y
(1)    12CB :
(1)    12CB :                    mandelbrot_end:
(1)    12CB : C6 01                      ld      @1(P2)
(1)    12CD : 31                         xpal    P1
(1)    12CE : C6 01                      ld      @1(P2)
(1)    12D0 : 35                         xpah    P1
(1)    12D1 : 3D                         xppc    P1              ; return
       12D2 :                            include "arith.inc"
(1)    12D2 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    12D2 :
(1)    12D2 :                    ;;; Print int16_t value
(1)    12D2 :                    ;;;   xppc   P1
(1)    12D2 :                    ;;;   .dbyte &value
(1)    12D2 :                    ;;; @local P2[1:0] &value
(1)    12D2 :                    ;;; @local P2[7:0] buffer
(1)    12D2 :                    ;;; @local P2[9:8] return address
(1)    12D2 :                    print_int16:
(1)    12D2 : C5 01                      ld      @1(P1)          ; point &value
(1)    12D4 : C5 01                      ld      @1(P1)
(1)    12D6 : CE F6                      st      @-10(P2)        ; P2[1:0]=&value
(1)    12D8 : C1 00                      ld      0(P1)           ; P1=return address
(1)    12DA : CA 01                      st      1(P2)
(1)    12DC : 35                         xpah    P1
(1)    12DD : CA 09                      st      9(P2)           ; P2[9:8]=return address
(1)    12DF : C2 00                      ld      0(P2)
(1)    12E1 : 31                         xpal    P1              ; P1=&value
(1)    12E2 : CA 08                      st      8(P2)
(1)    12E4 : C1 00                      ld      0(P1)
(1)    12E6 : C8 1F                      st      vPRINT
(1)    12E8 : C1 01                      ld      1(P1)
(1)    12EA : C8 1C                      st      vPRINT+1        ; vPRINT=value
(1)    12EC : 94 1A                      jp      print_uint16    ; branch if value >= 0
(1)    12EE : 03                         scl                     ; clear borrow
(1)    12EF : C4 00                      ldi     0
(1)    12F1 : F8 14                      cad     vPRINT
(1)    12F3 : C8 12                      st      vPRINT
(1)    12F5 : C4 00                      ldi     0
(1)    12F7 : F8 0F                      cad     vPRINT+1
(1)    12F9 : C8 0D                      st      vPRINT+1        ; negate vPRINT
(1)    12FB : C4 23                      ldi     L(ADDR(putchar))
(1)    12FD : 31                         xpal    P1
(1)    12FE : C4 16                      ldi     H(ADDR(putchar))
(1)    1300 : 35                         xpah    P1
(1)    1301 : C4 2D                      ldi     '-'
(1)    1303 : 3D                         xppc    P1              ; print '-'
(1)    1304 : 90 02                      jmp     print_uint16
(1)    1306 :                    ;;; Print uint16_t value
(1)    1306 :                    ;;; @param vPRINT value
(1)    1306 :                    ;;; @local P2[7:0] buffer
(1)    1306 :                    ;;; @local P2[9:8] return address
(1)    1306 :                    ;;; @clobber E
(1)    1306 : 00 00              vPRINT:         .dbyte  0
(1)    1308 :                    print_uint16:
(1)    1308 : C4 00                      ldi     0
(1)    130A : CA 00                      st      0(P2)           ; buffer[0]=0
(1)    130C : C4 01                      ldi     1
(1)    130E : 01                         xae                     ; E=1
(1)    130F : C4 85                      ldi     L(ADDR(udiv16))
(1)    1311 : 31                         xpal    P1
(1)    1312 : C4 15                      ldi     H(ADDR(udiv16))
(1)    1314 : 35                         xpah    P1
(1)    1315 :                    print_uint16_loop:
(1)    1315 : C0 F0                      ld      vPRINT
(1)    1317 : C9 ED                      st      (vDIVIDEND-ADDR(udiv16))(P1)
(1)    1319 : C0 ED                      ld      vPRINT+1
(1)    131B : C9 EE                      st      (vDIVIDEND-ADDR(udiv16)+1)(P1)
(1)    131D : C4 0A                      ldi     10
(1)    131F : C9 EF                      st      (vDIVISOR-ADDR(udiv16))(P1)
(1)    1321 : C4 00                      ldi     0
(1)    1323 : C9 F0                      st      (vDIVISOR-ADDR(udiv16)+1)(P1)
(1)    1325 : 3D                         xppc    P1              ; calculate vPRINT/=10
(1)    1326 : C1 ED                      ld      (vREMINDER-ADDR(udiv16))(P1) ; L(vREMINDER)
(1)    1328 : DC 30                      ori     '0'
(1)    132A : CA 80                      st      E(P2)           ; buffer[E]=digit
(1)    132C : 02                         ccl
(1)    132D : C4 01                      ldi     1
(1)    132F : 70                         ade
(1)    1330 : 01                         xae                     ; ++E
(1)    1331 : C1 EB                      ld      (vQUOTIENT-ADDR(udiv16))(P1)
(1)    1333 : C8 D2                      st      vPRINT
(1)    1335 : C1 EC                      ld      (vQUOTIENT-ADDR(udiv16)+1)(P1)
(1)    1337 : C8 CF                      st      vPRINT+1
(1)    1339 : D8 CC                      or      vPRINT
(1)    133B : 9C D8                      jnz     print_uint16_loop ; while vPRINT!=0
(1)    133D : C4 23                      ldi     L(ADDR(putchar))
(1)    133F : 31                         xpal    P1
(1)    1340 : C4 16                      ldi     H(ADDR(putchar))
(1)    1342 : 35                         xpah    P1              ; P1=ADDR(putchar)
(1)    1343 :                    print_uint16_putdigit:
(1)    1343 : 40                         lde
(1)    1344 : 03                         scl                     ; clear borrow
(1)    1345 : FC 01                      cai     1
(1)    1347 : 01                         xae                     ; --E
(1)    1348 : C2 80                      ld      E(P2)
(1)    134A : 98 03                      jz      print_int16_return
(1)    134C : 3D                         xppc    P1              ; print digit
(1)    134D : 90 F4                      jmp     print_uint16_putdigit
(1)    134F :                    print_int16_return:
(1)    134F : C6 08                      ld      @8(P2)          ; discard locals
(1)    1351 : C6 01                      ld      @1(P2)
(1)    1353 : 31                         xpal    P1
(1)    1354 : C6 01                      ld      @1(P2)
(1)    1356 : 35                         xpah    P1
(1)    1357 : 3D                         xppc    P1              ; return
(1)    1358 :
(1)    1358 :                    ;;; Add: summand += addend
(1)    1358 :                    ;;;   xppc   P1
(1)    1358 :                    ;;;   .dbyte &addend
(1)    1358 :                    ;;;   .dbyte &summand
(1)    1358 :                    ;;; @local P2[1:0] &addend, addend
(1)    1358 :                    ;;; @local P2[3:2] &summand
(1)    1358 :                    ;;; @local P2[5:4] return address
(1)    1358 :                    addsi2_exit:
(1)    1358 : C6 04                      ld      @4(P2)          ; discard locals
(1)    135A : C6 01                      ld      @1(P2)
(1)    135C : 31                         xpal    P1
(1)    135D : C6 01                      ld      @1(P2)
(1)    135F : 35                         xpah    P1
(1)    1360 : 3D                         xppc    P1              ; return
(1)    1361 :                    addsi2:
(1)    1361 : C5 01                      ld      @1(P1)          ; point to &addend
(1)    1363 : C5 01                      ld      @1(P1)
(1)    1365 : CE FA                      st      @-6(P2)         ; P2[1:0]=&addend
(1)    1367 : C5 01                      ld      @1(P1)
(1)    1369 : CA 01                      st      1(P2)
(1)    136B : C5 01                      ld      @1(P1)
(1)    136D : CA 02                      st      2(P2)           ; P2[3:2]=&summand
(1)    136F : C1 00                      ld      0(P1)           ; P1=return address
(1)    1371 : CA 03                      st      3(P2)
(1)    1373 : C2 00                      ld      0(P2)           ; P2[1:0]=&addend
(1)    1375 : 31                         xpal    P1
(1)    1376 : CA 04                      st      4(P2)           ; P2[5:4]=return address
(1)    1378 : C2 01                      ld      1(P2)
(1)    137A : 35                         xpah    P1              ; P1=&addend
(1)    137B : CA 05                      st      5(P2)
(1)    137D : C1 00                      ld      0(P1)
(1)    137F : CA 00                      st      0(P2)           ; P2[1:0]=addend
(1)    1381 : C1 01                      ld      1(P1)
(1)    1383 : CA 01                      st      1(P2)
(1)    1385 : C2 02                      ld      2(P2)           ; P2[3:2]=&summand
(1)    1387 : 31                         xpal    P1
(1)    1388 : C2 03                      ld      3(P2)
(1)    138A : 35                         xpah    P1              ; P1=&summand
(1)    138B : 02                         ccl                     ; clear carry
(1)    138C : C1 00                      ld      0(P1)
(1)    138E : F2 00                      add     0(P2)           ; L(summand+addend)
(1)    1390 : C9 00                      st      0(P1)
(1)    1392 : C1 01                      ld      1(P1)
(1)    1394 : F2 01                      add     1(P2)           ; L(summand+addend)
(1)    1396 : C9 01                      st      1(P1)
(1)    1398 : 90 BE                      jmp     addsi2_exit
(1)    139A :
(1)    139A :                    ;;; Subtract: minuend -= subtrahend
(1)    139A :                    ;;;   xppc   P1
(1)    139A :                    ;;;   .dbyte &subtrahend
(1)    139A :                    ;;;   .dbyte &minuend
(1)    139A :                    ;;; @local P2[1:0] &subtrahend, subtrahend
(1)    139A :                    ;;; @local P2[3:2] &minuend
(1)    139A :                    ;;; @local P2[5:4] return address
(1)    139A :                    subsi2_exit:
(1)    139A : C6 04                      ld      @4(P2)          ; discard locals
(1)    139C : C6 01                      ld      @1(P2)
(1)    139E : 31                         xpal    P1
(1)    139F : C6 01                      ld      @1(P2)
(1)    13A1 : 35                         xpah    P1
(1)    13A2 : 3D                         xppc    P1              ; return
(1)    13A3 :                    subsi2:
(1)    13A3 : C5 01                      ld      @1(P1)          ; point to &subtrahend
(1)    13A5 : C5 01                      ld      @1(P1)
(1)    13A7 : CE FA                      st      @-6(P2)         ; P2[1:0]=&subtrahend
(1)    13A9 : C5 01                      ld      @1(P1)
(1)    13AB : CA 01                      st      1(P2)
(1)    13AD : C5 01                      ld      @1(P1)
(1)    13AF : CA 02                      st      2(P2)           ; P2[3:2]=&minuend
(1)    13B1 : C1 00                      ld      0(P1)           ; P1=return address
(1)    13B3 : CA 03                      st      3(P2)
(1)    13B5 : C2 00                      ld      0(P2)           ; P2[1:0]=&subtrahend
(1)    13B7 : 31                         xpal    P1
(1)    13B8 : CA 04                      st      4(P2)           ; P2[5:4]=return address
(1)    13BA : C2 01                      ld      1(P2)
(1)    13BC : 35                         xpah    P1              ; P1=&subtrahend
(1)    13BD : CA 05                      st      5(P2)
(1)    13BF : C1 00                      ld      0(P1)
(1)    13C1 : CA 00                      st      0(P2)           ; P2[1:0]=subtrahend
(1)    13C3 : C1 01                      ld      1(P1)
(1)    13C5 : CA 01                      st      1(P2)
(1)    13C7 : C2 02                      ld      2(P2)           ; P2[3:2]=&minuend
(1)    13C9 : 31                         xpal    P1
(1)    13CA : C2 03                      ld      3(P2)
(1)    13CC : 35                         xpah    P1              ; P1=&minuend
(1)    13CD : 03                         scl                     ; clear borrow
(1)    13CE : C1 00                      ld      0(P1)
(1)    13D0 : FA 00                      cad     0(P2)           ; L(minuend-subtrahend)
(1)    13D2 : C9 00                      st      0(P1)
(1)    13D4 : C1 01                      ld      1(P1)
(1)    13D6 : FA 01                      cad     1(P2)           ; H(minuend-subtrahend)
(1)    13D8 : C9 01                      st      1(P1)
(1)    13DA : 90 BE                      jmp     subsi2_exit
(1)    13DC :
(1)    13DC :                    ;;; Signed compare: A = sign(minuend - subtrahend)
(1)    13DC :                    ;;;   xppc   P1
(1)    13DC :                    ;;;   .dbyte &subtrahend
(1)    13DC :                    ;;;   .dbyte &minuend
(1)    13DC :                    ;;; @return A=0  JZ
(1)    13DC :                    ;;;         A=1  JP
(1)    13DC :                    ;;;         A=-1
(1)    13DC :                    ;;; @local P2[1:0] &subtrahend, subtrahend
(1)    13DC :                    ;;; @local P2[3:2] &minuend, minuend - subtrahend
(1)    13DC :                    ;;; @local P2[5:4] return address
(1)    13DC :                    ;;; @local P2[6]   sign(minuend - subtrahend)
(1)    13DC :                    cmpsi2_exit:
(1)    13DC : CA 06                      st      6(P2)           ; save sign(minuend-subtrahend)
(1)    13DE : C6 04                      ld      @4(P2)          ; discard locals
(1)    13E0 : C6 01                      ld      @1(P2)
(1)    13E2 : 31                         xpal    P1
(1)    13E3 : C6 01                      ld      @1(P2)
(1)    13E5 : 35                         xpah    P1
(1)    13E6 : C6 01                      ld      @1(P2)          ; sign(minuend-subtrahend)
(1)    13E8 : 3D                         xppc    P1              ; return
(1)    13E9 :                    cmpsi2:
(1)    13E9 : C5 01                      ld      @1(P1)          ; point to &subtrahend
(1)    13EB : C5 01                      ld      @1(P1)
(1)    13ED : CE F9                      st      @-7(P2)         ; P2[1:0]=&subtrahend
(1)    13EF : C5 01                      ld      @1(P1)
(1)    13F1 : CA 01                      st      1(P2)
(1)    13F3 : C5 01                      ld      @1(P1)
(1)    13F5 : CA 02                      st      2(P2)           ; P2[3:2]=&minuend
(1)    13F7 : C1 00                      ld      0(P1)           ; P1=return address
(1)    13F9 : CA 03                      st      3(P2)
(1)    13FB : C2 00                      ld      0(P2)           ; P2[1:0]=&subtrahend
(1)    13FD : 31                         xpal    P1
(1)    13FE : CA 04                      st      4(P2)           ; P2[5:4]=return address
(1)    1400 : C2 01                      ld      1(P2)
(1)    1402 : 35                         xpah    P1              ; P1=&subtrahend
(1)    1403 : CA 05                      st      5(P2)
(1)    1405 : C1 00                      ld      0(P1)
(1)    1407 : CA 00                      st      0(P2)           ; P2[1:0]=subtrahend
(1)    1409 : C1 01                      ld      1(P1)
(1)    140B : CA 01                      st      1(P2)
(1)    140D : C2 02                      ld      2(P2)           ; P2[3:2]=&minuend
(1)    140F : 31                         xpal    P1
(1)    1410 : C2 03                      ld      3(P2)
(1)    1412 : 35                         xpah    P1              ; P1=&minuend
(1)    1413 : 03                         scl                     ; clear borrow
(1)    1414 : C1 00                      ld      0(P1)
(1)    1416 : FA 00                      cad     0(P2)           ; L(minuend-subtrahend)
(1)    1418 : CA 02                      st      2(P2)           ; P2[3:2]=minuend-subtrahend
(1)    141A : C1 01                      ld      1(P1)
(1)    141C : FA 01                      cad     1(P2)
(1)    141E : CA 03                      st      3(P2)
(1)    1420 : DA 02                      or      2(P2)
(1)    1422 : 98 B8                      jz      cmpsi2_exit     ; branch if result==0 with A=0
(1)    1424 : 06                         csa
(1)    1425 : D4 40                      ani     S_OV
(1)    1427 : 9C 08                      jnz     cmpsi2_ov       ; branch if V=1
(1)    1429 : C2 03                      ld      3(P2)           ; H(minuend-subtrahend)
(1)    142B : 94 08                      jp      cmpsi2_gt       ; V=0, N=0
(1)    142D :                    cmpsi2_lt:
(1)    142D : C4 FF                      ldi     -1              ; V=0, N=1
(1)    142F : 90 AB                      jmp     cmpsi2_exit
(1)    1431 :                    cmpsi2_ov:
(1)    1431 : C2 01                      ld      1(P2)           ; H(result)
(1)    1433 : 94 F8                      jp      cmpsi2_lt       ; V=1, N=0
(1)    1435 :                    cmpsi2_gt:                      ; V=1, N=1
(1)    1435 : C4 01                      ldi     1
(1)    1437 : 90 A3                      jmp     cmpsi2_exit
(1)    1439 :
(1)    1439 :                    ;;; Signed multiply; multiplicand *= multiplier
(1)    1439 :                    ;;;   xppc   P1
(1)    1439 :                    ;;;   .dbyte &multiplier
(1)    1439 :                    ;;;   .dbyte &multiplicand
(1)    1439 :                    ;;; @local P2[1:0] multiplier, &multiplier
(1)    1439 :                    ;;; @local P2[3:2] multiplicand, &multiplicand
(1)    1439 :                    ;;; @local P2[4]   H(multiplicand ^ multiplier)
(1)    1439 :                    ;;; @local P2[6:5] return address
(1)    1439 :                    mulsi2_exit:
(1)    1439 : C6 05                      ld      @5(P2)          ; discard locals
(1)    143B : C6 01                      ld      @1(P2)
(1)    143D : 31                         xpal    P1
(1)    143E : C6 01                      ld      @1(P2)
(1)    1440 : 35                         xpah    P1
(1)    1441 : 3D                         xppc    P1              ; return
(1)    1442 :                    mulsi2:
(1)    1442 : C5 01                      ld      @1(P1)          ; point to &multiplier
(1)    1444 : C5 01                      ld      @1(P1)
(1)    1446 : CE F9                      st      @-7(P2)         ; P2[1:0]=&multiplier
(1)    1448 : C5 01                      ld      @1(P1)
(1)    144A : CA 01                      st      1(P2)
(1)    144C : C5 01                      ld      @1(P1)
(1)    144E : CA 02                      st      2(P2)           ; P2[3:2]=&multiplicand
(1)    1450 : C1 00                      ld      0(P1)
(1)    1452 : CA 03                      st      3(P2)
(1)    1454 : C2 00                      ld      0(P2)           ; P2[1:0]=&multiplier
(1)    1456 : 31                         xpal    P1
(1)    1457 : CA 05                      st      5(P2)           ; P2[6:5]=return address
(1)    1459 : C2 01                      ld      1(P2)
(1)    145B : 35                         xpah    P1              ; P1=&multiplier
(1)    145C : CA 06                      st      6(P2)
(1)    145E : C1 00                      ld      0(P1)
(1)    1460 : CA 00                      st      0(P2)           ; P2[1:0]=multiplier
(1)    1462 : C1 01                      ld      1(P1)
(1)    1464 : CA 01                      st      1(P2)
(1)    1466 : C2 02                      ld      2(P2)           ; P2[3:2]=&multiplicand
(1)    1468 : 31                         xpal    P1
(1)    1469 : C2 03                      ld      3(P2)
(1)    146B : 35                         xpah    P1              ; P1=&multiplicand
(1)    146C : C1 00                      ld      0(P1)
(1)    146E : CA 02                      st      2(P2)           ; P2[3:2]=multiplicand
(1)    1470 : C1 01                      ld      1(P1)
(1)    1472 : CA 03                      st      3(P2)
(1)    1474 : E2 01                      xor     1(P2)           ; P2[1]=H(multiplier)
(1)    1476 : CA 04                      st      4(P2)           ; P2[4]=H(multiplicand^multiplier)
(1)    1478 : C2 01                      ld      1(P2)           ; H(multiplier)
(1)    147A : 94 0D                      jp      mulsi2_multiplicand
(1)    147C : 03                         scl                     ; clear borrow
(1)    147D : C4 00                      ldi     0
(1)    147F : FA 00                      cad     0(P2)
(1)    1481 : CA 00                      st      0(P2)
(1)    1483 : C4 00                      ldi     0
(1)    1485 : FA 01                      cad     1(P2)
(1)    1487 : CA 01                      st      1(P2)           ; negate multiplier
(1)    1489 :                    mulsi2_multiplicand:
(1)    1489 : C2 03                      ld      3(P2)           ; H(multiplicand)
(1)    148B : 94 11                      jp      umul16
(1)    148D : 03                         scl                     ; clear borrow
(1)    148E : C4 00                      ldi     0
(1)    1490 : FA 02                      cad     2(P2)
(1)    1492 : CA 02                      st      2(P2)
(1)    1494 : C4 00                      ldi     0
(1)    1496 : FA 03                      cad     3(P2)
(1)    1498 : CA 03                      st      3(P2)           ; negate multiplicand
(1)    149A : 90 02                      jmp     umul16
(1)    149C :                    mulsi2_exit_1:
(1)    149C : 90 9B                      jmp     mulsi2_exit
(1)    149E :                    ;;; Unsigned multiply; product = multiplicand * multiplier
(1)    149E :                    ;;; @param P2[1:0] multiplier
(1)    149E :                    ;;; @param P2[3:2] multiplicand
(1)    149E :                    ;;; @return P1[1:0] product
(1)    149E :                    ;;; @clobber multiplier multiplicand
(1)    149E :                    ;;; @unchanged P1
(1)    149E :                    umul16:
(1)    149E : C4 00                      ldi     0
(1)    14A0 : C9 00                      st      0(P1)
(1)    14A2 : C9 01                      st      1(P1)           ; P1[1:0]=product
(1)    14A4 : 90 2A                      jmp     umul16_check
(1)    14A6 :                    umul16_loop:
(1)    14A6 : C2 01                      ld      1(P2)           ; P2[1:0]=multiplier
(1)    14A8 : 02                         ccl
(1)    14A9 : 1F                         rrl
(1)    14AA : CA 01                      st      1(P2)
(1)    14AC : C2 00                      ld      0(P2)
(1)    14AE : 1F                         rrl
(1)    14AF : CA 00                      st      0(P2)           ; multiplier >>= 1
(1)    14B1 : 06                         csa
(1)    14B2 : D4 80                      ani     S_CY
(1)    14B4 : 98 0D                      jz      umul16_next     ; if lsb(multiplier) == 0
(1)    14B6 : 02                         ccl
(1)    14B7 : C2 02                      ld      2(P2)           ; P2[3:2]=multiplicand
(1)    14B9 : F1 00                      add     0(P1)           ; P1[1:0]=product
(1)    14BB : C9 00                      st      0(P1)
(1)    14BD : C2 03                      ld      3(P2)
(1)    14BF : F1 01                      add     1(P1)
(1)    14C1 : C9 01                      st      1(P1)           ; product += multiplicand
(1)    14C3 :                    umul16_next:
(1)    14C3 : 02                         ccl
(1)    14C4 : C2 02                      ld      2(P2)           ; P2[3:2]=multiplicand
(1)    14C6 : F2 02                      add     2(P2)
(1)    14C8 : CA 02                      st      2(P2)
(1)    14CA : C2 03                      ld      3(P2)
(1)    14CC : F2 03                      add     3(P2)
(1)    14CE : CA 03                      st      3(P2)           ; multiplicand <<= 1
(1)    14D0 :                    umul16_check:
(1)    14D0 : C2 00                      ld      0(P2)           ; P2[1:0]=multiplier
(1)    14D2 : DA 01                      or      1(P2)
(1)    14D4 : 9C D0                      jnz     umul16_loop     ; while multiplier != 0
(1)    14D6 :                    umul16_end:
(1)    14D6 : C2 04                      ld      4(P2)           ; H(multiplier^multiplicand)
(1)    14D8 : 94 C2                      jp      mulsi2_exit_1
(1)    14DA : 03                         scl                     ; clear borrow
(1)    14DB : C4 00                      ldi     0
(1)    14DD : F9 00                      cad     0(P1)           ; P1[1:0]=product
(1)    14DF : C9 00                      st      0(P1)
(1)    14E1 : C4 00                      ldi     0
(1)    14E3 : F9 01                      cad     1(P1)
(1)    14E5 : C9 01                      st      1(P1)           ; negate product
(1)    14E7 : 90 B3                      jmp     mulsi2_exit_1
(1)    14E9 :
(1)    14E9 :                    ;;; Signed divide; dividend /= divisor ... remainder
(1)    14E9 :                    ;;;   xppc   P1
(1)    14E9 :                    ;;;   .dbyte &divisor
(1)    14E9 :                    ;;;   .dbyte &dividend
(1)    14E9 :                    ;;; @return vREMINDER |dividend| % |divisor|
(1)    14E9 :                    ;;; @local P2[1:0] &divisor
(1)    14E9 :                    ;;; @local P2[3:2] &dividend
(1)    14E9 :                    ;;; @local P2[5:4] return address
(1)    14E9 :                    divsi2_exit:
(1)    14E9 : C6 04                      ld      @4(P2)          ; discard locals
(1)    14EB : C6 01                      ld      @1(P2)
(1)    14ED : 31                         xpal    P1
(1)    14EE : C6 01                      ld      @1(P2)
(1)    14F0 : 35                         xpah    P1
(1)    14F1 : 3D                         xppc    P1              ; return
(1)    14F2 :                    divsi2:
(1)    14F2 : C5 01                      ld      @1(P1)          ; point to &divisor
(1)    14F4 : C5 01                      ld      @1(P1)
(1)    14F6 : CE FA                      st      @-6(P2)         ; P2[1:0]=&divisor
(1)    14F8 : C5 01                      ld      @1(P1)
(1)    14FA : CA 01                      st      1(P2)
(1)    14FC : C5 01                      ld      @1(P1)
(1)    14FE : CA 02                      st      2(P2)           ; P2[3:2]=&dividend
(1)    1500 : C1 00                      ld      0(P1)           ; P1=return address
(1)    1502 : CA 03                      st      3(P2)
(1)    1504 : C2 00                      ld      0(P2)           ; P2[1:0]=&divisor
(1)    1506 : 31                         xpal    P1
(1)    1507 : CA 04                      st      4(P2)           ; P2[5:4]=return address
(1)    1509 : C2 01                      ld      1(P2)
(1)    150B : 35                         xpah    P1              ; P1=&divisor
(1)    150C : CA 05                      st      5(P2)
(1)    150E : C1 00                      ld      0(P1)
(1)    1510 : C8 63                      st      vDIVISOR
(1)    1512 : 01                         xae                     ; E=high(divisor)
(1)    1513 : C1 01                      ld      1(P1)
(1)    1515 : C8 5F                      st      vDIVISOR+1
(1)    1517 : 94 0F                      jp      divsi2_dividend ; if divisor>=0
(1)    1519 : 03                         scl                     ; clear borrow
(1)    151A : C4 00                      ldi     0
(1)    151C : F8 57                      cad     vDIVISOR
(1)    151E : C8 55                      st      vDIVISOR
(1)    1520 : C4 00                      ldi     0
(1)    1522 : F8 52                      cad     vDIVISOR+1
(1)    1524 : C8 50                      st      vDIVISOR+1      ; negate divisor
(1)    1526 :                    divsi2_exit_trampoline
(1)    1526 : 90 C1                      jmp     divsi2_exit
(1)    1528 :                    divsi2_dividend:
(1)    1528 : C2 02                      ld      2(P2)           ; P2[3:2]=&dividend
(1)    152A : 31                         xpal    P1
(1)    152B : C2 03                      ld      3(P2)
(1)    152D : 35                         xpah    P1              ; P1=&dividend
(1)    152E : C1 00                      ld      0(P1)
(1)    1530 : C8 41                      st      vDIVIDEND
(1)    1532 : C1 01                      ld      1(P1)
(1)    1534 : C8 3E                      st      vDIVIDEND+1
(1)    1536 : 60                         xre
(1)    1537 : 01                         xae                     ; E=high(dividend^divisor)
(1)    1538 : C1 01                      ld      1(P1)
(1)    153A : 94 0D                      jp      divsi2_divide   ; if dividend>=0
(1)    153C : 03                         scl                     ; clear borrow
(1)    153D : C4 00                      ldi     0
(1)    153F : F8 32                      cad     vDIVIDEND
(1)    1541 : C8 30                      st      vDIVIDEND
(1)    1543 : C4 00                      ldi     0
(1)    1545 : F8 2D                      cad     vDIVIDEND+1
(1)    1547 : C8 2B                      st      vDIVIDEND+1     ; negate dividend
(1)    1549 :                    divsi2_divide:
(1)    1549 : C4 85                      ldi     L(ADDR(udiv16))
(1)    154B : 31                         xpal    P1
(1)    154C : C4 15                      ldi     H(ADDR(udiv16))
(1)    154E : 35                         xpah    P1
(1)    154F : 3D                         xppc    P1              ; call udiv16
(1)    1550 : 40                         lde
(1)    1551 : 94 0D                      jp      divsi2_store
(1)    1553 : 03                         scl                     ; clear borrow
(1)    1554 : C4 00                      ldi     0
(1)    1556 : F8 19                      cad     vQUOTIENT
(1)    1558 : C8 17                      st      vQUOTIENT
(1)    155A : C4 00                      ldi     0
(1)    155C : F8 14                      cad     vQUOTIENT+1
(1)    155E : C8 12                      st      vQUOTIENT+1     ; negate quotient
(1)    1560 :                    divsi2_store:
(1)    1560 : C2 02                      ld      2(P2)
(1)    1562 : 31                         xpal    P1
(1)    1563 : C2 03                      ld      3(P2)
(1)    1565 : 35                         xpah    P1              ; Pq=&dividend
(1)    1566 : C0 09                      ld      vQUOTIENT
(1)    1568 : C9 00                      st      0(P1)
(1)    156A : C0 06                      ld      vQUOTIENT+1
(1)    156C : C9 01                      st      1(P1)
(1)    156E : 90 B6                      jmp     divsi2_exit_trampoline
(1)    1570 :
(1)    1570 :                    ;;; Unsigned divide; quotient = dividend / divisor ... remainder
(1)    1570 :                    ;;; @param vDIVISOR divisor
(1)    1570 :                    ;;; @param vDIVIDEND dividend
(1)    1570 :                    ;;; @return vQUOTIENT quotient
(1)    1570 :                    ;;; @return vDIVIDEND reminder
(1)    1570 :                    ;;; @clobber E vDIVISOR
(1)    1570 :                    ;;; @unchanged P1
(1)    1570 : 00 00              vQUOTIENT:      .dbyte  0
(1)    1572 : 00 00              vDIVIDEND:      .dbyte  0
(1)    1574 : 00 00              vDIVISOR:       .dbyte  0
(1)    1576 : =1572              vREMINDER       = vDIVIDEND
(1)    1576 : 00                 udiv16_bits:    .byte   0
(1)    1577 : 00                 udiv16_borrow:  .byte   0
(1)    1578 :                    udiv16_adjust:
(1)    1578 : 02                         ccl
(1)    1579 : C0 F8                      ld      vDIVIDEND
(1)    157B : F0 F8                      add     vDIVISOR
(1)    157D : C8 F4                      st      vDIVIDEND
(1)    157F : C0 F3                      ld      vDIVIDEND+1
(1)    1581 : F0 F3                      add     vDIVISOR+1
(1)    1583 : C8 EF                      st      vDIVIDEND+1     ; dividend+=divisor
(1)    1585 :                    udiv16_exit:
(1)    1585 : 3D                         xppc    P1
(1)    1586 :                    udiv16:
(1)    1586 : C0 ED                      ld      vDIVISOR
(1)    1588 : D8 EC                      or      vDIVISOR+1
(1)    158A : 98 F9                      jz      udiv16_exit     ; divide by zero
(1)    158C : C4 01                      ldi     1
(1)    158E : C8 E7                      st      udiv16_bits
(1)    1590 : C8 E6                      st      udiv16_borrow   ; borrow=false
(1)    1592 : 90 0F                      jmp     udiv16_prep
(1)    1594 :                    udiv16_prep_loop:
(1)    1594 : 02                         ccl
(1)    1595 : C0 DE                      ld      vDIVISOR
(1)    1597 : F0 DC                      add     vDIVISOR
(1)    1599 : C8 DA                      st      vDIVISOR
(1)    159B : C0 D9                      ld      vDIVISOR+1
(1)    159D : F0 D7                      add     vDIVISOR+1
(1)    159F : C8 D5                      st      vDIVISOR+1      ; divisor<<=1
(1)    15A1 : A8 D4                      ild     udiv16_bits     ; ++bits
(1)    15A3 :                    udiv16_prep:
(1)    15A3 : C0 D1                      ld      vDIVISOR+1
(1)    15A5 : 94 ED                      jp      udiv16_prep_loop ; while msb(divisor)==0
(1)    15A7 : C4 00                      ldi     0
(1)    15A9 : C8 C6                      st      vQUOTIENT
(1)    15AB : C8 C5                      st      vQUOTIENT+1     ; quotient=0
(1)    15AD : 90 18                      jmp     udiv16_enter_loop
(1)    15AF :                    udiv16_loop:
(1)    15AF : 02                         ccl
(1)    15B0 : C0 C4                      ld      vDIVISOR+1
(1)    15B2 : 1F                         rrl
(1)    15B3 : C8 C1                      st      vDIVISOR+1
(1)    15B5 : C0 BE                      ld      vDIVISOR
(1)    15B7 : 1F                         rrl
(1)    15B8 : C8 BB                      st      vDIVISOR        ; divisor>>=1
(1)    15BA : 02                         ccl
(1)    15BB : C0 B4                      ld      vQUOTIENT
(1)    15BD : F0 B2                      add     vQUOTIENT
(1)    15BF : C8 B0                      st      vQUOTIENT
(1)    15C1 : C0 AF                      ld      vQUOTIENT+1
(1)    15C3 : F0 AD                      add     vQUOTIENT+1
(1)    15C5 : C8 AB                      st      vQUOTIENT+1     ; quotient<<=1
(1)    15C7 :                    udiv16_enter_loop:
(1)    15C7 : C0 AF                      ld      udiv16_borrow
(1)    15C9 : 98 0F                      jz      udiv16_add
(1)    15CB :                    udiv16_sub:
(1)    15CB : 03                         scl                     ; clear borrow
(1)    15CC : C0 A5                      ld      vDIVIDEND
(1)    15CE : F8 A5                      cad     vDIVISOR
(1)    15D0 : C8 A1                      st      vDIVIDEND
(1)    15D2 : C0 A0                      ld      vDIVIDEND+1
(1)    15D4 : F8 A0                      cad     vDIVISOR+1
(1)    15D6 : C8 9C                      st      vDIVIDEND+1     ; dividend-=divisor
(1)    15D8 : 90 0D                      jmp     udiv16_quotient
(1)    15DA :                    udiv16_add:
(1)    15DA : 02                         ccl
(1)    15DB : C0 96                      ld      vDIVIDEND
(1)    15DD : F0 96                      add     vDIVISOR
(1)    15DF : C8 92                      st      vDIVIDEND
(1)    15E1 : C0 91                      ld      vDIVIDEND+1
(1)    15E3 : F0 91                      add     vDIVISOR+1
(1)    15E5 : C8 8D                      st      vDIVIDEND+1     ; dividend+=divisor
(1)    15E7 :                    udiv16_quotient:
(1)    15E7 : 06                         csa
(1)    15E8 : D4 80                      ani     S_CY
(1)    15EA : C8 8C                      st      udiv16_borrow
(1)    15EC : 98 02                      jz      udiv16_next    ; if dividend<divisor
(1)    15EE : A8 81                      ild     vQUOTIENT      ; quotient++
(1)    15F0 :                    udiv16_next:
(1)    15F0 : B8 85                      dld     udiv16_bits     ; --bits
(1)    15F2 : 9C BB                      jnz     udiv16_loop     ; while bits!=0
(1)    15F4 : C0 82                      ld      udiv16_borrow
(1)    15F6 : 98 80                      jz      udiv16_adjust
(1)    15F8 : 90 8B                      jmp     udiv16_exit
       15FA :
       15FA :                    ;;; Get character
       15FA :                    ;;; @return E char
       15FA :                    ;;; @return A 0 if no char received
       15FA :                    getchar_exit:
       15FA : C6 01                      ld      @1(P2)          ; pop P1
       15FC : 31                         xpal    P1
       15FD : C6 01                      ld      @1(P2)
       15FF : 35                         xpah    P1
       1600 : C6 01                      ld      @1(P2)          ; pop return value
       1602 : 3D                         xppc    P1
       1603 :                    getchar:
       1603 : CE FF                      st      @-1(P2)         ; for return value
       1605 : C4 F4                      ldi     L(ADDR(queue_remove))
       1607 : 31                         xpal    P1
       1608 : CE FE                      st      @-2(P2)
       160A : C4 16                      ldi     H(ADDR(queue_remove))
       160C : 35                         xpah    P1
       160D : CA 01                      st      1(P2)           ; push P1
       160F : 04                         dint                    ; disable IRQ
       1610 : 3D                         xppc    P1              ; call queue_remove
       1611 : 00 20                      .dbyte  rx_queue
       1613 : 05                         ien                     ; enable IRQ
       1614 : CA 02                      st      2(P2)           ; save return value
       1616 : 90 E2                      jmp     getchar_exit
       1618 :
       1618 :                    ;;; Put character
       1618 :                    ;;; @param A char
       1618 :                    putchar_exit:
       1618 : C6 01                      ld      @1(P2)          ; pop P1
       161A : 31                         xpal    P1
       161B : C6 01                      ld      @1(P2)
       161D : 35                         xpah    P1
       161E : C6 01                      ld      @1(P2)          ; pop E
       1620 : 01                         xae
       1621 : C6 01                      ld      @1(P2)          ; pop A
       1623 : 3D                         xppc    P1
       1624 :                    putchar:
       1624 : CE FF                      st      @-1(P2)         ; push A
       1626 : 40                         lde
       1627 : CE FF                      st      @-1(P2)         ; push E
       1629 : C4 A7                      ldi     L(ADDR(queue_add))
       162B : 31                         xpal    P1
       162C : CE FE                      st      @-2(P2)
       162E : C4 16                      ldi     H(ADDR(queue_add))
       1630 : 35                         xpah    P1
       1631 : CA 01                      st      1(P2)           ; push P1
       1633 : C2 03                      ld      3(P2)           ; restore char
       1635 : 01                         xae                     ; E=char
       1636 :                    putchar_retry:
       1636 : 04                         dint                    ; disable interrupt
       1637 : 3D                         xppc    P1              ; call queue_add
       1638 : 10 20                      .dbyte  tx_queue
       163A : 05                         ien                     ; enable interrupt
       163B : 98 F9                      jz      putchar_retry   ; queue is full
       163D : C4 00                      ldi     L(ACIA)
       163F : 31                         xpal    P1
       1640 : C4 DF                      ldi     H(ACIA)
       1642 : 35                         xpah    P1
       1643 : C4 B4                      ldi     RX_INT_TX_INT   ; enable Tx interrupt
       1645 : C9 00                      st      ACIA_C(P1)
       1647 :                    putchar_return:
       1647 : 90 CF                      jmp     putchar_exit
       1649 :
       1649 :                    newline:
       1649 : C4 23                      ldi     L(ADDR(putchar))
       164B : 31                         xpal    P1
       164C : CE FE                      st      @-2(P2)
       164E : C4 16                      ldi     H(ADDR(putchar))
       1650 : 35                         xpah    P1
       1651 : CA 01                      st      1(P2)
       1653 : C4 0D                      ldi     X'0D
       1655 : 3D                         xppc    P1              ; print CR
       1656 : C4 0A                      ldi     X'0A
       1658 : 3D                         xppc    P1              ; print LF
       1659 : C6 01                      ld      @1(P2)
       165B : 31                         xpal    P1
       165C : C6 01                      ld      @1(P2)
       165E : 35                         xpah    P1
       165F : 3D                         xppc    P1              ; return
       1660 :
       1660 :                            include "queue.inc"
(1)    1660 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    1660 :                    ;;; [queue] queue structure
(1)    1660 : =0                 queue_len       =       0       ; queue length
(1)    1660 : =1                 queue_size      =       1       ; buffer size
(1)    1660 : =2                 queue_put       =       2       ; queue put index
(1)    1660 : =3                 queue_get       =       3       ; queue get index
(1)    1660 : =4                 queue_buf       =       4       ; buffer start offset
(1)    1660 :
(1)    1660 :                    ;;; [queue] Initialize queue
(1)    1660 :                    ;;; @param A queue space size
(1)    1660 :                    ;;; @param P1 return address pointer
(1)    1660 :                    ;;; @param P1[1:2] queue space pointer
(1)    1660 :                    ;;; @clobber A
(1)    1660 :                    queue_init_exit:
(1)    1660 : C6 01                      ld      @1(P2)          ; pop P1
(1)    1662 : 31                         xpal    P1
(1)    1663 : C6 01                      ld      @1(P2)
(1)    1665 : 35                         xpah    P1
(1)    1666 : C6 01                      ld      @1(P2)          ; discard work area
(1)    1668 : 3D                         xppc    P1
(1)    1669 :                    queue_init:
(1)    1669 : CE FF                      st      @-1(P2)         ; save queue space size
(1)    166B : C5 01                      ld      @1(P1)          ; advance to queue space pointer
(1)    166D : C5 01                      ld      @1(P1)          ; load queue work space pointer (le16)
(1)    166F : CE FE                      st      @-2(P2)         ; save lo(queue space)
(1)    1671 : C1 00                      ld      0(P1)
(1)    1673 : 35                         xpah    P1
(1)    1674 : CA 01                      st      1(P2)           ; P[1:0] push P1
(1)    1676 : C2 00                      ld      0(P2)
(1)    1678 : 31                         xpal    P1              ; P1=queue space pointer
(1)    1679 : CA 00                      st      0(P2)
(1)    167B : C4 00                      ldi     0
(1)    167D : C9 00                      st      queue_len(P1)   ; clear queue_len
(1)    167F : C9 02                      st      queue_put(P1)
(1)    1681 : C9 03                      st      queue_get(P1)
(1)    1683 : C2 02                      ld      2(P2)           ; queue space size
(1)    1685 : 03                         scl
(1)    1686 : FC 04                      cai     queue_buf
(1)    1688 : C9 01                      st      queue_size(P1)
(1)    168A : CA 02                      st      2(P2)           ; counter
(1)    168C : C5 04                      ld      @queue_buf(P1)  ; advanced pointer
(1)    168E :                    queue_init_loop:
(1)    168E : C4 00                      ldi     0
(1)    1690 : CD 01                      st      @1(P1)
(1)    1692 : BA 02                      dld     2(P2)
(1)    1694 : 9C F8                      jnz     queue_init_loop
(1)    1696 : 90 C8                      jmp     queue_init_exit
(1)    1698 :
(1)    1698 :                    ;;; [queue] Add an element to queue
(1)    1698 :                    ;;; @param E an element
(1)    1698 :                    ;;; @param P1 return address pointer
(1)    1698 :                    ;;; @param P1[1:2] queue space pointer
(1)    1698 :                    ;;; @return E an element
(1)    1698 :                    ;;; @return A 0 if queue is full
(1)    1698 :                    ;;; @clobber P1
(1)    1698 :                    queue_add_exit:
(1)    1698 : CA 05                      st      5(P2)           ; P2[5] return flag
(1)    169A : C6 02                      ld      @2(P2)          ; discard queue space pointer
(1)    169C : C6 01                      ld      @1(P2)          ; pop P1
(1)    169E : 31                         xpal    P1
(1)    169F : C6 01                      ld      @1(P2)
(1)    16A1 : 35                         xpah    P1
(1)    16A2 : C6 01                      ld      @1(P2)          ; restore E
(1)    16A4 : 01                         xae
(1)    16A5 : C6 01                      ld      @1(P2)          ; return flag
(1)    16A7 : 3D                         xppc    P1
(1)    16A8 :                    queue_add:
(1)    16A8 : C5 01                      ld      @1(P1)          ; advanced to queue space pointer
(1)    16AA : C5 01                      ld      @1(P1)          ; load queue space pointer (le16)
(1)    16AC : CE FA                      st      @-6(P2)         ; param, P1, elem, return flag
(1)    16AE : C1 00                      ld      0(P1)
(1)    16B0 : CA 01                      st      1(P2)           ; P2[1:0] queue space pointer
(1)    16B2 : 35                         xpah    P1
(1)    16B3 : CA 03                      st      3(P2)           ; P2[3:2] saved P1
(1)    16B5 : C2 00                      ld      0(P2)
(1)    16B7 : 31                         xpal    P1
(1)    16B8 : CA 02                      st      2(P2)
(1)    16BA : 40                         lde
(1)    16BB : CA 04                      st      4(P2)           ; P2[4] save an element
(1)    16BD : C1 00                      ld      queue_len(P1)
(1)    16BF : E1 01                      xor     queue_size(P1)
(1)    16C1 : 98 D5                      jz      queue_add_exit  ; queue is full, A=0
(1)    16C3 :                    queue_not_full:
(1)    16C3 : A9 00                      ild     queue_len(P1)    ; update queue_len
(1)    16C5 : C2 00                      ld      0(P2)
(1)    16C7 : 02                         ccl
(1)    16C8 : F1 02                      add     queue_put(P1)
(1)    16CA : 01                         xae
(1)    16CB : C2 01                      ld      1(P2)
(1)    16CD : F4 00                      adi     0
(1)    16CF : 35                         xpah    P1
(1)    16D0 : 01                         xae
(1)    16D1 : 31                         xpal    P1
(1)    16D2 : C2 04                      ld      4(P2)           ; an element
(1)    16D4 : C9 04                      st      queue_buf(P1)   ; store element
(1)    16D6 : C2 00                      ld      0(P2)
(1)    16D8 : 31                         xpal    P1
(1)    16D9 : C2 01                      ld      1(P2)
(1)    16DB : 35                         xpah    P1
(1)    16DC : A9 02                      ild     queue_put(P1)   ; advanced queue_put
(1)    16DE : E1 01                      xor     queue_size(P1)
(1)    16E0 : 9C 02                      jnz     queue_add_end   ; branch if queue_put != queue_size
(1)    16E2 : C9 02                      st      queue_put(P1)   ; reset queue_put
(1)    16E4 :                    queue_add_end:
(1)    16E4 : C4 01                      ldi     1
(1)    16E6 : 90 B0                      jmp     queue_add_exit  ; an element added, A=1
(1)    16E8 :
(1)    16E8 :                    ;;; [queue] Remove an element from queue
(1)    16E8 :                    ;;; @param P1 return address pointer
(1)    16E8 :                    ;;; @param P1[1:2] queue space pointer
(1)    16E8 :                    ;;; @return E an element
(1)    16E8 :                    ;;; @return A 0 if queue is empty
(1)    16E8 :                    ;;; @clobber P1
(1)    16E8 :                    queue_remove_exit:
(1)    16E8 : CA 04                      st      4(P2)           ; return flag
(1)    16EA : C6 02                      ld      @2(P2)          ; discard work area
(1)    16EC : C6 01                      ld      @1(P2)          ; pop P1
(1)    16EE : 31                         xpal    P1
(1)    16EF : C6 01                      ld      @1(P2)
(1)    16F1 : 35                         xpah    P1
(1)    16F2 : C6 01                      ld      @1(P2)          ; return flag
(1)    16F4 : 3D                         xppc    P1              ; return
(1)    16F5 :                    queue_remove:
(1)    16F5 : C5 01                      ld      @1(P1)          ; advanced to queue space pointer
(1)    16F7 : C5 01                      ld      @1(P1)          ; load queue space pointer (le16)
(1)    16F9 : CE FB                      st      @-5(P2)         ; param, P1, return flag
(1)    16FB : C1 00                      ld      0(P1)
(1)    16FD : CA 01                      st      1(P2)           ; P2[1:0] queue space pointer
(1)    16FF : 35                         xpah    P1
(1)    1700 : CA 03                      st      3(P2)           ; P2[3:2] saved P1
(1)    1702 : C2 00                      ld      0(P2)
(1)    1704 : 31                         xpal    P1
(1)    1705 : CA 02                      st      2(P2)
(1)    1707 : C1 00                      ld      queue_len(P1)
(1)    1709 : 98 DD                      jz      queue_remove_exit ; queue is empty, A=0
(1)    170B :                    queue_not_empty:
(1)    170B : B9 00                      dld     queue_len(P1)    ; update queue_len
(1)    170D : C2 00                      ld      0(P2)
(1)    170F : 02                         ccl
(1)    1710 : F1 03                      add     queue_get(P1)
(1)    1712 : 01                         xae
(1)    1713 : C2 01                      ld      1(P2)
(1)    1715 : F4 00                      adi     0
(1)    1717 : 35                         xpah    P1
(1)    1718 : 40                         lde
(1)    1719 : 31                         xpal    P1
(1)    171A : C1 04                      ld      queue_buf(P1)   ; load element
(1)    171C : 01                         xae                     ; E=element
(1)    171D : C2 00                      ld      0(P2)
(1)    171F : 31                         xpal    P1
(1)    1720 : C2 01                      ld      1(P2)
(1)    1722 : 35                         xpah    P1
(1)    1723 : A9 03                      ild     queue_get(P1)   ; advanced queue_get
(1)    1725 : E1 01                      xor     queue_size(P1)
(1)    1727 : 9C 02                      jnz     queue_remove_end ; branch if queue_put != queue_size
(1)    1729 : C9 03                      st      queue_get(P1)   ; reset queue_get
(1)    172B :                    queue_remove_end:
(1)    172B : C4 01                      ldi     1
(1)    172D : 90 B9                      jmp     queue_remove_exit
       172F :
       172F :                    isr_sensea_exit:
       172F : C6 01                      ld      @1(P2)          ; pop P1
       1731 : 31                         xpal    P1
       1732 : C6 01                      ld      @1(P2)
       1734 : 35                         xpah    P1
       1735 : C6 01                      ld      @1(P2)          ; pop Status
       1737 : 07                         cas
       1738 : C6 01                      ld      @1(P2)          ; pop E
       173A : 01                         xae
       173B : C6 01                      ld      @1(P2)          ; pop A
       173D : 05                         ien                     ; enable interrupt
       173E : 3F                         xppc    P3              ; return from interrupt
       173F :                    isr_sensea:
       173F : CE FF                      st      @-1(P2)         ; save A
       1741 : 40                         lde
       1742 : CE FF                      st      @-1(P2)         ; save E
       1744 : 06                         csa
       1745 : CE FF                      st      @-1(P2)         ; save Status
       1747 : C4 00                      ldi     L(ACIA)         ; save P1 and load P1
       1749 : 31                         xpal    P1
       174A : CE FE                      st      @-2(P2)
       174C : C4 DF                      ldi     H(ACIA)
       174E : 35                         xpah    P1
       174F : CA 01                      st      1(P2)
       1751 : C1 00                      ld      ACIA_S(P1)
       1753 : CE FF                      st      @-1(P2)         ; save ACIA_status
       1755 : D4 01                      ani     RDRF_bm
       1757 : 98 0C                      jz      isr_send
       1759 : C1 01                      ld      ACIA_D(P1)      ; receive character
       175B : 01                         xae                     ; E=char
       175C : C4 A7                      ldi     L(ADDR(queue_add))
       175E : 31                         xpal    P1
       175F : C4 16                      ldi     H(ADDR(queue_add))
       1761 : 35                         xpah    P1
       1762 : 3D                         xppc    P1              ; call queue_add
       1763 : 00 20                      .dbyte  rx_queue
       1765 :                    isr_send:
       1765 : C6 01                      ld      @1(P2)          ; pop ACIA status
       1767 : D4 02                      ani     TDRE_bm
       1769 : 98 C4                      jz      isr_sensea_exit
       176B : C4 F4                      ldi     L(ADDR(queue_remove))
       176D : 31                         xpal    P1
       176E : C4 16                      ldi     H(ADDR(queue_remove))
       1770 : 35                         xpah    P1
       1771 : 3D                         xppc    P1              ; call queue_remove
       1772 : 10 20                      .dbyte  tx_queue
       1774 : 98 0B                      jz      isr_send_empty
       1776 : C4 00                      ldi     L(ACIA)
       1778 : 31                         xpal    P1
       1779 : C4 DF                      ldi     H(ACIA)
       177B : 35                         xpah    P1
       177C : 40                         lde
       177D : C9 01                      st      ACIA_D(P1)      ; send character
       177F : 90 AE                      jmp     isr_sensea_exit
       1781 :                    isr_send_empty:
       1781 : C4 00                      ldi     L(ACIA)
       1783 : 31                         xpal    P1
       1784 : C4 DF                      ldi     H(ACIA)
       1786 : 35                         xpah    P1
       1787 : C4 94                      ldi     RX_INT_TX_NO
       1789 : C9 00                      st      ACIA_C(P1)      ; disable Tx interrupt
       178B : 90 A2                      jmp     isr_sensea_exit
       178D :
       178D :                            end
