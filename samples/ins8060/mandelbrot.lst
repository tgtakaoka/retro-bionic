          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     ins8060
          0 :                            include "ins8060.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; INS8060
(1)       0 :                    ;;; Status Register
(1)       0 : =80                S_CY    =       X'80           ; Carry bit
(1)       0 : =80                S_L     =       X'80           ; Link bit
(1)       0 : =40                S_OV    =       X'40           ; Overflow bit
(1)       0 : =20                S_SB    =       X'20           ; Sense B bit
(1)       0 : =10                S_SA    =       X'10           ; Sense A bit
(1)       0 : =8                 S_IE    =       X'08           ; Interrupt Enable bit
(1)       0 : =4                 S_F2    =       X'04           ; Flag 2 bit
(1)       0 : =2                 S_F1    =       X'02           ; Flag 1 bit
(1)       0 : =1                 S_F0    =       X'01           ; flag 0 bit
(1)       0 :
(1)       0 :                    ;;; Dynamic Offset by E register
(1)       0 : =80                OFFSET_E        =       X'80    ; offset by E register
(1)       0 :
(1)       0 :                    ;;; Transfer locations
(1)       0 : =1                 ORG_RESTART     =       X'0001  ; Restart transfer location
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA    =       X'DF00
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control    =       ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm          =       X'03   ; Group mask
(1)       0 : =0                 CDS_DIV1_gc     =       X'00   ; /1
(1)       0 : =1                 CDS_DIV16_gc    =       X'01   ; /16
(1)       0 : =2                 CDS_DIV64_gc    =       X'02   ; /64
(1)       0 : =3                 CDS_RESET_gc    =       X'03   ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm          =       X'1C   ; Group mask
(1)       0 : =0                 WSB_7E2_gc      =       X'00   ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc      =       X'04   ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc      =       X'08   ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc      =       X'0C   ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc      =       X'10   ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc      =       X'14   ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc      =       X'18   ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc      =       X'1C   ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm          =       X'60   ; Group mask
(1)       0 : =0                 TCB_DI_gc       =       X'00   ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc       =       X'20   ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc      =       X'40   ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc    =       X'60   ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                    ; Transmit Break Level
(1)       0 : =80                RIEB_bm         =       X'80   ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status     =       ACIA+0
(1)       0 : =1                 RDRF_bm         =       X'01   ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm         =       X'02   ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm         =       X'04   ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm         =       X'08   ; Clear To Send Flag
(1)       0 : =10                FERR_bm         =       X'10   ; Frame Error Flag
(1)       0 : =20                OVRN_bm         =       X'20   ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm         =       X'40   ; Parity Error Flag
(1)       0 : =80                IRQF_bm         =       X'80   ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data       =       ACIA+1  ; Data register
          0 : =0                 ACIA_C  =       0               ; ACIA control offset
          0 : =0                 ACIA_S  =       0               ; ACIA status offset
          0 : =1                 ACIA_D  =       1               ; ACIA data register offset
          0 :
          0 : =10                rx_queue_size   =       16
          0 : =30                tx_queue_size   =       48
          0 : =94                RX_INT_TX_NO    =       WSB_8N1_gc|RIEB_bm
          0 : =B4                RX_INT_TX_INT   =       WSB_8N1_gc|RIEB_bm|TCB_EI_gc
          0 :
       2000 :                            .=      X'2000
       2000 :                    rx_queue:
       2010 :                            .=      .+rx_queue_size
       2010 :                    tx_queue:
       2040 :                            .=      .+tx_queue_size
       2040 :
          1 :                            .=      ORG_RESTART
          1 : C4 FF                      ldi     L(stack)
          3 : 32                         xpal    P2
          4 : C4 0F                      ldi     H(stack)
          6 : 36                         xpah    P2
          7 : C4 FC                      ldi     L(ADDR(isr_sensea))
          9 : 33                         xpal    P3              ; setup interrupt entry P3
          A : C4 16                      ldi     H(ADDR(isr_sensea))
          C : 37                         xpah    P3
          D : C4 FF                      ldi     L(ADDR(initialize))
          F : 31                         xpal    P1
         10 : C4 1F                      ldi     H(ADDR(initialize))
         12 : 35                         xpah    P1
         13 : 3D                         xppc    P1
         14 :
       1000 :                            .=      X'1000
       1000 : =FFF               stack   =       .-1
       1000 :                    initialize:
       1000 : C4 26                      ldi     L(ADDR(queue_init))
       1002 : 31                         xpal    P1
       1003 : C4 16                      ldi     H(ADDR(queue_init))
       1005 : 35                         xpah    P1              ; P1=queue_init
       1006 : C4 10                      ldi     rx_queue_size
       1008 : 3D                         xppc    P1              ; call queue_init
       1009 : 00 20                      .dbyte  rx_queue
       100B : C4 30                      ldi     tx_queue_size
       100D : 3D                         xppc    P1              ; call queue init
       100E : 10 20                      .dbyte  tx_queue
       1010 :
       1010 :                            ;; initialize ACIA
       1010 : C4 00                      ldi     L(ACIA)
       1012 : 31                         xpal    P1
       1013 : C4 DF                      ldi     H(ACIA)
       1015 : 35                         xpah    P1
       1016 : C4 03                      ldi     CDS_RESET_gc    ; Master reset
       1018 : C9 00                      st      ACIA_C(P1)
       101A : C4 94                      ldi     RX_INT_TX_NO    ; 8 bits + No Parity + 1 Stop Bits
       101C :                                                    ; Transmit, Receive interrupts disabled
       101C : C9 00                      st      ACIA_C(P1)      ;
       101E : 05                         ien                     ; enable interrupt
       101F :
       101F :                    loop:
       101F : C4 DE                      ldi     L(ADDR(mandelbrot))
       1021 : 31                         xpal    P1
       1022 : C4 10                      ldi     H(ADDR(mandelbrot))
       1024 : 35                         xpah    P1
       1025 : 3D                         xppc    P1              ; call mandelbrot
       1026 : C4 06                      ldi     L(ADDR(newline))
       1028 : 31                         xpal    P1
       1029 : C4 16                      ldi     H(ADDR(newline))
       102B : 35                         xpah    P1
       102C : 3D                         xppc    P1              ; call mandelbrot
       102D : 90 F0                      jmp     loop
       102F :
       102F :                            include "mandelbrot.inc"
(1)    102F :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    102F :
(1)    102F : 32 00              cF:     .dbyte  50              ; constant
(1)    1031 : F4 FF              c_12:   .dbyte  -12
(1)    1033 : CF FF              c_49:   .dbyte  -49
(1)    1035 : E5 00              c229:   .dbyte  229
(1)    1037 : 64 00              c100:   .dbyte  100
(1)    1039 : A0 01              c416:   .dbyte  416
(1)    103B : 1E 00              c30:    .dbyte  30
(1)    103D : 0D 00              c13:    .dbyte  13
(1)    103F : 00 00              vY:     .dbyte  0
(1)    1041 : 00 00              vX:     .dbyte  0
(1)    1043 : 00 00              vC:     .dbyte  0
(1)    1045 : 00 00              vD:     .dbyte  0
(1)    1047 : 00 00              vI:     .dbyte  0
(1)    1049 : 00 00              vA:     .dbyte  0
(1)    104B : 00 00              vB:     .dbyte  0
(1)    104D : 00 00              vS:     .dbyte  0
(1)    104F : 00 00              vP:     .dbyte  0
(1)    1051 : 00 00              vQ:     .dbyte  0
(1)    1053 : 00 00              vT0:    .dbyte  0
(1)    1055 : 00 00              vT1:    .dbyte  0
(1)    1057 : 00 00              vT2:    .dbyte  0
(1)    1059 :
(1)    1059 :                    ;;; Assign value: v1 = v2
(1)    1059 :                    ;;;   xppc   P1
(1)    1059 :                    ;;;   .dbyte &v2
(1)    1059 :                    ;;;   .dbyte &v1
(1)    1059 :                    ;;; @local P[1:0] &v2, v2
(1)    1059 :                    ;;; @local P[3:2] &v1
(1)    1059 :                    ;;; @local P[5:4] return address
(1)    1059 :                    assign_exit:
(1)    1059 : C6 04                      ld      @4(P2)          ; discard locals
(1)    105B : C6 01                      ld      @1(P2)
(1)    105D : 31                         xpal    P1
(1)    105E : C6 01                      ld      @1(P2)
(1)    1060 : 35                         xpah    P1
(1)    1061 : 3D                         xppc    P1              ; return
(1)    1062 :                    assign:
(1)    1062 : C5 01                      ld      @1(P1)          ; point &v2
(1)    1064 : C5 01                      ld      @1(P1)
(1)    1066 : CE FA                      st      @-6(P2)         ; P2[1:0]=&v2
(1)    1068 : C5 01                      ld      @1(P1)
(1)    106A : CA 01                      st      1(P2)
(1)    106C : C5 01                      ld      @1(P1)
(1)    106E : CA 02                      st      2(P2)           ; P2[3:2]=&v1
(1)    1070 : C1 00                      ld      0(P1)           ; P1=return address
(1)    1072 : CA 03                      st      3(P2)
(1)    1074 : C2 00                      ld      0(P2)           ; P2[1:0]=&v2
(1)    1076 : 31                         xpal    P1
(1)    1077 : CA 04                      st      4(P2)           ; P2[5:4]=return address
(1)    1079 : C2 01                      ld      1(P2)
(1)    107B : 35                         xpah    P1              ; P1=&v2
(1)    107C : CA 05                      st      5(P2)
(1)    107E : C1 00                      ld      0(P1)
(1)    1080 : CA 00                      st      0(P2)           ; P2[1:0]=v2
(1)    1082 : C1 01                      ld      1(P1)
(1)    1084 : CA 01                      st      1(P2)
(1)    1086 : C2 02                      ld      2(P2)           ; P2[3:2]=&v1
(1)    1088 : 31                         xpal    P1
(1)    1089 : C2 03                      ld      3(P2)
(1)    108B : 35                         xpah    P1              ; P1=&v1
(1)    108C : C2 00                      ld      0(P2)           ; P2[1:0]=v2
(1)    108E : C9 00                      st      0(P1)
(1)    1090 : C2 01                      ld      1(P2)
(1)    1092 : C9 01                      st      1(P1)
(1)    1094 : 90 C3                      jmp     assign_exit
(1)    1096 :
(1)    1096 :                    ;;; Print variable "vname=value "
(1)    1096 :                    ;;;   xppc   P1
(1)    1096 :                    ;;;   .byte  vname
(1)    1096 :                    ;;;   .dbyte &value
(1)    1096 :                    ;;; @local P[1:0] &value
(1)    1096 :                    ;;; @local P[3:2] return address
(1)    1096 :                    print_exit:
(1)    1096 : C6 02                      ld      @2(P2)          ; discard local
(1)    1098 : C6 01                      ld      @1(P2)
(1)    109A : 31                         xpal    P1
(1)    109B : C6 01                      ld      @1(P2)
(1)    109D : 35                         xpah    P1
(1)    109E : 3D                         xppc    P1              ; return
(1)    109F :                    print:
(1)    109F : C5 01                      ld      @1(P1)          ; point vname
(1)    10A1 : C5 01                      ld      @1(P1)
(1)    10A3 : 01                         xae                     ; E=vname
(1)    10A4 : C5 01                      ld      @1(P1)
(1)    10A6 : CE FC                      st      @-4(P2)         ; P2[1:0]=&value
(1)    10A8 : C1 00                      ld      0(P1)           ; P1=return address
(1)    10AA : CA 01                      st      1(P2)
(1)    10AC : C2 00                      ld      0(P2)           ; P2[1:0]=&value
(1)    10AE : 31                         xpal    P1
(1)    10AF : CA 02                      st      2(P2)           ; P2[3:2]=return address
(1)    10B1 : C2 01                      ld      1(P2)
(1)    10B3 : 35                         xpah    P1              ; P1=&value
(1)    10B4 : CA 03                      st      3(P2)
(1)    10B6 : C1 00                      ld      0(P1)           ; vDEBUG=value
(1)    10B8 : C8 24                      st      vDEBUG
(1)    10BA : C1 01                      ld      1(P1)
(1)    10BC : C8 21                      st      vDEBUG+1
(1)    10BE : C4 E1                      ldi     L(ADDR(putchar))
(1)    10C0 : 31                         xpal    P1
(1)    10C1 : C4 15                      ldi     H(ADDR(putchar))
(1)    10C3 : 35                         xpah    P1              ; P1=ADDR(putchar)
(1)    10C4 : 40                         lde                     ; A=vname
(1)    10C5 : 3D                         xppc    P1              ; print vname
(1)    10C6 : C4 3D                      ldi     '='
(1)    10C8 : 3D                         xppc    P1              ; print '='
(1)    10C9 : C4 C2                      ldi     L(ADDR(print_int16))
(1)    10CB : 31                         xpal    P1
(1)    10CC : C4 12                      ldi     H(ADDR(print_int16))
(1)    10CE : 35                         xpah    P1
(1)    10CF : 3D                         xppc    P1
(1)    10D0 : DD 10                      .dbyte  vDEBUG
(1)    10D2 : C4 E1                      ldi     L(ADDR(putchar))
(1)    10D4 : 31                         xpal    P1
(1)    10D5 : C4 15                      ldi     H(ADDR(putchar))
(1)    10D7 : 35                         xpah    P1              ; P1=ADDR(putchar)
(1)    10D8 : C4 20                      ldi     ' '
(1)    10DA : 3D                         xppc    P1              ; print space
(1)    10DB : 90 B9                      jmp     print_exit
(1)    10DD : 02 00              vDEBUG: .dbyte  2
(1)    10DF :
(1)    10DF :                    mandelbrot:
(1)    10DF : C4 10                      ldi     H(ADDR(assign))
(1)    10E1 : 35                         xpah    P1
(1)    10E2 : CE FF                      st      @-1(P2)
(1)    10E4 : C4 61                      ldi     L(ADDR(assign))
(1)    10E6 : 31                         xpal    P1
(1)    10E7 : CE FF                      st      @-1(P2)         ; save return address
(1)    10E9 :
(1)    10E9 : 3D                         xppc    P1              ; Y=-12
(1)    10EA : 31 10                      .dbyte  c_12
(1)    10EC : 3F 10                      .dbyte  vY
(1)    10EE :                    loop_y:
(1)    10EE : C4 61                      ldi     L(ADDR(assign))
(1)    10F0 : 31                         xpal    P1
(1)    10F1 : C4 10                      ldi     H(ADDR(assign))
(1)    10F3 : 35                         xpah    P1
(1)    10F4 : 3D                         xppc    P1              ; X=-49
(1)    10F5 : 33 10                      .dbyte  c_49
(1)    10F7 : 41 10                      .dbyte  vX
(1)    10F9 :                    loop_x:
(1)    10F9 : C4 61                      ldi     L(ADDR(assign))
(1)    10FB : 31                         xpal    P1
(1)    10FC : C4 10                      ldi     H(ADDR(assign))
(1)    10FE : 35                         xpah    P1              ; P1=ADDR(assign)
(1)    10FF : 3D                         xppc    P1              ; C=X
(1)    1100 : 41 10                      .dbyte  vX
(1)    1102 : 43 10                      .dbyte  vC
(1)    1104 : 3D                         xppc    P1              ; D=Y
(1)    1105 : 3F 10                      .dbyte  vY
(1)    1107 : 45 10                      .dbyte  vD
(1)    1109 : C4 28                      ldi     L(ADDR(mulsi2))
(1)    110B : 31                         xpal    P1
(1)    110C : C4 14                      ldi     H(ADDR(mulsi2))
(1)    110E : 35                         xpah    P1              ; P1=ADDR(mulsi2)
(1)    110F : 3D                         xppc    P1              ; C=X*229
(1)    1110 : 35 10                      .dbyte  c229
(1)    1112 : 43 10                      .dbyte  vC
(1)    1114 : 3D                         xppc    P1              ; D=Y*416
(1)    1115 : 39 10                      .dbyte  c416
(1)    1117 : 45 10                      .dbyte  vD
(1)    1119 : C4 E2                      ldi     L(ADDR(divsi2))
(1)    111B : 31                         xpal    P1
(1)    111C : C4 14                      ldi     H(ADDR(divsi2))
(1)    111E : 35                         xpah    P1              ; P1=ADDR(divsi2)
(1)    111F : 3D                         xppc    P1              ; C=X*229/100
(1)    1120 : 37 10                      .dbyte  c100
(1)    1122 : 43 10                      .dbyte  vC
(1)    1124 : 3D                         xppc    P1              ; D=Y*416/100
(1)    1125 : 37 10                      .dbyte  c100
(1)    1127 : 45 10                      .dbyte  vD
(1)    1129 : C4 61                      ldi     L(ADDR(assign))
(1)    112B : 31                         xpal    P1
(1)    112C : C4 10                      ldi     H(ADDR(assign))
(1)    112E : 35                         xpah    P1              ; P1=ADDR(assign)
(1)    112F : 3D                         xppc    P1              ; A=C
(1)    1130 : 43 10                      .dbyte  vC
(1)    1132 : 49 10                      .dbyte  vA
(1)    1134 : 3D                         xppc    P1              ; B=D
(1)    1135 : 45 10                      .dbyte  vD
(1)    1137 : 4B 10                      .dbyte  vB
(1)    1139 : C4 47                      ldi     L(vI)
(1)    113B : 31                         xpal    P1
(1)    113C : C4 10                      ldi     H(vI)
(1)    113E : 35                         xpah    P1              ; P1=&vI
(1)    113F : C4 00                      ldi     0
(1)    1141 : C9 00                      st      0(P1)           ; I=0
(1)    1143 : C9 01                      st      1(P1)
(1)    1145 :
(1)    1145 :                            ;; ldi     L(ADDR(print))
(1)    1145 :                            ;; xpal    P1
(1)    1145 :                            ;; ldi     H(ADDR(print))
(1)    1145 :                            ;; xpah    P1              ; P1=ADDR(print)
(1)    1145 :                            ;; xppc    P1              ; print Y
(1)    1145 :                            ;; .byte   'Y'
(1)    1145 :                            ;; .dbyte  vY
(1)    1145 :                            ;; xppc    P1              ; print X
(1)    1145 :                            ;; .byte   'X'
(1)    1145 :                            ;; .dbyte  vX
(1)    1145 :                            ;; xppc    P1              ; print C
(1)    1145 :                            ;; .byte   'C'
(1)    1145 :                            ;; .dbyte  vC
(1)    1145 :                            ;; xppc    P1              ; print D
(1)    1145 :                            ;; .byte   'D'
(1)    1145 :                            ;; .dbyte  vD
(1)    1145 :                            ;; ldi     L(ADDR(newline))
(1)    1145 :                            ;; xpal    P1
(1)    1145 :                            ;; ldi     H(ADDR(newline))
(1)    1145 :                            ;; xpah    P1              ; P1=ADDR(newline)
(1)    1145 :                            ;; xppc    P1
(1)    1145 :
(1)    1145 :                    loop_i:
(1)    1145 : C4 61                      ldi     L(ADDR(assign))
(1)    1147 : 31                         xpal    P1
(1)    1148 : C4 10                      ldi     H(ADDR(assign))
(1)    114A : 35                         xpah    P1              ; P1=ADDR(assign)
(1)    114B : 3D                         xppc    P1              ; T0=B
(1)    114C : 4B 10                      .dbyte  vB
(1)    114E : 53 10                      .dbyte  vT0
(1)    1150 : 3D                         xppc    P1              ; S=B
(1)    1151 : 4B 10                      .dbyte  vB
(1)    1153 : 4D 10                      .dbyte  vS
(1)    1155 : 3D                         xppc    P1              ; T1=B
(1)    1156 : 4B 10                      .dbyte  vB
(1)    1158 : 55 10                      .dbyte  vT1
(1)    115A : 3D                         xppc    P1              ; T2=A
(1)    115B : 49 10                      .dbyte  vA
(1)    115D : 57 10                      .dbyte  vT2
(1)    115F : C4 E2                      ldi     L(ADDR(divsi2))
(1)    1161 : 31                         xpal    P1
(1)    1162 : C4 14                      ldi     H(ADDR(divsi2))
(1)    1164 : 35                         xpah    P1              ; P1=ADDR(divsi2)
(1)    1165 : 3D                         xppc    P1              ; T0=B/F
(1)    1166 : 2F 10                      .dbyte  cF
(1)    1168 : 53 10                      .dbyte  vT0
(1)    116A : C4 61                      ldi     L(ADDR(assign))
(1)    116C : 31                         xpal    P1
(1)    116D : C4 10                      ldi     H(ADDR(assign))
(1)    116F : 35                         xpah    P1              ; P1=ADDR(assign)
(1)    1170 : 3D                         xppc    P1              ; Q=T0=B/F
(1)    1171 : 53 10                      .dbyte  vT0
(1)    1173 : 51 10                      .dbyte  vQ
(1)    1175 : C4 28                      ldi     L(ADDR(mulsi2))
(1)    1177 : 31                         xpal    P1
(1)    1178 : C4 14                      ldi     H(ADDR(mulsi2))
(1)    117A : 35                         xpah    P1              ; P1=ADDR(mulsi2)
(1)    117B : 3D                         xppc    P1              ; T0=(B/F)*F=Q*F
(1)    117C : 2F 10                      .dbyte  cF
(1)    117E : 53 10                      .dbyte  vT0
(1)    1180 : 3D                         xppc    P1              ; T1=B*B
(1)    1181 : 55 10                      .dbyte  vT1
(1)    1183 : 55 10                      .dbyte  vT1
(1)    1185 : 3D                         xppc    P1              ; T2=A*A
(1)    1186 : 57 10                      .dbyte  vT2
(1)    1188 : 57 10                      .dbyte  vT2
(1)    118A : C4 89                      ldi     L(ADDR(subsi2))
(1)    118C : 31                         xpal    P1
(1)    118D : C4 13                      ldi     H(ADDR(subsi2))
(1)    118F : 35                         xpah    P1              ; P1=ADDR(subsi2)
(1)    1190 : 3D                         xppc    P1              ; S=B-Q*F
(1)    1191 : 53 10                      .dbyte  vT0
(1)    1193 : 4D 10                      .dbyte  vS
(1)    1195 : 3D                         xppc    P1              ; T2=A*A-B*B
(1)    1196 : 55 10                      .dbyte  vT1
(1)    1198 : 57 10                      .dbyte  vT2
(1)    119A : C4 61                      ldi     L(ADDR(assign))
(1)    119C : 31                         xpal    P1
(1)    119D : C4 10                      ldi     H(ADDR(assign))
(1)    119F : 35                         xpah    P1              ; P1=ADDR(assign)
(1)    11A0 : 3D                         xppc    P1              ; T0=A
(1)    11A1 : 49 10                      .dbyte  vA
(1)    11A3 : 53 10                      .dbyte  vT0
(1)    11A5 : 3D                         xppc    P1              ; B=A
(1)    11A6 : 49 10                      .dbyte  vA
(1)    11A8 : 4B 10                      .dbyte  vB
(1)    11AA : C4 28                      ldi     L(ADDR(mulsi2))
(1)    11AC : 31                         xpal    P1
(1)    11AD : C4 14                      ldi     H(ADDR(mulsi2))
(1)    11AF : 35                         xpah    P1              ; P1=ADDR(mulsi2)
(1)    11B0 : 3D                         xppc    P1              ; T0=A*S
(1)    11B1 : 4D 10                      .dbyte  vS
(1)    11B3 : 53 10                      .dbyte  vT0
(1)    11B5 : 3D                         xppc    P1              ; B=A*Q
(1)    11B6 : 51 10                      .dbyte  vQ
(1)    11B8 : 4B 10                      .dbyte  vB
(1)    11BA : C4 E2                      ldi     L(ADDR(divsi2))
(1)    11BC : 31                         xpal    P1
(1)    11BD : C4 14                      ldi     H(ADDR(divsi2))
(1)    11BF : 35                         xpah    P1              ; P1=ADDR(divsi2)
(1)    11C0 : 3D                         xppc    P1              ; T2=(A*A-B*B)/F
(1)    11C1 : 2F 10                      .dbyte  cF
(1)    11C3 : 57 10                      .dbyte  vT2
(1)    11C5 : 3D                         xppc    P1              ; T0=A*S/F
(1)    11C6 : 2F 10                      .dbyte  cF
(1)    11C8 : 53 10                      .dbyte  vT0
(1)    11CA : C4 47                      ldi     L(ADDR(addsi2))
(1)    11CC : 31                         xpal    P1
(1)    11CD : C4 13                      ldi     H(ADDR(addsi2))
(1)    11CF : 35                         xpah    P1              ; P1=ADDR(addsi2)
(1)    11D0 : 3D                         xppc    P1              ; T2=(A*A-B*B)/F+C
(1)    11D1 : 43 10                      .dbyte  vC
(1)    11D3 : 57 10                      .dbyte  vT2
(1)    11D5 : 3D                         xppc    P1              ; B=A*Q+A*S/F
(1)    11D6 : 53 10                      .dbyte  vT0
(1)    11D8 : 4B 10                      .dbyte  vB
(1)    11DA : 3D                         xppc    P1              ; B=2*(A*Q+A*S/F)
(1)    11DB : 4B 10                      .dbyte  vB
(1)    11DD : 4B 10                      .dbyte  vB
(1)    11DF : 3D                         xppc    P1              ; B=2*(A*Q+A*S/F)+D
(1)    11E0 : 45 10                      .dbyte  vD
(1)    11E2 : 4B 10                      .dbyte  vB
(1)    11E4 : C4 61                      ldi     L(ADDR(assign))
(1)    11E6 : 31                         xpal    P1
(1)    11E7 : C4 10                      ldi     H(ADDR(assign))
(1)    11E9 : 35                         xpah    P1              ; P1=ADDR(assign)
(1)    11EA : 3D                         xppc    P1              ; A=T2
(1)    11EB : 57 10                      .dbyte  vT2
(1)    11ED : 49 10                      .dbyte  vA
(1)    11EF : 3D                         xppc    P1              ; P=A
(1)    11F0 : 49 10                      .dbyte  vA
(1)    11F2 : 4F 10                      .dbyte  vP
(1)    11F4 : 3D                         xppc    P1              ; Q=B
(1)    11F5 : 4B 10                      .dbyte  vB
(1)    11F7 : 51 10                      .dbyte  vQ
(1)    11F9 : C4 E2                      ldi     L(ADDR(divsi2))
(1)    11FB : 31                         xpal    P1
(1)    11FC : C4 14                      ldi     H(ADDR(divsi2))
(1)    11FE : 35                         xpah    P1              ; P1=ADDR(divsi2)
(1)    11FF : 3D                         xppc    P1              ; P=A/F
(1)    1200 : 2F 10                      .dbyte  cF
(1)    1202 : 4F 10                      .dbyte  vP
(1)    1204 : 3D                         xppc    P1              ; Q=B/F
(1)    1205 : 2F 10                      .dbyte  cF
(1)    1207 : 51 10                      .dbyte  vQ
(1)    1209 :
(1)    1209 :                            ;; ldi     L(ADDR(putchar))
(1)    1209 :                            ;; xpal    P1
(1)    1209 :                            ;; ldi     H(ADDR(putchar))
(1)    1209 :                            ;; xpah    P1              ; P1=ADDR(putchar)
(1)    1209 :                            ;; ldi     ' '
(1)    1209 :                            ;; xppc    P1              ; print space
(1)    1209 :                            ;; ldi     L(ADDR(print))
(1)    1209 :                            ;; xpal    P1
(1)    1209 :                            ;; ldi     H(ADDR(print))
(1)    1209 :                            ;; xpah    P1              ; P1=ADDR(print)
(1)    1209 :                            ;; xppc    P1              ; print I
(1)    1209 :                            ;; .byte   'I'
(1)    1209 :                            ;; .dbyte  vI
(1)    1209 :                            ;; xppc    P1              ; print A
(1)    1209 :                            ;; .byte   'A'
(1)    1209 :                            ;; .dbyte  vA
(1)    1209 :                            ;; xppc    P1              ; print B
(1)    1209 :                            ;; .byte   'B'
(1)    1209 :                            ;; .dbyte  vB
(1)    1209 :                            ;; xppc    P1              ; print P
(1)    1209 :                            ;; .byte   'P'
(1)    1209 :                            ;; .dbyte  vP
(1)    1209 :                            ;; xppc    P1              ; print Q
(1)    1209 :                            ;; .byte   'Q'
(1)    1209 :                            ;; .dbyte  vQ
(1)    1209 :                            ;; ldi     L(ADDR(newline))
(1)    1209 :                            ;; xpal    P1
(1)    1209 :                            ;; ldi     H(ADDR(newline))
(1)    1209 :                            ;; xpah    P1              ; P1=ADDR(newline)
(1)    1209 :                            ;; xppc    P1              ; newline
(1)    1209 :
(1)    1209 : C4 28                      ldi     L(ADDR(mulsi2))
(1)    120B : 31                         xpal    P1
(1)    120C : C4 14                      ldi     H(ADDR(mulsi2))
(1)    120E : 35                         xpah    P1              ; P1=ADDR(mulsi2)
(1)    120F : 3D                         xppc    P1              ; Q=Q*Q
(1)    1210 : 51 10                      .dbyte  vQ
(1)    1212 : 51 10                      .dbyte  vQ
(1)    1214 : 3D                         xppc    P1              ; P=P*P
(1)    1215 : 4F 10                      .dbyte  vP
(1)    1217 : 4F 10                      .dbyte  vP
(1)    1219 : C4 47                      ldi     L(ADDR(addsi2))
(1)    121B : 31                         xpal    P1
(1)    121C : C4 13                      ldi     H(ADDR(addsi2))
(1)    121E : 35                         xpah    P1              ; P1=ADDR(addsi2)
(1)    121F : 3D                         xppc    P1              ; P=P*P+Q*Q
(1)    1220 : 51 10                      .dbyte  vQ
(1)    1222 : 4F 10                      .dbyte  vP
(1)    1224 : C4 4F                      ldi     L(vP)
(1)    1226 : 31                         xpal    P1
(1)    1227 : C4 10                      ldi     H(vP)
(1)    1229 : 35                         xpah    P1              ; P1=&vP
(1)    122A : C1 01                      ld      1(P1)           ; H(vP)
(1)    122C : 9C 1F                      jnz     next_i
(1)    122E : 03                         scl                     ; clear borrow
(1)    122F : C4 04                      ldi     4
(1)    1231 : F9 00                      cad     0(P1)           ; 4-L(vP)
(1)    1233 : 94 18                      jp      next_i          ; branch if 4<P*P+Q*Q
(1)    1235 :                    print_i:
(1)    1235 : C4 47                      ldi     L(vI)
(1)    1237 : 31                         xpal    P1
(1)    1238 : C4 10                      ldi     H(vI)
(1)    123A : 35                         xpah    P1              ; P1=&vI
(1)    123B : C1 00                      ld      0(P1)
(1)    123D : 03                         scl                     ; clear borrow
(1)    123E : FC 0A                      cai     10              ; A=I-10
(1)    1240 : 94 06                      jp      print_i_hex
(1)    1242 : C1 00                      ld      0(P1)
(1)    1244 : DC 30                      ori     '0'
(1)    1246 : 90 1B                      jmp     print_char
(1)    1248 :                    print_i_hex:
(1)    1248 : 02                         ccl
(1)    1249 : F4 41                      adi     'A'
(1)    124B : 90 16                      jmp     print_char
(1)    124D :                    next_i:
(1)    124D : C4 47                      ldi     L(vI)
(1)    124F : 31                         xpal    P1
(1)    1250 : C4 10                      ldi     H(vI)
(1)    1252 : 35                         xpah    P1              ; P1=&vI
(1)    1253 : A9 00                      ild     0(P1)           ; I+=1
(1)    1255 : 03                         scl                     ; clear borrow
(1)    1256 : FC 10                      cai     16              ; I-16
(1)    1258 : 94 07                      jp      print_space     ; branch if I >= 16
(1)    125A : C4 44                      ldi     L(ADDR(loop_i))
(1)    125C : 31                         xpal    P1
(1)    125D : C4 11                      ldi     H(ADDR(loop_i))
(1)    125F : 35                         xpah    P1
(1)    1260 : 3D                         xppc    P1              ; jump to loop_i
(1)    1261 :                    print_space:
(1)    1261 : C4 20                      ldi     ' '
(1)    1263 :                    print_char:
(1)    1263 : 01                         xae                     ; E=char
(1)    1264 : C4 E1                      ldi     L(ADDR(putchar))
(1)    1266 : 31                         xpal    P1
(1)    1267 : C4 15                      ldi     H(ADDR(putchar))
(1)    1269 : 35                         xpah    P1
(1)    126A : 40                         lde
(1)    126B : 3D                         xppc    P1              ; print char
(1)    126C :
(1)    126C :                            ;; ldi     '@'
(1)    126C :                            ;; xppc    P1              ; print '@='
(1)    126C :                            ;; ldi     '='
(1)    126C :                            ;; xppc    P1
(1)    126C :                            ;; lde
(1)    126C :                            ;; xppc    P1
(1)    126C :                            ;; ldi     L(ADDR(newline))
(1)    126C :                            ;; xpal    P1
(1)    126C :                            ;; ldi     H(ADDR(newline))
(1)    126C :                            ;; xpah    P1              ; P1=ADDR(newline)
(1)    126C :                            ;; xppc    P1
(1)    126C :
(1)    126C : C4 C0                      ldi     L(ADDR(getchar))
(1)    126E : 31                         xpal    P1
(1)    126F : C4 15                      ldi     H(ADDR(getchar))
(1)    1271 : 35                         xpah    P1              ; P1=ADDR(getchar)
(1)    1272 : 3D                         xppc    P1
(1)    1273 : 98 04                      jz      next_x
(1)    1275 : 40                         lde
(1)    1276 : 9C 01                      jnz     next_x
(1)    1278 : 00                         halt                    ; halt to system
(1)    1279 :
(1)    1279 :                    next_x:
(1)    1279 : C4 41                      ldi     L(vX)
(1)    127B : 31                         xpal    P1
(1)    127C : C4 10                      ldi     H(vX)
(1)    127E : 35                         xpah    P1              ; P1=&X
(1)    127F : A9 00                      ild     0(P1)           ; L(X)++
(1)    1281 : 9C 02                      jnz     check_x
(1)    1283 : A9 01                      ild     1(P1)           ; H(X)++
(1)    1285 :                    check_x:
(1)    1285 : C1 01                      ld      1(P1)           ; H(X)
(1)    1287 : 9C 07                      jnz     jump_loop_x     ; branch if X<0
(1)    1289 : 03                         scl                     ; clear borrow
(1)    128A : C1 00                      ld      0(P1)           ; L(X)
(1)    128C : FC 1E                      cai     30              ; X-30
(1)    128E : 94 07                      jp      next_y          ; branch if X>=30
(1)    1290 :                    jump_loop_x:
(1)    1290 : C4 F8                      ldi     L(ADDR(loop_x))
(1)    1292 : 31                         xpal    P1
(1)    1293 : C4 10                      ldi     H(ADDR(loop_x))
(1)    1295 : 35                         xpah    P1
(1)    1296 : 3D                         xppc    P1              ; jump to loop_x
(1)    1297 :                    next_y:
(1)    1297 : C4 06                      ldi     L(ADDR(newline))
(1)    1299 : 31                         xpal    P1
(1)    129A : C4 16                      ldi     H(ADDR(newline))
(1)    129C : 35                         xpah    P1              ; P1=ADDR(newline)
(1)    129D : 3D                         xppc    P1
(1)    129E : C4 3F                      ldi     L(vY)
(1)    12A0 : 31                         xpal    P1
(1)    12A1 : C4 10                      ldi     H(vY)
(1)    12A3 : 35                         xpah    P1              ; P1=&Y
(1)    12A4 : A9 00                      ild     0(P1)           ; L(Y)++
(1)    12A6 : 9C 02                      jnz     check_y
(1)    12A8 : A9 01                      ild     1(P1)           ; H(Y)++
(1)    12AA :                    check_y:
(1)    12AA : C1 01                      ld      1(P1)           ; H(Y)
(1)    12AC : 9C 07                      jnz     jump_loop_y     ; branch if Y<0
(1)    12AE : 03                         scl                     ; clear borrow
(1)    12AF : C1 00                      ld      0(P1)           ; L(Y)
(1)    12B1 : FC 0D                      cai     13              ; Y-13
(1)    12B3 : 94 07                      jp      mandelbrot_end  ; branch if Y>=13
(1)    12B5 :                    jump_loop_y:
(1)    12B5 : C4 ED                      ldi     L(ADDR(loop_y))
(1)    12B7 : 31                         xpal    P1
(1)    12B8 : C4 10                      ldi     H(ADDR(loop_y))
(1)    12BA : 35                         xpah    P1
(1)    12BB : 3D                         xppc    P1              ; jump to loop_y
(1)    12BC :
(1)    12BC :                    mandelbrot_end:
(1)    12BC : C6 01                      ld      @1(P2)
(1)    12BE : 31                         xpal    P1
(1)    12BF : C6 01                      ld      @1(P2)
(1)    12C1 : 35                         xpah    P1
(1)    12C2 : 3D                         xppc    P1              ; return
       12C3 :                            include "arith.inc"
(1)    12C3 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    12C3 :
(1)    12C3 :                    ;;; Print int16_t value
(1)    12C3 :                    ;;;   xppc   P1
(1)    12C3 :                    ;;;   .dbyte &value
(1)    12C3 :                    ;;; @local P2[1:0] &value
(1)    12C3 :                    ;;; @local P2[7:0] buffer
(1)    12C3 :                    ;;; @local P2[9:8] return address
(1)    12C3 :                    print_int16:
(1)    12C3 : C5 01                      ld      @1(P1)          ; point &value
(1)    12C5 : C5 01                      ld      @1(P1)
(1)    12C7 : CE F6                      st      @-10(P2)        ; P2[1:0]=&value
(1)    12C9 : C1 00                      ld      0(P1)           ; P1=return address
(1)    12CB : CA 01                      st      1(P2)
(1)    12CD : 35                         xpah    P1
(1)    12CE : CA 09                      st      9(P2)           ; P2[9:8]=return address
(1)    12D0 : C2 00                      ld      0(P2)
(1)    12D2 : 31                         xpal    P1              ; P1=&value
(1)    12D3 : CA 08                      st      8(P2)
(1)    12D5 : C1 00                      ld      0(P1)
(1)    12D7 : C8 21                      st      vPRINT
(1)    12D9 : C1 01                      ld      1(P1)
(1)    12DB : C8 1E                      st      vPRINT+1        ; vPRINT=value
(1)    12DD : 94 1C                      jp      print_uint16    ; branch if value >= 0
(1)    12DF : 03                         scl                     ; clear borrow
(1)    12E0 : C4 00                      ldi     0
(1)    12E2 : F8 16                      cad     vPRINT
(1)    12E4 : C8 14                      st      vPRINT
(1)    12E6 : C4 00                      ldi     0
(1)    12E8 : F8 11                      cad     vPRINT+1
(1)    12EA : C8 0F                      st      vPRINT+1        ; negate vPRINT
(1)    12EC : C4 E1                      ldi     L(ADDR(putchar))
(1)    12EE : 31                         xpal    P1
(1)    12EF : C4 15                      ldi     H(ADDR(putchar))
(1)    12F1 : 35                         xpah    P1
(1)    12F2 : C4 2D                      ldi     '-'
(1)    12F4 : 3D                         xppc    P1              ; print '-'
(1)    12F5 : 90 04                      jmp     print_uint16
(1)    12F7 :                    ;;; Print uint16_t value
(1)    12F7 :                    ;;; @param vPRINT value
(1)    12F7 :                    ;;; @local P2[7:0] buffer
(1)    12F7 :                    ;;; @local P2[9:8] return address
(1)    12F7 :                    ;;; @clobber E
(1)    12F7 : 0A 00              vPRINT10:       .dbyte  10      ; constant 10
(1)    12F9 : 00 00              vPRINT:         .dbyte  0
(1)    12FB :                    print_uint16:
(1)    12FB : C4 00                      ldi     0
(1)    12FD : CA 00                      st      0(P2)           ; buffer[0]=0
(1)    12FF : C4 01                      ldi     1
(1)    1301 : 01                         xae                     ; E=1
(1)    1302 :                    print_uint16_loop:
(1)    1302 : C4 E2                      ldi     L(ADDR(divsi2))
(1)    1304 : 31                         xpal    P1
(1)    1305 : C4 14                      ldi     H(ADDR(divsi2))
(1)    1307 : 35                         xpah    P1
(1)    1308 : 3D                         xppc    P1              ; calculate vPRINT/=10
(1)    1309 : F7 12                      .dbyte  vPRINT10
(1)    130B : F9 12                      .dbyte  vPRINT
(1)    130D : C4 14                      ldi     H(vREMINDER)
(1)    130F : 35                         xpah    P1
(1)    1310 : C4 D0                      ldi     L(vREMINDER)
(1)    1312 : 31                         xpal    P1              ; P1=&vREMINDER
(1)    1313 : C1 00                      ld      0(P1)           ; L(vREMINDER)
(1)    1315 : DC 30                      ori     '0'
(1)    1317 : CA 80                      st      E(P2)           ; buffer[E]=digit
(1)    1319 : 02                         ccl
(1)    131A : C4 01                      ldi     1
(1)    131C : 70                         ade
(1)    131D : 01                         xae                     ; ++E
(1)    131E : C0 DA                      ld      vPRINT
(1)    1320 : D8 D9                      or      vPRINT+1
(1)    1322 : 9C DE                      jnz     print_uint16_loop ; while vPRINT!=0
(1)    1324 : C4 E1                      ldi     L(ADDR(putchar))
(1)    1326 : 31                         xpal    P1
(1)    1327 : C4 15                      ldi     H(ADDR(putchar))
(1)    1329 : 35                         xpah    P1              ; P1=ADDR(putchar)
(1)    132A :                    print_uint16_putdigit:
(1)    132A : 40                         lde
(1)    132B : 03                         scl                     ; clear borrow
(1)    132C : FC 01                      cai     1
(1)    132E : 01                         xae                     ; --E
(1)    132F : C2 80                      ld      E(P2)
(1)    1331 : 98 03                      jz      print_int16_return
(1)    1333 : 3D                         xppc    P1              ; print digit
(1)    1334 : 90 F4                      jmp     print_uint16_putdigit
(1)    1336 :                    print_int16_return:
(1)    1336 : C6 08                      ld      @8(P2)          ; discard locals
(1)    1338 : C6 01                      ld      @1(P2)
(1)    133A : 31                         xpal    P1
(1)    133B : C6 01                      ld      @1(P2)
(1)    133D : 35                         xpah    P1
(1)    133E : 3D                         xppc    P1              ; return
(1)    133F :
(1)    133F :                    ;;; Add: summand += addend
(1)    133F :                    ;;;   xppc   P1
(1)    133F :                    ;;;   .dbyte &addend
(1)    133F :                    ;;;   .dbyte &summand
(1)    133F :                    ;;; @local P2[1:0] &addend, addend
(1)    133F :                    ;;; @local P2[3:2] &summand
(1)    133F :                    ;;; @local P2[5:4] return address
(1)    133F :                    addsi2_exit:
(1)    133F : C6 04                      ld      @4(P2)          ; discard locals
(1)    1341 : C6 01                      ld      @1(P2)
(1)    1343 : 31                         xpal    P1
(1)    1344 : C6 01                      ld      @1(P2)
(1)    1346 : 35                         xpah    P1
(1)    1347 : 3D                         xppc    P1              ; return
(1)    1348 :                    addsi2:
(1)    1348 : C5 01                      ld      @1(P1)          ; point to &addend
(1)    134A : C5 01                      ld      @1(P1)
(1)    134C : CE FA                      st      @-6(P2)         ; P2[1:0]=&addend
(1)    134E : C5 01                      ld      @1(P1)
(1)    1350 : CA 01                      st      1(P2)
(1)    1352 : C5 01                      ld      @1(P1)
(1)    1354 : CA 02                      st      2(P2)           ; P2[3:2]=&summand
(1)    1356 : C1 00                      ld      0(P1)           ; P1=return address
(1)    1358 : CA 03                      st      3(P2)
(1)    135A : C2 00                      ld      0(P2)           ; P2[1:0]=&addend
(1)    135C : 31                         xpal    P1
(1)    135D : CA 04                      st      4(P2)           ; P2[5:4]=return address
(1)    135F : C2 01                      ld      1(P2)
(1)    1361 : 35                         xpah    P1              ; P1=&addend
(1)    1362 : CA 05                      st      5(P2)
(1)    1364 : C1 00                      ld      0(P1)
(1)    1366 : CA 00                      st      0(P2)           ; P2[1:0]=addend
(1)    1368 : C1 01                      ld      1(P1)
(1)    136A : CA 01                      st      1(P2)
(1)    136C : C2 02                      ld      2(P2)           ; P2[3:2]=&summand
(1)    136E : 31                         xpal    P1
(1)    136F : C2 03                      ld      3(P2)
(1)    1371 : 35                         xpah    P1              ; P1=&summand
(1)    1372 : 02                         ccl                     ; clear carry
(1)    1373 : C1 00                      ld      0(P1)
(1)    1375 : F2 00                      add     0(P2)           ; L(summand+addend)
(1)    1377 : C9 00                      st      0(P1)
(1)    1379 : C1 01                      ld      1(P1)
(1)    137B : F2 01                      add     1(P2)           ; L(summand+addend)
(1)    137D : C9 01                      st      1(P1)
(1)    137F : 90 BE                      jmp     addsi2_exit
(1)    1381 :
(1)    1381 :                    ;;; Subtract: minuend -= subtrahend
(1)    1381 :                    ;;;   xppc   P1
(1)    1381 :                    ;;;   .dbyte &subtrahend
(1)    1381 :                    ;;;   .dbyte &minuend
(1)    1381 :                    ;;; @local P2[1:0] &subtrahend, subtrahend
(1)    1381 :                    ;;; @local P2[3:2] &minuend
(1)    1381 :                    ;;; @local P2[5:4] return address
(1)    1381 :                    subsi2_exit:
(1)    1381 : C6 04                      ld      @4(P2)          ; discard locals
(1)    1383 : C6 01                      ld      @1(P2)
(1)    1385 : 31                         xpal    P1
(1)    1386 : C6 01                      ld      @1(P2)
(1)    1388 : 35                         xpah    P1
(1)    1389 : 3D                         xppc    P1              ; return
(1)    138A :                    subsi2:
(1)    138A : C5 01                      ld      @1(P1)          ; point to &subtrahend
(1)    138C : C5 01                      ld      @1(P1)
(1)    138E : CE FA                      st      @-6(P2)         ; P2[1:0]=&subtrahend
(1)    1390 : C5 01                      ld      @1(P1)
(1)    1392 : CA 01                      st      1(P2)
(1)    1394 : C5 01                      ld      @1(P1)
(1)    1396 : CA 02                      st      2(P2)           ; P2[3:2]=&minuend
(1)    1398 : C1 00                      ld      0(P1)           ; P1=return address
(1)    139A : CA 03                      st      3(P2)
(1)    139C : C2 00                      ld      0(P2)           ; P2[1:0]=&subtrahend
(1)    139E : 31                         xpal    P1
(1)    139F : CA 04                      st      4(P2)           ; P2[5:4]=return address
(1)    13A1 : C2 01                      ld      1(P2)
(1)    13A3 : 35                         xpah    P1              ; P1=&subtrahend
(1)    13A4 : CA 05                      st      5(P2)
(1)    13A6 : C1 00                      ld      0(P1)
(1)    13A8 : CA 00                      st      0(P2)           ; P2[1:0]=subtrahend
(1)    13AA : C1 01                      ld      1(P1)
(1)    13AC : CA 01                      st      1(P2)
(1)    13AE : C2 02                      ld      2(P2)           ; P2[3:2]=&minuend
(1)    13B0 : 31                         xpal    P1
(1)    13B1 : C2 03                      ld      3(P2)
(1)    13B3 : 35                         xpah    P1              ; P1=&minuend
(1)    13B4 : 03                         scl                     ; clear borrow
(1)    13B5 : C1 00                      ld      0(P1)
(1)    13B7 : FA 00                      cad     0(P2)           ; L(minuend-subtrahend)
(1)    13B9 : C9 00                      st      0(P1)
(1)    13BB : C1 01                      ld      1(P1)
(1)    13BD : FA 01                      cad     1(P2)           ; H(minuend-subtrahend)
(1)    13BF : C9 01                      st      1(P1)
(1)    13C1 : 90 BE                      jmp     subsi2_exit
(1)    13C3 :
(1)    13C3 :                    ;;; Signed compare: A = sign(minuend - subtrahend)
(1)    13C3 :                    ;;;   xppc   P1
(1)    13C3 :                    ;;;   .dbyte &subtrahend
(1)    13C3 :                    ;;;   .dbyte &minuend
(1)    13C3 :                    ;;; @return A=0  JZ
(1)    13C3 :                    ;;;         A=1  JP
(1)    13C3 :                    ;;;         A=-1
(1)    13C3 :                    ;;; @local P2[1:0] &subtrahend, subtrahend
(1)    13C3 :                    ;;; @local P2[3:2] &minuend, minuend - subtrahend
(1)    13C3 :                    ;;; @local P2[5:4] return address
(1)    13C3 :                    ;;; @local P2[6]   sign(minuend - subtrahend)
(1)    13C3 :                    cmpsi2_exit:
(1)    13C3 : CA 06                      st      6(P2)           ; save sign(minuend-subtrahend)
(1)    13C5 : C6 04                      ld      @4(P2)          ; discard locals
(1)    13C7 : C6 01                      ld      @1(P2)
(1)    13C9 : 31                         xpal    P1
(1)    13CA : C6 01                      ld      @1(P2)
(1)    13CC : 35                         xpah    P1
(1)    13CD : C6 01                      ld      @1(P2)          ; sign(minuend-subtrahend)
(1)    13CF : 3D                         xppc    P1              ; return
(1)    13D0 :                    cmpsi2:
(1)    13D0 : C5 01                      ld      @1(P1)          ; point to &subtrahend
(1)    13D2 : C5 01                      ld      @1(P1)
(1)    13D4 : CE F9                      st      @-7(P2)         ; P2[1:0]=&subtrahend
(1)    13D6 : C5 01                      ld      @1(P1)
(1)    13D8 : CA 01                      st      1(P2)
(1)    13DA : C5 01                      ld      @1(P1)
(1)    13DC : CA 02                      st      2(P2)           ; P2[3:2]=&minuend
(1)    13DE : C1 00                      ld      0(P1)           ; P1=return address
(1)    13E0 : CA 03                      st      3(P2)
(1)    13E2 : C2 00                      ld      0(P2)           ; P2[1:0]=&subtrahend
(1)    13E4 : 31                         xpal    P1
(1)    13E5 : CA 04                      st      4(P2)           ; P2[5:4]=return address
(1)    13E7 : C2 01                      ld      1(P2)
(1)    13E9 : 35                         xpah    P1              ; P1=&subtrahend
(1)    13EA : CA 05                      st      5(P2)
(1)    13EC : C1 00                      ld      0(P1)
(1)    13EE : CA 00                      st      0(P2)           ; P2[1:0]=subtrahend
(1)    13F0 : C1 01                      ld      1(P1)
(1)    13F2 : CA 01                      st      1(P2)
(1)    13F4 : C2 02                      ld      2(P2)           ; P2[3:2]=&minuend
(1)    13F6 : 31                         xpal    P1
(1)    13F7 : C2 03                      ld      3(P2)
(1)    13F9 : 35                         xpah    P1              ; P1=&minuend
(1)    13FA : 03                         scl                     ; clear borrow
(1)    13FB : C1 00                      ld      0(P1)
(1)    13FD : FA 00                      cad     0(P2)           ; L(minuend-subtrahend)
(1)    13FF : CA 02                      st      2(P2)           ; P2[3:2]=minuend-subtrahend
(1)    1401 : C1 01                      ld      1(P1)
(1)    1403 : FA 01                      cad     1(P2)
(1)    1405 : CA 03                      st      3(P2)
(1)    1407 : DA 02                      or      2(P2)
(1)    1409 : 98 B8                      jz      cmpsi2_exit     ; branch if result==0 with A=0
(1)    140B : 06                         csa
(1)    140C : D4 40                      ani     S_OV
(1)    140E : 9C 08                      jnz     cmpsi2_ov       ; branch if V=1
(1)    1410 : C2 03                      ld      3(P2)           ; H(minuend-subtrahend)
(1)    1412 : 94 08                      jp      cmpsi2_gt       ; V=0, N=0
(1)    1414 :                    cmpsi2_lt:
(1)    1414 : C4 FF                      ldi     -1              ; V=0, N=1
(1)    1416 : 90 AB                      jmp     cmpsi2_exit
(1)    1418 :                    cmpsi2_ov:
(1)    1418 : C2 01                      ld      1(P2)           ; H(result)
(1)    141A : 94 F8                      jp      cmpsi2_lt       ; V=1, N=0
(1)    141C :                    cmpsi2_gt:                      ; V=1, N=1
(1)    141C : C4 01                      ldi     1
(1)    141E : 90 A3                      jmp     cmpsi2_exit
(1)    1420 :
(1)    1420 :                    ;;; Signed multiply; multiplicand *= multiplier
(1)    1420 :                    ;;;   xppc   P1
(1)    1420 :                    ;;;   .dbyte &multiplier
(1)    1420 :                    ;;;   .dbyte &multiplicand
(1)    1420 :                    ;;; @local P2[1:0] multiplier, &multiplier
(1)    1420 :                    ;;; @local P2[3:2] multiplicand, &multiplicand
(1)    1420 :                    ;;; @local P2[4]   H(multiplicand ^ multiplier)
(1)    1420 :                    ;;; @local P2[6:5] return address
(1)    1420 :                    mulsi2_exit:
(1)    1420 : C6 05                      ld      @5(P2)          ; discard locals
(1)    1422 : C6 01                      ld      @1(P2)
(1)    1424 : 31                         xpal    P1
(1)    1425 : C6 01                      ld      @1(P2)
(1)    1427 : 35                         xpah    P1
(1)    1428 : 3D                         xppc    P1              ; return
(1)    1429 :                    mulsi2:
(1)    1429 : C5 01                      ld      @1(P1)          ; point to &multiplier
(1)    142B : C5 01                      ld      @1(P1)
(1)    142D : CE F9                      st      @-7(P2)         ; P2[1:0]=&multiplier
(1)    142F : C5 01                      ld      @1(P1)
(1)    1431 : CA 01                      st      1(P2)
(1)    1433 : C5 01                      ld      @1(P1)
(1)    1435 : CA 02                      st      2(P2)           ; P2[3:2]=&multiplicand
(1)    1437 : C1 00                      ld      0(P1)
(1)    1439 : CA 03                      st      3(P2)
(1)    143B : C2 00                      ld      0(P2)           ; P2[1:0]=&multiplier
(1)    143D : 31                         xpal    P1
(1)    143E : CA 05                      st      5(P2)           ; P2[6:5]=return address
(1)    1440 : C2 01                      ld      1(P2)
(1)    1442 : 35                         xpah    P1              ; P1=&multiplier
(1)    1443 : CA 06                      st      6(P2)
(1)    1445 : C1 00                      ld      0(P1)
(1)    1447 : CA 00                      st      0(P2)           ; P2[1:0]=multiplier
(1)    1449 : C1 01                      ld      1(P1)
(1)    144B : CA 01                      st      1(P2)
(1)    144D : C2 02                      ld      2(P2)           ; P2[3:2]=&multiplicand
(1)    144F : 31                         xpal    P1
(1)    1450 : C2 03                      ld      3(P2)
(1)    1452 : 35                         xpah    P1              ; P1=&multiplicand
(1)    1453 : C1 00                      ld      0(P1)
(1)    1455 : CA 02                      st      2(P2)           ; P2[3:2]=multiplicand
(1)    1457 : C1 01                      ld      1(P1)
(1)    1459 : CA 03                      st      3(P2)
(1)    145B : E2 01                      xor     1(P2)           ; P2[1]=H(multiplier)
(1)    145D : CA 04                      st      4(P2)           ; P2[4]=H(multiplicand^multiplier)
(1)    145F : C2 01                      ld      1(P2)           ; H(multiplier)
(1)    1461 : 94 0D                      jp      mulsi2_multiplicand
(1)    1463 : 03                         scl                     ; clear borrow
(1)    1464 : C4 00                      ldi     0
(1)    1466 : FA 00                      cad     0(P2)
(1)    1468 : CA 00                      st      0(P2)
(1)    146A : C4 00                      ldi     0
(1)    146C : FA 01                      cad     1(P2)
(1)    146E : CA 01                      st      1(P2)           ; negate multiplier
(1)    1470 :                    mulsi2_multiplicand:
(1)    1470 : C2 03                      ld      3(P2)           ; H(multiplicand)
(1)    1472 : 94 11                      jp      umul16
(1)    1474 : 03                         scl                     ; clear borrow
(1)    1475 : C4 00                      ldi     0
(1)    1477 : FA 02                      cad     2(P2)
(1)    1479 : CA 02                      st      2(P2)
(1)    147B : C4 00                      ldi     0
(1)    147D : FA 03                      cad     3(P2)
(1)    147F : CA 03                      st      3(P2)           ; negate multiplicand
(1)    1481 : 90 02                      jmp     umul16
(1)    1483 :                    mulsi2_exit_1:
(1)    1483 : 90 9B                      jmp     mulsi2_exit
(1)    1485 :                    ;;; Unsigned multiply; product = multiplicand * multiplier
(1)    1485 :                    ;;; @param P2[1:0] multiplier
(1)    1485 :                    ;;; @param P2[3:2] multiplicand
(1)    1485 :                    ;;; @return P1[1:0] product
(1)    1485 :                    ;;; @clobber multiplier multiplicand
(1)    1485 :                    ;;; @unchanged P1
(1)    1485 :                    umul16:
(1)    1485 : C4 00                      ldi     0
(1)    1487 : C9 00                      st      0(P1)
(1)    1489 : C9 01                      st      1(P1)           ; P1[1:0]=product
(1)    148B : 90 2A                      jmp     umul16_check
(1)    148D :                    umul16_loop:
(1)    148D : C2 01                      ld      1(P2)           ; P2[1:0]=multiplier
(1)    148F : 02                         ccl
(1)    1490 : 1F                         rrl
(1)    1491 : CA 01                      st      1(P2)
(1)    1493 : C2 00                      ld      0(P2)
(1)    1495 : 1F                         rrl
(1)    1496 : CA 00                      st      0(P2)           ; multiplier >>= 1
(1)    1498 : 06                         csa
(1)    1499 : D4 80                      ani     S_CY
(1)    149B : 98 0D                      jz      umul16_next     ; if lsb(multiplier) == 0
(1)    149D : 02                         ccl
(1)    149E : C2 02                      ld      2(P2)           ; P2[3:2]=multiplicand
(1)    14A0 : F1 00                      add     0(P1)           ; P1[1:0]=product
(1)    14A2 : C9 00                      st      0(P1)
(1)    14A4 : C2 03                      ld      3(P2)
(1)    14A6 : F1 01                      add     1(P1)
(1)    14A8 : C9 01                      st      1(P1)           ; product += multiplicand
(1)    14AA :                    umul16_next:
(1)    14AA : 02                         ccl
(1)    14AB : C2 02                      ld      2(P2)           ; P2[3:2]=multiplicand
(1)    14AD : F2 02                      add     2(P2)
(1)    14AF : CA 02                      st      2(P2)
(1)    14B1 : C2 03                      ld      3(P2)
(1)    14B3 : F2 03                      add     3(P2)
(1)    14B5 : CA 03                      st      3(P2)           ; multiplicand <<= 1
(1)    14B7 :                    umul16_check:
(1)    14B7 : C2 00                      ld      0(P2)           ; P2[1:0]=multiplier
(1)    14B9 : DA 01                      or      1(P2)
(1)    14BB : 9C D0                      jnz     umul16_loop     ; while multiplier != 0
(1)    14BD :                    umul16_end:
(1)    14BD : C2 04                      ld      4(P2)           ; H(multiplier^multiplicand)
(1)    14BF : 94 C2                      jp      mulsi2_exit_1
(1)    14C1 : 03                         scl                     ; clear borrow
(1)    14C2 : C4 00                      ldi     0
(1)    14C4 : F9 00                      cad     0(P1)           ; P1[1:0]=product
(1)    14C6 : C9 00                      st      0(P1)
(1)    14C8 : C4 00                      ldi     0
(1)    14CA : F9 01                      cad     1(P1)
(1)    14CC : C9 01                      st      1(P1)           ; negate product
(1)    14CE : 90 B3                      jmp     mulsi2_exit_1
(1)    14D0 :
(1)    14D0 :                    ;;; Signed divide; dividend /= divisor ... remainder
(1)    14D0 :                    ;;;   xppc   P1
(1)    14D0 :                    ;;;   .dbyte &divisor
(1)    14D0 :                    ;;;   .dbyte &dividend
(1)    14D0 :                    ;;; @return vREMINDER |dividend| % |divisor|
(1)    14D0 :                    ;;; @local P2[1:0] &divisor, divisor
(1)    14D0 :                    ;;; @local P2[3:2] &dividend, dividend
(1)    14D0 :                    ;;; @local P2[4]   H(dividend^divisor)
(1)    14D0 :                    ;;; @local P2[5]   udiv16 local
(1)    14D0 :                    ;;; @local P2[7:6] return address
(1)    14D0 : 00 00              vREMINDER:      .dbyte  0
(1)    14D2 :                    divsi2_exit:
(1)    14D2 : C2 02                      ld      2(P2)           ; P2[3:2]dividend/remainder
(1)    14D4 : C8 FB                      st      vREMINDER
(1)    14D6 : C2 03                      ld      3(P2)
(1)    14D8 : C8 F8                      st      vREMINDER+1
(1)    14DA : C6 06                      ld      @6(P2)          ; discard locals
(1)    14DC : C6 01                      ld      @1(P2)
(1)    14DE : 31                         xpal    P1
(1)    14DF : C6 01                      ld      @1(P2)
(1)    14E1 : 35                         xpah    P1
(1)    14E2 : 3D                         xppc    P1              ; return
(1)    14E3 :                    divsi2:
(1)    14E3 : C5 01                      ld      @1(P1)          ; point to &divisor
(1)    14E5 : C5 01                      ld      @1(P1)
(1)    14E7 : CE F8                      st      @-8(P2)         ; P2[1:0]=&divisor
(1)    14E9 : C5 01                      ld      @1(P1)
(1)    14EB : CA 01                      st      1(P2)
(1)    14ED : C5 01                      ld      @1(P1)
(1)    14EF : CA 02                      st      2(P2)           ; P2[3:2]=&dividend
(1)    14F1 : C1 00                      ld      0(P1)           ; P1=return address
(1)    14F3 : CA 03                      st      3(P2)
(1)    14F5 : C2 00                      ld      0(P2)           ; P2[1:0=&divisor
(1)    14F7 : 31                         xpal    P1
(1)    14F8 : CA 06                      st      6(P2)           ; P2[7:6]=return address
(1)    14FA : C2 01                      ld      1(P2)
(1)    14FC : 35                         xpah    P1              ; P1=&divisor
(1)    14FD : CA 07                      st      7(P2)
(1)    14FF : C1 00                      ld      0(P1)
(1)    1501 : CA 00                      st      0(P2)           ; P2[1:0]=divisor
(1)    1503 : C1 01                      ld      1(P1)
(1)    1505 : CA 01                      st      1(P2)
(1)    1507 : C2 02                      ld      2(P2)           ; P2[3:2]=&dividend
(1)    1509 : 31                         xpal    P1
(1)    150A : C2 03                      ld      3(P2)
(1)    150C : 35                         xpah    P1              ; P1=&dividend
(1)    150D : C1 00                      ld      0(P1)
(1)    150F : CA 02                      st      2(P2)           ; P2[3:2]=dividend
(1)    1511 : C1 01                      ld      1(P1)
(1)    1513 : CA 03                      st      3(P2)
(1)    1515 : E2 01                      xor     1(P2)           ; P2[1]=H(divisor)
(1)    1517 : CA 04                      st      4(P2)           ; P2[4]=H(dividend^divisor)
(1)    1519 : C2 01                      ld      1(P2)           ; H(divisor)
(1)    151B : 94 0D                      jp      divsi2_dividend
(1)    151D : 03                         scl                     ; clear borrow
(1)    151E : C4 00                      ldi     0
(1)    1520 : FA 00                      cad     0(P2)           ; P2[1:0]=divisor
(1)    1522 : CA 00                      st      0(P2)
(1)    1524 : C4 00                      ldi     0
(1)    1526 : FA 01                      cad     1(P2)
(1)    1528 : CA 01                      st      1(P2)           ; negate divisor
(1)    152A :                    divsi2_dividend:
(1)    152A : C2 03                      ld      3(P2)           ; H(dividend)
(1)    152C : 94 11                      jp      udiv16
(1)    152E : 03                         scl                     ; clear borrow
(1)    152F : C4 00                      ldi     0
(1)    1531 : FA 02                      cad     2(P2)
(1)    1533 : CA 02                      st      2(P2)
(1)    1535 : C4 00                      ldi     0
(1)    1537 : FA 03                      cad     3(P2)
(1)    1539 : CA 03                      st      3(P2)           ; negate dividend
(1)    153B : 90 02                      jmp     udiv16
(1)    153D :                    divsi2_exit_1:
(1)    153D : 90 93                      jmp     divsi2_exit
(1)    153F :                    ;;; Unsigned divide; quotient = dividend / divisor ... remainder
(1)    153F :                    ;;; @param P2[1:0] divisor
(1)    153F :                    ;;; @param P2[3:2] dividend
(1)    153F :                    ;;; @return P1[1:0] quotient
(1)    153F :                    ;;; @local P2[5] bits
(1)    153F :                    ;;; @clobber divisor dividend
(1)    153F :                    ;;; @unchanged P1
(1)    153F :                    udiv16:
(1)    153F : C2 00                      ld      0(P2)           ; P2[1:0]=divisor
(1)    1541 : DA 01                      or      1(P2)
(1)    1543 : 98 F8                      jz      divsi2_exit_1   ; divide by zero
(1)    1545 : C4 01                      ldi     1
(1)    1547 : CA 05                      st      5(P2)           ; bits=1
(1)    1549 : 90 0F                      jmp     udiv16_prep
(1)    154B :                    udiv16_prep_loop:
(1)    154B : 02                         ccl
(1)    154C : C2 00                      ld      0(P2)           ; P2[1:0]=divisor
(1)    154E : F2 00                      add     0(P2)
(1)    1550 : CA 00                      st      0(P2)
(1)    1552 : C2 01                      ld      1(P2)
(1)    1554 : F2 01                      add     1(P2)
(1)    1556 : CA 01                      st      1(P2)           ; divisor <<= 1
(1)    1558 : AA 05                      ild     5(P2)           ; ++bits
(1)    155A :                    udiv16_prep:
(1)    155A : C2 01                      ld      1(P2)           ; P2[1]=H(divisor)
(1)    155C : 94 ED                      jp      udiv16_prep_loop ; while msb(divisor) == 0
(1)    155E : C4 00                      ldi     0
(1)    1560 : C9 00                      st      0(P1)           ; P1[1:0]=quotient
(1)    1562 : C9 01                      st      1(P1)
(1)    1564 : 90 18                      jmp     udiv16_enter_loop
(1)    1566 :                    udiv16_loop:
(1)    1566 : 02                         ccl
(1)    1567 : C2 01                      ld      1(P2)           ; P2[1:0]=divisor
(1)    1569 : 1F                         rrl
(1)    156A : CA 01                      st      1(P2)
(1)    156C : C2 00                      ld      0(P2)
(1)    156E : 1F                         rrl
(1)    156F : CA 00                      st      0(P2)           ; divisor >>= 1
(1)    1571 : 02                         ccl
(1)    1572 : C1 00                      ld      0(P1)           ; P1[1:0]=quotient
(1)    1574 : F1 00                      add     0(P1)
(1)    1576 : C9 00                      st      0(P1)
(1)    1578 : C1 01                      ld      1(P1)
(1)    157A : F1 01                      add     1(P1)
(1)    157C : C9 01                      st      1(P1)           ; quotient <<= 1
(1)    157E :                    udiv16_enter_loop:
(1)    157E : 03                         scl                     ; clear borrow
(1)    157F : C2 02                      ld      2(P2)           ; P2[3:2]=dividend
(1)    1581 : FA 00                      cad     0(P2)           ; P2[1:0]=divisor
(1)    1583 : CA 02                      st      2(P2)
(1)    1585 : C2 03                      ld      3(P2)
(1)    1587 : FA 01                      cad     1(P2)
(1)    1589 : CA 03                      st      3(P2)           ; dividend -= divisor
(1)    158B : 06                         csa
(1)    158C : D4 80                      ani     S_CY
(1)    158E : 98 04                      jz      udiv16_readd    ; if dividend < divisor
(1)    1590 : A9 00                      ild     0(P1)           ; P1[0]=L(quotient)
(1)    1592 : 90 0D                      jmp     udiv16_next
(1)    1594 :                    udiv16_readd:
(1)    1594 : 02                         ccl
(1)    1595 : C2 02                      ld      2(P2)           ; P2[3:2]=dividend
(1)    1597 : F2 00                      add     0(P2)           ; P2[1:0]=divisor
(1)    1599 : CA 02                      st      2(P2)
(1)    159B : C2 03                      ld      3(P2)
(1)    159D : F2 01                      add     1(P2)
(1)    159F : CA 03                      st      3(P2)           ; dividend += divisor
(1)    15A1 :                    udiv16_next:
(1)    15A1 : BA 05                      dld     5(P2)           ; P2[5]=bits
(1)    15A3 : 9C C1                      jnz     udiv16_loop     ; while bits !=0
(1)    15A5 :                    udiv16_end:
(1)    15A5 : C2 04                      ld      4(P2)           ; P2[4]=H(dividend^divisor)
(1)    15A7 : 94 94                      jp      divsi2_exit_1
(1)    15A9 : 03                         scl                     ; clear borrow
(1)    15AA : C4 00                      ldi     0
(1)    15AC : F9 00                      cad     0(P1)           ; P1[1:0]=quotient
(1)    15AE : C9 00                      st      0(P1)
(1)    15B0 : C4 00                      ldi     0
(1)    15B2 : F9 01                      cad     1(P1)
(1)    15B4 : C9 01                      st      1(P1)           ; negate quotient
(1)    15B6 : 90 85                      jmp     divsi2_exit_1
       15B8 :
       15B8 :                    ;;; Get character
       15B8 :                    ;;; @return E char
       15B8 :                    ;;; @return A 0 if no char received
       15B8 :                    getchar_exit:
       15B8 : C6 01                      ld      @1(P2)          ; pop P1
       15BA : 31                         xpal    P1
       15BB : C6 01                      ld      @1(P2)
       15BD : 35                         xpah    P1
       15BE : C6 01                      ld      @1(P2)          ; pop return value
       15C0 : 3D                         xppc    P1
       15C1 :                    getchar:
       15C1 : CE FF                      st      @-1(P2)         ; for return value
       15C3 : C4 B2                      ldi     L(ADDR(queue_remove))
       15C5 : 31                         xpal    P1
       15C6 : CE FE                      st      @-2(P2)
       15C8 : C4 16                      ldi     H(ADDR(queue_remove))
       15CA : 35                         xpah    P1
       15CB : CA 01                      st      1(P2)           ; push P1
       15CD : 04                         dint                    ; disable IRQ
       15CE : 3D                         xppc    P1              ; call queue_remove
       15CF : 00 20                      .dbyte  rx_queue
       15D1 : 05                         ien                     ; enable IRQ
       15D2 : CA 02                      st      2(P2)           ; save return value
       15D4 : 90 E2                      jmp     getchar_exit
       15D6 :
       15D6 :                    ;;; Put character
       15D6 :                    ;;; @param A char
       15D6 :                    putchar_exit:
       15D6 : C6 01                      ld      @1(P2)          ; pop P1
       15D8 : 31                         xpal    P1
       15D9 : C6 01                      ld      @1(P2)
       15DB : 35                         xpah    P1
       15DC : C6 01                      ld      @1(P2)          ; pop E
       15DE : 01                         xae
       15DF : C6 01                      ld      @1(P2)          ; pop A
       15E1 : 3D                         xppc    P1
       15E2 :                    putchar:
       15E2 : CE FF                      st      @-1(P2)         ; push A
       15E4 : 40                         lde
       15E5 : CE FF                      st      @-1(P2)         ; push E
       15E7 : C4 65                      ldi     L(ADDR(queue_add))
       15E9 : 31                         xpal    P1
       15EA : CE FE                      st      @-2(P2)
       15EC : C4 16                      ldi     H(ADDR(queue_add))
       15EE : 35                         xpah    P1
       15EF : CA 01                      st      1(P2)           ; push P1
       15F1 : C2 03                      ld      3(P2)           ; restore char
       15F3 : 01                         xae                     ; E=char
       15F4 :                    putchar_retry:
       15F4 : 04                         dint                    ; disable interrupt
       15F5 : 3D                         xppc    P1              ; call queue_add
       15F6 : 10 20                      .dbyte  tx_queue
       15F8 : 05                         ien                     ; enable interrupt
       15F9 : 98 F9                      jz      putchar_retry   ; queue is full
       15FB : C4 00                      ldi     L(ACIA)
       15FD : 31                         xpal    P1
       15FE : C4 DF                      ldi     H(ACIA)
       1600 : 35                         xpah    P1
       1601 : C4 B4                      ldi     RX_INT_TX_INT   ; enable Tx interrupt
       1603 : C9 00                      st      ACIA_C(P1)
       1605 :                    putchar_return:
       1605 : 90 CF                      jmp     putchar_exit
       1607 :
       1607 :                    newline:
       1607 : C4 E1                      ldi     L(ADDR(putchar))
       1609 : 31                         xpal    P1
       160A : CE FE                      st      @-2(P2)
       160C : C4 15                      ldi     H(ADDR(putchar))
       160E : 35                         xpah    P1
       160F : CA 01                      st      1(P2)
       1611 : C4 0D                      ldi     X'0D
       1613 : 3D                         xppc    P1              ; print CR
       1614 : C4 0A                      ldi     X'0A
       1616 : 3D                         xppc    P1              ; print LF
       1617 : C6 01                      ld      @1(P2)
       1619 : 31                         xpal    P1
       161A : C6 01                      ld      @1(P2)
       161C : 35                         xpah    P1
       161D : 3D                         xppc    P1              ; return
       161E :
       161E :                            include "queue.inc"
(1)    161E :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    161E :                    ;;; [queue] queue structure
(1)    161E : =0                 queue_len       =       0       ; queue length
(1)    161E : =1                 queue_size      =       1       ; buffer size
(1)    161E : =2                 queue_put       =       2       ; queue put index
(1)    161E : =3                 queue_get       =       3       ; queue get index
(1)    161E : =4                 queue_buf       =       4       ; buffer start offset
(1)    161E :
(1)    161E :                    ;;; [queue] Initialize queue
(1)    161E :                    ;;; @param A queue space size
(1)    161E :                    ;;; @param P1 return address pointer
(1)    161E :                    ;;; @param P1[1:2] queue space pointer
(1)    161E :                    ;;; @clobber A
(1)    161E :                    queue_init_exit:
(1)    161E : C6 01                      ld      @1(P2)          ; pop P1
(1)    1620 : 31                         xpal    P1
(1)    1621 : C6 01                      ld      @1(P2)
(1)    1623 : 35                         xpah    P1
(1)    1624 : C6 01                      ld      @1(P2)          ; discard work area
(1)    1626 : 3D                         xppc    P1
(1)    1627 :                    queue_init:
(1)    1627 : CE FF                      st      @-1(P2)         ; save queue space size
(1)    1629 : C5 01                      ld      @1(P1)          ; advance to queue space pointer
(1)    162B : C5 01                      ld      @1(P1)          ; load queue work space pointer (le16)
(1)    162D : CE FE                      st      @-2(P2)         ; save lo(queue space)
(1)    162F : C1 00                      ld      0(P1)
(1)    1631 : 35                         xpah    P1
(1)    1632 : CA 01                      st      1(P2)           ; P[1:0] push P1
(1)    1634 : C2 00                      ld      0(P2)
(1)    1636 : 31                         xpal    P1              ; P1=queue space pointer
(1)    1637 : CA 00                      st      0(P2)
(1)    1639 : C4 00                      ldi     0
(1)    163B : C9 00                      st      queue_len(P1)   ; clear queue_len
(1)    163D : C9 02                      st      queue_put(P1)
(1)    163F : C9 03                      st      queue_get(P1)
(1)    1641 : C2 02                      ld      2(P2)           ; queue space size
(1)    1643 : 03                         scl
(1)    1644 : FC 04                      cai     queue_buf
(1)    1646 : C9 01                      st      queue_size(P1)
(1)    1648 : CA 02                      st      2(P2)           ; counter
(1)    164A : C5 04                      ld      @queue_buf(P1)  ; advanced pointer
(1)    164C :                    queue_init_loop:
(1)    164C : C4 00                      ldi     0
(1)    164E : CD 01                      st      @1(P1)
(1)    1650 : BA 02                      dld     2(P2)
(1)    1652 : 9C F8                      jnz     queue_init_loop
(1)    1654 : 90 C8                      jmp     queue_init_exit
(1)    1656 :
(1)    1656 :                    ;;; [queue] Add an element to queue
(1)    1656 :                    ;;; @param E an element
(1)    1656 :                    ;;; @param P1 return address pointer
(1)    1656 :                    ;;; @param P1[1:2] queue space pointer
(1)    1656 :                    ;;; @return E an element
(1)    1656 :                    ;;; @return A 0 if queue is full
(1)    1656 :                    ;;; @clobber P1
(1)    1656 :                    queue_add_exit:
(1)    1656 : CA 05                      st      5(P2)           ; P2[5] return flag
(1)    1658 : C6 02                      ld      @2(P2)          ; discard queue space pointer
(1)    165A : C6 01                      ld      @1(P2)          ; pop P1
(1)    165C : 31                         xpal    P1
(1)    165D : C6 01                      ld      @1(P2)
(1)    165F : 35                         xpah    P1
(1)    1660 : C6 01                      ld      @1(P2)          ; restore E
(1)    1662 : 01                         xae
(1)    1663 : C6 01                      ld      @1(P2)          ; return flag
(1)    1665 : 3D                         xppc    P1
(1)    1666 :                    queue_add:
(1)    1666 : C5 01                      ld      @1(P1)          ; advanced to queue space pointer
(1)    1668 : C5 01                      ld      @1(P1)          ; load queue space pointer (le16)
(1)    166A : CE FA                      st      @-6(P2)         ; param, P1, elem, return flag
(1)    166C : C1 00                      ld      0(P1)
(1)    166E : CA 01                      st      1(P2)           ; P2[1:0] queue space pointer
(1)    1670 : 35                         xpah    P1
(1)    1671 : CA 03                      st      3(P2)           ; P2[3:2] saved P1
(1)    1673 : C2 00                      ld      0(P2)
(1)    1675 : 31                         xpal    P1
(1)    1676 : CA 02                      st      2(P2)
(1)    1678 : 40                         lde
(1)    1679 : CA 04                      st      4(P2)           ; P2[4] save an element
(1)    167B : C1 00                      ld      queue_len(P1)
(1)    167D : E1 01                      xor     queue_size(P1)
(1)    167F : 98 D5                      jz      queue_add_exit  ; queue is full, A=0
(1)    1681 :                    queue_not_full:
(1)    1681 : A9 00                      ild     queue_len(P1)    ; update queue_len
(1)    1683 : C2 00                      ld      0(P2)
(1)    1685 : 02                         ccl
(1)    1686 : F1 02                      add     queue_put(P1)
(1)    1688 : 01                         xae
(1)    1689 : C2 01                      ld      1(P2)
(1)    168B : F4 00                      adi     0
(1)    168D : 35                         xpah    P1
(1)    168E : 01                         xae
(1)    168F : 31                         xpal    P1
(1)    1690 : C2 04                      ld      4(P2)           ; an element
(1)    1692 : C9 04                      st      queue_buf(P1)   ; store element
(1)    1694 : C2 00                      ld      0(P2)
(1)    1696 : 31                         xpal    P1
(1)    1697 : C2 01                      ld      1(P2)
(1)    1699 : 35                         xpah    P1
(1)    169A : A9 02                      ild     queue_put(P1)   ; advanced queue_put
(1)    169C : E1 01                      xor     queue_size(P1)
(1)    169E : 9C 02                      jnz     queue_add_end   ; branch if queue_put != queue_size
(1)    16A0 : C9 02                      st      queue_put(P1)   ; reset queue_put
(1)    16A2 :                    queue_add_end:
(1)    16A2 : C4 01                      ldi     1
(1)    16A4 : 90 B0                      jmp     queue_add_exit  ; an element added, A=1
(1)    16A6 :
(1)    16A6 :                    ;;; [queue] Remove an element from queue
(1)    16A6 :                    ;;; @param P1 return address pointer
(1)    16A6 :                    ;;; @param P1[1:2] queue space pointer
(1)    16A6 :                    ;;; @return E an element
(1)    16A6 :                    ;;; @return A 0 if queue is empty
(1)    16A6 :                    ;;; @clobber P1
(1)    16A6 :                    queue_remove_exit:
(1)    16A6 : CA 04                      st      4(P2)           ; return flag
(1)    16A8 : C6 02                      ld      @2(P2)          ; discard work area
(1)    16AA : C6 01                      ld      @1(P2)          ; pop P1
(1)    16AC : 31                         xpal    P1
(1)    16AD : C6 01                      ld      @1(P2)
(1)    16AF : 35                         xpah    P1
(1)    16B0 : C6 01                      ld      @1(P2)          ; return flag
(1)    16B2 : 3D                         xppc    P1              ; return
(1)    16B3 :                    queue_remove:
(1)    16B3 : C5 01                      ld      @1(P1)          ; advanced to queue space pointer
(1)    16B5 : C5 01                      ld      @1(P1)          ; load queue space pointer (le16)
(1)    16B7 : CE FB                      st      @-5(P2)         ; param, P1, return flag
(1)    16B9 : C1 00                      ld      0(P1)
(1)    16BB : CA 01                      st      1(P2)           ; P2[1:0] queue space pointer
(1)    16BD : 35                         xpah    P1
(1)    16BE : CA 03                      st      3(P2)           ; P2[3:2] saved P1
(1)    16C0 : C2 00                      ld      0(P2)
(1)    16C2 : 31                         xpal    P1
(1)    16C3 : CA 02                      st      2(P2)
(1)    16C5 : C1 00                      ld      queue_len(P1)
(1)    16C7 : 98 DD                      jz      queue_remove_exit ; queue is empty, A=0
(1)    16C9 :                    queue_not_empty:
(1)    16C9 : B9 00                      dld     queue_len(P1)    ; update queue_len
(1)    16CB : C2 00                      ld      0(P2)
(1)    16CD : 02                         ccl
(1)    16CE : F1 03                      add     queue_get(P1)
(1)    16D0 : 01                         xae
(1)    16D1 : C2 01                      ld      1(P2)
(1)    16D3 : F4 00                      adi     0
(1)    16D5 : 35                         xpah    P1
(1)    16D6 : 40                         lde
(1)    16D7 : 31                         xpal    P1
(1)    16D8 : C1 04                      ld      queue_buf(P1)   ; load element
(1)    16DA : 01                         xae                     ; E=element
(1)    16DB : C2 00                      ld      0(P2)
(1)    16DD : 31                         xpal    P1
(1)    16DE : C2 01                      ld      1(P2)
(1)    16E0 : 35                         xpah    P1
(1)    16E1 : A9 03                      ild     queue_get(P1)   ; advanced queue_get
(1)    16E3 : E1 01                      xor     queue_size(P1)
(1)    16E5 : 9C 02                      jnz     queue_remove_end ; branch if queue_put != queue_size
(1)    16E7 : C9 03                      st      queue_get(P1)   ; reset queue_get
(1)    16E9 :                    queue_remove_end:
(1)    16E9 : C4 01                      ldi     1
(1)    16EB : 90 B9                      jmp     queue_remove_exit
       16ED :
       16ED :                    isr_sensea_exit:
       16ED : C6 01                      ld      @1(P2)          ; pop P1
       16EF : 31                         xpal    P1
       16F0 : C6 01                      ld      @1(P2)
       16F2 : 35                         xpah    P1
       16F3 : C6 01                      ld      @1(P2)          ; pop Status
       16F5 : 07                         cas
       16F6 : C6 01                      ld      @1(P2)          ; pop E
       16F8 : 01                         xae
       16F9 : C6 01                      ld      @1(P2)          ; pop A
       16FB : 05                         ien                     ; enable interrupt
       16FC : 3F                         xppc    P3              ; return from interrupt
       16FD :                    isr_sensea:
       16FD : CE FF                      st      @-1(P2)         ; save A
       16FF : 40                         lde
       1700 : CE FF                      st      @-1(P2)         ; save E
       1702 : 06                         csa
       1703 : CE FF                      st      @-1(P2)         ; save Status
       1705 : C4 00                      ldi     L(ACIA)         ; save P1 and load P1
       1707 : 31                         xpal    P1
       1708 : CE FE                      st      @-2(P2)
       170A : C4 DF                      ldi     H(ACIA)
       170C : 35                         xpah    P1
       170D : CA 01                      st      1(P2)
       170F : C1 00                      ld      ACIA_S(P1)
       1711 : CE FF                      st      @-1(P2)         ; save ACIA_status
       1713 : D4 01                      ani     RDRF_bm
       1715 : 98 0C                      jz      isr_send
       1717 : C1 01                      ld      ACIA_D(P1)      ; receive character
       1719 : 01                         xae                     ; E=char
       171A : C4 65                      ldi     L(ADDR(queue_add))
       171C : 31                         xpal    P1
       171D : C4 16                      ldi     H(ADDR(queue_add))
       171F : 35                         xpah    P1
       1720 : 3D                         xppc    P1              ; call queue_add
       1721 : 00 20                      .dbyte  rx_queue
       1723 :                    isr_send:
       1723 : C6 01                      ld      @1(P2)          ; pop ACIA status
       1725 : D4 02                      ani     TDRE_bm
       1727 : 98 C4                      jz      isr_sensea_exit
       1729 : C4 B2                      ldi     L(ADDR(queue_remove))
       172B : 31                         xpal    P1
       172C : C4 16                      ldi     H(ADDR(queue_remove))
       172E : 35                         xpah    P1
       172F : 3D                         xppc    P1              ; call queue_remove
       1730 : 10 20                      .dbyte  tx_queue
       1732 : 98 0B                      jz      isr_send_empty
       1734 : C4 00                      ldi     L(ACIA)
       1736 : 31                         xpal    P1
       1737 : C4 DF                      ldi     H(ACIA)
       1739 : 35                         xpah    P1
       173A : 40                         lde
       173B : C9 01                      st      ACIA_D(P1)      ; send character
       173D : 90 AE                      jmp     isr_sensea_exit
       173F :                    isr_send_empty:
       173F : C4 00                      ldi     L(ACIA)
       1741 : 31                         xpal    P1
       1742 : C4 DF                      ldi     H(ACIA)
       1744 : 35                         xpah    P1
       1745 : C4 94                      ldi     RX_INT_TX_NO
       1747 : C9 00                      st      ACIA_C(P1)      ; disable Tx interrupt
       1749 : 90 A2                      jmp     isr_sensea_exit
       174B :
       174B :                            end
