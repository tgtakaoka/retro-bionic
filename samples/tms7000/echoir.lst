          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     tms7000
          0 :                            include "tms7000.inc"
(1)       0 :                            *** -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            *** TMS7000
(1)       0 :                            *** Status Register
(1)       0 : =80                ST_CARRY:       equ  ?10000000  set to 1 if carry occurred
(1)       0 : =40                ST_NEGATIVE:    equ  ?01000000  set to 1 if result is negative
(1)       0 : =20                ST_ZERO:        equ  ?00100000  set to 1 if result is zero
(1)       0 : =10                ST_INT:         equ  ?00010000  if 1, interrupt is enabled
(1)       0 :                            *** Vector
(1)       0 : =FFF8              VEC_INT3:       equ     >FFF8   #INT3 interrupt
(1)       0 : =FFFC              VEC_INT1:       equ     >FFFC   #INT1 interrupt
(1)       0 : =FFFE              VEC_RESET:      equ     >FFFE   #RESET vector
(1)       0 :                            *** Trap Vector
(1)       0 : =FFFE              VEC_TRAP0:      equ     >FFFE
(1)       0 : =FFFC              VEC_TRAP1:      equ     >FFFC
(1)       0 : =FFFA              VEC_TRAP2:      equ     >FFFA
(1)       0 : =FFF8              VEC_TRAP3:      equ     >FFF8
(1)       0 : =FFF6              VEC_TRAP4:      equ     >FFF6
(1)       0 : =FFF4              VEC_TRAP5:      equ     >FFF4
(1)       0 : =FFF2              VEC_TRAP6:      equ     >FFF2
(1)       0 : =FFF0              VEC_TRAP7:      equ     >FFF0
(1)       0 : =FFEE              VEC_TRAP8:      equ     >FFEE
(1)       0 : =FFEC              VEC_TRAP9:      equ     >FFEC
(1)       0 : =FFEA              VEC_TRAP10:     equ     >FFEA
(1)       0 : =FFE8              VEC_TRAP11:     equ     >FFE8
(1)       0 : =FFE6              VEC_TRAP12:     equ     >FFE6
(1)       0 : =FFE4              VEC_TRAP13:     equ     >FFE4
(1)       0 : =FFE2              VEC_TRAP14:     equ     >FFE2
(1)       0 : =FFE0              VEC_TRAP15:     equ     >FFE0
(1)       0 : =FFDE              VEC_TRAP16:     equ     >FFDE
(1)       0 : =FFDC              VEC_TRAP17:     equ     >FFDC
(1)       0 : =FFDA              VEC_TRAP18:     equ     >FFDA
(1)       0 : =FFD8              VEC_TRAP19:     equ     >FFD8
(1)       0 : =FFD6              VEC_TRAP20:     equ     >FFD6
(1)       0 : =FFD4              VEC_TRAP21:     equ     >FFD4
(1)       0 : =FFD2              VEC_TRAP22:     equ     >FFD2
(1)       0 : =FFD0              VEC_TRAP23:     equ     >FFD0
(1)       0 :                            *** Internal Peripherals
(1)       0 : =100               IOCNT0: equ     >0100   I/O Control register
(1)       0 : =C0                MEMMODE_gm:     equ     ?11000000       Memory mode
(1)       0 :                            * 0=Single Chip, 1=Peripheral Expansion, 2=Full Expansion
(1)       0 : =20                INT3_F: equ     ?00100000       #INT3 flag
(1)       0 : =10                INT3_E: equ     ?00010000       #INT3 enable
(1)       0 : =2                 INT1_F: equ     ?00000010       #INT1 flag
(1)       0 : =1                 INT1_E: equ     ?00000001       #INT1 enable
(1)       0 :                            *** I/O Ports
(1)       0 : =104               APORT:  equ     >0104   Port A data
(1)       0 : =106               BPORT:  equ     >0106   Port B data
(1)       0 : =108               CPORT:  equ     >0108   Port C data
(1)       0 : =109               CDDR:   equ     >0109   Port C data direction register
(1)       0 : =10A               DPORT:  equ     >010A   Port D data
(1)       0 : =10B               DDDR:   equ     >010B   Port D data direction register
          0 :
          0 :                            *** MC6850 Asynchronous Communication Interface Adapter
          0 : =1F0               ACIA:   equ     >01F0
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            *** MC6850
(1)       0 :                            *** Asynchronous Communication Interface Adapter
(1)       0 : =1F0               ACIA_control:   equ     ACIA+0
(1)       0 : =1F0               ACIA_status:    equ     ACIA+0
(1)       0 : =1F1               ACIA_data:      equ     ACIA+1
(1)       0 :                            **  Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     ?11             Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     ?00000000       /1
(1)       0 : =0                 CDS_DIV16_gc:   equ     ?00000001       /16
(1)       0 : =0                 CDS_DIV64_gc:   equ     ?00000010       /64
(1)       0 : =3                 CDS_RESET_gc:   equ     ?00000011       Master Reset
(1)       0 :                            **  Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     ?00011100       Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     ?00000000       7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     ?00000100       7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     ?00001000       7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     ?00001100       7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     ?00010000       8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     ?00010100       8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     ?00011000       8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     ?00011100       8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            **  Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     ?01100000       Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     ?00000000       RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     ?00100000       RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     ?01000000       RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     ?01100000       RTS=Low,  Tx Interrupt Disabled
(1)       0 :                            *                               Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     ?10000000       Receive Interrupt Enable Bit mask
(1)       0 :                            *** Status register
(1)       0 : =1                 RDRF_bm:        equ     ?00000001       Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     ?00000010       Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     ?00000100       Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     ?00001000       Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     ?00010000       Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     ?00100000       Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     ?01000000       Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     ?10000000       Interrupt Request Flag
          0 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
          0 :
       2000 :                            org     >2000
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       bss     rx_queue_size
       2080 :
       2080 :                            * Internal registers
         60 :                            org     >60
         60 :                            * TMS7000's SP is pre-increment/post-decrement
         60 :                    stack:
         60 :
       FFFC :                            org     VEC_INT1
       FFFC : 10 B5                      data    isr_int1
       FFFE :
       FFFE :                            org     VEC_RESET
       FFFE : 10 00                      data    initialize
      10000 :
       1000 :                            org     >1000
       1000 :                    initialize:
       1000 : 52 60                      mov     %stack, B
       1002 : 0D                         ldsp
       1003 : 88 20 00 03                movd    %rx_queue, R3
       1007 : 52 80                      mov     %rx_queue_size, B
       1009 : 8E 10 3D                   call    @queue_init
       100C :                            ** initialize ACIA
       100C : A2 03 F0                   movp    %CDS_RESET_gc, ACIA_control     Master reset
       100F : A2 94 F0                   movp    %RX_INT_TX_NO, ACIA_control
       1012 : A2 01 F2                   movp    %1, ACIA+2                      #INT1 for Rx
       1015 : A2 23 00                   movp    %INT3_F|INT1_F|INT1_E, IOCNT0   enable #INT1
       1018 :
       1018 :                    loop:
       1018 : 05                         eint
       1019 : 88 20 00 03                movd    %rx_queue, R3
       101D : 06                         dint                    (clear all ST bits)
       101E : 8E 10 88                   call    @queue_remove
       1021 : E7 F5                      jnc     loop
       1023 : 05                         eint
       1024 : B0                         tsta
       1025 : E2 0E                      jz      halt_to_system
       1027 : 8E 10 36                   call    @putchar
       102A : 2D 0D                      cmp     %>0D, A
       102C : E6 EA                      jne     loop
       102E : 22 0A                      mov     %>0A, A
       1030 : 8E 10 36                   call    @putchar
       1033 : E0 E3                      jmp     loop
       1035 :                    halt_to_system:
       1035 : 01                         idle
       1036 :
       1036 :                    putchar:
       1036 : A7 02 F0 FC                btjzp   %TDRE_bm, ACIA_status, putchar
       103A : 82 F1                      movp    A, ACIA_data
       103C : 0A                         rets
       103D :
       103D :                            include "queue.inc"
(1)    103D :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    103D :                            *** [queue] queue structure
(1)    103D : =0                 queue_len:      equ     0       queue length
(1)    103D : =1                 queue_size:     equ     1       buffer size
(1)    103D : =2                 queue_put:      equ     2       queue put index
(1)    103D : =3                 queue_get:      equ     3       queue get index
(1)    103D : =4                 queue_buf:      equ     4       buffer start offset
(1)    103D :
(1)    103D :                            *** [queue] Initialize queue
(1)    103D :                            *** @param R2:R3 queue work space pointer
(1)    103D :                            *** @param B queue work space size
(1)    103D :                            *** @clobber A B R2:R3
(1)    103D :                    queue_init:
(1)    103D : B5                         clr     A
(1)    103E : 9B 03                      sta     *R3             queue_len
(1)    1040 : 62                         mov     B, A
(1)    1041 : 2A 04                      sub     %queue_buf, A
(1)    1043 : D3 03                      inc     R3
(1)    1045 : 9B 03                      sta     *R3             queue_size
(1)    1047 : 5A 02                      sub     %queue_put, B   offset queue_len and queue_size
(1)    1049 : D3 03                      inc     R3              R2:R3=&queue_put
(1)    104B : B5                         clr     A
(1)    104C :                    queue_init_loop:
(1)    104C : 9B 03                      sta     *R3
(1)    104E : D3 03                      inc     R3
(1)    1050 : CA FA                      djnz    B, queue_init_loop
(1)    1052 : 0A                         rets
(1)    1053 :
(1)    1053 :                            *** [queue] Add an element to queue
(1)    1053 :                            *** @param R2:R3 queue work space pointer
(1)    1053 :                            *** @param A an element
(1)    1053 :                            *** @return ST.C 0 if queue is full
(1)    1053 :                            *** @clobber R2:R3
(1)    1053 :                    queue_add:
(1)    1053 : B8                         push    A
(1)    1054 : 9A 03                      lda     *R3             A=queue_len
(1)    1056 : D3 03                      inc     R3              R2:R3=&queue_size
(1)    1058 : 9D 03                      cmpa    *R3
(1)    105A : E7 02                      jl      queue_add_element
(1)    105C : B9                         pop     A               ST.C=0
(1)    105D : 0A                         rets
(1)    105E :                    queue_add_element:
(1)    105E : B3                         inc     A
(1)    105F : D2 03                      dec     R3
(1)    1061 : 9B 03                      sta     *R3             queue_len++
(1)    1063 : B9                         pop     A
(1)    1064 : 78 02 03                   add     %queue_put-queue_len, R3        R2:R3=&queue_put
(1)    1067 : D8 03                      push    R3
(1)    1069 : B8                         push    A
(1)    106A : 9A 03                      lda     *R3             A=queue_put
(1)    106C : 28 02                      add     %queue_buf-queue_put, A
(1)    106E : 48 00 03                   add     A, R3           R2:R3=&queue[queue_put]
(1)    1071 : B9                         pop     A
(1)    1072 : 9B 03                      sta     *R3             store element
(1)    1074 : D9 03                      pop     R3              R2:R3=&queue_put
(1)    1076 : B8                         push    A
(1)    1077 : 9A 03                      lda     *R3
(1)    1079 : B3                         inc     A
(1)    107A : D2 03                      dec     R3              R2:R3=&queue_size
(1)    107C : 9D 03                      cmpa    *R3
(1)    107E : E7 01                      jl      queue_add_return
(1)    1080 : B5                         clr     A               wraparound
(1)    1081 :                    queue_add_return:
(1)    1081 : D3 03                      inc     R3              R2:R3=&queue_put
(1)    1083 : 9B 03                      sta     *R3             update queue_put
(1)    1085 : B9                         pop     A
(1)    1086 : 07                         setc                    ST.C=1
(1)    1087 : 0A                         rets
(1)    1088 :
(1)    1088 :                            *** [queue] Remove an element from queue
(1)    1088 :                            *** @param R2:R3 queue work space pointer
(1)    1088 :                            *** @return A an element
(1)    1088 :                            *** @return ST.C 0 if queue is empty
(1)    1088 :                    queue_remove:
(1)    1088 : 9A 03                      lda     *R3             A=queue_len
(1)    108A : E6 02                      jnz     queue_remove_elem
(1)    108C : B0                         clrc
(1)    108D : 0A                         rets
(1)    108E :                    queue_remove_elem:
(1)    108E : B2                         dec     A
(1)    108F : 9B 03                      sta     *R3             queue_len--
(1)    1091 : 78 03 03                   add     %queue_get-queue_len, R3        R2:R3=&queue_get
(1)    1094 : D8 03                      push    R3
(1)    1096 : 9A 03                      lda     *R3             A=queue_get
(1)    1098 : 28 01                      add     %queue_buf-queue_get, A
(1)    109A : 48 00 03                   add     A, R3           R2:R3=&queue_buf[queue_get]
(1)    109D : 9A 03                      lda     *R3             remove element
(1)    109F : D9 03                      pop     R3              R2:R3=&queue_get
(1)    10A1 : B8                         push    A
(1)    10A2 : 9A 03                      lda     *R3
(1)    10A4 : B3                         inc     A
(1)    10A5 : 7A 02 03                   sub     %queue_get-queue_size, R3
(1)    10A8 : 9D 03                      cmpa    *R3
(1)    10AA : E7 01                      jl      queue_remove_return
(1)    10AC : B5                         clr     A               wraparound
(1)    10AD :                    queue_remove_return:
(1)    10AD : 78 02 03                   add     %queue_get-queue_size, R3
(1)    10B0 : 9B 03                      sta     *R3             update queue_get
(1)    10B2 : B9                         pop     A
(1)    10B3 : 07                         setc
(1)    10B4 : 0A                         rets
       10B5 :
       10B5 :                    isr_int1:
       10B5 : A7 80 F0 17                btjzp   %IRQF_bm, ACIA_status, isr_int1_return
       10B9 : A7 01 F0 13                btjzp   %RDRF_bm, ACIA_status, isr_int1_return
       10BD : B8                         push    A
       10BE : 80 F1                      movp    ACIA_data, A
       10C0 : D8 02                      push    R2
       10C2 : D8 03                      push    R3
       10C4 : 88 20 00 03                movd    %rx_queue, R3
       10C8 : 8E 10 53                   call    @queue_add
       10CB : D9 03                      pop     R3
       10CD : D9 02                      pop     R2
       10CF : B9                         pop     A
       10D0 :                    isr_int1_return:
       10D0 : 0B                         reti
