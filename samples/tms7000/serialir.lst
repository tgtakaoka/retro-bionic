          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     tms7000
          0 :                            include "tms7001.inc"
(1)       0 :                            *** -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            include "tms7000.inc"
(2)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :                            *** TMS7000
(2)       0 :                            *** Status Register
(2)       0 : =80                ST_CARRY:       equ  ?10000000  set to 1 if carry occurred
(2)       0 : =40                ST_NEGATIVE:    equ  ?01000000  set to 1 if result is negative
(2)       0 : =20                ST_ZERO:        equ  ?00100000  set to 1 if result is zero
(2)       0 : =10                ST_INT:         equ  ?00010000  if 1, interrupt is enabled
(2)       0 :                            *** Vector
(2)       0 : =FFF8              VEC_INT3:       equ     >FFF8   #INT3 interrupt
(2)       0 : =FFFA              VEC_INT2:       equ     >FFFA   Timer 1
(2)       0 : =FFFC              VEC_INT1:       equ     >FFFC   #INT1 interrupt
(2)       0 : =FFFE              VEC_RESET:      equ     >FFFE   #RESET vector
(2)       0 :                            *** Trap Vector
(2)       0 : =FFFE              VEC_TRAP0:      equ     VEC_RESET
(2)       0 : =FFFC              VEC_TRAP1:      equ     VEC_INT1
(2)       0 : =FFFA              VEC_TRAP2:      equ     VEC_INT2
(2)       0 : =FFF8              VEC_TRAP3:      equ     VEC_INT3
(2)       0 : =FFF6              VEC_TRAP4:      equ     >FFF6
(2)       0 : =FFF4              VEC_TRAP5:      equ     >FFF4
(2)       0 : =FFF2              VEC_TRAP6:      equ     >FFF2
(2)       0 : =FFF0              VEC_TRAP7:      equ     >FFF0
(2)       0 : =FFEE              VEC_TRAP8:      equ     >FFEE
(2)       0 : =FFEC              VEC_TRAP9:      equ     >FFEC
(2)       0 : =FFEA              VEC_TRAP10:     equ     >FFEA
(2)       0 : =FFE8              VEC_TRAP11:     equ     >FFE8
(2)       0 : =FFE6              VEC_TRAP12:     equ     >FFE6
(2)       0 : =FFE4              VEC_TRAP13:     equ     >FFE4
(2)       0 : =FFE2              VEC_TRAP14:     equ     >FFE2
(2)       0 : =FFE0              VEC_TRAP15:     equ     >FFE0
(2)       0 : =FFDE              VEC_TRAP16:     equ     >FFDE
(2)       0 : =FFDC              VEC_TRAP17:     equ     >FFDC
(2)       0 : =FFDA              VEC_TRAP18:     equ     >FFDA
(2)       0 : =FFD8              VEC_TRAP19:     equ     >FFD8
(2)       0 : =FFD6              VEC_TRAP20:     equ     >FFD6
(2)       0 : =FFD4              VEC_TRAP21:     equ     >FFD4
(2)       0 : =FFD2              VEC_TRAP22:     equ     >FFD2
(2)       0 : =FFD0              VEC_TRAP23:     equ     >FFD0
(2)       0 :
(2)       0 :                            *** Internal Peripherals
(2)       0 : =100               IOCNT0: equ     >0100   I/O Control register
(2)       0 : =20                INT3_F: equ     ?100000 #INT3 flag
(2)       0 : =10                INT3_E: equ     ?010000 #INT3 enable
(2)       0 : =8                 INT2_F: equ     ?001000 INT2 flag
(2)       0 : =4                 INT2_E: equ     ?000100 INT2 enable
(2)       0 : =2                 INT1_F: equ     ?000010 #INT1 flag
(2)       0 : =1                 INT1_E: equ     ?000001 #INT1 enable
(2)       0 : =102               T1DATA: equ     >0102   Timer 1 data
(2)       0 : =103               T1CTL:  equ     >0103   Timer 1 control
(2)       0 : =104               APORT:  equ     >0104   Port A data
(2)       0 : =106               BPORT:  equ     >0106   Port B data
(2)       0 : =108               CPORT:  equ     >0108   Port C data
(2)       0 : =109               CDDR:   equ     >0109   Port C data direction register
(2)       0 : =10A               DPORT:  equ     >010A   Port D data
(2)       0 : =10B               DDDR:   equ     >010B   Port D data direction register
(2)       0 :
(2)       0 :                            *** Local Variables:
(2)       0 :                            *** comment-start: "*"
(2)       0 :                            *** End:
(1)       0 :                            *** TMS7001
(1)       0 :                            *** Vector
(1)       0 : =FFF4              VEC_INT5:       equ     >FFF4   Tuner 2
(1)       0 : =FFF6              VEC_INT4:       equ     >FFF6   Serial port
(1)       0 :                            *** Internal Peripherals
(1)       0 : =105               ADDR:   equ     >0105           Port A data direction register
(1)       0 : =110               IOCNT1: equ     >0110           I/O control register 1
(1)       0 : =8                 INT5_F:         equ     ?1000           INT5 flag
(1)       0 : =4                 INT5_E:         equ     ?0100           INT5 enable
(1)       0 : =2                 INT4_F:         equ     ?0010           INT4 flag
(1)       0 : =1                 INT4_E:         equ     ?0001           INT4 enable
(1)       0 : =111               SMODE:  equ     >0111           Serial mode (first write)
(1)       0 : =80                STOP_bm:        equ     ?10000000       1=2 stop bits. 0=1 stop bits
(1)       0 : =40                CMODE_bm:       equ     ?01000000       1=Communication mode, 0=Serial I/O mode
(1)       0 : =20                PEVEN_bm:       equ     ?00100000       1=Even parity, 0=Odd parity
(1)       0 : =10                PEN_bm:         equ     ?00010000       1=Parity enable, 0=Parity disable
(1)       0 : =C                 CHAR8_bm:       equ     ?00001100       3=8 bits/char
(1)       0 : =2                 ASYNC_bm:       equ     ?00000010       1=Asynchronous, 0=Synchronous
(1)       0 : =1                 MULTI_bm:       equ     ?00000001       1=Intel protocol, 0-Motorola protocol
(1)       0 : =111               SCTL0:  equ     >0111           Serial control 0 (write only)
(1)       0 : =40                UR_bm:          equ     ?01000000       1=Reset serial port
(1)       0 : =10                ER_bm:          equ     ?00010000       1=Reset error flags
(1)       0 : =4                 RXEN_bm:        equ     ?00000100       1=Receiver enable, 0=A5 is GPIO
(1)       0 : =2                 SCLKEN_bm:      equ     ?00000010       1=A4 is SCLK, 0=A4 is GPIO
(1)       0 : =1                 TXEN_bm:        equ     ?00000001       1=Transmitter enable, 0=Transmitter disable
(1)       0 : =111               SSTAT:  equ     >0111           Serial status register (read only)
(1)       0 : =40                BFKDR_bm:       equ     ?01000000       1=Break detect
(1)       0 : =20                FE_bm:          equ     ?00100000       1=Framing error
(1)       0 : =10                OE_bm:          equ     ?00010000       1=Overrun error
(1)       0 : =8                 PE_bm:          equ     ?00001000       1=Parity error
(1)       0 : =4                 TXE_bm:         equ     ?00000100       1=Transmitter empty
(1)       0 : =2                 RXRDY_bm:       equ     ?00000010       1=RXBUF ready with new character
(1)       0 : =1                 TXRDY_bm:       equ     ?00000001       1=TXBYF ready for character
(1)       0 : =112               T2DATA: equ     >0112           Timer 2 data
(1)       0 : =113               T2CNTL: equ     >0113           Timer 2 control
(1)       0 : =114               T3DATA: equ     >0114           Timer 3 data
(1)       0 : =115               SCTL1:  equ     >0115           Serial control
(1)       0 : =40                CLK_bm:         equ     ?01000000       1=Internal SCLK from Timer3, 0=SCLK
(1)       0 : =4                 T3ENB_bm:       equ     ?00000100       1=Enable T3 to set INT4 flag
(1)       0 : =3                 PRE3_bm:        equ     ?00000011       Prescaler reload reg PR
(1)       0 : =116               RXBUF:  equ     >0116           Receive buffer
(1)       0 : =117               TXBUF:  equ     >0117           Transmitter buffer
(1)       0 :
(1)       0 :                            *** Local Variables:
(1)       0 :                            *** comment-start: "*"
(1)       0 :                            *** End:
          0 :
       2000 :                            org     >2000
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       bss     rx_queue_size
       2080 :
       2080 :                            * Internal registers
         60 :                            org     >60
         60 :                            * TMS7000's SP is pre-increment/post-decrement
         60 :                    stack:
         60 :
       FFF6 :                            org     VEC_INT4
       FFF6 : 10 C1                      data    isr_int4
       FFF8 :
       FFFE :                            org     VEC_RESET
       FFFE : 10 00                      data    initialize
      10000 :
       1000 :                            org     >1000
       1000 :                    initialize:
       1000 : 52 60                      mov     %stack, B
       1002 : 0D                         ldsp
       1003 : 88 20 00 03                movd    %rx_queue, R3
       1007 : 52 80                      mov     %rx_queue_size, B
       1009 : 8E 10 49                   call    @queue_init
       100C :                            ** initialize Serial
       100C : A4 08 06                   orp     %?1000, BPORT                   Pass through TXD (PB3=1)
       100F : A2 00 11                   movp    %0, SMODE                       Select SCTL0
       1012 : A2 40 11                   movp    %UR_bm, SCTL0                   Select SMODE by reset
       1015 : A2 4E 11                   movp    %CMODE_bm|CHAR8_bm|ASYNC_bm, SMODE       8 bits asynchronous
       1018 : A2 05 11                   movp    %RXEN_bm|TXEN_bm, SCTL0         Rx/Tx enable
       101B : A2 0C 14                   movp    %12, T3DATA                     9600 bps (TR)
       101E : A2 40 15                   movp    %CLK_bm, SCTL1                  Enable internal clock, PR=0
       1021 : A2 03 10                   movp    %INT4_E|INT4_F, IOCNT1          clear/enable INT4
       1024 :
       1024 :                    loop:
       1024 : 05                         eint
       1025 : 88 20 00 03                movd    %rx_queue, R3
       1029 : 06                         dint                    (clear all ST bits)
       102A : 8E 10 94                   call    @queue_remove
       102D : E7 F5                      jnc     loop
       102F : 05                         eint
       1030 : B0                         tsta
       1031 : E2 0E                      jz      halt_to_system
       1033 : 8E 10 42                   call    @putchar
       1036 : 2D 0D                      cmp     %>0D, A
       1038 : E6 EA                      jne     loop
       103A : 22 0A                      mov     %>0A, A
       103C : 8E 10 42                   call    @putchar
       103F : E0 E3                      jmp     loop
       1041 :                    halt_to_system:
       1041 : 01                         idle
       1042 :
       1042 :                    putchar:
       1042 : A7 01 11 FC                btjzp   %TXRDY_bm, SSTAT, putchar
       1046 : 82 17                      movp    A, TXBUF
       1048 : 0A                         rets
       1049 :
       1049 :                            include "queue.inc"
(1)    1049 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    1049 :                            *** [queue] queue structure
(1)    1049 : =0                 queue_len:      equ     0       queue length
(1)    1049 : =1                 queue_size:     equ     1       buffer size
(1)    1049 : =2                 queue_put:      equ     2       queue put index
(1)    1049 : =3                 queue_get:      equ     3       queue get index
(1)    1049 : =4                 queue_buf:      equ     4       buffer start offset
(1)    1049 :
(1)    1049 :                            *** [queue] Initialize queue
(1)    1049 :                            *** @param R2:R3 queue work space pointer
(1)    1049 :                            *** @param B queue work space size
(1)    1049 :                            *** @clobber A B R2:R3
(1)    1049 :                    queue_init:
(1)    1049 : B5                         clr     A
(1)    104A : 9B 03                      sta     *R3             queue_len
(1)    104C : 62                         mov     B, A
(1)    104D : 2A 04                      sub     %queue_buf, A
(1)    104F : D3 03                      inc     R3
(1)    1051 : 9B 03                      sta     *R3             queue_size
(1)    1053 : 5A 02                      sub     %queue_put, B   offset queue_len and queue_size
(1)    1055 : D3 03                      inc     R3              R2:R3=&queue_put
(1)    1057 : B5                         clr     A
(1)    1058 :                    queue_init_loop:
(1)    1058 : 9B 03                      sta     *R3
(1)    105A : D3 03                      inc     R3
(1)    105C : CA FA                      djnz    B, queue_init_loop
(1)    105E : 0A                         rets
(1)    105F :
(1)    105F :                            *** [queue] Add an element to queue
(1)    105F :                            *** @param R2:R3 queue work space pointer
(1)    105F :                            *** @param A an element
(1)    105F :                            *** @return ST.C 0 if queue is full
(1)    105F :                            *** @clobber R2:R3
(1)    105F :                    queue_add:
(1)    105F : B8                         push    A
(1)    1060 : 9A 03                      lda     *R3             A=queue_len
(1)    1062 : D3 03                      inc     R3              R2:R3=&queue_size
(1)    1064 : 9D 03                      cmpa    *R3
(1)    1066 : E7 02                      jl      queue_add_element
(1)    1068 : B9                         pop     A               ST.C=0
(1)    1069 : 0A                         rets
(1)    106A :                    queue_add_element:
(1)    106A : B3                         inc     A
(1)    106B : D2 03                      dec     R3
(1)    106D : 9B 03                      sta     *R3             queue_len++
(1)    106F : B9                         pop     A
(1)    1070 : 78 02 03                   add     %queue_put-queue_len, R3        R2:R3=&queue_put
(1)    1073 : D8 03                      push    R3
(1)    1075 : B8                         push    A
(1)    1076 : 9A 03                      lda     *R3             A=queue_put
(1)    1078 : 28 02                      add     %queue_buf-queue_put, A
(1)    107A : 48 00 03                   add     A, R3           R2:R3=&queue[queue_put]
(1)    107D : B9                         pop     A
(1)    107E : 9B 03                      sta     *R3             store element
(1)    1080 : D9 03                      pop     R3              R2:R3=&queue_put
(1)    1082 : B8                         push    A
(1)    1083 : 9A 03                      lda     *R3
(1)    1085 : B3                         inc     A
(1)    1086 : D2 03                      dec     R3              R2:R3=&queue_size
(1)    1088 : 9D 03                      cmpa    *R3
(1)    108A : E7 01                      jl      queue_add_return
(1)    108C : B5                         clr     A               wraparound
(1)    108D :                    queue_add_return:
(1)    108D : D3 03                      inc     R3              R2:R3=&queue_put
(1)    108F : 9B 03                      sta     *R3             update queue_put
(1)    1091 : B9                         pop     A
(1)    1092 : 07                         setc                    ST.C=1
(1)    1093 : 0A                         rets
(1)    1094 :
(1)    1094 :                            *** [queue] Remove an element from queue
(1)    1094 :                            *** @param R2:R3 queue work space pointer
(1)    1094 :                            *** @return A an element
(1)    1094 :                            *** @return ST.C 0 if queue is empty
(1)    1094 :                    queue_remove:
(1)    1094 : 9A 03                      lda     *R3             A=queue_len
(1)    1096 : E6 02                      jnz     queue_remove_elem
(1)    1098 : B0                         clrc
(1)    1099 : 0A                         rets
(1)    109A :                    queue_remove_elem:
(1)    109A : B2                         dec     A
(1)    109B : 9B 03                      sta     *R3             queue_len--
(1)    109D : 78 03 03                   add     %queue_get-queue_len, R3        R2:R3=&queue_get
(1)    10A0 : D8 03                      push    R3
(1)    10A2 : 9A 03                      lda     *R3             A=queue_get
(1)    10A4 : 28 01                      add     %queue_buf-queue_get, A
(1)    10A6 : 48 00 03                   add     A, R3           R2:R3=&queue_buf[queue_get]
(1)    10A9 : 9A 03                      lda     *R3             remove element
(1)    10AB : D9 03                      pop     R3              R2:R3=&queue_get
(1)    10AD : B8                         push    A
(1)    10AE : 9A 03                      lda     *R3
(1)    10B0 : B3                         inc     A
(1)    10B1 : 7A 02 03                   sub     %queue_get-queue_size, R3
(1)    10B4 : 9D 03                      cmpa    *R3
(1)    10B6 : E7 01                      jl      queue_remove_return
(1)    10B8 : B5                         clr     A               wraparound
(1)    10B9 :                    queue_remove_return:
(1)    10B9 : 78 02 03                   add     %queue_get-queue_size, R3
(1)    10BC : 9B 03                      sta     *R3             update queue_get
(1)    10BE : B9                         pop     A
(1)    10BF : 07                         setc
(1)    10C0 : 0A                         rets
       10C1 :
       10C1 :                    isr_int4:
       10C1 : A7 02 11 13                btjzp   %RXRDY_bm, SSTAT, isr_int4_return
       10C5 : B8                         push    A
       10C6 : 80 16                      movp    RXBUF, A
       10C8 : D8 02                      push    R2
       10CA : D8 03                      push    R3
       10CC : 88 20 00 03                movd    %rx_queue, R3
       10D0 : 8E 10 5F                   call    @queue_add
       10D3 : D9 03                      pop     R3
       10D5 : D9 02                      pop     R2
       10D7 : B9                         pop     A
       10D8 :                    isr_int4_return:
       10D8 : 0B                         reti
