          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     tms7000
          0 :                            include "tms7001.inc"
(1)       0 :                            *** -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            include "tms7000.inc"
(2)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :                            *** TMS7000
(2)       0 :                            *** Status Register
(2)       0 : =80                ST_CARRY:       equ  ?10000000  set to 1 if carry occurred
(2)       0 : =40                ST_NEGATIVE:    equ  ?01000000  set to 1 if result is negative
(2)       0 : =20                ST_ZERO:        equ  ?00100000  set to 1 if result is zero
(2)       0 : =10                ST_INT:         equ  ?00010000  if 1, interrupt is enabled
(2)       0 :                            *** Vector
(2)       0 : =FFF8              VEC_INT3:       equ     >FFF8   #INT3 interrupt
(2)       0 : =FFFA              VEC_INT2:       equ     >FFFA   Timer 1
(2)       0 : =FFFC              VEC_INT1:       equ     >FFFC   #INT1 interrupt
(2)       0 : =FFFE              VEC_RESET:      equ     >FFFE   #RESET vector
(2)       0 :                            *** Trap Vector
(2)       0 : =FFFE              VEC_TRAP0:      equ     VEC_RESET
(2)       0 : =FFFC              VEC_TRAP1:      equ     VEC_INT1
(2)       0 : =FFFA              VEC_TRAP2:      equ     VEC_INT2
(2)       0 : =FFF8              VEC_TRAP3:      equ     VEC_INT3
(2)       0 : =FFF6              VEC_TRAP4:      equ     >FFF6
(2)       0 : =FFF4              VEC_TRAP5:      equ     >FFF4
(2)       0 : =FFF2              VEC_TRAP6:      equ     >FFF2
(2)       0 : =FFF0              VEC_TRAP7:      equ     >FFF0
(2)       0 : =FFEE              VEC_TRAP8:      equ     >FFEE
(2)       0 : =FFEC              VEC_TRAP9:      equ     >FFEC
(2)       0 : =FFEA              VEC_TRAP10:     equ     >FFEA
(2)       0 : =FFE8              VEC_TRAP11:     equ     >FFE8
(2)       0 : =FFE6              VEC_TRAP12:     equ     >FFE6
(2)       0 : =FFE4              VEC_TRAP13:     equ     >FFE4
(2)       0 : =FFE2              VEC_TRAP14:     equ     >FFE2
(2)       0 : =FFE0              VEC_TRAP15:     equ     >FFE0
(2)       0 : =FFDE              VEC_TRAP16:     equ     >FFDE
(2)       0 : =FFDC              VEC_TRAP17:     equ     >FFDC
(2)       0 : =FFDA              VEC_TRAP18:     equ     >FFDA
(2)       0 : =FFD8              VEC_TRAP19:     equ     >FFD8
(2)       0 : =FFD6              VEC_TRAP20:     equ     >FFD6
(2)       0 : =FFD4              VEC_TRAP21:     equ     >FFD4
(2)       0 : =FFD2              VEC_TRAP22:     equ     >FFD2
(2)       0 : =FFD0              VEC_TRAP23:     equ     >FFD0
(2)       0 :
(2)       0 :                            *** Internal Peripherals
(2)       0 : =100               IOCNT0: equ     >0100   I/O Control register
(2)       0 : =20                INT3_F: equ     ?100000 #INT3 flag
(2)       0 : =10                INT3_E: equ     ?010000 #INT3 enable
(2)       0 : =8                 INT2_F: equ     ?001000 INT2 flag
(2)       0 : =4                 INT2_E: equ     ?000100 INT2 enable
(2)       0 : =2                 INT1_F: equ     ?000010 #INT1 flag
(2)       0 : =1                 INT1_E: equ     ?000001 #INT1 enable
(2)       0 : =102               T1DATA: equ     >0102   Timer 1 data
(2)       0 : =103               T1CTL:  equ     >0103   Timer 1 control
(2)       0 : =104               APORT:  equ     >0104   Port A data
(2)       0 : =106               BPORT:  equ     >0106   Port B data
(2)       0 : =108               CPORT:  equ     >0108   Port C data
(2)       0 : =109               CDDR:   equ     >0109   Port C data direction register
(2)       0 : =10A               DPORT:  equ     >010A   Port D data
(2)       0 : =10B               DDDR:   equ     >010B   Port D data direction register
(2)       0 :
(2)       0 :                            *** Local Variables:
(2)       0 :                            *** comment-start: "*"
(2)       0 :                            *** End:
(1)       0 :                            *** TMS7001
(1)       0 :                            *** Vector
(1)       0 : =FFF4              VEC_INT5:       equ     >FFF4   Tuner 2
(1)       0 : =FFF6              VEC_INT4:       equ     >FFF6   Serial port
(1)       0 :                            *** Internal Peripherals
(1)       0 : =105               ADDR:   equ     >0105           Port A data direction register
(1)       0 : =110               IOCNT1: equ     >0110           I/O control register 1
(1)       0 : =8                 INT5_F:         equ     ?1000           INT5 flag
(1)       0 : =4                 INT5_E:         equ     ?0100           INT5 enable
(1)       0 : =2                 INT4_F:         equ     ?0010           INT4 flag
(1)       0 : =1                 INT4_E:         equ     ?0001           INT4 enable
(1)       0 : =111               SMODE:  equ     >0111           Serial mode (first write)
(1)       0 : =80                STOP_bm:        equ     ?10000000       1=2 stop bits. 0=1 stop bits
(1)       0 : =40                CMODE_bm:       equ     ?01000000       1=Communication mode, 0=Serial I/O mode
(1)       0 : =20                PEVEN_bm:       equ     ?00100000       1=Even parity, 0=Odd parity
(1)       0 : =10                PEN_bm:         equ     ?00010000       1=Parity enable, 0=Parity disable
(1)       0 : =C                 CHAR8_bm:       equ     ?00001100       3=8 bits/char
(1)       0 : =2                 ASYNC_bm:       equ     ?00000010       1=Asynchronous, 0=Synchronous
(1)       0 : =1                 MULTI_bm:       equ     ?00000001       1=Intel protocol, 0-Motorola protocol
(1)       0 : =111               SCTL0:  equ     >0111           Serial control 0 (write only)
(1)       0 : =40                UR_bm:          equ     ?01000000       1=Reset serial port
(1)       0 : =10                ER_bm:          equ     ?00010000       1=Reset error flags
(1)       0 : =4                 RXEN_bm:        equ     ?00000100       1=Receiver enable, 0=A5 is GPIO
(1)       0 : =2                 SCLKEN_bm:      equ     ?00000010       1=A4 is SCLK, 0=A4 is GPIO
(1)       0 : =1                 TXEN_bm:        equ     ?00000001       1=Transmitter enable, 0=Transmitter disable
(1)       0 : =111               SSTAT:  equ     >0111           Serial status register (read only)
(1)       0 : =40                BFKDR_bm:       equ     ?01000000       1=Break detect
(1)       0 : =20                FE_bm:          equ     ?00100000       1=Framing error
(1)       0 : =10                OE_bm:          equ     ?00010000       1=Overrun error
(1)       0 : =8                 PE_bm:          equ     ?00001000       1=Parity error
(1)       0 : =4                 TXE_bm:         equ     ?00000100       1=Transmitter empty
(1)       0 : =2                 RXRDY_bm:       equ     ?00000010       1=RXBUF ready with new character
(1)       0 : =1                 TXRDY_bm:       equ     ?00000001       1=TXBYF ready for character
(1)       0 : =112               T2DATA: equ     >0112           Timer 2 data
(1)       0 : =113               T2CNTL: equ     >0113           Timer 2 control
(1)       0 : =114               T3DATA: equ     >0114           Timer 3 data
(1)       0 : =115               SCTL1:  equ     >0115           Serial control
(1)       0 : =40                CLK_bm:         equ     ?01000000       1=Internal SCLK from Timer3, 0=SCLK
(1)       0 : =4                 T3ENB_bm:       equ     ?00000100       1=Enable T3 to set INT4 flag
(1)       0 : =3                 PRE3_bm:        equ     ?00000011       Prescaler reload reg PR
(1)       0 : =116               RXBUF:  equ     >0116           Receive buffer
(1)       0 : =117               TXBUF:  equ     >0117           Transmitter buffer
(1)       0 :
(1)       0 :                            *** Local Variables:
(1)       0 :                            *** comment-start: "*"
(1)       0 :                            *** End:
          0 :
       2000 :                            org     >2000
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       bss     rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       bss     tx_queue_size
       2100 :
       2100 :                            * Internal registers
         10 :                            org     >10
         10 :                    tx_enable:      bss     1
         11 :                            * TMS7000's SP is pre-increment/post-decrement
         11 :                    stack:
         11 :
       FFF6 :                            org     VEC_INT4
       FFF6 : 11 32                      data    isr_int4
       FFF8 :
       FFFE :                            org     VEC_RESET
       FFFE : 10 00                      data    initialize
      10000 :
       1000 :                            org     >1000
       1000 :                    initialize:
       1000 : 52 11                      mov     %stack, B
       1002 : 0D                         ldsp
       1003 : 88 20 00 03                movd    %rx_queue, R3
       1007 : 52 80                      mov     %rx_queue_size, B
       1009 : 8E 10 BA                   call    @queue_init
       100C : 88 20 80 03                movd    %tx_queue, R3
       1010 : 52 80                      mov     %tx_queue_size, B
       1012 : 8E 10 BA                   call    @queue_init
       1015 :                            ** initialize Serial
       1015 : A4 08 06                   orp     %?1000, BPORT                   Pass through TXD (PB3=1)
       1018 : A2 00 11                   movp    %0, SMODE                       Select SCTL0
       101B : A2 40 11                   movp    %UR_bm, SCTL0                   Select SMODE by reset
       101E : A2 4E 11                   movp    %CMODE_bm|CHAR8_bm|ASYNC_bm, SMODE       8 bits asynchronous
       1021 : D5 10                      clr     tx_enable                       Tx disable
       1023 : A2 04 11                   movp    %RXEN_bm, SCTL0                 Rx enable
       1026 : A2 0C 14                   movp    %12, T3DATA                     9600 bps (TR)
       1029 : A2 40 15                   movp    %CLK_bm, SCTL1                  Enable internal clock, PR=0
       102C : A2 03 10                   movp    %INT4_F|INT4_E, IOCNT1          clear/enable INT4
       102F :
       102F :                    loop:
       102F : 8E 10 91                   call    @getchar
       1032 : E7 FB                      jnc     loop
       1034 : B0                         tsta
       1035 : E2 15                      jz      halt_to_system
       1037 : C0                         mov     A, B
       1038 : 8E 10 A0                   call    @putchar        echo
       103B : 8E 10 4D                   call    @putspace
       103E : 8E 10 5A                   call    @put_hex8       print in hex
       1041 : 8E 10 4D                   call    @putspace
       1044 : 8E 10 76                   call    @put_bin8       print in binary
       1047 : 8E 10 51                   call    @newline
       104A : E0 E3                      jmp     loop
       104C :                    halt_to_system:
       104C : 01                         idle
       104D :
       104D :                            *** Put sapce
       104D :                            *** @clobber A
       104D :                    putspace:
       104D : 22 20                      mov     %' ', A
       104F : E0 4F                      jmp     putchar
       1051 :
       1051 :                            *** Put newline
       1051 :                            *** @clobber A
       1051 :                    newline:
       1051 : 22 0D                      mov     %>0D, A
       1053 : 8E 10 A0                   call    @putchar
       1056 : 22 0A                      mov     %>0A, A
       1058 : E0 46                      jmp     putchar
       105A :
       105A :                            *** Print uint8_t in hex
       105A :                            *** @param B uint8_t value to be printed in hex.
       105A :                            *** @clobber A
       105A :                    put_hex8:
       105A : 22 30                      mov     %'0', A
       105C : 8E 10 A0                   call    @putchar
       105F : 22 78                      mov     %'x', A
       1061 : 8E 10 A0                   call    @putchar
       1064 : 62                         mov     B, A
       1065 : B7                         swap    A
       1066 : 8E 10 6A                   call    @put_hex4
       1069 : 62                         mov     B, A
       106A :                    put_hex4:
       106A : 23 0F                      and     %>0F, A
       106C : 2D 0A                      cmp     %10, A
       106E : E7 02                      jl      put_hex8_dec
       1070 : 28 07                      add     %'A'-10-'0', A
       1072 :                    put_hex8_dec:
       1072 : 28 30                      add     %'0', A
       1074 : E0 2A                      jmp     putchar
       1076 :
       1076 :                            *** Print uint8_t in binary
       1076 :                            *** @param B uint8_t value to be printed in binary.
       1076 :                            *** @clobber A B
       1076 :                    put_bin8:
       1076 : 22 30                      mov     %'0', A
       1078 : 8E 10 A0                   call    @putchar
       107B : 22 62                      mov     %'b', A
       107D : 8E 10 A0                   call    @putchar
       1080 : 8E 10 83                   call    @put_bin4
       1083 :                    put_bin4:
       1083 : 8E 10 86                   call    @put_bin2
       1086 :                    put_bin2:
       1086 : 8E 10 89                   call    @put_bin1
       1089 :                    put_bin1:
       1089 : 22 30                      mov     %'0', A
       108B : CF                         rlc     B
       108C : E7 12                      jnc     putchar         ; MSB=0
       108E : B3                         inc     A               ; MSB=1
       108F : E0 0F                      jmp     putchar
       1091 :
       1091 :                            *** Get character
       1091 :                            *** @return A
       1091 :                            *** @return ST.C 0 if no character
       1091 :                            *** @clobber R2:R3
       1091 :                    getchar:
       1091 : 88 20 00 03                movd    %rx_queue, R3
       1095 : 06                         dint
       1096 : 8E 11 05                   call    @queue_remove
       1099 : E7 02                      jnc     getchar_empty
       109B : 05                         eint                    ST.C=1
       109C : 0A                         rets
       109D :                    getchar_empty:
       109D : 05                         eint                    ST.C=1
       109E : B0                         clrc
       109F : 0A                         rets
       10A0 :
       10A0 :                            *** Put character
       10A0 :                            *** @param A
       10A0 :                            *** @clobber R2:R3
       10A0 :                    putchar:
       10A0 : 76 01 10 09                btjo    %1, tx_enable, putchar_add
       10A4 : 74 01 10                   or      %1, tx_enable           enable Tx
       10A7 : A2 05 11                   movp    %RXEN_bm|TXEN_bm, SCTL0
       10AA : 82 17                      movp    A, TXBUF
       10AC : 0A                         rets
       10AD :                    putchar_add:
       10AD : 05                         eint
       10AE : 88 20 80 03                movd    %tx_queue, R3
       10B2 : 06                         dint
       10B3 : 8E 10 D0                   call    @queue_add
       10B6 : E7 F5                      jnc     putchar_add
       10B8 : 05                         eint
       10B9 : 0A                         rets
       10BA :
       10BA :                            include "queue.inc"
(1)    10BA :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    10BA :                            *** [queue] queue structure
(1)    10BA : =0                 queue_len:      equ     0       queue length
(1)    10BA : =1                 queue_size:     equ     1       buffer size
(1)    10BA : =2                 queue_put:      equ     2       queue put index
(1)    10BA : =3                 queue_get:      equ     3       queue get index
(1)    10BA : =4                 queue_buf:      equ     4       buffer start offset
(1)    10BA :
(1)    10BA :                            *** [queue] Initialize queue
(1)    10BA :                            *** @param R2:R3 queue work space pointer
(1)    10BA :                            *** @param B queue work space size
(1)    10BA :                            *** @clobber A B R2:R3
(1)    10BA :                    queue_init:
(1)    10BA : B5                         clr     A
(1)    10BB : 9B 03                      sta     *R3             queue_len
(1)    10BD : 62                         mov     B, A
(1)    10BE : 2A 04                      sub     %queue_buf, A
(1)    10C0 : D3 03                      inc     R3
(1)    10C2 : 9B 03                      sta     *R3             queue_size
(1)    10C4 : 5A 02                      sub     %queue_put, B   offset queue_len and queue_size
(1)    10C6 : D3 03                      inc     R3              R2:R3=&queue_put
(1)    10C8 : B5                         clr     A
(1)    10C9 :                    queue_init_loop:
(1)    10C9 : 9B 03                      sta     *R3
(1)    10CB : D3 03                      inc     R3
(1)    10CD : CA FA                      djnz    B, queue_init_loop
(1)    10CF : 0A                         rets
(1)    10D0 :
(1)    10D0 :                            *** [queue] Add an element to queue
(1)    10D0 :                            *** @param R2:R3 queue work space pointer
(1)    10D0 :                            *** @param A an element
(1)    10D0 :                            *** @return ST.C 0 if queue is full
(1)    10D0 :                            *** @clobber R2:R3
(1)    10D0 :                    queue_add:
(1)    10D0 : B8                         push    A
(1)    10D1 : 9A 03                      lda     *R3             A=queue_len
(1)    10D3 : D3 03                      inc     R3              R2:R3=&queue_size
(1)    10D5 : 9D 03                      cmpa    *R3
(1)    10D7 : E7 02                      jl      queue_add_element
(1)    10D9 : B9                         pop     A               ST.C=0
(1)    10DA : 0A                         rets
(1)    10DB :                    queue_add_element:
(1)    10DB : B3                         inc     A
(1)    10DC : D2 03                      dec     R3
(1)    10DE : 9B 03                      sta     *R3             queue_len++
(1)    10E0 : B9                         pop     A
(1)    10E1 : 78 02 03                   add     %queue_put-queue_len, R3        R2:R3=&queue_put
(1)    10E4 : D8 03                      push    R3
(1)    10E6 : B8                         push    A
(1)    10E7 : 9A 03                      lda     *R3             A=queue_put
(1)    10E9 : 28 02                      add     %queue_buf-queue_put, A
(1)    10EB : 48 00 03                   add     A, R3           R2:R3=&queue[queue_put]
(1)    10EE : B9                         pop     A
(1)    10EF : 9B 03                      sta     *R3             store element
(1)    10F1 : D9 03                      pop     R3              R2:R3=&queue_put
(1)    10F3 : B8                         push    A
(1)    10F4 : 9A 03                      lda     *R3
(1)    10F6 : B3                         inc     A
(1)    10F7 : D2 03                      dec     R3              R2:R3=&queue_size
(1)    10F9 : 9D 03                      cmpa    *R3
(1)    10FB : E7 01                      jl      queue_add_return
(1)    10FD : B5                         clr     A               wraparound
(1)    10FE :                    queue_add_return:
(1)    10FE : D3 03                      inc     R3              R2:R3=&queue_put
(1)    1100 : 9B 03                      sta     *R3             update queue_put
(1)    1102 : B9                         pop     A
(1)    1103 : 07                         setc                    ST.C=1
(1)    1104 : 0A                         rets
(1)    1105 :
(1)    1105 :                            *** [queue] Remove an element from queue
(1)    1105 :                            *** @param R2:R3 queue work space pointer
(1)    1105 :                            *** @return A an element
(1)    1105 :                            *** @return ST.C 0 if queue is empty
(1)    1105 :                    queue_remove:
(1)    1105 : 9A 03                      lda     *R3             A=queue_len
(1)    1107 : E6 02                      jnz     queue_remove_elem
(1)    1109 : B0                         clrc
(1)    110A : 0A                         rets
(1)    110B :                    queue_remove_elem:
(1)    110B : B2                         dec     A
(1)    110C : 9B 03                      sta     *R3             queue_len--
(1)    110E : 78 03 03                   add     %queue_get-queue_len, R3        R2:R3=&queue_get
(1)    1111 : D8 03                      push    R3
(1)    1113 : 9A 03                      lda     *R3             A=queue_get
(1)    1115 : 28 01                      add     %queue_buf-queue_get, A
(1)    1117 : 48 00 03                   add     A, R3           R2:R3=&queue_buf[queue_get]
(1)    111A : 9A 03                      lda     *R3             remove element
(1)    111C : D9 03                      pop     R3              R2:R3=&queue_get
(1)    111E : B8                         push    A
(1)    111F : 9A 03                      lda     *R3
(1)    1121 : B3                         inc     A
(1)    1122 : 7A 02 03                   sub     %queue_get-queue_size, R3
(1)    1125 : 9D 03                      cmpa    *R3
(1)    1127 : E7 01                      jl      queue_remove_return
(1)    1129 : B5                         clr     A               wraparound
(1)    112A :                    queue_remove_return:
(1)    112A : 78 02 03                   add     %queue_get-queue_size, R3
(1)    112D : 9B 03                      sta     *R3             update queue_get
(1)    112F : B9                         pop     A
(1)    1130 : 07                         setc
(1)    1131 : 0A                         rets
       1132 :
       1132 :                    isr_int4:
       1132 : B8                         push    A
       1133 : D8 02                      push    R2
       1135 : D8 03                      push    R3
       1137 : A7 02 11 09                btjzp   %RXRDY_bm, SSTAT, isr_tx
       113B : 80 16                      movp    RXBUF, A
       113D : 88 20 00 03                movd    %rx_queue, R3
       1141 : 8E 10 D0                   call    @queue_add
       1144 :                    isr_tx:
       1144 : A7 01 11 0B                btjzp   %TXRDY_bm, SSTAT, isr_int4_exit
       1148 : 88 20 80 03                movd    %tx_queue, R3
       114C : 8E 11 05                   call    @queue_remove
       114F : E7 08                      jnc     isr_tx_empty
       1151 : 82 17                      movp    A, TXBUF        send character
       1153 :                    isr_int4_exit:
       1153 : D9 03                      pop     R3
       1155 : D9 02                      pop     R2
       1157 : B9                         pop     A
       1158 : 0B                         reti
       1159 :                    isr_tx_empty:
       1159 : D5 10                      clr     tx_enable       disable Tx
       115B : A2 04 11                   movp    %RXEN_bm, SCTL0
       115E : E0 F3                      jmp     isr_int4_exit
