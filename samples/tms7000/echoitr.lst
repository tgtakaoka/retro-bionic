          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     tms7000
          0 :                            include "tms7000.inc"
(1)       0 :                            *** -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            *** TMS7000
(1)       0 :                            *** Status Register
(1)       0 : =80                ST_CARRY:       equ  ?10000000  set to 1 if carry occurred
(1)       0 : =40                ST_NEGATIVE:    equ  ?01000000  set to 1 if result is negative
(1)       0 : =20                ST_ZERO:        equ  ?00100000  set to 1 if result is zero
(1)       0 : =10                ST_INT:         equ  ?00010000  if 1, interrupt is enabled
(1)       0 :                            *** Vector
(1)       0 : =FFF8              VEC_INT3:       equ     >FFF8   #INT3 interrupt
(1)       0 : =FFFC              VEC_INT1:       equ     >FFFC   #INT1 interrupt
(1)       0 : =FFFE              VEC_RESET:      equ     >FFFE   #RESET vector
(1)       0 :                            *** Trap Vector
(1)       0 : =FFFE              VEC_TRAP0:      equ     >FFFE
(1)       0 : =FFFC              VEC_TRAP1:      equ     >FFFC
(1)       0 : =FFFA              VEC_TRAP2:      equ     >FFFA
(1)       0 : =FFF8              VEC_TRAP3:      equ     >FFF8
(1)       0 : =FFF6              VEC_TRAP4:      equ     >FFF6
(1)       0 : =FFF4              VEC_TRAP5:      equ     >FFF4
(1)       0 : =FFF2              VEC_TRAP6:      equ     >FFF2
(1)       0 : =FFF0              VEC_TRAP7:      equ     >FFF0
(1)       0 : =FFEE              VEC_TRAP8:      equ     >FFEE
(1)       0 : =FFEC              VEC_TRAP9:      equ     >FFEC
(1)       0 : =FFEA              VEC_TRAP10:     equ     >FFEA
(1)       0 : =FFE8              VEC_TRAP11:     equ     >FFE8
(1)       0 : =FFE6              VEC_TRAP12:     equ     >FFE6
(1)       0 : =FFE4              VEC_TRAP13:     equ     >FFE4
(1)       0 : =FFE2              VEC_TRAP14:     equ     >FFE2
(1)       0 : =FFE0              VEC_TRAP15:     equ     >FFE0
(1)       0 : =FFDE              VEC_TRAP16:     equ     >FFDE
(1)       0 : =FFDC              VEC_TRAP17:     equ     >FFDC
(1)       0 : =FFDA              VEC_TRAP18:     equ     >FFDA
(1)       0 : =FFD8              VEC_TRAP19:     equ     >FFD8
(1)       0 : =FFD6              VEC_TRAP20:     equ     >FFD6
(1)       0 : =FFD4              VEC_TRAP21:     equ     >FFD4
(1)       0 : =FFD2              VEC_TRAP22:     equ     >FFD2
(1)       0 : =FFD0              VEC_TRAP23:     equ     >FFD0
(1)       0 :                            *** Internal Peripherals
(1)       0 : =100               IOCNT0: equ     >0100   I/O Control register
(1)       0 : =C0                MEMMODE_gm:     equ     ?11000000       Memory mode
(1)       0 :                            * 0=Single Chip, 1=Peripheral Expansion, 2=Full Expansion
(1)       0 : =20                INT3_F: equ     ?00100000       #INT3 flag
(1)       0 : =10                INT3_E: equ     ?00010000       #INT3 enable
(1)       0 : =2                 INT1_F: equ     ?00000010       #INT1 flag
(1)       0 : =1                 INT1_E: equ     ?00000001       #INT1 enable
(1)       0 :                            *** I/O Ports
(1)       0 : =104               APORT:  equ     >0104   Port A data
(1)       0 : =106               BPORT:  equ     >0106   Port B data
(1)       0 : =108               CPORT:  equ     >0108   Port C data
(1)       0 : =109               CDDR:   equ     >0109   Port C data direction register
(1)       0 : =10A               DPORT:  equ     >010A   Port D data
(1)       0 : =10B               DDDR:   equ     >010B   Port D data direction register
          0 :
          0 :                            *** MC6850 Asynchronous Communication Interface Adapter
          0 : =1F0               ACIA:   equ     >01F0
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            *** MC6850
(1)       0 :                            *** Asynchronous Communication Interface Adapter
(1)       0 : =1F0               ACIA_control:   equ     ACIA+0
(1)       0 : =1F0               ACIA_status:    equ     ACIA+0
(1)       0 : =1F1               ACIA_data:      equ     ACIA+1
(1)       0 :                            **  Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     ?11             Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     ?00000000       /1
(1)       0 : =0                 CDS_DIV16_gc:   equ     ?00000001       /16
(1)       0 : =0                 CDS_DIV64_gc:   equ     ?00000010       /64
(1)       0 : =3                 CDS_RESET_gc:   equ     ?00000011       Master Reset
(1)       0 :                            **  Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     ?00011100       Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     ?00000000       7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     ?00000100       7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     ?00001000       7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     ?00001100       7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     ?00010000       8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     ?00010100       8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     ?00011000       8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     ?00011100       8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            **  Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     ?01100000       Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     ?00000000       RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     ?00100000       RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     ?01000000       RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     ?01100000       RTS=Low,  Tx Interrupt Disabled
(1)       0 :                            *                               Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     ?10000000       Receive Interrupt Enable Bit mask
(1)       0 :                            *** Status register
(1)       0 : =1                 RDRF_bm:        equ     ?00000001       Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     ?00000010       Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     ?00000100       Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     ?00001000       Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     ?00010000       Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     ?00100000       Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     ?01000000       Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     ?10000000       Interrupt Request Flag
          0 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
          0 : =B4                RX_INT_TX_INT:  equ     WSB_8N1_gc|RIEB_bm|TCB_EI_gc
          0 :
       2000 :                            org     >2000
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       bss     rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       bss     tx_queue_size
       2100 :
       2100 :                            * Internal registers
         60 :                            org     >60
         60 :                            * TMS7000's SP is pre-increment/post-decrement
         60 :                    stack:
         60 :
       FFF8 :                            org     VEC_INT3
       FFF8 : 11 1A                      data    isr_int3
       FFFA :
       FFFE :                            org     VEC_RESET
       FFFE : 10 00                      data    initialize
      10000 :
       1000 :                            org     >1000
       1000 :                    initialize:
       1000 : 52 60                      mov     %stack, B
       1002 : 0D                         ldsp
       1003 : 88 20 00 03                movd    %rx_queue, R3
       1007 : 52 80                      mov     %rx_queue_size, B
       1009 : 8E 10 A2                   call    @queue_init
       100C : 88 20 80 03                movd    %tx_queue, R3
       1010 : 52 80                      mov     %tx_queue_size, B
       1012 : 8E 10 A2                   call    @queue_init
       1015 :                            ** initialize ACIA
       1015 : A2 03 F0                   movp    %CDS_RESET_gc, ACIA_control     Master reset
       1018 : A2 94 F0                   movp    %RX_INT_TX_NO, ACIA_control
       101B : A2 03 F2                   movp    %3, ACIA+2                      #INT3 for Rx/Tx
       101E : A2 32 00                   movp    %INT3_F|INT3_E|INT1_F, IOCNT0   enable #INT1 and #INT3
       1021 :
       1021 :                    loop:
       1021 : 8E 10 83                   call    @getchar
       1024 : E7 FB                      jnc     loop
       1026 : B0                         tsta
       1027 : E2 15                      jz      halt_to_system
       1029 : C0                         mov     A, B
       102A : 8E 10 92                   call    @putchar        echo
       102D : 8E 10 3F                   call    @putspace
       1030 : 8E 10 4C                   call    @put_hex8       print in hex
       1033 : 8E 10 3F                   call    @putspace
       1036 : 8E 10 68                   call    @put_bin8       print in binary
       1039 : 8E 10 43                   call    @newline
       103C : E0 E3                      jmp     loop
       103E :                    halt_to_system:
       103E : 01                         idle
       103F :
       103F :                            *** Put sapce
       103F :                            *** @clobber A
       103F :                    putspace:
       103F : 22 20                      mov     %' ', A
       1041 : E0 4F                      jmp     putchar
       1043 :
       1043 :                            *** Put newline
       1043 :                            *** @clobber A
       1043 :                    newline:
       1043 : 22 0D                      mov     %>0D, A
       1045 : 8E 10 92                   call    @putchar
       1048 : 22 0A                      mov     %>0A, A
       104A : E0 46                      jmp     putchar
       104C :
       104C :                            *** Print uint8_t in hex
       104C :                            *** @param B uint8_t value to be printed in hex.
       104C :                            *** @clobber A
       104C :                    put_hex8:
       104C : 22 30                      mov     %'0', A
       104E : 8E 10 92                   call    @putchar
       1051 : 22 78                      mov     %'x', A
       1053 : 8E 10 92                   call    @putchar
       1056 : 62                         mov     B, A
       1057 : B7                         swap    A
       1058 : 8E 10 5C                   call    @put_hex4
       105B : 62                         mov     B, A
       105C :                    put_hex4:
       105C : 23 0F                      and     %>0F, A
       105E : 2D 0A                      cmp     %10, A
       1060 : E7 02                      jl      put_hex8_dec
       1062 : 28 07                      add     %'A'-10-'0', A
       1064 :                    put_hex8_dec:
       1064 : 28 30                      add     %'0', A
       1066 : E0 2A                      jmp     putchar
       1068 :
       1068 :                            *** Print uint8_t in binary
       1068 :                            *** @param B uint8_t value to be printed in binary.
       1068 :                            *** @clobber A B
       1068 :                    put_bin8:
       1068 : 22 30                      mov     %'0', A
       106A : 8E 10 92                   call    @putchar
       106D : 22 62                      mov     %'b', A
       106F : 8E 10 92                   call    @putchar
       1072 : 8E 10 75                   call    @put_bin4
       1075 :                    put_bin4:
       1075 : 8E 10 78                   call    @put_bin2
       1078 :                    put_bin2:
       1078 : 8E 10 7B                   call    @put_bin1
       107B :                    put_bin1:
       107B : 22 30                      mov     %'0', A
       107D : CF                         rlc     B
       107E : E7 12                      jnc     putchar         ; MSB=0
       1080 : B3                         inc     A               ; MSB=1
       1081 : E0 0F                      jmp     putchar
       1083 :
       1083 :                            *** Get character
       1083 :                            *** @return A
       1083 :                            *** @return ST.C 0 if no character
       1083 :                            *** @clobber R2:R3
       1083 :                    getchar:
       1083 : 88 20 00 03                movd    %rx_queue, R3
       1087 : 06                         dint
       1088 : 8E 10 ED                   call    @queue_remove
       108B : E7 02                      jnc     getchar_empty
       108D : 05                         eint                    ST.C=1
       108E : 0A                         rets
       108F :                    getchar_empty:
       108F : 05                         eint                    ST.C=1
       1090 : B0                         clrc
       1091 : 0A                         rets
       1092 :
       1092 :                            *** Put character
       1092 :                            *** @param A
       1092 :                            *** @clobber R2:R3
       1092 :                    putchar:
       1092 : 05                         eint
       1093 : 88 20 80 03                movd    %tx_queue, R3
       1097 : 06                         dint
       1098 : 8E 10 B8                   call    @queue_add
       109B : E7 F5                      jnc     putchar
       109D : 05                         eint
       109E : A2 B4 F0                   movp    %RX_INT_TX_INT, ACIA_control    enable Tx interrupt
       10A1 : 0A                         rets
       10A2 :
       10A2 :                            include "queue.inc"
(1)    10A2 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    10A2 :                            *** [queue] queue structure
(1)    10A2 : =0                 queue_len:      equ     0       queue length
(1)    10A2 : =1                 queue_size:     equ     1       buffer size
(1)    10A2 : =2                 queue_put:      equ     2       queue put index
(1)    10A2 : =3                 queue_get:      equ     3       queue get index
(1)    10A2 : =4                 queue_buf:      equ     4       buffer start offset
(1)    10A2 :
(1)    10A2 :                            *** [queue] Initialize queue
(1)    10A2 :                            *** @param R2:R3 queue work space pointer
(1)    10A2 :                            *** @param B queue work space size
(1)    10A2 :                            *** @clobber A B R2:R3
(1)    10A2 :                    queue_init:
(1)    10A2 : B5                         clr     A
(1)    10A3 : 9B 03                      sta     *R3             queue_len
(1)    10A5 : 62                         mov     B, A
(1)    10A6 : 2A 04                      sub     %queue_buf, A
(1)    10A8 : D3 03                      inc     R3
(1)    10AA : 9B 03                      sta     *R3             queue_size
(1)    10AC : 5A 02                      sub     %queue_put, B   offset queue_len and queue_size
(1)    10AE : D3 03                      inc     R3              R2:R3=&queue_put
(1)    10B0 : B5                         clr     A
(1)    10B1 :                    queue_init_loop:
(1)    10B1 : 9B 03                      sta     *R3
(1)    10B3 : D3 03                      inc     R3
(1)    10B5 : CA FA                      djnz    B, queue_init_loop
(1)    10B7 : 0A                         rets
(1)    10B8 :
(1)    10B8 :                            *** [queue] Add an element to queue
(1)    10B8 :                            *** @param R2:R3 queue work space pointer
(1)    10B8 :                            *** @param A an element
(1)    10B8 :                            *** @return ST.C 0 if queue is full
(1)    10B8 :                            *** @clobber R2:R3
(1)    10B8 :                    queue_add:
(1)    10B8 : B8                         push    A
(1)    10B9 : 9A 03                      lda     *R3             A=queue_len
(1)    10BB : D3 03                      inc     R3              R2:R3=&queue_size
(1)    10BD : 9D 03                      cmpa    *R3
(1)    10BF : E7 02                      jl      queue_add_element
(1)    10C1 : B9                         pop     A               ST.C=0
(1)    10C2 : 0A                         rets
(1)    10C3 :                    queue_add_element:
(1)    10C3 : B3                         inc     A
(1)    10C4 : D2 03                      dec     R3
(1)    10C6 : 9B 03                      sta     *R3             queue_len++
(1)    10C8 : B9                         pop     A
(1)    10C9 : 78 02 03                   add     %queue_put-queue_len, R3        R2:R3=&queue_put
(1)    10CC : D8 03                      push    R3
(1)    10CE : B8                         push    A
(1)    10CF : 9A 03                      lda     *R3             A=queue_put
(1)    10D1 : 28 02                      add     %queue_buf-queue_put, A
(1)    10D3 : 48 00 03                   add     A, R3           R2:R3=&queue[queue_put]
(1)    10D6 : B9                         pop     A
(1)    10D7 : 9B 03                      sta     *R3             store element
(1)    10D9 : D9 03                      pop     R3              R2:R3=&queue_put
(1)    10DB : B8                         push    A
(1)    10DC : 9A 03                      lda     *R3
(1)    10DE : B3                         inc     A
(1)    10DF : D2 03                      dec     R3              R2:R3=&queue_size
(1)    10E1 : 9D 03                      cmpa    *R3
(1)    10E3 : E7 01                      jl      queue_add_return
(1)    10E5 : B5                         clr     A               wraparound
(1)    10E6 :                    queue_add_return:
(1)    10E6 : D3 03                      inc     R3              R2:R3=&queue_put
(1)    10E8 : 9B 03                      sta     *R3             update queue_put
(1)    10EA : B9                         pop     A
(1)    10EB : 07                         setc                    ST.C=1
(1)    10EC : 0A                         rets
(1)    10ED :
(1)    10ED :                            *** [queue] Remove an element from queue
(1)    10ED :                            *** @param R2:R3 queue work space pointer
(1)    10ED :                            *** @return A an element
(1)    10ED :                            *** @return ST.C 0 if queue is empty
(1)    10ED :                    queue_remove:
(1)    10ED : 9A 03                      lda     *R3             A=queue_len
(1)    10EF : E6 02                      jnz     queue_remove_elem
(1)    10F1 : B0                         clrc
(1)    10F2 : 0A                         rets
(1)    10F3 :                    queue_remove_elem:
(1)    10F3 : B2                         dec     A
(1)    10F4 : 9B 03                      sta     *R3             queue_len--
(1)    10F6 : 78 03 03                   add     %queue_get-queue_len, R3        R2:R3=&queue_get
(1)    10F9 : D8 03                      push    R3
(1)    10FB : 9A 03                      lda     *R3             A=queue_get
(1)    10FD : 28 01                      add     %queue_buf-queue_get, A
(1)    10FF : 48 00 03                   add     A, R3           R2:R3=&queue_buf[queue_get]
(1)    1102 : 9A 03                      lda     *R3             remove element
(1)    1104 : D9 03                      pop     R3              R2:R3=&queue_get
(1)    1106 : B8                         push    A
(1)    1107 : 9A 03                      lda     *R3
(1)    1109 : B3                         inc     A
(1)    110A : 7A 02 03                   sub     %queue_get-queue_size, R3
(1)    110D : 9D 03                      cmpa    *R3
(1)    110F : E7 01                      jl      queue_remove_return
(1)    1111 : B5                         clr     A               wraparound
(1)    1112 :                    queue_remove_return:
(1)    1112 : 78 02 03                   add     %queue_get-queue_size, R3
(1)    1115 : 9B 03                      sta     *R3             update queue_get
(1)    1117 : B9                         pop     A
(1)    1118 : 07                         setc
(1)    1119 : 0A                         rets
       111A :
       111A :                    isr_int3:
       111A : A7 80 F0 2B                btjzp   %IRQF_bm, ACIA_status, isr_int3_return
       111E : B8                         push    A
       111F : D8 02                      push    R2
       1121 : D8 03                      push    R3
       1123 : A7 01 F0 09                btjzp   %RDRF_bm, ACIA_status, isr_tx
       1127 : 80 F1                      movp    ACIA_data, A
       1129 : 88 20 00 03                movd    %rx_queue, R3
       112D : 8E 10 B8                   call    @queue_add
       1130 :                    isr_tx:
       1130 : A7 02 F0 10                btjzp   %TDRE_bm, ACIA_status, isr_int3_exit
       1134 : 88 20 80 03                movd    %tx_queue, R3
       1138 : 8E 10 ED                   call    @queue_remove
       113B : E7 04                      jnc     isr_tx_empty
       113D : 82 F1                      movp    A, ACIA_data    send character
       113F : E0 03                      jmp     isr_int3_exit
       1141 :                    isr_tx_empty:
       1141 : A2 94 F0                   movp    %RX_INT_TX_NO, ACIA_control     disable Tx interrupt
       1144 :                    isr_int3_exit:
       1144 : D9 03                      pop     R3
       1146 : D9 02                      pop     R2
       1148 : B9                         pop     A
       1149 :                    isr_int3_return:
       1149 : 0B                         reti
