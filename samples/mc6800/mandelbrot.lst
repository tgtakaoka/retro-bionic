          0 :                            cpu     6800
          0 :                            include "mc6800.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6800/MC6802/MC6808
(1)       0 :                    ;;; Condition Code Register (CC)
(1)       0 : =1                 CC_CARRY      equ  %00000001   ; set to 1 if carry occurred
(1)       0 : =2                 CC_OVERFLOW   equ  %00000010   ; set to 1 if overflow occurred
(1)       0 : =4                 CC_ZERO       equ  %00000100   ; set to 1 if result is zero
(1)       0 : =8                 CC_NEGATIVE   equ  %00001000   ; set to 1 if result is negative
(1)       0 : =10                CC_IRQ        equ  %00010000   ; if 1, IRQ is masked
(1)       0 : =20                CC_HALF_CARRY equ  %00100000   ; if 1, decimal carry from least digit occurred
(1)       0 :
(1)       0 :                    ;;; Vector
(1)       0 : =FFF8              VEC_IRQ:        equ     $FFF8  ; $FFF8: Maskable Interrupt Request
(1)       0 : =FFFA              VEC_SWI:        equ     $FFFA  ; $FFFA: Software Interrupt
(1)       0 : =FFFC              VEC_NMI:        equ     $FFFC  ; $FFFC: Non Maskable Interrupt
(1)       0 : =FFFE              VEC_RESET:      equ     $FFFE  ; $FFFE: Reset
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA:   equ     $DF00
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     %11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     %00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     %00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     %00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     %00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     %00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     %00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     %00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     %00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     %00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     %00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     %00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     %00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     %00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     %01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     %00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     %00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     %01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     %01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     %10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     %00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     %00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     %00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     %00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     %00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     %00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     %01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     %10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data:      equ     ACIA+1          ; Data register
          0 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
          0 : =B4                RX_INT_TX_INT:  equ     WSB_8N1_gc|RIEB_bm|TCB_EI_gc
          0 :
         40 :                            org     $40
         40 :                    ;;; Working space for mandelbrot.inc
         40 : =32                F:      equ     50
         40 :                    vC:     rmb     2
         42 :                    vD:     rmb     2
         44 :                    vA:     rmb     2
         46 :                    vB:     rmb     2
         48 :                    vS:     rmb     2
         4A :                    vP:     rmb     2
         4C :                    vQ:     rmb     2
         4E :                    vT:     rmb     2
         50 :                    vY:     rmb     1
         51 :                    vX:     rmb     1
         52 :                    vI:     rmb     1
         53 :
         53 :                    ;;; Working space for arith.inc
         53 :                    R0:
         53 :                    R0H:    rmb     1
         54 :                    R0L:    rmb     1
         55 :                    R1:
         55 :                    R1H:    rmb     1
         56 :                    R1L:    rmb     1
         57 :                    R2:
         57 :                    R2H:    rmb     1
         58 :                    R2L:    rmb     1
         59 :                    sign:   rmb     1
         5A :
       2000 :                            org     $2000
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       rmb     rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       rmb     tx_queue_size
       2100 :
       1000 :                            org     $1000
       1000 : =FFF               stack:  equ     *-1             ; MC6800's SP is post-decrement/pre-increment
       1000 :
       FFF2 :                            org     $FFF2           ; MC68HC11 IRQ
       FFF2 : 04 43                      fdb     isr_irq
       FFF4 :
       FFF6 :                            org     $FFF6           ; MC68HC11 SWI
       FFF6 : FF F6                      fdb     $FFF6
       FFF8 :
       FFF8 :                            org     VEC_IRQ
       FFF8 : 04 43                      fdb     isr_irq
       FFFA :
       FFFA :                            org     VEC_SWI
       FFFA : FF FA                      fdb     VEC_SWI         ; for halt to system
       FFFC :
       FFFE :                            org     VEC_RESET
       FFFE : 01 00                      fdb     initialize
      10000 :
        100 :                            org     $0100
        100 :                    initialize:
        100 : 8E 0F FF                   lds     #stack
        103 : CE 20 00                   ldx     #rx_queue
        106 : C6 80                      ldab    #rx_queue_size
        108 : BD 03 D2                   jsr     queue_init
        10B : CE 20 80                   ldx     #tx_queue
        10E : C6 80                      ldab    #tx_queue_size
        110 : BD 03 D2                   jsr     queue_init
        113 :                            ;; initialize ACIA
        113 : 86 03                      ldaa    #CDS_RESET_gc   ; master reset
        115 : B7 DF 00                   staa    ACIA_control
        118 : 86 94                      ldaa    #RX_INT_TX_NO
        11A : B7 DF 00                   staa    ACIA_control
        11D : 0E                         cli                     ; enable IRQ
        11E :
        11E :                    loop:
        11E : BD 01 73                   jsr     mandelbrot
        121 : BD 01 33                   jsr     newline
        124 : 20 F8                      bra     loop
        126 :
        126 :                    ;;; Get character
        126 :                    ;;; @return A
        126 :                    ;;; @return CC.C 0 if no character
        126 :                    ;;; @clobber X
        126 :                    getchar:
        126 : 0F                         sei                     ; disable IRQ
        127 : CE 20 00                   ldx     #rx_queue
        12A : BD 04 22                   jsr     queue_remove
        12D : 0E                         cli                     ; enable IRQ
        12E : 39                         rts
        12F :
        12F :                    ;;; Put character
        12F :                    ;;; @param A
        12F :                    ;;; @clobber R2
        12F :                    putspace:
        12F : 86 20                      ldaa    #' '
        131 : 20 06                      bra     putchar
        133 :                    newline:
        133 : 86 0D                      ldaa    #$0D
        135 : 8D 02                      bsr     putchar
        137 : 86 0A                      ldaa    #$0A
        139 :                    putchar:
        139 : DF 57                      stx     R2
        13B : 36                         psha
        13C : CE 20 80                   ldx     #tx_queue
        13F :                    putchar_retry:
        13F : 0F                         sei                     ; disable IRQ
        140 : BD 03 FF                   jsr     queue_add
        143 : 0E                         cli                     ; enable IRQ
        144 : 24 F9                      bcc     putchar_retry   ; branch if queue is full
        146 : 86 B4                      ldaa    #RX_INT_TX_INT  ; enable Tx interrupt
        148 : B7 DF 00                   staa    ACIA_control
        14B : 32                         pula
        14C : DE 57                      ldx     R2
        14E : 39                         rts
        14F :
        14F :                            include "mandelbrot.inc"
(1)     14F :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     14F :                            cpu     6800
(1)     14F :
(1)     14F :                    ;;; Print variable: "A=variable "
(1)     14F :                    ;;; @param X variable
(1)     14F :                    ;;; @param A variable letter
(1)     14F :                    ;;; @clobber R0 R2
(1)     14F :                    print:
(1)     14F : DF 53                      stx     R0
(1)     151 : BD 01 39                   jsr     putchar         ; print variable letter
(1)     154 : 86 3D                      ldaa    #'='
(1)     156 : BD 01 39                   jsr     putchar         ; '='
(1)     159 : 96 53                      ldaa    R0H
(1)     15B : D6 54                      ldab    R0L
(1)     15D : BD 02 86                   jsr     print_int16
(1)     160 : 7E 01 2F                   jmp     putspace
(1)     163 :
(1)     163 :                    ;;; Sign extend A into X
(1)     163 :                    ;;; @param A
(1)     163 :                    ;;; @return X sign extended A
(1)     163 :                    ;;; @clobber R0
(1)     163 :                    sex_A:
(1)     163 : 5F                         clrb
(1)     164 : 47                         asra
(1)     165 : 49                         rola                    ; C=msb(A)
(1)     166 : 97 54                      staa    R0L
(1)     168 : D7 53                      stab    R0H
(1)     16A : DE 53                      ldx     R0
(1)     16C : 39                         rts
(1)     16D :
(1)     16D :                    ;;; Sign extend B into D
(1)     16D :                    ;;; @param B
(1)     16D :                    ;;; @return D sign extended B
(1)     16D :                    sex_B:
(1)     16D : 4F                         clra
(1)     16E : 57                         asrb
(1)     16F : 59                         rolb                    ; C=msb(B)
(1)     170 : 82 00                      sbca    #0
(1)     172 : 39                         rts
(1)     173 :
(1)     173 :                    mandelbrot:
(1)     173 : 86 F4                      ldaa    #-12
(1)     175 : 97 50                      staa    vY              ; Y=-12
(1)     177 :                    loop_y:
(1)     177 : 86 CF                      ldaa    #-49
(1)     179 : 97 51                      staa    vX              ; X=-49
(1)     17B :                    loop_x:
(1)     17B : D6 51                      ldab    vX
(1)     17D : 8D EE                      bsr     sex_B
(1)     17F : CE 00 E5                   ldx     #229
(1)     182 : BD 03 10                   jsr     mul16           ; X*229
(1)     185 : CE 00 64                   ldx     #100
(1)     188 : BD 03 94                   jsr     div16           ; X*229/100
(1)     18B : DF 40                      stx     vC              ; C=X*229/100
(1)     18D : DF 44                      stx     vA              ; A=C
(1)     18F : D6 50                      ldab    vY
(1)     191 : 8D DA                      bsr     sex_B
(1)     193 : CE 01 A0                   ldx     #416
(1)     196 : BD 03 10                   jsr     mul16           ; Y*416
(1)     199 : CE 00 64                   ldx     #100
(1)     19C : BD 03 94                   jsr     div16           ; Y*416/100
(1)     19F : DF 42                      stx     vD              ; D=Y*416/100
(1)     1A1 : DF 46                      stx     vB              ; B=D
(1)     1A3 : 7F 00 52                   clr     vI              ; I=0
(1)     1A6 :
(1)     1A6 :                            ;; ldaa    vY              ; Y
(1)     1A6 :                            ;; jsr     sex_A
(1)     1A6 :                            ;; ldaa    #'Y'
(1)     1A6 :                            ;; jsr     print
(1)     1A6 :                            ;; ldaa    vX              ; X
(1)     1A6 :                            ;; jsr     sex_A
(1)     1A6 :                            ;; ldaa    #'X'
(1)     1A6 :                            ;; jsr     print
(1)     1A6 :                            ;; ldx     vC              ; C
(1)     1A6 :                            ;; ldaa    #'C'
(1)     1A6 :                            ;; jsr     print
(1)     1A6 :                            ;; ldx     vD              ; D
(1)     1A6 :                            ;; ldaa    #'D'
(1)     1A6 :                            ;; jsr     print
(1)     1A6 :                            ;; jsr     newline
(1)     1A6 :
(1)     1A6 :                    loop_i:
(1)     1A6 : 96 46                      ldaa    vB
(1)     1A8 : D6 47                      ldab    vB+1
(1)     1AA : CE 00 32                   ldx     #F
(1)     1AD : BD 03 94                   jsr     div16           ; B/F
(1)     1B0 : DF 4C                      stx     vQ              ; Q=B/F
(1)     1B2 : CE FF CE                   ldx     #-F
(1)     1B5 : BD 03 10                   jsr     mul16           ; -Q*F
(1)     1B8 : DB 47                      addb    vB+1
(1)     1BA : 99 46                      adca    vB              ; B-Q*F
(1)     1BC : 97 48                      staa    vS              ; S=B-Q*F
(1)     1BE : D7 49                      stab    vS+1
(1)     1C0 : 96 44                      ldaa    vA
(1)     1C2 : D6 45                      ldab    vA+1
(1)     1C4 : DE 44                      ldx     vA
(1)     1C6 : BD 03 10                   jsr     mul16           ; A*A
(1)     1C9 : 37                         pshb
(1)     1CA : 36                         psha                    ; push A*A
(1)     1CB : 96 46                      ldaa    vB
(1)     1CD : D6 47                      ldab    vB+1
(1)     1CF : DE 46                      ldx     vB
(1)     1D1 : BD 03 10                   jsr     mul16           ; B*B
(1)     1D4 : 32                         pula
(1)     1D5 : 33                         pulb                    ; pull A*A
(1)     1D6 : D0 54                      subb    R0L
(1)     1D8 : 92 53                      sbca    R0H             ; A*A-B*B
(1)     1DA : CE 00 32                   ldx     #F
(1)     1DD : BD 03 94                   jsr     div16           ; (A*A-B*B)/F
(1)     1E0 : DB 41                      addb    vC+1
(1)     1E2 : 99 40                      adca    vC              ; (A*A-B*B)/F+C
(1)     1E4 : 37                         pshb
(1)     1E5 : 36                         psha                    ; push (A*A-B*B)/F+C
(1)     1E6 : 96 44                      ldaa    vA
(1)     1E8 : D6 45                      ldab    vA+1
(1)     1EA : DE 4C                      ldx     vQ
(1)     1EC : BD 03 10                   jsr     mul16           ; A*Q
(1)     1EF : 37                         pshb
(1)     1F0 : 36                         psha                    ; push A*Q
(1)     1F1 : 96 44                      ldaa    vA
(1)     1F3 : D6 45                      ldab    vA+1
(1)     1F5 : DE 48                      ldx     vS
(1)     1F7 : BD 03 10                   jsr     mul16           ; A*S
(1)     1FA : CE 00 32                   ldx     #F
(1)     1FD : BD 03 94                   jsr     div16           ; A*S/F
(1)     200 : DF 57                      stx     R2              ; R2=A*S/F
(1)     202 : 32                         pula
(1)     203 : 33                         pulb                    ; pull A*Q
(1)     204 : DB 58                      addb    R2L
(1)     206 : 99 57                      adca    R2H             ; A*Q+A*S/F
(1)     208 : 58                         lslb
(1)     209 : 49                         rola                    ; 2*(A*Q+A*S/F)
(1)     20A : DB 43                      addb    vD+1
(1)     20C : 99 42                      adca    vD              ; 2*(A*Q+A*S/F)+D
(1)     20E : 97 46                      staa    vB              ; B=2*(A*Q+A*S/F)+D
(1)     210 : D7 47                      stab    vB+1
(1)     212 : 32                         pula
(1)     213 : 33                         pulb                    ; pull (A*A-B*B)/F+C
(1)     214 : 97 44                      staa    vA              ; A=(A*A-B*B)/F+C
(1)     216 : D7 45                      stab    vA+1
(1)     218 : CE 00 32                   ldx     #F
(1)     21B : BD 03 94                   jsr     div16           ; A/F
(1)     21E : DF 4A                      stx     vP              ; P=A/F
(1)     220 : BD 03 10                   jsr     mul16           ; P*P
(1)     223 : DF 4E                      stx     vT              ; T=P*P
(1)     225 : 96 46                      ldaa    vB
(1)     227 : D6 47                      ldab    vB+1
(1)     229 : CE 00 32                   ldx     #F
(1)     22C : BD 03 94                   jsr     div16           ; B/F
(1)     22F : DF 4C                      stx     vQ              ; Q=B/F
(1)     231 : BD 03 10                   jsr     mul16           ; Q*Q
(1)     234 : DB 4F                      addb    vT+1
(1)     236 : 99 4E                      adca    vT
(1)     238 : 97 4E                      staa    vT              ; T=P*P+Q*Q
(1)     23A : D7 4F                      stab    vT+1
(1)     23C :
(1)     23C :                            ;; jsr     putspace
(1)     23C :                            ;; ldaa    vI              ; I
(1)     23C :                            ;; jsr     sex_A
(1)     23C :                            ;; ldaa    #'I'
(1)     23C :                            ;; jsr     print
(1)     23C :                            ;; ldx     vA              ; A
(1)     23C :                            ;; ldaa    #'A'
(1)     23C :                            ;; jsr     print
(1)     23C :                            ;; ldx     vB              ; B
(1)     23C :                            ;; ldaa    #'B'
(1)     23C :                            ;; jsr     print
(1)     23C :                            ;; ldx     vP              ; P
(1)     23C :                            ;; ldaa    #'P'
(1)     23C :                            ;; jsr     print
(1)     23C :                            ;; ldx     vQ              ; Q
(1)     23C :                            ;; ldaa    #'Q'
(1)     23C :                            ;; jsr     print
(1)     23C :                            ;; ldx     vT              ; T
(1)     23C :                            ;; ldaa    #'T'
(1)     23C :                            ;; jsr     print
(1)     23C :                            ;; jsr     newline
(1)     23C :
(1)     23C : 96 4E                      ldaa    vT
(1)     23E : 26 16                      bne     print_i         ; if T>=256
(1)     240 : 96 4F                      ldaa    vT+1
(1)     242 : 81 04                      cmpa    #4
(1)     244 : 22 10                      bhi     print_i         ; if 4<T
(1)     246 : 7C 00 52                   inc     vI              ; I+=1
(1)     249 : 96 52                      ldaa    vI
(1)     24B : 81 10                      cmpa    #16
(1)     24D : 2A 03                      bpl     print_space
(1)     24F : 7E 01 A6                   jmp     loop_i          ; if I<16
(1)     252 :                    print_space:
(1)     252 : 86 20                      ldaa    #' '
(1)     254 : 20 08                      bra     print_char
(1)     256 :                    print_i:
(1)     256 : 96 52                      ldaa    vI
(1)     258 : 8B 90                      adda    #$90            ; $90-$9F
(1)     25A : 19                         daa                     ; $90-$09, $00-$05(C=1)
(1)     25B : 89 40                      adca    #$40            ; $D0-$D9, $41-$46
(1)     25D : 19                         daa                     ; $30-$39, $41-$46
(1)     25E :                    print_char:
(1)     25E :                            ;; psha
(1)     25E :                            ;; ldaa    #'@'
(1)     25E :                            ;; jsr     putchar
(1)     25E :                            ;; ldaa    #'='
(1)     25E :                            ;; jsr     putchar
(1)     25E :                            ;; pula
(1)     25E :                            ;; jsr     putchar
(1)     25E :                            ;; jsr     newline
(1)     25E :
(1)     25E : BD 01 39                   jsr     putchar
(1)     261 : BD 01 26                   jsr     getchar
(1)     264 : 24 04                      bcc     next_x
(1)     266 : 4D                         tsta
(1)     267 : 26 01                      bne     next_x
(1)     269 : 3F                         swi                     ; halt to system
(1)     26A :                    next_x:
(1)     26A : 7C 00 51                   inc     vX              ; X+=1
(1)     26D : 96 51                      ldaa    vX
(1)     26F : 81 1E                      cmpa    #30
(1)     271 : 2A 03                      bpl     next_y
(1)     273 : 7E 01 7B                   jmp     loop_x          ; if X<30
(1)     276 :                    next_y:
(1)     276 : BD 01 33                   jsr     newline
(1)     279 : 7C 00 50                   inc     vY              ; Y+=1
(1)     27C : 96 50                      ldaa    vY
(1)     27E : 81 0D                      cmpa    #13
(1)     280 : 2A 03                      bpl     mandelbrot_end
(1)     282 : 7E 01 77                   jmp     loop_y          ; if Y<13
(1)     285 :                    mandelbrot_end:
(1)     285 : 39                         rts
        286 :                            include "arith.inc"
(1)     286 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     286 :                            cpu     6800
(1)     286 :
(1)     286 :                    ;;; Print signed 16-bit integer as decimal
(1)     286 :                    ;;; @param D value
(1)     286 :                    ;;; @clobber D X R0 R1 R2
(1)     286 :                    print_int16:
(1)     286 : D7 54                      stab    R0L
(1)     288 : 97 53                      staa    R0H
(1)     28A : 2A 0F                      bpl     print_uint16
(1)     28C : 86 2D                      ldaa    #'-'
(1)     28E : BD 01 39                   jsr     putchar
(1)     291 : 96 53                      ldaa    R0H
(1)     293 : 40                         nega
(1)     294 : 50                         negb
(1)     295 : 82 00                      sbca    #0
(1)     297 : 97 53                      staa    R0H
(1)     299 : D7 54                      stab    R0L
(1)     29B :                    ;;; Print unsigned 16-bit integer as decimal
(1)     29B :                    ;;; @param R0 value
(1)     29B :                    ;;; @clobber A X R0 R1 R2
(1)     29B :                    print_uint16:
(1)     29B : DE 53                      ldx     R0
(1)     29D : 27 14                      beq     print_uint16_zero
(1)     29F :                    print_uint16_loop:
(1)     29F : DF 55                      stx     R1
(1)     2A1 : 27 15                      beq     print_uint16_end ; branch if value == 0
(1)     2A3 : CE 00 0A                   ldx     #10
(1)     2A6 : DF 57                      stx     R2
(1)     2A8 : BD 03 4C                   jsr     udiv16          ; R0=value/10
(1)     2AB : D6 56                      ldab    R1L
(1)     2AD : 37                         pshb                    ; push remainder
(1)     2AE : DE 53                      ldx     R0
(1)     2B0 : 8D ED                      bsr     print_uint16_loop
(1)     2B2 : 32                         pula
(1)     2B3 :                    print_uint16_zero:
(1)     2B3 : 8A 30                      oraa    #'0'
(1)     2B5 : 7E 01 39                   jmp     putchar
(1)     2B8 :                    print_uint16_end:
(1)     2B8 : 39                         rts   
(1)     2B9 :
(1)     2B9 :                    ;;; Signed compare R0=sign(R1-R2)
(1)     2B9 :                    ;;; @return R0=A=0;  BEQ (minuend == subtrahend)
(1)     2B9 :                    ;;;         R0=A=1;  BPL (minuend > subtrahend)
(1)     2B9 :                    ;;;         R0=A=-1; BMI (minuend < subtrahend)
(1)     2B9 :                    ;;; @clobber A
(1)     2B9 :                    cmp16:
(1)     2B9 : 96 56                      ldaa    R1L
(1)     2BB : 90 58                      suba    R2L
(1)     2BD : 97 54                      staa    R0L
(1)     2BF : 96 55                      ldaa    R1H
(1)     2C1 : 92 57                      sbca    R2H
(1)     2C3 : 97 53                      staa    R0H
(1)     2C5 : 9A 54                      oraa    R0L
(1)     2C7 : 27 1B                      beq     cmp16_end       ; return with R0=0
(1)     2C9 : 96 53                      ldaa    R0H
(1)     2CB : 98 55                      eora    R1H
(1)     2CD : 97 54                      staa    R0L             ; R0L=(minuend-subtrahend)^minuend
(1)     2CF : 96 55                      ldaa    R1H
(1)     2D1 : 98 57                      eora    R2H             ; minuend^subtrahend
(1)     2D3 : 94 54                      anda    R0L             ; overflow flag
(1)     2D5 : 98 53                      eora    R0H
(1)     2D7 : 2B 07                      bmi     cmp16_lt
(1)     2D9 :                    cmp16_gt:
(1)     2D9 : 7F 00 53                   clr     R0H
(1)     2DC : 86 01                      ldaa    #1
(1)     2DE : 20 04                      bra     cmp16_end
(1)     2E0 :                    cmp16_lt:
(1)     2E0 : 86 FF                      ldaa    #-1
(1)     2E2 : 97 53                      staa    R0H
(1)     2E4 :                    cmp16_end:
(1)     2E4 : 97 54                      staa    R0L
(1)     2E6 : 39                         rts
(1)     2E7 :
(1)     2E7 :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)     2E7 :                    ;;; @param R1 multiplicand
(1)     2E7 :                    ;;; @param R2 multiplier
(1)     2E7 :                    ;;; @return R0 result
(1)     2E7 :                    ;;; @clobber R0 R1 R2
(1)     2E7 :                    umul16:
(1)     2E7 : 7F 00 53                   clr     R0H
(1)     2EA : 7F 00 54                   clr     R0L
(1)     2ED : 20 1A                      bra     umul16_check
(1)     2EF :                    umul16_loop:
(1)     2EF : 74 00 57                   lsr     R2H
(1)     2F2 : 76 00 58                   ror     R2L             ; multiplier >>=1
(1)     2F5 : 24 0C                      bcc     umul16_next     ; if lsb(multiplier) == 0
(1)     2F7 : 96 56                      ldaa    R1L
(1)     2F9 : 9B 54                      adda    R0L
(1)     2FB : 97 54                      staa    R0L
(1)     2FD : 96 55                      ldaa    R1H
(1)     2FF : 99 53                      adca    R0H
(1)     301 : 97 53                      staa    R0H             ; result += multiplicand
(1)     303 :                    umul16_next:
(1)     303 : 78 00 56                   lsl     R1L
(1)     306 : 79 00 55                   rol     R1H             ; multiplicand <<= 1
(1)     309 :                    umul16_check:
(1)     309 : 96 57                      ldaa    R2H
(1)     30B : 9A 58                      oraa    R2L
(1)     30D : 26 E0                      bne     umul16_loop     ; while multiplier != 0
(1)     30F :                    umul16_end:
(1)     30F : 39                         rts
(1)     310 :
(1)     310 :                    ;;; Multiply; result = multiplicand * multiplier
(1)     310 :                    ;;; @param D multiplicand
(1)     310 :                    ;;; @param X multiplier
(1)     310 :                    ;;; @return D result
(1)     310 :                    ;;; @return X result
(1)     310 :                    ;;; @clobber R0 R1 R2
(1)     310 :                    mul16:
(1)     310 : 97 55                      staa    R1H
(1)     312 : D7 56                      stab    R1L
(1)     314 : DF 57                      stx     R2
(1)     316 : 98 57                      eora    R2H
(1)     318 : 97 59                      staa    sign            ; save hi(multiplicand^multiplier)
(1)     31A : D6 58                      ldab    R2L
(1)     31C : 96 57                      ldaa    R2H             ; A=hi(multiplier)
(1)     31E : 2A 04                      bpl     mul16_multiplicand
(1)     320 : 40                         nega
(1)     321 : 50                         negb
(1)     322 : 82 00                      sbca    #0              ; negate multiplier
(1)     324 :                    mul16_multiplicand:
(1)     324 : 97 57                      staa    R2H
(1)     326 : D7 58                      stab    R2L
(1)     328 : D6 56                      ldab    R1L
(1)     32A : 96 55                      ldaa    R1H             ; A=hi(multiplicand)
(1)     32C : 2A 04                      bpl     mul16_multiply
(1)     32E : 40                         nega
(1)     32F : 50                         negb
(1)     330 : 82 00                      sbca    #0              ; negate multiplicand
(1)     332 :                    mul16_multiply:
(1)     332 : 97 55                      staa    R1H
(1)     334 : D7 56                      stab    R1L
(1)     336 : 8D AF                      bsr     umul16          ; R0=result
(1)     338 : 96 53                      ldaa    R0H
(1)     33A : D6 54                      ldab    R0L
(1)     33C : 7D 00 59                   tst     sign            ; A=(multiplicand^multiplier)
(1)     33F : 2A 04                      bpl     mul16_end
(1)     341 : 40                         nega
(1)     342 : 50                         negb
(1)     343 : 82 00                      sbca    #0               ; negate result
(1)     345 :                    mul16_end:
(1)     345 : 97 53                      staa    R0H
(1)     347 : D7 54                      stab    R0L
(1)     349 : DE 53                      ldx     R0
(1)     34B : 39                         rts
(1)     34C :
(1)     34C :                    ;;; Unsigned division: dividend / divisor = quotient ... remainder
(1)     34C :                    ;;; @praram R1 dividend
(1)     34C :                    ;;; @praram R2 divisor
(1)     34C :                    ;;; @return R0 quotient
(1)     34C :                    ;;; @return R1 remainder
(1)     34C :                    ;;; @clobber R2
(1)     34C :                    udiv16:
(1)     34C : 96 57                      ldaa    R2H
(1)     34E : 9A 58                      oraa    R2L
(1)     350 : 27 3D                      beq     udiv16_end      ; branch if R2==0
(1)     352 : 96 57                      ldaa    R2H             ; A:B=divisor
(1)     354 : D6 58                      ldab    R2L
(1)     356 : CE 00 01                   ldx     #1              ; X=bits
(1)     359 : 20 03                      bra     udiv16_prep
(1)     35B :                    udiv16_prep_loop:
(1)     35B : 58                         lslb
(1)     35C : 49                         rola                    ; divisor <<= 1
(1)     35D : 08                         inx                     ; ++bits
(1)     35E :                    udiv16_prep:
(1)     35E : 4D                         tsta
(1)     35F : 2A FA                      bpl     udiv16_prep_loop ; while msb(divisor) == 0
(1)     361 : 97 57                      staa    R2H              ; update divisore
(1)     363 : D7 58                      stab    R2L
(1)     365 : 96 55                      ldaa    R1H
(1)     367 : D6 56                      ldab    R1L             ; A:B=dividend
(1)     369 : 7F 00 53                   clr     R0H
(1)     36C : 7F 00 54                   clr     R0L             ; quotient=0
(1)     36F : 20 0C                      bra     udiv16_enter_loop
(1)     371 :                    udiv16_loop:
(1)     371 : 74 00 57                   lsr     R2H
(1)     374 : 76 00 58                   ror     R2L             ; divisor >>= 1
(1)     377 : 78 00 54                   lsl     R0L
(1)     37A : 79 00 53                   rol     R0H             ; quotient <<= 1
(1)     37D :                    udiv16_enter_loop:
(1)     37D : D0 58                      subb    R2L
(1)     37F : 92 57                      sbca    R2H             ; dividend -= divisor
(1)     381 : 25 05                      bcs     udiv16_readd
(1)     383 : 7C 00 54                   inc     R0L             ; quotient |= 1
(1)     386 : 20 04                      bra     udiv16_next
(1)     388 :                    udiv16_readd:
(1)     388 : DB 58                      addb    R2L
(1)     38A : 99 57                      adca    R2H             ; dividend += divisor
(1)     38C :                    udiv16_next:
(1)     38C : 09                         dex                     ; --bits
(1)     38D : 26 E2                      bne     udiv16_loop     ; while bits != 0
(1)     38F :                    udiv16_end:
(1)     38F : 97 55                      staa    R1H
(1)     391 : D7 56                      stab    R1L             ; R1=remainder
(1)     393 : 39                         rts
(1)     394 :
(1)     394 :                    ;;; Division; dividend / divisor = quotient ... remainder
(1)     394 :                    ;;; @param D dividend
(1)     394 :                    ;;; @param X divisor
(1)     394 :                    ;;; @return D quotient
(1)     394 :                    ;;; @return X quotient
(1)     394 :                    ;;; @clobber R0 R1 R2
(1)     394 :                    div16:
(1)     394 : 97 55                      staa    R1H
(1)     396 : D7 56                      stab    R1L
(1)     398 : DF 57                      stx     R2
(1)     39A : 98 57                      eora    R2H
(1)     39C : 97 59                      staa    sign            ; save hi(dividend^divisor)
(1)     39E : D6 58                      ldab    R2L
(1)     3A0 : 96 57                      ldaa    R2H             ; A=hi(divisor)
(1)     3A2 : 2A 08                      bpl     div16_dividend
(1)     3A4 : 40                         nega
(1)     3A5 : 50                         negb
(1)     3A6 : 82 00                      sbca    #0              ; negate divisor
(1)     3A8 : 97 57                      staa    R2H
(1)     3AA : D7 58                      stab    R2L
(1)     3AC :                    div16_dividend:
(1)     3AC : D6 56                      ldab    R1L
(1)     3AE : 96 55                      ldaa    R1H             ; A=hi(dividend)
(1)     3B0 : 2A 08                      bpl     div16_divide
(1)     3B2 : 40                         nega
(1)     3B3 : 50                         negb
(1)     3B4 : 82 00                      sbca    #0              ; negate dividend
(1)     3B6 : 97 55                      staa    R1H
(1)     3B8 : D7 56                      stab    R1L
(1)     3BA :                    div16_divide:
(1)     3BA : 8D 90                      bsr     udiv16          ; R0=quotient
(1)     3BC : 96 53                      ldaa    R0H
(1)     3BE : D6 54                      ldab    R0L
(1)     3C0 : 7D 00 59                   tst     sign            ; A=(dividend^divisor)
(1)     3C3 : 2A 04                      bpl     div16_end
(1)     3C5 : 40                         nega
(1)     3C6 : 50                         negb
(1)     3C7 : 82 00                      sbca    #0              ; negate result
(1)     3C9 :                    div16_end:
(1)     3C9 : 97 53                      staa    R0H
(1)     3CB : D7 54                      stab    R0L
(1)     3CD : DE 53                      ldx     R0
(1)     3CF : 39                         rts
        3D0 :                            include "queue.inc"
(1)     3D0 :                    ;;; [queue] queue structure
(1)     3D0 : =0                 queue_len:      equ     0       ; queue length
(1)     3D0 : =1                 queue_size:     equ     1       ; buffer size
(1)     3D0 : =2                 queue_put:      equ     2       ; queue put index
(1)     3D0 : =3                 queue_get:      equ     3       ; queue get index
(1)     3D0 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     3D0 :
(1)     3D0 :                    ;;; [queue] Initialize queue
(1)     3D0 :                    ;;; @param X queue work space pointer
(1)     3D0 :                    ;;; @param B queue work space size
(1)     3D0 :                    ;;; @clobber B
(1)     3D0 :                    queue_init_tmp:
(1)     3D0 :                            rmb     2
(1)     3D2 :                    queue_init:
(1)     3D2 : FF 03 D0                   stx     queue_init_tmp  ; save X
(1)     3D5 : 37                         pshb
(1)     3D6 :                    queue_init_loop:
(1)     3D6 : 6F 00                      clr     0,x
(1)     3D8 : 08                         inx
(1)     3D9 : 5A                         decb
(1)     3DA : 26 FA                      bne     queue_init_loop
(1)     3DC : FE 03 D0                   ldx     queue_init_tmp  ; restore X
(1)     3DF : 33                         pulb
(1)     3E0 : C0 04                      subb    #queue_buf
(1)     3E2 : E7 01                      stab    queue_size,x
(1)     3E4 : 39                         rts
(1)     3E5 :
(1)     3E5 :                    ;;; [abx] Add B to X
(1)     3E5 :                    ;;; @return X X+B
(1)     3E5 :                    abx_tmp:
(1)     3E5 :                            rmb     2
(1)     3E7 :                    abx:
(1)     3E7 : 37                 	pshb
(1)     3E8 : FF 03 E5                   stx     abx_tmp
(1)     3EB : FB 03 E6                   addb    abx_tmp+1
(1)     3EE : F7 03 E6                   stab    abx_tmp+1
(1)     3F1 : 5F                         clrb
(1)     3F2 : F9 03 E5                   adcb    abx_tmp
(1)     3F5 : F7 03 E5                   stab    abx_tmp
(1)     3F8 : FE 03 E5                   ldx     abx_tmp
(1)     3FB : 33                         pulb
(1)     3FC : 39                         rts
(1)     3FD :
(1)     3FD :                    ;;; [queue] Add an element to queue
(1)     3FD :                    ;;; @param X queue work space pointer
(1)     3FD :                    ;;; @param A an element
(1)     3FD :                    ;;; @return CC.C 0 if queue is full
(1)     3FD :                    queue_add_tmp:
(1)     3FD :                            rmb     2
(1)     3FF :                    queue_add:
(1)     3FF : 37                 	pshb
(1)     400 : E6 00                      ldab    queue_len,x
(1)     402 : E1 01                      cmpb    queue_size,x
(1)     404 : 24 18                      bhs     queue_add_return ; carry is cleared
(1)     406 : E6 02                      ldab    queue_put,x     ; 8 bits offset
(1)     408 : FF 03 FD                   stx     queue_add_tmp   ; save X
(1)     40B : 8D DA                      bsr     abx
(1)     40D : A7 04                      staa    queue_buf,x     ; store an element
(1)     40F : FE 03 FD                   ldx     queue_add_tmp   ; restore X
(1)     412 : 6C 00                      inc     queue_len,x
(1)     414 : 5C                         incb
(1)     415 : E7 02                      stab    queue_put,x
(1)     417 : E1 01                      cmpb    queue_size,x
(1)     419 : 25 03                      blo     queue_add_return ; carry is set
(1)     41B : 6F 02                      clr     queue_put,x
(1)     41D : 0D                         sec                     ; set carry
(1)     41E :                    queue_add_return:
(1)     41E : 33                 	pulb
(1)     41F : 39                         rts
(1)     420 :
(1)     420 :                    ;;; [queue] Remove an element from queue
(1)     420 :                    ;;; @param X queue work space pointer
(1)     420 :                    ;;; @return A an element
(1)     420 :                    ;;; @return CC.C 0 if queue is empty
(1)     420 :                    queue_remove_tmp:
(1)     420 :                            rmb     2
(1)     422 :                    queue_remove:
(1)     422 : 6D 00                      tst     queue_len,x
(1)     424 : 26 02                      bne     queue_remove_elem
(1)     426 : 0C                         clc                     ; clear carry
(1)     427 : 39                         rts
(1)     428 :                    queue_remove_elem
(1)     428 : 37                 	pshb
(1)     429 : E6 03                      ldab    queue_get,x     ; 8 bits offset
(1)     42B : FF 04 20                   stx     queue_remove_tmp ;save X
(1)     42E : 8D B7                      bsr     abx
(1)     430 : A6 04                      ldaa    queue_buf,x     ; read an element
(1)     432 : FE 04 20                   ldx     queue_remove_tmp ; restore X
(1)     435 : 6A 00                      dec     queue_len,x
(1)     437 : 5C                         incb
(1)     438 : E7 03                      stab    queue_get,x
(1)     43A : E1 01                      cmpb    queue_size,x
(1)     43C : 25 03                      blo     queue_remove_return ; carry is set
(1)     43E : 6F 03                      clr     queue_get,x
(1)     440 : 0D                         sec                     ; set carry
(1)     441 :                    queue_remove_return:
(1)     441 : 33                         pulb
(1)     442 : 39                         rts
(1)     443 :
(1)     443 :                    ;;; Local Variables:
(1)     443 :                    ;;; mode: asm
(1)     443 :                    ;;; End:
(1)     443 :                    ;;; vim: set ft=asm et ts=4 sw=4:
        443 :
        443 :                    isr_irq:
        443 : F6 DF 00                   ldab    ACIA_status
        446 : C5 80                      bitb    #IRQF_bm
        448 : 27 1C                      beq     isr_irq_exit
        44A : C5 01                      bitb    #RDRF_bm
        44C : 27 09                      beq     isr_irq_send
        44E : B6 DF 01                   ldaa    ACIA_data       ; receive character
        451 : CE 20 00                   ldx     #rx_queue
        454 : BD 03 FF                   jsr     queue_add
        457 :                    isr_irq_send:
        457 : C5 02                      bitb    #TDRE_bm
        459 : 27 0B                      beq     isr_irq_exit
        45B : CE 20 80                   ldx     #tx_queue
        45E : BD 04 22                   jsr     queue_remove
        461 : 24 04                      bcc     isr_irq_send_empty
        463 : B7 DF 01                   staa    ACIA_data       ; send character
        466 :                    isr_irq_exit:
        466 : 3B                         rti
        467 :                    isr_irq_send_empty:
        467 : 86 94                      ldaa    #RX_INT_TX_NO
        469 : B7 DF 00                   staa    ACIA_control    ; disable Tx interrupt
        46C : 3B                         rti
