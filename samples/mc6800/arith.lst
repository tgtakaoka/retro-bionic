          0 :                            cpu     6800
          0 :                            include "mc6800.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6800/MC6802/MC6808
(1)       0 :                    ;;; Condition Code Register (CC)
(1)       0 : =1                 CC_CARRY      equ  %00000001   ; set to 1 if carry occurred
(1)       0 : =2                 CC_OVERFLOW   equ  %00000010   ; set to 1 if overflow occurred
(1)       0 : =4                 CC_ZERO       equ  %00000100   ; set to 1 if result is zero
(1)       0 : =8                 CC_NEGATIVE   equ  %00001000   ; set to 1 if result is negative
(1)       0 : =10                CC_IRQ        equ  %00010000   ; if 1, IRQ is masked
(1)       0 : =20                CC_HALF_CARRY equ  %00100000   ; if 1, decimal carry from least digit occurred
(1)       0 :
(1)       0 :                    ;;; Vector
(1)       0 : =FFF8              VEC_IRQ:        equ     $FFF8  ; $FFF8: Maskable Interrupt Request
(1)       0 : =FFFA              VEC_SWI:        equ     $FFFA  ; $FFFA: Software Interrupt
(1)       0 : =FFFC              VEC_NMI:        equ     $FFFC  ; $FFFC: Non Maskable Interrupt
(1)       0 : =FFFE              VEC_RESET:      equ     $FFFE  ; $FFFE: Reset
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA:   equ     $DF00
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     %11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     %00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     %00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     %00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     %00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     %00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     %00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     %00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     %00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     %00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     %00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     %00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     %00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     %00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     %01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     %00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     %00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     %01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     %01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     %10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     %00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     %00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     %00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     %00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     %00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     %00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     %01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     %10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data:      equ     ACIA+1          ; Data register
          0 :
         40 :                            org     $40
         40 :                    R0:
         40 :                    R0H:    rmb     1
         41 :                    R0L:    rmb     1
         42 :                    R1:
         42 :                    R1H:    rmb     1
         43 :                    R1L:    rmb     1
         44 :                    R2:
         44 :                    R2H:    rmb     1
         45 :                    R2L:    rmb     1
         46 :                    sign:   rmb     1
         47 :                    exprop: rmb     1
         48 :                    vA:     rmb     2
         4A :                    vB:     rmb     2
         4C :
       1000 :                            org     $1000
       1000 : =FFF               stack:  equ     *-1             ; MC6800's SP is post-decrement/pre-increment
       1000 :
       FFF6 :                            org     $FFF6           ; MC68HC11 SWI
       FFF6 : FF F6                      fdb     $FFF6
       FFF8 :
       FFFA :                            org     VEC_SWI
       FFFA : FF FA                      fdb     VEC_SWI         ; for halt to system
       FFFC :
       FFFE :                            org     VEC_RESET
       FFFE : 01 00                      fdb     initialize
      10000 :
        100 :                            org     $0100
        100 :                    initialize:
        100 : 8E 0F FF                   lds     #stack
        103 : 86 03                      ldaa    #CDS_RESET_gc   ; Master reset
        105 : B7 DF 00                   staa    ACIA_control
        108 : 86 14                      ldaa    #WSB_8N1_gc     ; 8 bits + No Parity + 1 Stop Bits
        10A :                                                    ; Transmit, Receive interrupts disabled
        10A : B7 DF 00                   staa    ACIA_control
        10D :
        10D : BD 01 81                   jsr     arith
        110 : 3F                         swi
        111 :
        111 :                    ;;; Print out char
        111 :                    ;;; @param A char
        111 :                    ;;; @clobber A
        111 :                    putspace:
        111 : 86 20                      ldaa    #' '
        113 : 20 06                      bra     putchar
        115 :                    newline:
        115 : 86 0D                      ldaa    #$0D
        117 : 8D 02                      bsr     putchar
        119 : 86 0A                      ldaa    #$0A
        11B :                    putchar:
        11B : 37                         pshb
        11C : F6 DF 00                   ldab    ACIA_status
        11F : C5 02                      bitb    #TDRE_bm
        121 : 33                         pulb
        122 : 27 F7                      beq     putchar
        124 : B7 DF 01                   staa    ACIA_data
        127 : 39                         rts
        128 :
        128 :                    ;;; Print "v1 op R2"
        128 :                    ;;; @param D v1
        128 :                    ;;; @param X v2
        128 :                    ;;; @param exprop op
        128 :                    ;;; @return D v1
        128 :                    ;;; @return X v2
        128 :                    ;;; @clobber R0 R1 R2
        128 :                    expr:
        128 : 37                         pshb
        129 : 36                         psha
        12A : DF 4A                      stx     vB
        12C : BD 03 1E                   jsr     print_int16     ; print v1
        12F : 8D E0                      bsr     putspace
        131 : 96 47                      ldaa    exprop
        133 : 8D E6                      bsr     putchar         ; print op
        135 : 8D DA                      bsr     putspace
        137 : 96 4A                      ldaa    vB
        139 : D6 4B                      ldab    vB+1
        13B : BD 03 1E                   jsr     print_int16     ; print R2
        13E : 32                         pula
        13F : 33                         pulb
        140 : DE 4A                      ldx     vB
        142 : 39                         rts
        143 :
        143 :                    ;;; Print " = v\n"
        143 :                    ;;; @param D v
        143 :                    ;;; @clobber R0 R1 R2
        143 :                    answer:
        143 : 36                         psha
        144 : 8D CB                      bsr     putspace
        146 : 86 3D                      ldaa    #'='
        148 : 8D D1                      bsr     putchar
        14A : 8D C5                      bsr     putspace
        14C : 32                         pula
        14D : BD 03 1E                   jsr     print_int16     ; print v
        150 : 20 C3                      bra     newline
        152 :
        152 :                    ;;; Print "v1 rel v2"
        152 :                    ;;; @param D v1
        152 :                    ;;; @param X v2
        152 :                    ;;; @clobber R0 R1 R2
        152 :                    comp:
        152 : 97 48                      staa    vA
        154 : D7 49                      stab    vA+1
        156 : DF 4A                      stx     vB
        158 : DF 44                      stx     R2
        15A : DE 48                      ldx     vA
        15C : DF 42                      stx     R1
        15E : BD 03 53                   jsr     cmp16
        161 : 27 0C                      beq     comp_eq
        163 : 2B 0E                      bmi     comp_lt
        165 : 2A 04                      bpl     comp_gt
        167 : 86 3F                      ldaa    #'?'
        169 : 20 0A                      bra     comp_out
        16B :                    comp_gt:
        16B : 86 3E                      ldaa    #'>'
        16D : 20 06                      bra     comp_out
        16F :                    comp_eq:
        16F : 86 3D                      ldaa    #'='
        171 : 20 02                      bra     comp_out
        173 :                    comp_lt:
        173 : 86 3C                      ldaa    #'<'
        175 :                    comp_out:
        175 : 97 47                      staa    exprop
        177 : 96 48                      ldaa    vA
        179 : D6 49                      ldab    vA+1
        17B : DE 4A                      ldx     vB
        17D : 8D A9                      bsr     expr
        17F : 20 94                      bra     newline
        181 :
        181 :                    arith:
        181 : 86 2B                      ldaa    #'+'
        183 : 97 47                      staa    exprop
        185 : 86 46                      ldaa    #(18000) >> 8
        187 : C6 50                      ldab    #(18000) & $FF
        189 : CE 6D 60                   ldx     #28000
        18C : BD 01 28                   jsr     expr
        18F : DB 4B                      addb    vB+1
        191 : 99 4A                      adca    vB
        193 : BD 01 43                   jsr     answer          ; -19536
        196 :
        196 : 86 46                      ldaa    #(18000) >> 8
        198 : C6 50                      ldab    #(18000) & $FF
        19A : CE B9 B0                   ldx     #-18000
        19D : BD 01 28                   jsr     expr
        1A0 : DB 4B                      addb    vB+1
        1A2 : 99 4A                      adca    vB
        1A4 : BD 01 43                   jsr     answer          ; 0
        1A7 :
        1A7 : 86 B9                      ldaa    #(-18000) >> 8
        1A9 : C6 B0                      ldab    #(-18000) & $FF
        1AB : CE B9 B0                   ldx     #-18000
        1AE : BD 01 28                   jsr     expr
        1B1 : DB 4B                      addb    vB+1
        1B3 : 99 4A                      adca    vB
        1B5 : BD 01 43                   jsr     answer          ; 29536
        1B8 :
        1B8 : 86 2D                      ldaa    #'-'
        1BA : 97 47                      staa    exprop
        1BC : 86 B9                      ldaa    #(-18000) >> 8
        1BE : C6 B0                      ldab    #(-18000) & $FF
        1C0 : CE 92 A0                   ldx     #-28000
        1C3 : BD 01 28                   jsr     expr
        1C6 : D0 4B                      subb    vB+1
        1C8 : 92 4A                      sbca    vB
        1CA : BD 01 43                   jsr     answer          ; -19536
        1CD :
        1CD : 86 46                      ldaa    #(18000) >> 8
        1CF : C6 50                      ldab    #(18000) & $FF
        1D1 : CE B9 B0                   ldx     #-18000
        1D4 : BD 01 28                   jsr     expr
        1D7 : D0 4B                      subb    vB+1
        1D9 : 92 4A                      sbca    vB
        1DB : BD 01 43                   jsr     answer          ; 29536
        1DE :
        1DE : 86 92                      ldaa    #(-28000) >> 8
        1E0 : C6 A0                      ldab    #(-28000) & $FF
        1E2 : CE B9 B0                   ldx     #-18000
        1E5 : BD 01 28                   jsr     expr
        1E8 : D0 4B                      subb    vB+1
        1EA : 92 4A                      sbca    vB
        1EC : BD 01 43                   jsr     answer          ; -10000
        1EF :
        1EF : 86 2A                      ldaa    #'*'
        1F1 : 97 47                      staa    exprop
        1F3 : 86 00                      ldaa    #(100) >> 8
        1F5 : C6 64                      ldab    #(100) & $FF
        1F7 : CE 01 2C                   ldx     #300
        1FA : BD 01 28                   jsr     expr
        1FD : BD 03 AA                   jsr     mul16
        200 : BD 01 43                   jsr     answer          ; 30000
        203 :
        203 : 86 00                      ldaa    #(200) >> 8
        205 : C6 C8                      ldab    #(200) & $FF
        207 : CE 00 64                   ldx     #100
        20A : BD 01 28                   jsr     expr
        20D : BD 03 AA                   jsr     mul16
        210 : BD 01 43                   jsr     answer          ; 20000
        213 :
        213 : 86 01                      ldaa    #(300) >> 8
        215 : C6 2C                      ldab    #(300) & $FF
        217 : CE FF 38                   ldx     #-200
        21A : BD 01 28                   jsr     expr
        21D : BD 03 AA                   jsr     mul16
        220 : BD 01 43                   jsr     answer          ; 5536
        223 :
        223 : 86 00                      ldaa    #(100) >> 8
        225 : C6 64                      ldab    #(100) & $FF
        227 : CE FE D4                   ldx     #-300
        22A : BD 01 28                   jsr     expr
        22D : BD 03 AA                   jsr     mul16
        230 : BD 01 43                   jsr     answer          ; -30000
        233 :
        233 : 86 FF                      ldaa    #(-200) >> 8
        235 : C6 38                      ldab    #(-200) & $FF
        237 : CE FF 9C                   ldx     #-100
        23A : BD 01 28                   jsr     expr
        23D : BD 03 AA                   jsr     mul16
        240 : BD 01 43                   jsr     answer          ; 20000
        243 :
        243 : 86 2F                      ldaa    #'/'
        245 : 97 47                      staa    exprop
        247 : 86 75                      ldaa    #(30000) >> 8
        249 : C6 30                      ldab    #(30000) & $FF
        24B : CE 00 64                   ldx     #100
        24E : BD 01 28                   jsr     expr
        251 : BD 04 34                   jsr     div16
        254 : BD 01 43                   jsr     answer          ; 30
        257 :
        257 : 86 FF                      ldaa    #(-200) >> 8
        259 : C6 38                      ldab    #(-200) & $FF
        25B : CE 00 64                   ldx     #100
        25E : BD 01 28                   jsr     expr
        261 : BD 04 34                   jsr     div16
        264 : BD 01 43                   jsr     answer          ; -2
        267 :
        267 : 86 8A                      ldaa    #(-30000) >> 8
        269 : C6 D0                      ldab    #(-30000) & $FF
        26B : CE FF 38                   ldx     #-200
        26E : BD 01 28                   jsr     expr
        271 : BD 04 34                   jsr     div16
        274 : BD 01 43                   jsr     answer          ; 150
        277 :
        277 : 86 8A                      ldaa    #(-30000) >> 8
        279 : C6 D0                      ldab    #(-30000) & $FF
        27B : CE 00 4E                   ldx     #78
        27E : BD 01 28                   jsr     expr
        281 : BD 04 34                   jsr     div16
        284 : BD 01 43                   jsr     answer          ; -384
        287 :
        287 : 86 13                      ldaa    #(5000) >> 8
        289 : C6 88                      ldab    #(5000) & $FF
        28B : CE 0F A0                   ldx     #4000
        28E : BD 01 52                   jsr     comp
        291 :
        291 : 86 13                      ldaa    #(5000) >> 8
        293 : C6 88                      ldab    #(5000) & $FF
        295 : CE 13 88                   ldx     #5000
        298 : BD 01 52                   jsr     comp
        29B :
        29B : 86 0F                      ldaa    #(4000) >> 8
        29D : C6 A0                      ldab    #(4000) & $FF
        29F : CE 13 88                   ldx     #5000
        2A2 : BD 01 52                   jsr     comp
        2A5 :
        2A5 : 86 EC                      ldaa    #(-5000) >> 8
        2A7 : C6 78                      ldab    #(-5000) & $FF
        2A9 : CE F0 60                   ldx     #-4000
        2AC : BD 01 52                   jsr     comp
        2AF :
        2AF : 86 EC                      ldaa    #(-5000) >> 8
        2B1 : C6 78                      ldab    #(-5000) & $FF
        2B3 : CE EC 78                   ldx     #-5000
        2B6 : BD 01 52                   jsr     comp
        2B9 :
        2B9 : 86 F0                      ldaa    #(-4000) >> 8
        2BB : C6 60                      ldab    #(-4000) & $FF
        2BD : CE EC 78                   ldx     #-5000
        2C0 : BD 01 52                   jsr     comp
        2C3 :
        2C3 : 86 7F                      ldaa    #(32700) >> 8
        2C5 : C6 BC                      ldab    #(32700) & $FF
        2C7 : CE 7F 58                   ldx     #32600
        2CA : BD 01 52                   jsr     comp
        2CD :
        2CD : 86 7F                      ldaa    #(32700) >> 8
        2CF : C6 BC                      ldab    #(32700) & $FF
        2D1 : CE 7F BC                   ldx     #32700
        2D4 : BD 01 52                   jsr     comp
        2D7 :
        2D7 : 86 7F                      ldaa    #(32600) >> 8
        2D9 : C6 58                      ldab    #(32600) & $FF
        2DB : CE 7F BC                   ldx     #32700
        2DE : BD 01 52                   jsr     comp
        2E1 :
        2E1 : 86 80                      ldaa    #(-32700) >> 8
        2E3 : C6 44                      ldab    #(-32700) & $FF
        2E5 : CE 80 A8                   ldx     #-32600
        2E8 : BD 01 52                   jsr     comp
        2EB :
        2EB : 86 80                      ldaa    #(-32700) >> 8
        2ED : C6 44                      ldab    #(-32700) & $FF
        2EF : CE 80 44                   ldx     #-32700
        2F2 : BD 01 52                   jsr     comp
        2F5 :
        2F5 : 86 80                      ldaa    #(-32600) >> 8
        2F7 : C6 A8                      ldab    #(-32600) & $FF
        2F9 : CE 80 44                   ldx     #-32700
        2FC : BD 01 52                   jsr     comp
        2FF :
        2FF : 86 46                      ldaa    #(18000) >> 8
        301 : C6 50                      ldab    #(18000) & $FF
        303 : CE 92 A0                   ldx     #-28000
        306 : BD 01 52                   jsr     comp
        309 :
        309 : 86 92                      ldaa    #(-28000) >> 8
        30B : C6 A0                      ldab    #(-28000) & $FF
        30D : CE 92 A0                   ldx     #-28000
        310 : BD 01 52                   jsr     comp
        313 :
        313 : 86 92                      ldaa    #(-28000) >> 8
        315 : C6 A0                      ldab    #(-28000) & $FF
        317 : CE 46 50                   ldx     #18000
        31A : BD 01 52                   jsr     comp
        31D : 39                         rts
        31E :
        31E :                            include "arith.inc"
(1)     31E :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     31E :                            cpu     6800
(1)     31E :
(1)     31E :                    ;;; Print signed 16-bit integer as decimal
(1)     31E :                    ;;; @param D value
(1)     31E :                    ;;; @clobber D X R0 R1 R2
(1)     31E :                    print_int16:
(1)     31E : D7 41                      stab    R0L
(1)     320 : 97 40                      staa    R0H
(1)     322 : 2A 11                      bpl     print_uint16
(1)     324 : 86 2D                      ldaa    #'-'
(1)     326 : BD 01 1B                   jsr     putchar
(1)     329 : 96 40                      ldaa    R0H
(1)     32B : 43                         coma
(1)     32C : 53                         comb
(1)     32D : CB 01                      addb    #1
(1)     32F : 89 00                      adca    #0
(1)     331 : 97 40                      staa    R0H
(1)     333 : D7 41                      stab    R0L
(1)     335 :                    ;;; Print unsigned 16-bit integer as decimal
(1)     335 :                    ;;; @param R0 value
(1)     335 :                    ;;; @clobber A X R0 R1 R2
(1)     335 :                    print_uint16:
(1)     335 : DE 40                      ldx     R0
(1)     337 : 27 14                      beq     print_uint16_zero
(1)     339 :                    print_uint16_loop:
(1)     339 : DF 42                      stx     R1
(1)     33B : 27 15                      beq     print_uint16_end ; branch if value == 0
(1)     33D : CE 00 0A                   ldx     #10
(1)     340 : DF 44                      stx     R2
(1)     342 : BD 03 EC                   jsr     udiv16          ; R0=value/10
(1)     345 : D6 43                      ldab    R1L
(1)     347 : 37                         pshb                    ; push remainder
(1)     348 : DE 40                      ldx     R0
(1)     34A : 8D ED                      bsr     print_uint16_loop
(1)     34C : 32                         pula
(1)     34D :                    print_uint16_zero:
(1)     34D : 8A 30                      oraa    #'0'
(1)     34F : 7E 01 1B                   jmp     putchar
(1)     352 :                    print_uint16_end:
(1)     352 : 39                         rts   
(1)     353 :
(1)     353 :                    ;;; Signed compare R0=sign(R1-R2)
(1)     353 :                    ;;; @return R0=A=0;  BEQ (minuend == subtrahend)
(1)     353 :                    ;;;         R0=A=1;  BPL (minuend > subtrahend)
(1)     353 :                    ;;;         R0=A=-1; BMI (minuend < subtrahend)
(1)     353 :                    ;;; @clobber A
(1)     353 :                    cmp16:
(1)     353 : 96 43                      ldaa    R1L
(1)     355 : 90 45                      suba    R2L
(1)     357 : 97 41                      staa    R0L
(1)     359 : 96 42                      ldaa    R1H
(1)     35B : 92 44                      sbca    R2H
(1)     35D : 97 40                      staa    R0H
(1)     35F : 9A 41                      oraa    R0L
(1)     361 : 27 1B                      beq     cmp16_end       ; return with R0=0
(1)     363 : 96 40                      ldaa    R0H
(1)     365 : 98 42                      eora    R1H
(1)     367 : 97 41                      staa    R0L             ; R0L=(minuend-subtrahend)^minuend
(1)     369 : 96 42                      ldaa    R1H
(1)     36B : 98 44                      eora    R2H             ; minuend^subtrahend
(1)     36D : 94 41                      anda    R0L             ; overflow flag
(1)     36F : 98 40                      eora    R0H
(1)     371 : 2B 07                      bmi     cmp16_lt
(1)     373 :                    cmp16_gt:
(1)     373 : 7F 00 40                   clr     R0H
(1)     376 : 86 01                      ldaa    #1
(1)     378 : 20 04                      bra     cmp16_end
(1)     37A :                    cmp16_lt:
(1)     37A : 86 FF                      ldaa    #-1
(1)     37C : 97 40                      staa    R0H
(1)     37E :                    cmp16_end:
(1)     37E : 97 41                      staa    R0L
(1)     380 : 39                         rts
(1)     381 :
(1)     381 :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)     381 :                    ;;; @param R1 multiplicand
(1)     381 :                    ;;; @param R2 multiplier
(1)     381 :                    ;;; @return R0 result
(1)     381 :                    ;;; @clobber R0 R1 R2
(1)     381 :                    umul16:
(1)     381 : 7F 00 40                   clr     R0H
(1)     384 : 7F 00 41                   clr     R0L
(1)     387 : 20 1A                      bra     umul16_check
(1)     389 :                    umul16_loop:
(1)     389 : 74 00 44                   lsr     R2H
(1)     38C : 76 00 45                   ror     R2L             ; multiplier >>=1
(1)     38F : 24 0C                      bcc     umul16_next     ; if lsb(multiplier) == 0
(1)     391 : 96 43                      ldaa    R1L
(1)     393 : 9B 41                      adda    R0L
(1)     395 : 97 41                      staa    R0L
(1)     397 : 96 42                      ldaa    R1H
(1)     399 : 99 40                      adca    R0H
(1)     39B : 97 40                      staa    R0H             ; result += multiplicand
(1)     39D :                    umul16_next:
(1)     39D : 78 00 43                   lsl     R1L
(1)     3A0 : 79 00 42                   rol     R1H             ; multiplicand <<= 1
(1)     3A3 :                    umul16_check:
(1)     3A3 : 96 44                      ldaa    R2H
(1)     3A5 : 9A 45                      oraa    R2L
(1)     3A7 : 26 E0                      bne     umul16_loop     ; while multiplier != 0
(1)     3A9 :                    umul16_end:
(1)     3A9 : 39                         rts
(1)     3AA :
(1)     3AA :                    ;;; Multiply; result = multiplicand * multiplier
(1)     3AA :                    ;;; @param D multiplicand
(1)     3AA :                    ;;; @param X multiplier
(1)     3AA :                    ;;; @return D result
(1)     3AA :                    ;;; @return X result
(1)     3AA :                    ;;; @clobber R0 R1 R2
(1)     3AA :                    mul16:
(1)     3AA : 97 42                      staa    R1H
(1)     3AC : D7 43                      stab    R1L
(1)     3AE : DF 44                      stx     R2
(1)     3B0 : 98 44                      eora    R2H
(1)     3B2 : 97 46                      staa    sign            ; save hi(multiplicand^multiplier)
(1)     3B4 : D6 45                      ldab    R2L
(1)     3B6 : 96 44                      ldaa    R2H             ; A=hi(multiplier)
(1)     3B8 : 2A 06                      bpl     mul16_multiplicand
(1)     3BA : 43                         coma
(1)     3BB : 53                         comb
(1)     3BC : CB 01                      addb    #1
(1)     3BE : 89 00                      adca    #0              ; negate multiplier
(1)     3C0 :                    mul16_multiplicand:
(1)     3C0 : 97 44                      staa    R2H
(1)     3C2 : D7 45                      stab    R2L
(1)     3C4 : D6 43                      ldab    R1L
(1)     3C6 : 96 42                      ldaa    R1H             ; A=hi(multiplicand)
(1)     3C8 : 2A 06                      bpl     mul16_multiply
(1)     3CA : 43                         coma
(1)     3CB : 53                         comb
(1)     3CC : CB 01                      addb    #1
(1)     3CE : 89 00                      adca    #0              ; negate multiplicand
(1)     3D0 :                    mul16_multiply:
(1)     3D0 : 97 42                      staa    R1H
(1)     3D2 : D7 43                      stab    R1L
(1)     3D4 : 8D AB                      bsr     umul16          ; R0=result
(1)     3D6 : 96 40                      ldaa    R0H
(1)     3D8 : D6 41                      ldab    R0L
(1)     3DA : 7D 00 46                   tst     sign            ; A=(multiplicand^multiplier)
(1)     3DD : 2A 06                      bpl     mul16_end
(1)     3DF : 43                         coma
(1)     3E0 : 53                         comb
(1)     3E1 : CB 01                      addb    #1
(1)     3E3 : 89 00                      adca    #0              ; negate result
(1)     3E5 :                    mul16_end:
(1)     3E5 : 97 40                      staa    R0H
(1)     3E7 : D7 41                      stab    R0L
(1)     3E9 : DE 40                      ldx     R0
(1)     3EB : 39                         rts
(1)     3EC :
(1)     3EC :                    ;;; Unsigned division: dividend / divisor = quotient ... remainder
(1)     3EC :                    ;;; @praram R1 dividend
(1)     3EC :                    ;;; @praram R2 divisor
(1)     3EC :                    ;;; @return R0 quotient
(1)     3EC :                    ;;; @return R1 remainder
(1)     3EC :                    ;;; @clobber R2
(1)     3EC :                    udiv16:
(1)     3EC : 96 44                      ldaa    R2H
(1)     3EE : 9A 45                      oraa    R2L
(1)     3F0 : 27 3D                      beq     udiv16_end      ; branch if R2==0
(1)     3F2 : 96 44                      ldaa    R2H             ; A:B=divisor
(1)     3F4 : D6 45                      ldab    R2L
(1)     3F6 : CE 00 01                   ldx     #1              ; X=bits
(1)     3F9 : 20 03                      bra     udiv16_prep
(1)     3FB :                    udiv16_prep_loop:
(1)     3FB : 58                         lslb
(1)     3FC : 49                         rola                    ; divisor <<= 1
(1)     3FD : 08                         inx                     ; ++bits
(1)     3FE :                    udiv16_prep:
(1)     3FE : 4D                         tsta
(1)     3FF : 2A FA                      bpl     udiv16_prep_loop ; while msb(divisor) == 0
(1)     401 : 97 44                      staa    R2H              ; update divisore
(1)     403 : D7 45                      stab    R2L
(1)     405 : 96 42                      ldaa    R1H
(1)     407 : D6 43                      ldab    R1L             ; A:B=dividend
(1)     409 : 7F 00 40                   clr     R0H
(1)     40C : 7F 00 41                   clr     R0L             ; quotient=0
(1)     40F : 20 0C                      bra     udiv16_enter_loop
(1)     411 :                    udiv16_loop:
(1)     411 : 74 00 44                   lsr     R2H
(1)     414 : 76 00 45                   ror     R2L             ; divisor >>= 1
(1)     417 : 78 00 41                   lsl     R0L
(1)     41A : 79 00 40                   rol     R0H             ; quotient <<= 1
(1)     41D :                    udiv16_enter_loop:
(1)     41D : D0 45                      subb    R2L
(1)     41F : 92 44                      sbca    R2H             ; dividend -= divisor
(1)     421 : 25 05                      bcs     udiv16_readd
(1)     423 : 7C 00 41                   inc     R0L             ; quotient |= 1
(1)     426 : 20 04                      bra     udiv16_next
(1)     428 :                    udiv16_readd:
(1)     428 : DB 45                      addb    R2L
(1)     42A : 99 44                      adca    R2H             ; dividend += divisor
(1)     42C :                    udiv16_next:
(1)     42C : 09                         dex                     ; --bits
(1)     42D : 26 E2                      bne     udiv16_loop     ; while bits != 0
(1)     42F :                    udiv16_end:
(1)     42F : 97 42                      staa    R1H
(1)     431 : D7 43                      stab    R1L             ; R1=remainder
(1)     433 : 39                         rts
(1)     434 :
(1)     434 :                    ;;; Division; dividend / divisor = quotient ... remainder
(1)     434 :                    ;;; @param D dividend
(1)     434 :                    ;;; @param X divisor
(1)     434 :                    ;;; @return D quotient
(1)     434 :                    ;;; @return X quotient
(1)     434 :                    ;;; @clobber R0 R1 R2
(1)     434 :                    div16:
(1)     434 : 97 42                      staa    R1H
(1)     436 : D7 43                      stab    R1L
(1)     438 : DF 44                      stx     R2
(1)     43A : 98 44                      eora    R2H
(1)     43C : 97 46                      staa    sign            ; save hi(dividend^divisor)
(1)     43E : D6 45                      ldab    R2L
(1)     440 : 96 44                      ldaa    R2H             ; A=hi(divisor)
(1)     442 : 2A 0A                      bpl     div16_dividend
(1)     444 : 43                         coma
(1)     445 : 53                         comb
(1)     446 : CB 01                      addb    #1
(1)     448 : 89 00                      adca    #0              ; negate divisor
(1)     44A : 97 44                      staa    R2H
(1)     44C : D7 45                      stab    R2L
(1)     44E :                    div16_dividend:
(1)     44E : D6 43                      ldab    R1L
(1)     450 : 96 42                      ldaa    R1H             ; A=hi(dividend)
(1)     452 : 2A 0A                      bpl     div16_divide
(1)     454 : 43                         coma
(1)     455 : 53                         comb
(1)     456 : CB 01                      addb    #1
(1)     458 : 89 00                      adca    #0              ; negate dividend
(1)     45A : 97 42                      staa    R1H
(1)     45C : D7 43                      stab    R1L
(1)     45E :                    div16_divide:
(1)     45E : 8D 8C                      bsr     udiv16          ; R0=quotient
(1)     460 : 96 40                      ldaa    R0H
(1)     462 : D6 41                      ldab    R0L
(1)     464 : 7D 00 46                   tst     sign            ; A=(dividend^divisor)
(1)     467 : 2A 06                      bpl     div16_end
(1)     469 : 43                         coma
(1)     46A : 53                         comb
(1)     46B : CB 01                      addb    #1
(1)     46D : 89 00                      adca    #0              ; negate result
(1)     46F :                    div16_end:
(1)     46F : 97 40                      staa    R0H
(1)     471 : D7 41                      stab    R0L
(1)     473 : DE 40                      ldx     R0
(1)     475 : 39                         rts
