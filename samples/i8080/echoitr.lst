          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            include "i8080.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; i8080
(1)       0 :                            cpu     8080
(1)       0 :                    ;;; FLAGS Register
(1)       0 : =80                F_SIGN:         equ     10000000B ; set to 1 if negative
(1)       0 : =40                F_ZERO:         equ     01000000B ; set to 1 if zero
(1)       0 : =10                F_HALF_CARRY:   equ     00010000B ; set to 1 if carry from bit-3
(1)       0 : =4                 F_PARITY:       equ     00000100B ; set to 1 if even parity
(1)       0 : =1                 F_CARRY:        equ     00000001B ; set to 1 if carry
(1)       0 :                    ;;; Interrupt origin
(1)       0 : =0                 ORG_RESET:      equ     0000H   ; RESET
(1)       0 : =0                 ORG_RST0:       equ     0000H   ; RST 0
(1)       0 : =8                 ORG_RST1:       equ     0008H   ; RST 1
(1)       0 : =10                ORG_RST2:       equ     0010H   ; RST 2
(1)       0 : =18                ORG_RST3:       equ     0018H   ; RST 3
(1)       0 : =20                ORG_RST4:       equ     0020H   ; RST 4
(1)       0 : =28                ORG_RST5:       equ     0028H   ; RST 5
(1)       0 : =30                ORG_RST6:       equ     0030H   ; RST 6
(1)       0 : =38                ORG_RST7:       equ     0038H   ; RST 3
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =0                 USART:          equ     00H
          0 : =0                 USARTD:         equ     USART+0 ; Receive/Transmit data
          0 : =1                 USARTS:         equ     USART+1 ; Srtatus register
          0 : =1                 USARTC:         equ     USART+1 ; Control register
          0 : =2                 USARTRV:        equ     USART+2 ; Receive interrupt vector (ORG_*)
          0 : =3                 USARTTV:        equ     USART+3 ; Transmit interrupt vector (ORG_*)
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     11000000B
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 << MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 << MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 << MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     00100000B
(1)       0 : =10                MODE_PARITY_bm: equ     00010000B
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     00001100B
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 << MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 << MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 << MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 << MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     00000011B
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 << MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ (2 << MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ (3 << MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     10000000B   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     01000000B   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     00100000B   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     00010000B   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     00001000B   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     00000100B   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     00000010B   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     00000001B   ; Transmit enable
(1)       0 :
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     10000000B   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     01000000B   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     00100000B   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     00010000B   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     00001000B   ; Parity Error
(1)       0 : =4                 ST_TxEMPTY_bm:  equ     00000100B   ; Transmitter empty
(1)       0 : =2                 ST_RxRDY_bm:    equ     00000010B   ; Receiver ready
(1)       0 : =1                 ST_TxRDY_bm:    equ     00000001B   ; Transmitter ready
          0 :                    ;;; Async 1stop 8data x16
          0 : =4E                ASYNC_MODE:     equ     MODE_STOP1_gc|MODE_LEN8_gc|MODE_BAUD_X16
          0 :                    ;;; RTS/DTR, error reset, Rx enable, Tx enable
          0 : =37                RX_EN_TX_EN:    equ     CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm|CMD_TxEN_bm
          0 : =36                RX_EN_TX_DIS:   equ     CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm
          0 :
       2000 :                            org     2000H
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       ds      rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       ds      tx_queue_size
       2100 :
       1000 :                            org     1000H
       1000 : =1000              stack:  equ     $
       1000 :
          0 :                            org     ORG_RESET
          0 : C3 00 01                   jmp     init
          3 :
         28 :                            org     ORG_RST5
         28 : C3 29 02                   jmp     isr_intr_rx
         2B :
         30 :                            org     ORG_RST6
         30 : C3 3E 02                   jmp     isr_intr_tx
         33 :
        100 :                            org     0100H
        100 :                    init:
        100 : 31 00 10                   lxi     sp, stack
        103 : 21 00 20                   lxi     h, rx_queue
        106 : 06 80                      mvi     b, rx_queue_size
        108 : CD C7 01                   call    queue_init
        10B : 21 80 20                   lxi     h, tx_queue
        10E : 06 80                      mvi     b, tx_queue_size
        110 : CD C7 01                   call    queue_init
        113 :                    init_usart:
        113 : AF                         xra     a               ; clear A
        114 : D3 01                      out     USARTC
        116 : D3 01                      out     USARTC
        118 : D3 01                      out     USARTC          ; safest way to sync mode
        11A : 3E 40                      mvi     a, CMD_IR_bm
        11C : D3 01                      out     USARTC          ; reset
        11E : 00                         nop
        11F : 00                         nop
        120 : 3E 4E                      mvi     a, ASYNC_MODE
        122 : D3 01                      out     USARTC
        124 : 00                         nop
        125 : 00                         nop
        126 : 3E 36                      mvi     a, RX_EN_TX_DIS
        128 : D3 01                      out     USARTC
        12A : 3E 28                      mvi     a, ORG_RST5
        12C : D3 02                      out     USARTRV         ; set RxRDY interrupt vector RST 5.5
        12E : 3E 30                      mvi     a, ORG_RST6
        130 : D3 03                      out     USARTTV         ; set TxRDY interrupt vector RST 6
        132 : FB                         ei
        133 :
        133 :                    receive_loop:
        133 : CD 9E 01                   call    getchar
        136 : D2 33 01                   jnc     receive_loop
        139 : B7                         ora     a
        13A : CA 57 01                   jz      halt_to_system
        13D :                    echo_back:
        13D : 47                         mov     b, a
        13E : CD B3 01                   call    putchar         ; echo
        141 : 3E 20                      mvi     a, ' '          ; space
        143 : CD B3 01                   call    putchar
        146 : CD 58 01                   call    put_hex8        ; print in hex
        149 : 3E 20                      mvi     a, ' '          ; space
        14B : CD B3 01                   call    putchar
        14E : CD 76 01                   call    put_bin8        ; print in binary
        151 : CD A9 01                   call    newline
        154 : C3 33 01                   jmp     receive_loop
        157 :                    halt_to_system:
        157 : 76                         hlt
        158 :
        158 :                    ;;; Print uint8_t in hex
        158 :                    ;;; @param B uint8_t value to be printed in hex.
        158 :                    ;;; @clobber A
        158 :                    put_hex8:
        158 : 3E 30                      mvi     a, '0'
        15A : CD B3 01                   call    putchar
        15D : 3E 78                      mvi     a, 'x'
        15F : CD B3 01                   call    putchar
        162 : 78                         mov     a, b
        163 : 0F                         rrc
        164 : 0F                         rrc
        165 : 0F                         rrc
        166 : 0F                         rrc
        167 : CD 6B 01                   call    put_hex4
        16A : 78                         mov     a, b
        16B :                    put_hex4:
        16B : E6 0F                      ani     0FH
        16D : C6 90                      adi     90H
        16F : 27                         daa
        170 : CE 40                      aci     40H
        172 : 27                         daa
        173 : C3 B3 01                   jmp     putchar
        176 :
        176 :                    ;;; Print uint8_t in binary
        176 :                    ;;; @param B uint8_t value to be printed in binary.
        176 :                    ;;; @clobber A
        176 :                    put_bin8:
        176 : C5                         push    b
        177 : 3E 30                      mvi     a, '0'
        179 : CD B3 01                   call    putchar
        17C : 3E 62                      mvi     a, 'b'
        17E : CD B3 01                   call    putchar
        181 : 78                         mov     a, b
        182 : CD 8A 01                   call    put_bin4
        185 : CD 8A 01                   call    put_bin4
        188 : C1                         pop     b
        189 : C9                         ret
        18A :                    put_bin4:
        18A : CD 8D 01                   call    put_bin2
        18D :                    put_bin2:
        18D : CD 90 01                   call    put_bin1
        190 :                    put_bin1:
        190 : 17                         ral                     ; PSW.C=MSB
        191 : 0E 30                      mvi     c, '0'
        193 : D2 97 01                   jnc     put_bin0        ; MSB=0
        196 : 0C                         inr     c               ; MSB=1
        197 :                    put_bin0:
        197 : 47                         mov     b, a
        198 : 79                         mov     a, c
        199 : CD B3 01                   call    putchar
        19C : 78                         mov     a, b
        19D : C9                         ret
        19E :
        19E :                    ;;; Get character
        19E :                    ;;; @return A
        19E :                    ;;; @return CC.C 0 if no character
        19E :                    getchar:
        19E : E5                         push    h
        19F : 21 00 20                   lxi     h, rx_queue
        1A2 : F3                         di
        1A3 : CD 05 02                   call    queue_remove
        1A6 : FB                         ei
        1A7 : E1                         pop     h
        1A8 : C9                         ret
        1A9 :
        1A9 :                    ;;; Put newline
        1A9 :                    ;;; @clobber A
        1A9 :                    newline:
        1A9 : 3E 0D                      mvi     a, 0DH
        1AB : CD B3 01                   call    putchar
        1AE : 3E 0A                      mvi     a, 0AH
        1B0 : C3 B3 01                   jmp     putchar
        1B3 :
        1B3 :                    ;;; Put character
        1B3 :                    ;;; @param A
        1B3 :                    putchar:
        1B3 : F5                         push    psw
        1B4 : E5                         push    h
        1B5 : 21 80 20                   lxi     h, tx_queue
        1B8 :                    putchar_retry:
        1B8 : F3                         di
        1B9 : CD DD 01                   call    queue_add
        1BC : FB                         ei
        1BD : D2 B8 01                   jnc     putchar_retry   ; branch if queue is full
        1C0 : E1                         pop     h
        1C1 : 3E 37                      mvi     a, RX_EN_TX_EN  ; enable Tx
        1C3 : D3 01                      out     USARTC
        1C5 : F1                         pop     psw
        1C6 : C9                         ret
        1C7 :
        1C7 :                            include "queue.inc"
(1)     1C7 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     1C7 :                    ;;; [queue] queue structure
(1)     1C7 : =0                 queue_len:      equ     0       ; queue length
(1)     1C7 : =1                 queue_size:     equ     1       ; buffer size
(1)     1C7 : =2                 queue_put:      equ     2       ; queue put index
(1)     1C7 : =3                 queue_get:      equ     3       ; queue get index
(1)     1C7 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     1C7 :
(1)     1C7 :                    ;;; [queue] Initialize queue
(1)     1C7 :                    ;;; @param HL queue work space pointer
(1)     1C7 :                    ;;; @param B queue work space size
(1)     1C7 :                    ;;; @clobber B
(1)     1C7 :                    queue_init:
(1)     1C7 : F5                         push    psw
(1)     1C8 : E5                         push    h
(1)     1C9 : AF                         xra     a
(1)     1CA : 36 00                      mvi     m, 0            ; queue_len
(1)     1CC : 78                         mov     a, b
(1)     1CD : DE 04                      sbi     queue_buf
(1)     1CF : 23                         inx     h
(1)     1D0 : 77                         mov     m, a            ; queue_size
(1)     1D1 : C6 02                      adi     2               ; for queue_put and queue_get
(1)     1D3 :                    queue_init_loop:
(1)     1D3 : 23                         inx     h
(1)     1D4 : 36 00                      mvi     m, 0
(1)     1D6 : 05                         dcr     b
(1)     1D7 : C2 D3 01                   jnz     queue_init_loop
(1)     1DA : E1                         pop     h
(1)     1DB : F1                         pop     psw
(1)     1DC : C9                         ret
(1)     1DD :
(1)     1DD :                    ;;; [queue] Add an element to queue
(1)     1DD :                    ;;; @param HL queue work space pointer
(1)     1DD :                    ;;; @param A an element
(1)     1DD :                    ;;; @return F.C 0 if queue is full
(1)     1DD :                    queue_add:
(1)     1DD : D5                         push    d
(1)     1DE : 57                         mov     d, a            ; save an element
(1)     1DF : 7E                         mov     a, m            ; queue_len
(1)     1E0 : 23                         inx     h
(1)     1E1 : BE                         cmp     m               ; queue_size
(1)     1E2 : 2B                         dcx     h
(1)     1E3 : 7A                         mov     a, d            ; restore an element
(1)     1E4 : DA E9 01                   jc      queue_add_store ; queue_len < queue_size
(1)     1E7 : D1                         pop     d               ; cleared carry is ensured by |jc|
(1)     1E8 : C9                         ret
(1)     1E9 :                    queue_add_store:
(1)     1E9 : E5                         push    h
(1)     1EA : 34                         inr     m               ; queue_len++
(1)     1EB : 23                         inx     h
(1)     1EC : 23                         inx     h
(1)     1ED : 5E                         mov     e, m            ; queue_put
(1)     1EE : 16 00                      mvi     d, 0
(1)     1F0 : EB                         xchg                    ; DE points queue_put
(1)     1F1 : 19                         dad     d
(1)     1F2 : 23                         inx     h
(1)     1F3 : 23                         inx     h               ; offset of queue_buf
(1)     1F4 : 77                         mov     m, a            ; store an element
(1)     1F5 : EB                         xchg                    ; DE points a stored element
(1)     1F6 : 7E                         mov     a, m            ; queue_put
(1)     1F7 : 3C                         inr     a               ; queue_put++
(1)     1F8 : 2B                         dcx     h
(1)     1F9 : BE                         cmp     m               ; queue_size
(1)     1FA : 23                         inx     h
(1)     1FB : DA FF 01                   jc      queue_add_update ; queue_put < queue_size
(1)     1FE : AF                         xra     a                ; wrap around
(1)     1FF :                    queue_add_update:
(1)     1FF : 77                         mov     m, a            ; queue_put
(1)     200 : 1A                         ldax    d               ; restore an element
(1)     201 : E1                         pop     h
(1)     202 : D1                         pop     d
(1)     203 : 37                         stc                     ; set carry
(1)     204 : C9                         ret
(1)     205 :
(1)     205 :                    ;;; [queue] Remove an element from queue
(1)     205 :                    ;;; @param HL queue work space pointer
(1)     205 :                    ;;; @return A an element
(1)     205 :                    ;;; @return F.C 0 if queue is empty
(1)     205 :                    queue_remove:
(1)     205 : 7E                         mov     a, m            ; queue_len
(1)     206 : B7                         ora     a               ; clear carry
(1)     207 : C2 0B 02                   jnz     queue_remove_elem ; queue_len > 0
(1)     20A : C9                         ret                     ; carry is cleared by |ora|
(1)     20B :                    queue_remove_elem:
(1)     20B : D5                         push    d
(1)     20C : E5                         push    h
(1)     20D : 35                         dcr     m               ; queue_len--
(1)     20E : 23                         inx     h
(1)     20F : 23                         inx     h
(1)     210 : 23                         inx     h
(1)     211 : 7E                         mov     a, m            ; queue_get
(1)     212 : 5F                         mov     e, a
(1)     213 : 16 00                      mvi     d, 0
(1)     215 : EB                         xchg                    ; DE points queue_get
(1)     216 : 19                         dad     d
(1)     217 : 23                         inx     h               ; offset of queue_buf
(1)     218 : EB                         xchg                    ; DE points an element to read
(1)     219 : 3C                         inr     a               ; queue_get++
(1)     21A : 2B                         dcx     h
(1)     21B : 2B                         dcx     h
(1)     21C : BE                         cmp     m               ; queue_size
(1)     21D : 23                         inx     h
(1)     21E : 23                         inx     h
(1)     21F : DA 23 02                   jc      queue_remove_update ; queue_get < queue_size
(1)     222 : AF                         xra     a                   ; wrap around
(1)     223 :                    queue_remove_update:
(1)     223 : 77                         mov     m, a            ; queue_get
(1)     224 : 1A                         ldax    d               ; read an element
(1)     225 : E1                         pop     h
(1)     226 : D1                         pop     d
(1)     227 : 37                         stc                     ; set carry
(1)     228 : C9                         ret
        229 :
        229 :                    isr_intr_rx:
        229 : F5                         push    psw
        22A :                    isr_intr_receive:
        22A : DB 01                      in      USARTS
        22C : E6 02                      ani     ST_RxRDY_bm
        22E : CA 3B 02                   jz      isr_intr_rx_exit
        231 : DB 00                      in      USARTD          ; receive character
        233 : E5                         push    h
        234 : 21 00 20                   lxi     h, rx_queue
        237 : CD DD 01                   call    queue_add
        23A : E1                         pop     h
        23B :                    isr_intr_rx_exit:
        23B : F1                         pop     psw
        23C : FB                         ei
        23D : C9                         ret
        23E :
        23E :                    isr_intr_tx:
        23E : F5                         push    psw
        23F : DB 01                      in      USARTS
        241 : E6 01                      ani     ST_TxRDY_bm
        243 : CA 53 02                   jz      isr_intr_tx_exit
        246 : E5                         push    h
        247 : 21 80 20                   lxi     h, tx_queue
        24A : CD 05 02                   call    queue_remove
        24D : E1                         pop     h
        24E : D2 56 02                   jnc     isr_intr_send_empty
        251 : D3 00                      out     USARTD          ; send character
        253 :                    isr_intr_tx_exit:
        253 : F1                         pop     psw
        254 : FB                         ei
        255 : C9                         ret
        256 :                    isr_intr_send_empty:
        256 : 3E 36                      mvi     a, RX_EN_TX_DIS
        258 : D3 01                      out     USARTC          ; disable Tx
        25A : F1                         pop     psw
        25B : FB                         ei
        25C : C9                         ret
        25D :
        25D :                            end
