          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            include "i8080.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; i8080
(1)       0 :                            cpu     8080
(1)       0 :                    ;;; FLAGS Register
(1)       0 : =80                F_SIGN:         equ     10000000B ; set to 1 if negative
(1)       0 : =40                F_ZERO:         equ     01000000B ; set to 1 if zero
(1)       0 : =10                F_HALF_CARRY:   equ     00010000B ; set to 1 if carry from bit-3
(1)       0 : =4                 F_PARITY:       equ     00000100B ; set to 1 if even parity
(1)       0 : =1                 F_CARRY:        equ     00000001B ; set to 1 if carry
(1)       0 :                    ;;; Interrupt origin
(1)       0 : =0                 ORG_RESET:      equ     0000H   ; RESET
(1)       0 : =0                 ORG_RST0:       equ     0000H   ; RST 0
(1)       0 : =8                 ORG_RST1:       equ     0008H   ; RST 1
(1)       0 : =10                ORG_RST2:       equ     0010H   ; RST 2
(1)       0 : =18                ORG_RST3:       equ     0018H   ; RST 3
(1)       0 : =20                ORG_RST4:       equ     0020H   ; RST 4
(1)       0 : =28                ORG_RST5:       equ     0028H   ; RST 5
(1)       0 : =30                ORG_RST6:       equ     0030H   ; RST 6
(1)       0 : =38                ORG_RST7:       equ     0038H   ; RST 3
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =0                 USART:          equ     00H
          0 : =0                 USARTD:         equ     USART+0 ; Receive/Transmit data
          0 : =1                 USARTS:         equ     USART+1 ; Srtatus register
          0 : =1                 USARTC:         equ     USART+1 ; Control register
          0 : =2                 USARTRV:        equ     USART+2 ; Receive interrupt vector (ORG_*)
          0 : =3                 USARTTV:        equ     USART+3 ; Transmit interrupt vector (ORG_*)
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     11000000B
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 << MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 << MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 << MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     00100000B
(1)       0 : =10                MODE_PARITY_bm: equ     00010000B
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     00001100B
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 << MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 << MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 << MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 << MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     00000011B
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 << MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ (2 << MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ (3 << MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     10000000B   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     01000000B   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     00100000B   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     00010000B   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     00001000B   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     00000100B   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     00000010B   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     00000001B   ; Transmit enable
(1)       0 :
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     10000000B   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     01000000B   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     00100000B   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     00010000B   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     00001000B   ; Parity Error
(1)       0 : =4                 ST_TxEMPTY_bm:  equ     00000100B   ; Transmitter empty
(1)       0 : =2                 ST_RxRDY_bm:    equ     00000010B   ; Receiver ready
(1)       0 : =1                 ST_TxRDY_bm:    equ     00000001B   ; Transmitter ready
          0 :                    ;;; Async 1stop 8data x16
          0 : =4E                ASYNC_MODE:     equ     MODE_STOP1_gc|MODE_LEN8_gc|MODE_BAUD_X16
          0 :                    ;;; RTS/DTR, error reset, Rx enable, Tx enable
          0 : =37                RX_EN_TX_EN:    equ     CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm|CMD_TxEN_bm
          0 : =36                RX_EN_TX_DIS:   equ     CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm
          0 :
       2000 :                            org     2000H
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       ds      rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       ds      tx_queue_size
       2100 :
       1000 :                            org     1000H
       1000 : =1000              stack:  equ     $
       1000 :
          0 :                            org     ORG_RESET
          0 : C3 00 01                   jmp     init
          3 :
         28 :                            org     ORG_RST5
         28 : C3 52 04                   jmp     isr_intr_rx
         2B :
         30 :                            org     ORG_RST6
         30 : C3 67 04                   jmp     isr_intr_tx
         33 :
        100 :                            org     0100H
        100 :                    init:
        100 : 31 00 10                   lxi     sp, stack
        103 : 21 00 20                   lxi     h, rx_queue
        106 : 06 80                      mvi     b, rx_queue_size
        108 : CD F0 03                   call    queue_init
        10B : 21 80 20                   lxi     h, tx_queue
        10E : 06 80                      mvi     b, tx_queue_size
        110 : CD F0 03                   call    queue_init
        113 :                    init_usart:
        113 : AF                         xra     a               ; clear A
        114 : D3 01                      out     USARTC
        116 : D3 01                      out     USARTC
        118 : D3 01                      out     USARTC          ; safest way to sync mode
        11A : 3E 40                      mvi     a, CMD_IR_bm
        11C : D3 01                      out     USARTC          ; reset
        11E : 00                         nop
        11F : 00                         nop
        120 : 3E 4E                      mvi     a, ASYNC_MODE
        122 : D3 01                      out     USARTC
        124 : 00                         nop
        125 : 00                         nop
        126 : 3E 36                      mvi     a, RX_EN_TX_DIS
        128 : D3 01                      out     USARTC
        12A : 3E 28                      mvi     a, ORG_RST5
        12C : D3 02                      out     USARTRV         ; set RxRDY interrupt vector RST 5
        12E : 3E 30                      mvi     a, ORG_RST6
        130 : D3 03                      out     USARTTV         ; set TxRDY interrupt vector RST 6
        132 : FB                         ei
        133 :
        133 :                    loop:
        133 : CD 7A 01                   call    mandelbrot
        136 : CD 5B 01                   call    newline
        139 : F2 33 01                   jp      loop
        13C :
        13C :                    ;;; Get character
        13C :                    ;;; @return A
        13C :                    ;;; @return CC.C 0 if no character
        13C :                    getchar:
        13C : E5                         push    h
        13D : 21 00 20                   lxi     h, rx_queue
        140 : F3                         di
        141 : CD 2E 04                   call    queue_remove
        144 : FB                         ei
        145 : E1                         pop     h
        146 : C9                         ret
        147 :
        147 :                    ;;; Put character
        147 :                    ;;; @param A
        147 :                    putchar:
        147 : F5                         push    psw
        148 : E5                         push    h
        149 : 21 80 20                   lxi     h, tx_queue
        14C :                    putchar_retry:
        14C : F3                         di
        14D : CD 06 04                   call    queue_add
        150 : FB                         ei
        151 : D2 4C 01                   jnc     putchar_retry   ; branch if queue is full
        154 : E1                         pop     h
        155 : 3E 37                      mvi     a, RX_EN_TX_EN  ; enable Tx
        157 : D3 01                      out     USARTC
        159 :                    putchar_exit:
        159 : F1                         pop     psw
        15A : C9                         ret
        15B :
        15B :                    ;;; Put newline
        15B :                    ;;; @clobber A
        15B :                    newline:
        15B : 3E 0D                      mvi     A, 0DH
        15D : CD 47 01                   call    putchar
        160 : 3E 0A                      mvi     A, 0AH
        162 : C3 47 01                   jmp     putchar
        165 :
        165 :                    ;;; Put newline
        165 :                    ;;; @clobber A
        165 :                    putspace:
        165 : 3E 20                      mvi     A, ' '
        167 : C3 47 01                   jmp     putchar
        16A :
        16A :                            include "mandelbrot.inc"
(1)     16A :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     16A :
(1)     16A :                    ;;; Sign extend A into BC
(1)     16A :                    ;;; @param A 8-bit value
(1)     16A :                    ;;; @return BC 16-bit value
(1)     16A :                    sex_BC:
(1)     16A : 06 00                      mvi     B, 0
(1)     16C : 4F                         mov     C, A
(1)     16D : B7                         ora     A
(1)     16E : F0                         rp
(1)     16F : 06 FF                      mvi     B, -1
(1)     171 : C9                         ret
(1)     172 :
(1)     172 :                    ;;; Sign extend A into HL
(1)     172 :                    ;;; @param A 8-bit value
(1)     172 :                    ;;; @return HL 16-bit value
(1)     172 :                    sex_HL:
(1)     172 : 26 00                      mvi     H, 0
(1)     174 : 6F                         mov     L, A
(1)     175 : B7                         ora     A
(1)     176 : F0                         rp
(1)     177 : 26 FF                      mvi     H, -1
(1)     179 : C9                         ret
(1)     17A :
(1)     17A : =32                Fv:     equ     50
(1)     17A :                    mandelbrot:
(1)     17A : 3E F4                      mvi     A, -12
(1)     17C : 32 D8 02                   sta     vY              ; Y=-12
(1)     17F :                    loop_y:
(1)     17F : 3E CF                      mvi     A, -49
(1)     181 : 32 DA 02                   sta     vX              ; X=-49
(1)     184 :                    loop_x:
(1)     184 : 3A DA 02                   lda     vX
(1)     187 : CD 6A 01                   call    sex_BC          ; BC=X
(1)     18A : 11 E5 00                   lxi     D, 229
(1)     18D : CD 58 03                   call    mul16           ; X*229
(1)     190 : 44                         mov     B, H
(1)     191 : 4D                         mov     C, L
(1)     192 : 11 64 00                   lxi     D, 100
(1)     195 : CD C7 03                   call    div16           ; X*229/100
(1)     198 : 22 C8 02                   shld    vC              ; C=X*229/200
(1)     19B : 22 CC 02                   shld    vA              ; A=C
(1)     19E : 3A D8 02                   lda     vY
(1)     1A1 : CD 6A 01                   call    sex_BC          ; BC=Y
(1)     1A4 : 11 A0 01                   lxi     D, 416
(1)     1A7 : CD 58 03                   call    mul16           ; Y*416
(1)     1AA : 44                         mov     B, H
(1)     1AB : 4D                         mov     C, L
(1)     1AC : 11 64 00                   lxi     D, 100
(1)     1AF : CD C7 03                   call    div16           ; Y*416/100
(1)     1B2 : 22 CA 02                   shld    vD              ; D=y*416/100
(1)     1B5 : 22 CE 02                   shld    vB              ; B=D
(1)     1B8 : AF                         xra     A
(1)     1B9 : 32 DC 02                   sta     vI              ; I=0
(1)     1BC :
(1)     1BC :                            ;; lda     vY
(1)     1BC :                            ;; call    sex_HL
(1)     1BC :                            ;; mvi     A, 'Y'
(1)     1BC :                            ;; call    print
(1)     1BC :                            ;; lda     vX
(1)     1BC :                            ;; call    sex_HL
(1)     1BC :                            ;; mvi     A, 'X'
(1)     1BC :                            ;; call    print
(1)     1BC :                            ;; lhld    vC
(1)     1BC :                            ;; mvi     A, 'C'
(1)     1BC :                            ;; call    print
(1)     1BC :                            ;; lhld    vD
(1)     1BC :                            ;; mvi     A, 'D'
(1)     1BC :                            ;; call    print
(1)     1BC :                            ;; call    newline
(1)     1BC :
(1)     1BC :                    loop_i:
(1)     1BC : 2A CE 02                   lhld    vB
(1)     1BF : 44                         mov     B, H
(1)     1C0 : 4D                         mov     C, L
(1)     1C1 : 11 32 00                   lxi     D, Fv
(1)     1C4 : CD C7 03                   call    div16           ; B/F
(1)     1C7 : 22 D2 02                   shld    (vQ)            ; Q=B/F
(1)     1CA : 44                         mov     B, H
(1)     1CB : 4D                         mov     C, L
(1)     1CC : 11 CE FF                   lxi     D, -Fv
(1)     1CF : CD 58 03                   call    mul16           ; -Q*F
(1)     1D2 : 54                         mov     D, H
(1)     1D3 : 5D                         mov     E, L
(1)     1D4 : 2A CE 02                   lhld    vB
(1)     1D7 : 19                         dad     D               ; S=B-Q*F
(1)     1D8 : 22 D4 02                   shld    vS
(1)     1DB : 2A CE 02                   lhld    vB
(1)     1DE : 44                         mov     B, H
(1)     1DF : 4D                         mov     C, L
(1)     1E0 : 54                         mov     D, H
(1)     1E1 : 5D                         mov     E, L
(1)     1E2 : CD 58 03                   call    mul16           ; B*B
(1)     1E5 : E5                         push    H               ; push B*B
(1)     1E6 : 2A CC 02                   lhld    vA
(1)     1E9 : 44                         mov     B, H
(1)     1EA : 4D                         mov     C, L
(1)     1EB : 54                         mov     D, H
(1)     1EC : 5D                         mov     E, L
(1)     1ED : CD 58 03                   call    mul16           ; A*A
(1)     1F0 : D1                         pop     D               ; pop B*B
(1)     1F1 : CD 32 03                   call    neg_DE          ; -B*B
(1)     1F4 : 19                         dad     D               ; A*A-B*B
(1)     1F5 : 44                         mov     B, H
(1)     1F6 : 4D                         mov     C, L
(1)     1F7 : 11 32 00                   lxi     D, Fv
(1)     1FA : CD C7 03                   call    div16           ; (A*A-B*B)/F
(1)     1FD : 54                         mov     D, H
(1)     1FE : 5D                         mov     E, L
(1)     1FF : 2A C8 02                   lhld    vC
(1)     202 : 19                         dad     D               ; (A*A-B*B)/F+C
(1)     203 : E5                         push    H               ; push (A*A-B*B)/F+C
(1)     204 : 2A CC 02                   lhld    vA
(1)     207 : 44                         mov     B, H
(1)     208 : 4D                         mov     C, L
(1)     209 : 2A D4 02                   lhld    vS
(1)     20C : 54                         mov     D, H
(1)     20D : 5D                         mov     E, L
(1)     20E : CD 58 03                   call    mul16           ; A*S
(1)     211 : 44                         mov     B, H
(1)     212 : 4D                         mov     C, L
(1)     213 : 11 32 00                   lxi     D, Fv
(1)     216 : CD C7 03                   call    div16           ; A*S/F
(1)     219 : E5                         push    H               ; push A*S/F
(1)     21A : 2A CC 02                   lhld    vA
(1)     21D : 44                         mov     B, H
(1)     21E : 4D                         mov     C, L
(1)     21F : 2A D2 02                   lhld    vQ
(1)     222 : 54                         mov     D, H
(1)     223 : 5D                         mov     E, L
(1)     224 : CD 58 03                   call    mul16           ; A*Q
(1)     227 : D1                         pop     D               ; pop A*S/F
(1)     228 : 19                         dad     D               ; A*Q+A*S/F
(1)     229 : 29                         dad     H               ; 2*(A*Q+A*S/F)
(1)     22A : 54                         mov     D, H
(1)     22B : 5D                         mov     E, L
(1)     22C : 2A CA 02                   lhld    vD
(1)     22F : 19                         dad     D               ; 2*(A*Q+A*S/F)+D
(1)     230 : 22 CE 02                   shld    vB              ; B=2*(A*Q+A*S/F)+D
(1)     233 : E1                         pop     H               ; pop (A*A-B*B)/F+C
(1)     234 : 22 CC 02                   shld    vA              ; A=(A*A-B*B)/F+C
(1)     237 : 44                         mov     B, H
(1)     238 : 4D                         mov     C, L
(1)     239 : 11 32 00                   lxi     D, Fv
(1)     23C : CD C7 03                   call    div16           ; A/F
(1)     23F : 22 D0 02                   shld    vP              ; P=A/F
(1)     242 : 44                         mov     B, H
(1)     243 : 4D                         mov     C, L
(1)     244 : 54                         mov     D, H
(1)     245 : 5D                         mov     E, L
(1)     246 : CD 58 03                   call    mul16           ; P*P
(1)     249 : E5                         push    H               ; push P*P
(1)     24A : 2A CE 02                   lhld    vB
(1)     24D : 44                         mov     B, H
(1)     24E : 4D                         mov     C, L
(1)     24F : 11 32 00                   lxi     D, Fv
(1)     252 : CD C7 03                   call    div16           ; B/F
(1)     255 : 22 D2 02                   shld    vQ              ; Q=B/F
(1)     258 : 44                         mov     B, H
(1)     259 : 4D                         mov     C, L
(1)     25A : 54                         mov     D, H
(1)     25B : 5D                         mov     E, L
(1)     25C : CD 58 03                   call    mul16           ; Q*Q
(1)     25F : D1                         pop     D               ; pop P*P
(1)     260 : 19                         dad     D               ; P*P+Q*Q
(1)     261 : 22 D6 02                   shld    vT              ; T=P*P+Q*Q
(1)     264 :
(1)     264 :                            ;; call    putspace
(1)     264 :                            ;; lda     vI
(1)     264 :                            ;; call    sex_HL
(1)     264 :                            ;; mvi     A, 'I'
(1)     264 :                            ;; call    print
(1)     264 :                            ;; lhld    vA
(1)     264 :                            ;; mvi     A, 'A'
(1)     264 :                            ;; call    print
(1)     264 :                            ;; lhld    vB
(1)     264 :                            ;; mvi     A, 'B'
(1)     264 :                            ;; call    print
(1)     264 :                            ;; lhld    vP
(1)     264 :                            ;; mvi     A, 'P'
(1)     264 :                            ;; call    print
(1)     264 :                            ;; lhld    vQ
(1)     264 :                            ;; mvi     A, 'Q'
(1)     264 :                            ;; call    print
(1)     264 :                            ;; lhld    vT
(1)     264 :                            ;; mvi     A, 'T'
(1)     264 :                            ;; call    print
(1)     264 :                            ;; call    newline
(1)     264 :
(1)     264 : 3A D7 02                   lda     vT+1
(1)     267 : C2 83 02                   jnz     print_i         ; if T>=256
(1)     26A : 3A D6 02                   lda     vT
(1)     26D : FE 05                      cpi     4+1
(1)     26F : D2 83 02                   jnc     print_i         ; if 4<T
(1)     272 : 3A DC 02                   lda     vI
(1)     275 : 3C                         inr     A
(1)     276 : 32 DC 02                   sta     vI              ; I+=1
(1)     279 : FE 10                      cpi     16
(1)     27B : DA BC 01                   jc      loop_i          ; if I<16
(1)     27E : 3E 20                      mvi     A, ' '
(1)     280 : C3 8C 02                   jmp     print_char
(1)     283 :                    print_i:
(1)     283 : 3A DC 02                   lda     vI
(1)     286 : C6 90                      adi     90H
(1)     288 : 27                         daa
(1)     289 : CE 40                      aci     40H
(1)     28B : 27                         daa
(1)     28C :                    print_char:
(1)     28C : CD 47 01                   call    putchar
(1)     28F :
(1)     28F :                            ;; push    PSW
(1)     28F :                            ;; mvi     A, '@'
(1)     28F :                            ;; call    putchar
(1)     28F :                            ;; mvi     A, '='
(1)     28F :                            ;; call    putchar
(1)     28F :                            ;; pop     PSW
(1)     28F :                            ;; call    putchar
(1)     28F :                            ;; call    newline
(1)     28F :
(1)     28F : CD 3C 01                   call    getchar
(1)     292 : D2 9A 02                   jnc     next_x
(1)     295 : B7                         ora     a
(1)     296 : C2 9A 02                   jnz     next_x
(1)     299 : 76                         hlt                     ; halt to system
(1)     29A :                    next_x:
(1)     29A : 21 DA 02                   lxi     H, vX           ; X+=1
(1)     29D : 34                         inr     M
(1)     29E : 7E                         mov     A, M
(1)     29F : B7                         ora     A
(1)     2A0 : FA 84 01                   jm      loop_x          ; if X<0
(1)     2A3 : FE 1E                      cpi     30
(1)     2A5 : DA 84 01                   jc      loop_x          ; if X<30
(1)     2A8 : CD 5B 01                   call    newline
(1)     2AB : 21 D8 02                   lxi     H, vY
(1)     2AE : 34                         inr     M               ; Y+=1
(1)     2AF : 7E                         mov     A, M
(1)     2B0 : B7                         ora     A
(1)     2B1 : FA 7F 01                   jm      loop_y          ; if Y<0
(1)     2B4 : FE 0D                      cpi     13
(1)     2B6 : DA 7F 01                   jc      loop_y          ; if X<13
(1)     2B9 : C9                         ret
(1)     2BA :
(1)     2BA :                    ;;; Print variable
(1)     2BA :                    ;;; @param A variable name
(1)     2BA :                    ;;; @param HL variable value
(1)     2BA :                    print:
(1)     2BA : CD 47 01                   call    putchar
(1)     2BD : 3E 3D                      mvi     A, '='
(1)     2BF : CD 47 01                   call    putchar
(1)     2C2 : CD DE 02                   call    print_int16
(1)     2C5 : C3 65 01                   jmp     putspace
(1)     2C8 :
(1)     2C8 :                    ;;; workspace
(1)     2C8 :                    vC:     ds      2
(1)     2CA :                    vD:     ds      2
(1)     2CC :                    vA:     ds      2
(1)     2CE :                    vB:     ds      2
(1)     2D0 :                    vP:     ds      2
(1)     2D2 :                    vQ:     ds      2
(1)     2D4 :                    vS:     ds      2
(1)     2D6 :                    vT:     ds      2
(1)     2D8 :                    vY:     ds      2
(1)     2DA :                    vX:     ds      2
(1)     2DC :                    vI:     ds      2
        2DE :                            include "arith.inc"
(1)     2DE :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     2DE :                            cpu     8085
(1)     2DE :
(1)     2DE :                    ;;; Print signed 16-bit integer as decimal
(1)     2DE :                    ;;; @param HL value
(1)     2DE :                    ;;; @clobber A HL
(1)     2DE :                    print_int16:
(1)     2DE : 7C                         mov     A, H
(1)     2DF : B5                         ora     L
(1)     2E0 : CA 12 03                   jz      print_uint16_zero
(1)     2E3 : 7C                         mov     A, H
(1)     2E4 : B7                         ora     A
(1)     2E5 : F2 F4 02                   jp      print_uint16
(1)     2E8 : 3E 2D                      mvi     A, '-'
(1)     2EA : CD 47 01                   call    putchar
(1)     2ED : 7D                         mov     A, L
(1)     2EE : 2F                         cma
(1)     2EF : 6F                         mov     L, A
(1)     2F0 : 7C                         mov     A, H
(1)     2F1 : 2F                         cma
(1)     2F2 : 67                         mov     H, A
(1)     2F3 : 23                         inx     H               ; HL=-value
(1)     2F4 :                    print_uint16:
(1)     2F4 : C5                         push    B
(1)     2F5 : D5                         push    D
(1)     2F6 : CD FC 02                   call    print_uint16_loop
(1)     2F9 : D1                         pop     D
(1)     2FA : C1                         pop     B
(1)     2FB : C9                         ret
(1)     2FC :                    print_uint16_loop:
(1)     2FC : 7C                         mov     A, H
(1)     2FD : B5                         ora     L
(1)     2FE : C8                         rz
(1)     2FF : 44                         mov     B, H
(1)     300 : 4D                         mov     C, L
(1)     301 : 11 0A 00                   lxi     D, 10
(1)     304 : CD 81 03                   call    udiv16          ; BC/DE = HL...BC
(1)     307 : C5                         push    B               ; push remainder
(1)     308 : CD FC 02                   call    print_uint16_loop
(1)     30B : E1                         pop     H               ; pop remainder
(1)     30C : 7D                         mov     A, L
(1)     30D : C6 30                      adi     '0'
(1)     30F : C3 47 01                   jmp     putchar
(1)     312 :                    print_uint16_zero:
(1)     312 : 3E 30                      mvi     A, '0'
(1)     314 : C3 47 01                   jmp     putchar
(1)     317 :
(1)     317 :                    ;;; Signed comparison; minuend - subtrahend
(1)     317 :                    ;;; @param BC minuend
(1)     317 :                    ;;; @param DE subtrahend
(1)     317 :                    ;;; @return PSW.Z, PSW.S
(1)     317 :                    ;;; @clobber A
(1)     317 :                    cmp16:
(1)     317 : C5                         push    B
(1)     318 : D5                         push    D
(1)     319 : E5                         push    H
(1)     31A : 1A                         ldax    D
(1)     31B : 79                         mov     A, C
(1)     31C : 93                         sub     E
(1)     31D : 6F                         mov     L, A
(1)     31E : 78                         mov     A, B
(1)     31F : 9A                         sbb     D
(1)     320 : 67                         mov     H, A            ; HL=minuend-subtrahend
(1)     321 : B5                         ora     L
(1)     322 : CA 2E 03                   jz      cmp16_return    ; PSW.Z=1
(1)     325 : 7C                         mov     A, H            ; high(minuend-subtrahend)
(1)     326 : A8                         xra     B               ; high(minuend-subtrahend)^minuend
(1)     327 : 6F                         mov     L, A
(1)     328 : 78                         mov     A, B
(1)     329 : AA                         xra     D               ; high(minuend^subtrahend)
(1)     32A : A5                         ana     L               ; overflow
(1)     32B : AC                         xra     H               ; PSW.S=overflow^sign
(1)     32C : F6 01                      ori     1               ; clear PSW.Z
(1)     32E :                    cmp16_return:
(1)     32E : E1                         pop     H
(1)     32F : D1                         pop     D
(1)     330 : C1                         pop     B
(1)     331 : C9                         ret
(1)     332 :
(1)     332 :                    ;;; Negate; v
(1)     332 :                    ;;; @param DE v
(1)     332 :                    ;;; @return DE -v
(1)     332 :                    ;;; @clobber A
(1)     332 :                    neg_DE:
(1)     332 : 7A                         mov     A, D
(1)     333 : 2F                         cma
(1)     334 : 57                         mov     D, A
(1)     335 : 7B                         mov     A, E
(1)     336 : 2F                         cma
(1)     337 : 5F                         mov     E, A
(1)     338 : 13                         inx     D
(1)     339 : C9                         ret
(1)     33A :
(1)     33A :                    ;;; Unsigned multiplication; result = multiplicand * multiplier
(1)     33A :                    ;;; @param BC multiplicand
(1)     33A :                    ;;; @param DE multiplier
(1)     33A :                    ;;; @return HL result
(1)     33A :                    ;;; @clobber BC DE HL A
(1)     33A :                    umul16:
(1)     33A : 21 00 00                   lxi     H, 0            ; result=0
(1)     33D : C3 52 03                   jmp     umul16_check
(1)     340 :                    umul16_loop:
(1)     340 : B7                         ora     A               ; clear PSW.C
(1)     341 : 7A                         mov     A, D            ; multiplier >>= 1
(1)     342 : 1F                         rar
(1)     343 : 57                         mov     D, A
(1)     344 : 7B                         mov     A, E
(1)     345 : 1F                         rar
(1)     346 : 5F                         mov     E, A
(1)     347 : D2 4B 03                   jnc     umul16_next     ; if lsb(multiplier) == 0
(1)     34A : 09                         dad     B               ; result += multiplicand
(1)     34B :                    umul16_next:
(1)     34B : B7                         ora     A               ; clear PSW.C
(1)     34C : 79                         mov     A, C            ; multiplicand <<= 1
(1)     34D : 17                         ral
(1)     34E : 4F                         mov     C, A
(1)     34F : 78                         mov     A, B
(1)     350 : 17                         ral
(1)     351 : 47                         mov     B, A
(1)     352 :                    umul16_check:
(1)     352 : 7A                         mov     A, D
(1)     353 : B3                         ora     E
(1)     354 : C2 40 03                   jnz     umul16_loop     ; while multiplier != 0
(1)     357 :                    umul16_end:
(1)     357 : C9                         ret
(1)     358 :
(1)     358 :                    ;;; Signed multiplication; result =multiplicand * multiplier
(1)     358 :                    ;;; @param BC multiplicand
(1)     358 :                    ;;; @param DE multiplier
(1)     358 :                    ;;; @return HL result
(1)     358 :                    ;;; @clobber A BC DE
(1)     358 :                    mul16:
(1)     358 : 78                         mov     A, B
(1)     359 : AA                         xra     D
(1)     35A : F5                         push    PSW             ; save high(multiplicand^multiplier)
(1)     35B : 78                         mov     A, B
(1)     35C : B7                         ora     A
(1)     35D : F2 66 03                   jp      mul16_abs_muliplicand
(1)     360 : 2F                         cma
(1)     361 : 47                         mov     B, A
(1)     362 : 79                         mov     A, C
(1)     363 : 2F                         cma
(1)     364 : 4F                         mov     C, A
(1)     365 : 03                         inx     B               ; multiplicand = -multiplicand
(1)     366 :                    mul16_abs_muliplicand:
(1)     366 : 7A                         mov     A, D
(1)     367 : B7                         ora     A
(1)     368 : F2 71 03                   jp      mul16_multiply
(1)     36B : 2F                         cma
(1)     36C : 57                         mov     D, A
(1)     36D : 7B                         mov     A, E
(1)     36E : 2F                         cma
(1)     36F : 5F                         mov     E, A
(1)     370 : 13                         inx     D               ; multiplier = -multiplier
(1)     371 :                    mul16_multiply:
(1)     371 : CD 3A 03                   call    umul16          ; HL = multiplicand * multiplier
(1)     374 : F1                         pop     PSW             ; save high(multiplicand^multiplier)
(1)     375 : B7                         ora     A
(1)     376 : F2 80 03                   jp      mul16_return
(1)     379 : 7C                         mov     A, H
(1)     37A : 2F                         cma
(1)     37B : 67                         mov     H, A
(1)     37C : 7D                         mov     A, L
(1)     37D : 2F                         cma
(1)     37E : 6F                         mov     L, A
(1)     37F : 23                         inx     H               ; result = -result
(1)     380 :                    mul16_return:
(1)     380 : C9                         ret
(1)     381 :
(1)     381 :                    ;;; Unsigned division; dividend / divisor = quotient ... remainder
(1)     381 :                    ;;; @praram BC dividend
(1)     381 :                    ;;; @praram DE divisor
(1)     381 :                    ;;; @return BC remainder
(1)     381 :                    ;;; @return HL quotient
(1)     381 :                    ;;; @clobber A DE
(1)     381 :                    udiv16:
(1)     381 : 7A                         mov     A, D
(1)     382 : B3                         ora     E
(1)     383 : C8                         rz                      ; divide by zero
(1)     384 : 2E 01                      mvi     L, 1            ; L=bits
(1)     386 : C3 91 03                   jmp     udiv16_prep
(1)     389 :                    udiv16_prep_loop:
(1)     389 : B7                         ora     A               ; clear PSW.C
(1)     38A : 7B                         mov     A, E            ; divisor <<= 1
(1)     38B : 17                         ral
(1)     38C : 5F                         mov     E, A
(1)     38D : 7A                         mov     A, D
(1)     38E : 17                         ral
(1)     38F : 57                         mov     D, A
(1)     390 : 2C                         inr     L               ; ++bits
(1)     391 :                    udiv16_prep:                    ; while msb(divisor) == 0
(1)     391 : 7A                         mov     A, D
(1)     392 : B7                         ora     A
(1)     393 : F2 89 03                   jp      udiv16_prep_loop
(1)     396 : 7D                         mov     A, L
(1)     397 : F5                         push    PSW             ; push bits
(1)     398 : 60                         mov     H, B
(1)     399 : 69                         mov     L, C            ; HL=dividend
(1)     39A : AF                         xra     A
(1)     39B : 47                         mov     B, A
(1)     39C : 4F                         mov     C, A            ; BC=quotient
(1)     39D : C3 AF 03                   jmp     udiv16_enter_loop
(1)     3A0 :                    udiv16_loop:
(1)     3A0 : F5                         push    PSW             ; push bits
(1)     3A1 : B7                         ora     A               ; clear PSW.C
(1)     3A2 : 7A                         mov     A, D            ; divisor >>= 1
(1)     3A3 : 1F                         rar
(1)     3A4 : 57                         mov     D, A
(1)     3A5 : 7B                         mov     A, E
(1)     3A6 : 1F                         rar
(1)     3A7 : 5F                         mov     E, A
(1)     3A8 : B7                         ora     A               ; clear PSW.C
(1)     3A9 : 79                         mov     A, C            ; quotient <<= 1
(1)     3AA : 17                         ral
(1)     3AB : 4F                         mov     C, A
(1)     3AC : 78                         mov     A, B
(1)     3AD : 17                         ral
(1)     3AE : 47                         mov     B, A
(1)     3AF :                    udiv16_enter_loop:
(1)     3AF : 7D                         mov     A, L
(1)     3B0 : 93                         sub     E
(1)     3B1 : 6F                         mov     L, A
(1)     3B2 : 7C                         mov     A, H
(1)     3B3 : 9A                         sbb     D
(1)     3B4 : 67                         mov     H, A            ; dividend -= divisor
(1)     3B5 : DA BC 03                   jc      udiv16_readd    ; if dividend < 0
(1)     3B8 : 03                         inx     B               ; quotient |= 1
(1)     3B9 : C3 BD 03                   jmp     udiv16_next    ;
(1)     3BC :                    udiv16_readd:
(1)     3BC : 19                         dad     D               ; dividend += divisor
(1)     3BD :                    udiv16_next:
(1)     3BD : F1                         pop     PSW
(1)     3BE : 3D                         dcr     A               ; --bits
(1)     3BF : C2 A0 03                   jnz     udiv16_loop     ; while bits != 0
(1)     3C2 : E5                         push    H               ; remainder
(1)     3C3 : C5                         push    B               ; quotient
(1)     3C4 : E1                         pop     H
(1)     3C5 : C1                         pop     B
(1)     3C6 : C9                         ret
(1)     3C7 :
(1)     3C7 :                    ;;; Signed division; dividend / divisor = quotient ... remainder
(1)     3C7 :                    ;;; @param BC dividend
(1)     3C7 :                    ;;; @param DE divisor
(1)     3C7 :                    ;;; @return BC remainder
(1)     3C7 :                    ;;; @return HL quotient
(1)     3C7 :                    ;;; @clobber A DE
(1)     3C7 :                    div16:
(1)     3C7 : 78                         mov     A, B
(1)     3C8 : AA                         xra     D
(1)     3C9 : F5                         push    PSW             ; save high(dividend^divisor)
(1)     3CA : 78                         mov     A, B            ; H=high(dividend)
(1)     3CB : B7                         ora     A
(1)     3CC : F2 D5 03                   jp      div16_abs_dividend
(1)     3CF : 2F                         cma
(1)     3D0 : 47                         mov     B, A
(1)     3D1 : 79                         mov     A, C
(1)     3D2 : 2F                         cma
(1)     3D3 : 4F                         mov     C, A
(1)     3D4 : 03                         inx     B               ; dividend = -dividend
(1)     3D5 :                    div16_abs_dividend:
(1)     3D5 : 7A                         mov     A, D
(1)     3D6 : B7                         ora     A
(1)     3D7 : F2 E0 03                   jp      div16_divide
(1)     3DA : 2F                         cma
(1)     3DB : 57                         mov     D, A
(1)     3DC : 7B                         mov     A, E
(1)     3DD : 2F                         cma
(1)     3DE : 5F                         mov     E, A
(1)     3DF : 13                         inx     D               ; divisor = -divisor
(1)     3E0 :                    div16_divide:
(1)     3E0 : CD 81 03                   call    udiv16          ; HL=quotient, BC=remainder
(1)     3E3 : F1                         pop     PSW             ; A=high(dividend^divisor)
(1)     3E4 : B7                         ora     A
(1)     3E5 : F2 EF 03                   jp      div16_return
(1)     3E8 : 7C                         mov     A, H
(1)     3E9 : 2F                         cma
(1)     3EA : 67                         mov     H, A
(1)     3EB : 7D                         mov     A, L
(1)     3EC : 2F                         cma
(1)     3ED : 6F                         mov     L, A
(1)     3EE : 23                         inx     H               ; quotient=-quotient
(1)     3EF :                    div16_return:
(1)     3EF : C9                         ret
        3F0 :                            include "queue.inc"
(1)     3F0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     3F0 :                    ;;; [queue] queue structure
(1)     3F0 : =0                 queue_len:      equ     0       ; queue length
(1)     3F0 : =1                 queue_size:     equ     1       ; buffer size
(1)     3F0 : =2                 queue_put:      equ     2       ; queue put index
(1)     3F0 : =3                 queue_get:      equ     3       ; queue get index
(1)     3F0 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     3F0 :
(1)     3F0 :                    ;;; [queue] Initialize queue
(1)     3F0 :                    ;;; @param HL queue work space pointer
(1)     3F0 :                    ;;; @param B queue work space size
(1)     3F0 :                    ;;; @clobber B
(1)     3F0 :                    queue_init:
(1)     3F0 : F5                         push    psw
(1)     3F1 : E5                         push    h
(1)     3F2 : AF                         xra     a
(1)     3F3 : 36 00                      mvi     m, 0            ; queue_len
(1)     3F5 : 78                         mov     a, b
(1)     3F6 : DE 04                      sbi     queue_buf
(1)     3F8 : 23                         inx     h
(1)     3F9 : 77                         mov     m, a            ; queue_size
(1)     3FA : C6 02                      adi     2               ; for queue_put and queue_get
(1)     3FC :                    queue_init_loop:
(1)     3FC : 23                         inx     h
(1)     3FD : 36 00                      mvi     m, 0
(1)     3FF : 05                         dcr     b
(1)     400 : C2 FC 03                   jnz     queue_init_loop
(1)     403 : E1                         pop     h
(1)     404 : F1                         pop     psw
(1)     405 : C9                         ret
(1)     406 :
(1)     406 :                    ;;; [queue] Add an element to queue
(1)     406 :                    ;;; @param HL queue work space pointer
(1)     406 :                    ;;; @param A an element
(1)     406 :                    ;;; @return F.C 0 if queue is full
(1)     406 :                    queue_add:
(1)     406 : D5                         push    d
(1)     407 : 57                         mov     d, a            ; save an element
(1)     408 : 7E                         mov     a, m            ; queue_len
(1)     409 : 23                         inx     h
(1)     40A : BE                         cmp     m               ; queue_size
(1)     40B : 2B                         dcx     h
(1)     40C : 7A                         mov     a, d            ; restore an element
(1)     40D : DA 12 04                   jc      queue_add_store ; queue_len < queue_size
(1)     410 : D1                         pop     d               ; cleared carry is ensured by |jc|
(1)     411 : C9                         ret
(1)     412 :                    queue_add_store:
(1)     412 : E5                         push    h
(1)     413 : 34                         inr     m               ; queue_len++
(1)     414 : 23                         inx     h
(1)     415 : 23                         inx     h
(1)     416 : 5E                         mov     e, m            ; queue_put
(1)     417 : 16 00                      mvi     d, 0
(1)     419 : EB                         xchg                    ; DE points queue_put
(1)     41A : 19                         dad     d
(1)     41B : 23                         inx     h
(1)     41C : 23                         inx     h               ; offset of queue_buf
(1)     41D : 77                         mov     m, a            ; store an element
(1)     41E : EB                         xchg                    ; DE points a stored element
(1)     41F : 7E                         mov     a, m            ; queue_put
(1)     420 : 3C                         inr     a               ; queue_put++
(1)     421 : 2B                         dcx     h
(1)     422 : BE                         cmp     m               ; queue_size
(1)     423 : 23                         inx     h
(1)     424 : DA 28 04                   jc      queue_add_update ; queue_put < queue_size
(1)     427 : AF                         xra     a                ; wrap around
(1)     428 :                    queue_add_update:
(1)     428 : 77                         mov     m, a            ; queue_put
(1)     429 : 1A                         ldax    d               ; restore an element
(1)     42A : E1                         pop     h
(1)     42B : D1                         pop     d
(1)     42C : 37                         stc                     ; set carry
(1)     42D : C9                         ret
(1)     42E :
(1)     42E :                    ;;; [queue] Remove an element from queue
(1)     42E :                    ;;; @param HL queue work space pointer
(1)     42E :                    ;;; @return A an element
(1)     42E :                    ;;; @return F.C 0 if queue is empty
(1)     42E :                    queue_remove:
(1)     42E : 7E                         mov     a, m            ; queue_len
(1)     42F : B7                         ora     a               ; clear carry
(1)     430 : C2 34 04                   jnz     queue_remove_elem ; queue_len > 0
(1)     433 : C9                         ret                     ; carry is cleared by |ora|
(1)     434 :                    queue_remove_elem:
(1)     434 : D5                         push    d
(1)     435 : E5                         push    h
(1)     436 : 35                         dcr     m               ; queue_len--
(1)     437 : 23                         inx     h
(1)     438 : 23                         inx     h
(1)     439 : 23                         inx     h
(1)     43A : 7E                         mov     a, m            ; queue_get
(1)     43B : 5F                         mov     e, a
(1)     43C : 16 00                      mvi     d, 0
(1)     43E : EB                         xchg                    ; DE points queue_get
(1)     43F : 19                         dad     d
(1)     440 : 23                         inx     h               ; offset of queue_buf
(1)     441 : EB                         xchg                    ; DE points an element to read
(1)     442 : 3C                         inr     a               ; queue_get++
(1)     443 : 2B                         dcx     h
(1)     444 : 2B                         dcx     h
(1)     445 : BE                         cmp     m               ; queue_size
(1)     446 : 23                         inx     h
(1)     447 : 23                         inx     h
(1)     448 : DA 4C 04                   jc      queue_remove_update ; queue_get < queue_size
(1)     44B : AF                         xra     a                   ; wrap around
(1)     44C :                    queue_remove_update:
(1)     44C : 77                         mov     m, a            ; queue_get
(1)     44D : 1A                         ldax    d               ; read an element
(1)     44E : E1                         pop     h
(1)     44F : D1                         pop     d
(1)     450 : 37                         stc                     ; set carry
(1)     451 : C9                         ret
        452 :
        452 :                    isr_intr_rx:
        452 : F5                         push    psw
        453 : DB 01                      in      USARTS
        455 : E6 02                      ani     ST_RxRDY_bm
        457 : CA 64 04                   jz      isr_intr_rx_exit
        45A : DB 00                      in      USARTD          ; receive character
        45C : E5                         push    h
        45D : 21 00 20                   lxi     h, rx_queue
        460 : CD 06 04                   call    queue_add
        463 : E1                         pop     h
        464 :                    isr_intr_rx_exit:
        464 : F1                         pop     psw
        465 : FB                         ei
        466 : C9                         ret
        467 :
        467 :                    isr_intr_tx:
        467 : F5                         push    psw
        468 : DB 01                      in      USARTS
        46A : E6 01                      ani     ST_TxRDY_bm
        46C : CA 7C 04                   jz      isr_intr_tx_exit
        46F : E5                         push    h
        470 : 21 80 20                   lxi     h, tx_queue
        473 : CD 2E 04                   call    queue_remove
        476 : E1                         pop     h
        477 : D2 7F 04                   jnc     isr_intr_send_empty
        47A : D3 00                      out     USARTD          ; send character
        47C :                    isr_intr_tx_exit:
        47C : F1                         pop     psw
        47D : FB                         ei
        47E : C9                         ret
        47F :                    isr_intr_send_empty:
        47F : 3E 36                      mvi     a, RX_EN_TX_DIS
        481 : D3 01                      out     USARTC          ; disable Tx
        483 : F1                         pop     psw
        484 : FB                         ei
        485 : C9                         ret
        486 :
        486 :                            end
