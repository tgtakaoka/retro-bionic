          0 :                            include "mc68hc08az0.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            include "mc68hc08.inc"
(2)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :                    ;;; MC68HC08
(2)       0 :                            cpu     68hc08
(2)       0 :                    ;;; Condition Code Register (CC)
(2)       0 : =1                 CC_CARRY:       equ     %00000001 ; set to 1 if carry occurred
(2)       0 : =2                 CC_ZERO:        equ     %00000010 ; set to 1 if result is zero
(2)       0 : =4                 CC_NEGATIVE:    equ     %00000100 ; set to 1 if result is negative
(2)       0 : =8                 CC_IRQ:         equ     %00001000 ; if 1, IRQ is masked
(2)       0 : =10                CC_HALF_CARRY:  equ     %00010000 ; if 1, decimal carry from least digit occurred
(2)       0 : =80                CC_OVERFLOW:    equ     %10000000 ; if 1, two's-complement overflow
(2)       0 :                    ;;; Vector
(2)       0 : =FFFA              VEC_IRQ:        equ     $FFFA   ; External Interrupt
(2)       0 : =FFFC              VEC_SWI:        equ     $FFFC   ; Software
(2)       0 : =FFFE              VEC_RESET:      equ     $FFFE   ; Reset
(1)       0 :                    ;;; MC68HC08AZ0
(1)       0 : =50                RAM_START:      equ     $0050   ; Internal RAM $0050-$044F
(1)       0 : =FF                STACK_TOP:      equ     $00FF   ; Stack $00FF->$0050
(1)       0 :
(1)       0 :                    ;;; COP
(1)       0 : =FFFF              COP_RESET:      equ     $FFFF
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =FFE0              ACIA:   equ     $FFE0
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =FFE0              ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     %11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     %00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     %00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     %00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     %00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     %00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     %00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     %00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     %00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     %00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     %00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     %00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     %00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     %00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     %01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     %00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     %00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     %01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     %01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     %10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =FFE0              ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     %00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     %00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     %00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     %00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     %00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     %00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     %01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     %10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =FFE1              ACIA_data:      equ     ACIA+1          ; Data register
          0 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
          0 : =B4                RX_INT_TX_INT:  equ     WSB_8N1_gc|RIEB_bm|TCB_EI_gc
          0 :
       2000 :                            org     $2000
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:
       2000 :                            rmb     rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:
       2080 :                            rmb     tx_queue_size
       2100 :
       FFFA :                            org     VEC_IRQ
       FFFA : 11 0A                      fdb     isr_irq
       FFFC :
       FFFC :                            org     VEC_SWI
       FFFC : FF FC                      fdb     VEC_SWI         ; halt to system
       FFFE :
       FFFE :                            org     VEC_RESET
       FFFE : 10 00                      fdb     initialize
      10000 :
       1000 :                            org     $1000
       1000 : =1000              stack:  equ     *
       1000 :                    initialize:
       1000 : 45 10 00                   ldhx    #stack
       1003 : 94                         txs
       1004 : 45 20 00                   ldhx    #rx_queue
       1007 : A6 80                      lda     #rx_queue_size
       1009 : CD 10 A1                   jsr     queue_init
       100C : 45 20 80                   ldhx    #tx_queue
       100F : A6 80                      lda     #tx_queue_size
       1011 : CD 10 A1                   jsr     queue_init
       1014 :                            ;; initialize ACIA
       1014 : A6 03                      lda     #CDS_RESET_gc   ; master reset
       1016 : C7 FF E0                   sta     ACIA_control
       1019 : A6 94                      lda     #RX_INT_TX_NO
       101B : C7 FF E0                   sta     ACIA_control
       101E : 9A                         cli                     ; enable IRQ
       101F :                    loop:
       101F : C6 FF FF                   lda     COP_RESET
       1022 : C7 FF FF                   sta     COP_RESET
       1025 : AD 5F                      bsr     getchar
       1027 : 24 F6                      bcc     loop
       1029 : 4D                         tsta
       102A : 27 17                      beq     halt_to_system
       102C : AD 61                      bsr     putchar         ; echo
       102E : 87                         psha
       102F : A6 20                      lda     #' '            ; space
       1031 : AD 5C                      bsr     putchar
       1033 : 9E E6 01                   lda     1,sp
       1036 : AD 14                      bsr     put_hex8        ; print in hex
       1038 : A6 20                      lda     #' '            ; space
       103A : AD 53                      bsr     putchar
       103C : 86                         pula
       103D : AD 2A                      bsr     put_bin8        ; print in binary
       103F : AD 03                      bsr     newline
       1041 : 20 DC                      bra     loop
       1043 :                    halt_to_system:
       1043 : 83                         swi
       1044 :
       1044 :                    ;;; Put newline
       1044 :                    ;;; @clobber A
       1044 :                    newline:
       1044 : A6 0D                      lda     #$0D
       1046 : AD 47                      bsr     putchar
       1048 : A6 0A                      lda     #$0A
       104A : 20 43                      bra     putchar
       104C :
       104C :                    ;;; Print uint8_t in hex
       104C :                    ;;; @param A uint8_t value to be printed in hex.
       104C :                    ;;; @clobber A
       104C :                    put_hex8:
       104C : 87                         psha
       104D : A6 30                      lda     #'0'
       104F : AD 3E                      bsr     putchar
       1051 : A6 78                      lda     #'x'
       1053 : AD 3A                      bsr     putchar
       1055 : 9E E6 01                   lda     1,sp
       1058 : 44                         lsra
       1059 : 44                         lsra
       105A : 44                         lsra
       105B : 44                         lsra
       105C : AD 01                      bsr     put_hex4
       105E : 86                         pula
       105F :                    put_hex4:
       105F : A4 0F                      and     #$0F
       1061 : AB 90                      add     #$90
       1063 : 72                         daa
       1064 : A9 40                      adc     #$40
       1066 : 72                         daa
       1067 : 20 26                      bra     putchar
       1069 :
       1069 :                    ;;; Print uint8_t in binary
       1069 :                    ;;; @param A uint8_t value to be printed in binary.
       1069 :                    ;;; @clobber A
       1069 :                    put_bin8:
       1069 : 87                         psha
       106A : A6 30                      lda     #'0'
       106C : AD 21                      bsr     putchar
       106E : A6 62                      lda     #'b'
       1070 : AD 1D                      bsr     putchar
       1072 : 86                         pula
       1073 : AD 00                      bsr     put_bin4
       1075 :                    put_bin4:
       1075 : AD 00                      bsr     put_bin2
       1077 :                    put_bin2:
       1077 : AD 00                      bsr     put_bin1
       1079 :                    put_bin1:
       1079 : 87                         psha
       107A : A6 30                      lda     #'0'
       107C : 9E 69 01                   rol     1,sp
       107F : 24 01                      bcc     put_bin
       1081 : 4C                         inca
       1082 :                    put_bin:
       1082 : AD 0B                      bsr     putchar
       1084 : 86                         pula
       1085 : 81                         rts
       1086 :
       1086 :                    ;;; Get character
       1086 :                    ;;; @clobber HX
       1086 :                    ;;; @return A
       1086 :                    ;;; @return CC.C 0 if no char received
       1086 :                    getchar:
       1086 : 45 20 00                   ldhx    #rx_queue
       1089 : 9B                         sei                     ; disable IRQ
       108A : CD 10 DD                   jsr     queue_remove
       108D : 9A                         cli                     ; enable IRQ
       108E : 81                         rts
       108F :
       108F :                    ;;; Put character
       108F :                    ;;; @param A
       108F :                    ;;; @clobber A HX
       108F :                    putchar:
       108F : 45 20 80                   ldhx    #tx_queue
       1092 : 87                         psha
       1093 :                    putchar_retry:
       1093 : 9B                         sei                     ; disable IRQ
       1094 : CD 10 AB                   jsr     queue_add
       1097 : 9A                         cli                     ; enable IRQ
       1098 : 24 F9                      bcc     putchar_retry   ; branch if queue is full
       109A : A6 B4                      lda     #RX_INT_TX_INT  ; enable Tx interrupt
       109C : C7 FF E0                   sta     ACIA_control
       109F :                    putchar_exit:
       109F : 86                         pula
       10A0 : 81                         rts
       10A1 :
       10A1 :                            include "queue.inc"
(1)    10A1 :                    ;;; [queue] queue structure
(1)    10A1 : =0                 queue_len:      equ     0       ; queue length
(1)    10A1 : =1                 queue_size:     equ     1       ; buffer size
(1)    10A1 : =2                 queue_put:      equ     2       ; queue put index
(1)    10A1 : =3                 queue_get:      equ     3       ; queue get index
(1)    10A1 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)    10A1 :
(1)    10A1 :                    ;;; [queue] Initialize queue
(1)    10A1 :                    ;;; @param HX queue work space pointer
(1)    10A1 :                    ;;; @param A queue work space size
(1)    10A1 :                    ;;; @clobber A
(1)    10A1 :                    queue_init:
(1)    10A1 : 7F                         clr     queue_len,x
(1)    10A2 : 6F 02                      clr     queue_put,x
(1)    10A4 : 6F 03                      clr     queue_get,x
(1)    10A6 : A0 04                      sub     #queue_buf
(1)    10A8 : E7 01                      sta     queue_size,x
(1)    10AA : 81                         rts
(1)    10AB :
(1)    10AB :                    ;;; [queue] Add an element to queue
(1)    10AB :                    ;;; @param HX queue work space pointer
(1)    10AB :                    ;;; @param A an element
(1)    10AB :                    ;;; @return CC.C 0 if queue is full
(1)    10AB :                    queue_add:
(1)    10AB : 87                         psha
(1)    10AC : F6                         lda     queue_len,x
(1)    10AD : E1 01                      cmp     queue_size,x
(1)    10AF : 24 2A                      bhs     queue_add_return ; carry is cleared
(1)    10B1 : 7C                         inc     queue_len,x      ; increment queue length
(1)    10B2 : E6 02                      lda     queue_put,x      ; 8 bits offset
(1)    10B4 : 4C                         inca
(1)    10B5 : E7 02                      sta     queue_put,x     ; update put pointer
(1)    10B7 : E1 01                      cmp     queue_size,x
(1)    10B9 : 25 02                      blo     queue_add_elem
(1)    10BB : 6F 02                      clr     queue_put,x
(1)    10BD :                    queue_add_elem:
(1)    10BD : 89                         pshx
(1)    10BE : 8B                         pshh                    ; push HX
(1)    10BF : AF 04                      aix     #queue_buf
(1)    10C1 : 89                         pshx
(1)    10C2 : 8B                         pshh
(1)    10C3 : 4A                         deca                    ; restore put pointer
(1)    10C4 : 9E EB 02                   add     2,sp
(1)    10C7 : 9E E7 02                   sta     2,sp
(1)    10CA : 9E E6 01                   lda     1,sp
(1)    10CD : A9 00                      adc     #0
(1)    10CF : 9E E7 01                   sta     1,sp
(1)    10D2 : 8A                         pulh
(1)    10D3 : 88                         pulx                    ; HX=&queue_buf[queue_put]
(1)    10D4 : 9E E6 03                   lda     3,sp            ; restore element
(1)    10D7 : F7                         sta     ,x              ; put element
(1)    10D8 : 8A                         pulh
(1)    10D9 : 88                         pulx                    ; restore HX
(1)    10DA : 99                         sec                     ; set carry
(1)    10DB :                    queue_add_return:
(1)    10DB : 86                         pula                    ; restore A
(1)    10DC : 81                         rts
(1)    10DD :
(1)    10DD :                    ;;; [queue] Remove an element from queue
(1)    10DD :                    ;;; @param HX queue work space pointer
(1)    10DD :                    ;;; @return A an element
(1)    10DD :                    ;;; @return CC.C 0 if queue is empty
(1)    10DD :                    queue_remove:
(1)    10DD : 7D                         tst     queue_len,x
(1)    10DE : 26 02                      bne     queue_remove_has_elem
(1)    10E0 : 98                         clc                     ; clear carry
(1)    10E1 : 81                         rts
(1)    10E2 :                    queue_remove_has_elem:
(1)    10E2 : 7A                         dec     queue_len,x     ; decrement queue length
(1)    10E3 : E6 03                      lda     queue_get,x     ; 8 bits offset
(1)    10E5 : 4C                         inca
(1)    10E6 : E7 03                      sta     queue_get,x     ; update get pointer
(1)    10E8 : E1 01                      cmp     queue_size,x
(1)    10EA : 25 02                      blo     queue_remove_elem
(1)    10EC : 6F 03                      clr     queue_get,x
(1)    10EE :                    queue_remove_elem:
(1)    10EE : 89                         pshx
(1)    10EF : 8B                         pshh                    ; push HX
(1)    10F0 : AF 04                      aix     #queue_buf
(1)    10F2 : 89                         pshx
(1)    10F3 : 8B                         pshh
(1)    10F4 : 4A                         deca                    ; restore get pointer
(1)    10F5 : 9E EB 02                   add     2,sp
(1)    10F8 : 9E E7 02                   sta     2,sp
(1)    10FB : 9E E6 01                   lda     1,sp
(1)    10FE : A9 00                      adc     #0
(1)    1100 : 9E E7 01                   sta     1,sp
(1)    1103 : 8A                         pulh
(1)    1104 : 88                         pulx                    ; HX=&queue_buf[queue_get]
(1)    1105 : F6                         lda     ,x              ; get element
(1)    1106 : 8A                         pulh
(1)    1107 : 88                         pulx                    ; restore HX
(1)    1108 : 99                         sec                     ; set carry
(1)    1109 :                    queue_remove_return:
(1)    1109 : 81                         rts
(1)    110A :
(1)    110A :                    ;;; Local Variables:
(1)    110A :                    ;;; mode: asm
(1)    110A :                    ;;; End:
(1)    110A :                    ;;; vim: set ft=asm et ts=4 sw=4:
       110A :
       110A :                    isr_irq:
       110A : 8B                         pshh
       110B : C6 FF E0                   lda     ACIA_status
       110E : A5 80                      bit     #IRQF_bm
       1110 : 27 22                      beq     isr_irq_exit
       1112 : C6 FF E0                   lda     ACIA_status
       1115 : A5 01                      bit     #RDRF_bm
       1117 : 27 09                      beq     isr_irq_send
       1119 : C6 FF E1                   lda     ACIA_data       ; receive character
       111C : 45 20 00                   ldhx    #rx_queue
       111F : CD 10 AB                   jsr     queue_add
       1122 :                    isr_irq_send:
       1122 : C6 FF E0                   lda     ACIA_status
       1125 : A5 02                      bit     #TDRE_bm
       1127 : 27 0B                      beq     isr_irq_exit
       1129 : 45 20 80                   ldhx    #tx_queue
       112C : CD 10 DD                   jsr     queue_remove
       112F : 24 05                      bcc     isr_irq_send_empty
       1131 : C7 FF E1                   sta     ACIA_data       ; send character
       1134 :                    isr_irq_exit:
       1134 : 8A                         pulh
       1135 : 80                         rti
       1136 :                    isr_irq_send_empty:
       1136 : A6 94                      lda     #RX_INT_TX_NO
       1138 : C7 FF E0                   sta     ACIA_control    ; disable Tx interrupt
       113B : 8A                         pulh
       113C : 80                         rti
