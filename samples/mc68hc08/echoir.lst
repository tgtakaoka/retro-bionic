          0 :                            include "mc68hc08az0.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            include "mc68hc08.inc"
(2)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :                    ;;; MC68HC08
(2)       0 :                            cpu     68hc08
(2)       0 :                    ;;; Condition Code Register (CC)
(2)       0 : =1                 CC_CARRY:       equ     %00000001 ; set to 1 if carry occurred
(2)       0 : =2                 CC_ZERO:        equ     %00000010 ; set to 1 if result is zero
(2)       0 : =4                 CC_NEGATIVE:    equ     %00000100 ; set to 1 if result is negative
(2)       0 : =8                 CC_IRQ:         equ     %00001000 ; if 1, IRQ is masked
(2)       0 : =10                CC_HALF_CARRY:  equ     %00010000 ; if 1, decimal carry from least digit occurred
(2)       0 : =80                CC_OVERFLOW:    equ     %10000000 ; if 1, two's-complement overflow
(2)       0 :                    ;;; Vector
(2)       0 : =FFFA              VEC_IRQ:        equ     $FFFA   ; External Interrupt
(2)       0 : =FFFC              VEC_SWI:        equ     $FFFC   ; Software
(2)       0 : =FFFE              VEC_RESET:      equ     $FFFE   ; Reset
(1)       0 :                    ;;; MC68HC08AZ0
(1)       0 : =50                RAM_START:      equ     $0050   ; Internal RAM $0050-$044F
(1)       0 : =FF                STACK_TOP:      equ     $00FF   ; Stack $00FF->$0050
(1)       0 :
(1)       0 :                    ;;; COP
(1)       0 : =FFFF              COP_RESET:      equ     $FFFF
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =FFE0              ACIA:   equ     $FFE0
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =FFE0              ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     %11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     %00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     %00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     %00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     %00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     %00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     %00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     %00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     %00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     %00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     %00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     %00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     %00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     %00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     %01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     %00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     %00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     %01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     %01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     %10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =FFE0              ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     %00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     %00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     %00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     %00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     %00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     %00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     %01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     %10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =FFE1              ACIA_data:      equ     ACIA+1          ; Data register
          0 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
          0 :
         50 :                            org     RAM_START
         50 :
       2000 :                            org     $2000
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:
       2000 :                            rmb     rx_queue_size
       2080 :
       FFFA :                            org     VEC_IRQ
       FFFA : 10 AF                      fdb     isr_irq
       FFFC :
       FFFC :                            org     VEC_SWI
       FFFC : FF FC                      fdb     VEC_SWI         ; halt to system
       FFFE :
       FFFE :                            org     VEC_RESET
       FFFE : 10 00                      fdb     initialize
      10000 :
       1000 :                            org     $1000
       1000 : =1000              stack:  equ     *
       1000 :                    initialize:
       1000 : 45 10 00                   ldhx    #stack
       1003 : 94                         txs
       1004 : 45 20 00                   ldhx    #rx_queue
       1007 : A6 80                      lda     #rx_queue_size
       1009 : CD 10 46                   jsr     queue_init
       100C :                            ;; initialize ACIA
       100C : A6 03                      lda     #CDS_RESET_gc   ; Master reset
       100E : C7 FF E0                   sta     ACIA_control
       1011 : A6 94                      lda     #RX_INT_TX_NO
       1013 : C7 FF E0                   sta     ACIA_control
       1016 : 9A                         cli                     ; Enable IRQ
       1017 : 20 00                      bra     loop
       1019 :                    loop:
       1019 : 45 20 00                   ldhx    #rx_queue
       101C : 9B                         sei                     ; Disable IRQ
       101D : CD 10 82                   jsr     queue_remove
       1020 : 9A                         cli                     ; Enable IRQ
       1021 : 24 F6                      bcc     loop
       1023 : 4D                         tsta
       1024 : 27 0C                      beq     halt_to_system
       1026 : AD 0B                      bsr     putchar
       1028 : A1 0D                      cmp     #$0D            ; carriage return
       102A : 26 ED                      bne     loop
       102C : A6 0A                      lda     #$0A            ; newline
       102E : AD 03                      bsr     putchar
       1030 : 20 E7                      bra     loop
       1032 :                    halt_to_system:
       1032 : 83                         swi
       1033 :
       1033 :                    putchar:
       1033 : 87                         psha
       1034 :                    putchar_loop:
       1034 : C6 FF FF                   lda     COP_RESET
       1037 : C7 FF FF                   sta     COP_RESET
       103A : C6 FF E0                   lda     ACIA_status
       103D : A5 02                      bit     #TDRE_bm
       103F : 27 F3                      beq     putchar_loop
       1041 :                    putchar_data:
       1041 : 86                         pula
       1042 : C7 FF E1                   sta     ACIA_data
       1045 : 81                         rts
       1046 :
       1046 :                            include "queue.inc"
(1)    1046 :                    ;;; [queue] queue structure
(1)    1046 : =0                 queue_len:      equ     0       ; queue length
(1)    1046 : =1                 queue_size:     equ     1       ; buffer size
(1)    1046 : =2                 queue_put:      equ     2       ; queue put index
(1)    1046 : =3                 queue_get:      equ     3       ; queue get index
(1)    1046 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)    1046 :
(1)    1046 :                    ;;; [queue] Initialize queue
(1)    1046 :                    ;;; @param HX queue work space pointer
(1)    1046 :                    ;;; @param A queue work space size
(1)    1046 :                    ;;; @clobber A
(1)    1046 :                    queue_init:
(1)    1046 : 7F                         clr     queue_len,x
(1)    1047 : 6F 02                      clr     queue_put,x
(1)    1049 : 6F 03                      clr     queue_get,x
(1)    104B : A0 04                      sub     #queue_buf
(1)    104D : E7 01                      sta     queue_size,x
(1)    104F : 81                         rts
(1)    1050 :
(1)    1050 :                    ;;; [queue] Add an element to queue
(1)    1050 :                    ;;; @param HX queue work space pointer
(1)    1050 :                    ;;; @param A an element
(1)    1050 :                    ;;; @return CC.C 0 if queue is full
(1)    1050 :                    queue_add:
(1)    1050 : 87                         psha
(1)    1051 : F6                         lda     queue_len,x
(1)    1052 : E1 01                      cmp     queue_size,x
(1)    1054 : 24 2A                      bhs     queue_add_return ; carry is cleared
(1)    1056 : 7C                         inc     queue_len,x      ; increment queue length
(1)    1057 : E6 02                      lda     queue_put,x      ; 8 bits offset
(1)    1059 : 4C                         inca
(1)    105A : E7 02                      sta     queue_put,x     ; update put pointer
(1)    105C : E1 01                      cmp     queue_size,x
(1)    105E : 25 02                      blo     queue_add_elem
(1)    1060 : 6F 02                      clr     queue_put,x
(1)    1062 :                    queue_add_elem:
(1)    1062 : 89                         pshx
(1)    1063 : 8B                         pshh                    ; push HX
(1)    1064 : AF 04                      aix     #queue_buf
(1)    1066 : 89                         pshx
(1)    1067 : 8B                         pshh
(1)    1068 : 4A                         deca                    ; restore put pointer
(1)    1069 : 9E EB 02                   add     2,sp
(1)    106C : 9E E7 02                   sta     2,sp
(1)    106F : 9E E6 01                   lda     1,sp
(1)    1072 : A9 00                      adc     #0
(1)    1074 : 9E E7 01                   sta     1,sp
(1)    1077 : 8A                         pulh
(1)    1078 : 88                         pulx                    ; HX=&queue_buf[queue_put]
(1)    1079 : 9E E6 03                   lda     3,sp            ; restore element
(1)    107C : F7                         sta     ,x              ; put element
(1)    107D : 8A                         pulh
(1)    107E : 88                         pulx                    ; restore HX
(1)    107F : 99                         sec                     ; set carry
(1)    1080 :                    queue_add_return:
(1)    1080 : 86                         pula                    ; restore A
(1)    1081 : 81                         rts
(1)    1082 :
(1)    1082 :                    ;;; [queue] Remove an element from queue
(1)    1082 :                    ;;; @param HX queue work space pointer
(1)    1082 :                    ;;; @return A an element
(1)    1082 :                    ;;; @return CC.C 0 if queue is empty
(1)    1082 :                    queue_remove:
(1)    1082 : 7D                         tst     queue_len,x
(1)    1083 : 26 02                      bne     queue_remove_has_elem
(1)    1085 : 98                         clc                     ; clear carry
(1)    1086 : 81                         rts
(1)    1087 :                    queue_remove_has_elem:
(1)    1087 : 7A                         dec     queue_len,x     ; decrement queue length
(1)    1088 : E6 03                      lda     queue_get,x     ; 8 bits offset
(1)    108A : 4C                         inca
(1)    108B : E7 03                      sta     queue_get,x     ; update get pointer
(1)    108D : E1 01                      cmp     queue_size,x
(1)    108F : 25 02                      blo     queue_remove_elem
(1)    1091 : 6F 03                      clr     queue_get,x
(1)    1093 :                    queue_remove_elem:
(1)    1093 : 89                         pshx
(1)    1094 : 8B                         pshh                    ; push HX
(1)    1095 : AF 04                      aix     #queue_buf
(1)    1097 : 89                         pshx
(1)    1098 : 8B                         pshh
(1)    1099 : 4A                         deca                    ; restore get pointer
(1)    109A : 9E EB 02                   add     2,sp
(1)    109D : 9E E7 02                   sta     2,sp
(1)    10A0 : 9E E6 01                   lda     1,sp
(1)    10A3 : A9 00                      adc     #0
(1)    10A5 : 9E E7 01                   sta     1,sp
(1)    10A8 : 8A                         pulh
(1)    10A9 : 88                         pulx                    ; HX=&queue_buf[queue_get]
(1)    10AA : F6                         lda     ,x              ; get element
(1)    10AB : 8A                         pulh
(1)    10AC : 88                         pulx                    ; restore HX
(1)    10AD : 99                         sec                     ; set carry
(1)    10AE :                    queue_remove_return:
(1)    10AE : 81                         rts
(1)    10AF :
(1)    10AF :                    ;;; Local Variables:
(1)    10AF :                    ;;; mode: asm
(1)    10AF :                    ;;; End:
(1)    10AF :                    ;;; vim: set ft=asm et ts=4 sw=4:
       10AF :
       10AF :                    isr_irq:
       10AF : C6 FF E0                   lda     ACIA_status
       10B2 : A5 80                      bit     #IRQF_bm
       10B4 : 27 0D                      beq     isr_irq_return
       10B6 :                    isr_irq_receive:
       10B6 : A5 01                      bit     #RDRF_bm
       10B8 : 27 09                      beq     isr_irq_recv_end
       10BA : C6 FF E1                   lda     ACIA_data
       10BD : 45 20 00                   ldhx    #rx_queue
       10C0 : CD 10 50                   jsr     queue_add
       10C3 :                    isr_irq_recv_end:
       10C3 :                    isr_irq_return:
       10C3 : 80                         rti
