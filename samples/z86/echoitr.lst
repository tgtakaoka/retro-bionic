          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     z86c
          0 :                            option  "reg-alias", "disable"
          0 :
          0 :                            include "z8.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; Z8
(1)       0 : =FC                FLAGS:  equ     252               ; R/W: Flags register
(1)       0 : =80                F_CARRY:        equ     %(2)10000000 ; set to 1 if carry
(1)       0 : =40                F_ZERO:         equ     %(2)01000000 ; set to 1 if zero
(1)       0 : =20                F_SIGN:         equ     %(2)00100000 ; set to 1 if negative
(1)       0 : =10                F_OVERFLOW:     equ     %(2)00010000 ; set to 1 if overflow
(1)       0 : =8                 F_DECIMAL_ADJ:  equ     %(2)00001000 ; decimal adjust
(1)       0 : =4                 F_HALF_CARRY:   equ     %(2)00000100 ; set to 1 if carry from bit-3
(1)       0 : =2                 F_USER2:        equ     %(2)00000010 ; User flag F2
(1)       0 : =1                 F_USER1:        equ     %(2)00000001 ; User flah F1
(1)       0 :                    ;;; Interrupt vectors
(1)       0 : =0                 VEC_IRQ0:       equ     %0000   ; IRQ0
(1)       0 : =2                 VEC_IRQ1:       equ     %0002   ; IRQ1
(1)       0 : =4                 VEC_IRQ2:       equ     %0004   ; IRQ2/Tin
(1)       0 : =6                 VEC_IRQ3:       equ     %0006   ; IRQ3/Serial in
(1)       0 : =8                 VEC_IRQ4:       equ     %0008   ; IRQ4/Serial out/T0
(1)       0 : =A                 VEC_IRQ5:       equ     %000A   ; IRQ5/T1
(1)       0 :                    ;;; Reset origin
(1)       0 : =C                 ORG_RESET:      equ     %000C   ; RESET
(1)       0 :                    ;;; I/O Ports
(1)       0 : =2                 PORT2:          equ     2       ; Port 2
(1)       0 : =3                 PORT3:          equ     3       ; Port 3
(1)       0 : =F7                P3M:            equ     247       ; W/O: Port 3 Mode Register
(1)       0 : =80                P3M_PARITY:     equ     %(2)10000000 ; 1=Parity on
(1)       0 : =40                P3M_SERIAL:     equ     %(2)01000000 ; 1=P30 is serial in, P37 is serial out
(1)       0 : =1                 P3M_P2PUSHPULL: equ     %(2)00000001 ; 1=Port 2 is push-pull, 0=open drain
(1)       0 : =F6                P2M:            equ     246       ; W/O: Port 2 Mode Register, 0=output, 1=input
(1)       0 : =F8                P01M:           equ     248       ; W/O: Port 0 and 1 Mode Register
(1)       0 : =82                P01M_P0ADDR:    equ     %(2)10000010 ; Port 0 is A8~A15
(1)       0 : =10                P01M_P1DATA:    equ     %(2)00010000 ; Port 1 is AD0~AD7
(1)       0 : =4                 P01M_INTERNAL:  equ     %(2)00000100 ; Stack is on internal memory
(1)       0 :                    ;;; Interrupt
(1)       0 : =F9                IPR:    equ     249             ; W/O: Interrupt Priority
(1)       0 : =1                 IPR_CAB:        equ     %(2)000001 ; C > A > B
(1)       0 : =8                 IPR_ABC:        equ     %(2)001000 ; A > B > C
(1)       0 : =9                 IPR_ACB:        equ     %(2)001001 ; A > C > B
(1)       0 : =10                IPR_BCA:        equ     %(2)010000 ; B > C > A
(1)       0 : =11                IPR_CBA:        equ     %(2)010001 ; C > B > A
(1)       0 : =18                IPR_BAC:        equ     %(2)011000 ; B > A > C
(1)       0 : =0                 IPR_A53:        equ     %(2)000000 ; A: IRQ5 > IRQ3
(1)       0 : =20                IPR_A35:        equ     %(2)100000 ; A: IRQ3 > IRQ5
(1)       0 : =0                 IPR_B20:        equ     %(2)000000 ; B: IRQ2 > IRQ0
(1)       0 : =4                 IPR_B02:        equ     %(2)000100 ; B: IRQ0 > IRQ2
(1)       0 : =0                 IPR_C14:        equ     %(2)000000 ; C: IRQ0 > IRQ4
(1)       0 : =2                 IPR_C41:        equ     %(2)000010 ; C: IRQ4 > IRQ0
(1)       0 : =FB                IMR:    equ     251             ; R/W: Interrupt Mask
(1)       0 : =80                IMR_ENABLE:     equ     %(2)10000000 ; Interrupt enable
(1)       0 : =1                 IMR_IRQ0:       equ     (1 SHL 0)
(1)       0 : =2                 IMR_IRQ1:       equ     (1 SHL 1)
(1)       0 : =4                 IMR_IRQ2:       equ     (1 SHL 2)
(1)       0 : =8                 IMR_IRQ3:       equ     (1 SHL 3)
(1)       0 : =10                IMR_IRQ4:       equ     (1 SHL 4)
(1)       0 : =20                IMR_IRQ5:       equ     (1 SHL 5)
(1)       0 : =FA                IRQ:    equ     250             ; R/W: Interrupt Request
(1)       0 : =1                 IRQ_IRQ0:       equ     IMR_IRQ0
(1)       0 : =2                 IRQ_IRQ1:       equ     IMR_IRQ1
(1)       0 : =4                 IRQ_IRQ2:       equ     IMR_IRQ2
(1)       0 : =8                 IRQ_IRQ3:       equ     IMR_IRQ3
(1)       0 : =10                IRQ_IRQ4:       equ     IMR_IRQ4
(1)       0 : =20                IRQ_IRQ5:       equ     IMR_IRQ5
(1)       0 :                    ;;; Counter/Timers
(1)       0 : =F5                PRE0:   equ     245             ; W/O: Prescaler 0 register
(1)       0 : =1                 PRE0_MODULO:    equ     %(2)00000001 ; 1=Modulo-N, 0=Single-pass
(1)       0 : =FC                PRE0_gm:        equ     %(2)11111100 ; Modulo mask
(1)       0 : =2                 PRE0_gp:        equ     2         ; Modulo bit position
(1)       0 : =F3                PRE1:   equ     243               ; W/O: Prescaler 1 register
(1)       0 : =1                 PRE1_MODULO:    equ     %(2)00000001 ; 1=Modulo-N, 0=SinglePass
(1)       0 : =2                 PRE1_INTERNAL:  equ     %(2)00000010 ; 1=T1 internal, 0=T1 external
(1)       0 : =FC                PRE1_gm:        equ     %(2)11111100 ; Modulo mask
(1)       0 : =2                 PRE1_gp:        equ     2         ; Modulo bit position
(1)       0 : =F2                T1:     equ     242               ; R/W: Counter/Timer 1 Register
(1)       0 : =F4                T0:     equ     244               ; R/W: Counter/Timer 0 Register
(1)       0 : =F1                TMR:    equ     241               ; R/W: Timer Mode Register
(1)       0 : =1                 TMR_LOAD_T0:    equ     %(2)00000001 ; 1=Load T0
(1)       0 : =2                 TMR_ENABLE_T0:  equ     %(2)00000010 ; 1=Enable T0
(1)       0 : =4                 TMR_LOAD_T1:    equ     %(2)00000100 ; 1=Load T1
(1)       0 : =8                 TMR_ENABLE_T1:  equ     %(2)00001000 ; 1=Enable T1
(1)       0 : =0                 TMR_TOUT_OFF:   equ     %(2)00000000 ; TOUT off
(1)       0 : =40                TMR_TOUT_T0:    equ     %(2)01000000 ; TOUT=T0
(1)       0 : =80                TMR_TOUT_T1:    equ     %(2)10000000 ; TOUT=T1
(1)       0 : =C0                TMR_TOUT_CLOCK: equ     %(2)11000000 ; TOUT=internal clock
(1)       0 :                    ;;;
(1)       0 : =F0                SIO:    equ     240             ; R/W: Serial I/O Register
(1)       0 : =FD                RP:     equ     253             ; R/W: Register pointer
(1)       0 : =FE                SPH:    equ     254             ; R/W: Stack Pointer High
(1)       0 : =FF                SPL:    equ     255             ; R/W: Stack Pointer Low
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =FF00              USART:          equ     %FF00
          0 : =FF00              USARTD:         equ     USART+0 ; Receive/Transmit data
          0 : =FF01              USARTS:         equ     USART+1 ; Status register
          0 : =FF01              USARTC:         equ     USART+1 ; Control register
          0 : =FF02              USARTRI:        equ     USART+2 ; Receive interrupt name (IRQ0~2)
          0 : =FF03              USARTTI:        equ     USART+3 ; Transmit interrupt name (IRQ0~2)
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     %(2)11000000
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 SHL MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 SHL MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 SHL MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     %(2)00100000
(1)       0 : =10                MODE_PARITY_bm: equ     %(2)00010000
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     %(2)00001100
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 SHL MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 SHL MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 SHL MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 SHL MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     %(2)00000011
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 SHL MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ     (2 SHL MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ     (3 SHL MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     %(2)10000000   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     %(2)01000000   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     %(2)00100000   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     %(2)00010000   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     %(2)00001000   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     %(2)00000100   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     %(2)00000010   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     %(2)00000001   ; Transmit enable
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     %(2)10000000   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     %(2)01000000   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     %(2)00100000   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     %(2)00010000   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     %(2)00001000   ; Parity Error
(1)       0 : =4                 ST_TxEMPTY_bm:  equ     %(2)00000100   ; Transmitter empty
(1)       0 : =2                 ST_RxRDY_bm:    equ     %(2)00000010   ; Receiver ready
(1)       0 : =1                 ST_TxRDY_bm:    equ     %(2)00000001   ; Transmitter ready
(1)       0 :                    ;;; Interrupt name for receive/transmit interrupt
(1)       0 : =0                 INTR_NONE:      equ     0
(1)       0 : =1                 INTR_IRQ0:      equ     1
(1)       0 : =2                 INTR_IRQ1:      equ     2
(1)       0 : =3                 INTR_IRQ2:      equ     3
          0 :                    ;;; Async 1stop 8data x16
          0 : =4E                ASYNC_MODE:     equ     MODE_STOP1_gc LOR MODE_LEN8_gc LOR MODE_BAUD_X16
          0 :                    ;;; RTS/DTR, error reset, Rx enable, Tx enable
          0 : =37                RX_EN_TX_EN:    equ     CMD_RTS_bm LOR CMD_DTR_bm LOR CMD_ER_bm LOR CMD_RxEN_bm LOR CMD_TxEN_bm
          0 : =36                RX_EN_TX_DIS:   equ     CMD_RTS_bm LOR CMD_DTR_bm LOR CMD_ER_bm LOR CMD_RxEN_bm
          0 :
       2000 :                            org     %2000
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       ds      rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       ds      tx_queue_size
       2100 :
          0 :                            org     VEC_IRQ0
          0 : 11 AE                      dw      isr_intr_rx
          2 :
          2 :                            org     VEC_IRQ1
          2 : 11 D1                      dw      isr_intr_tx
          4 :
          C :                            org     ORG_RESET
          C :                            setrp   -1
          C : 8D 10 00                   jp      init_config
          F :
       1000 :                            org     %1000
       1000 : =1000              stack:  equ     $
       1000 :
       1000 :                    init_config:
       1000 :                            ;; Stack is on external memory
       1000 : E6 F8 92                   ld      P01M, #P01M_P0ADDR LOR P01M_P1DATA
       1003 : E6 F6 FF                   ld      P2M, #%FF       ; Port 2 is input
       1006 : E6 FE 10                   ld      SPH, #HIGH stack
       1009 : E6 FF 00                   ld      SPL, #LOW stack
       100C : 31 10                      srp     #%10
       100E :                            setrp   %10
       100E : 2C 20                      ld      R2, #HIGH rx_queue
       1010 : 3C 00                      ld      R3, #LOW rx_queue
       1012 : 1C 80                      ld      R1, #rx_queue_size
       1014 : D6 11 01                   call    queue_init
       1017 : 2C 20                      ld      R2, #HIGH tx_queue
       1019 : 3C 80                      ld      R3, #LOW tx_queue
       101B : 1C 80                      ld      R1, #tx_queue_size
       101D : D6 11 01                   call    queue_init
       1020 :
       1020 :                    init_usart:
       1020 : CC FF                      ld      R12, #HIGH USARTC
       1022 : DC 01                      ld      R13, #LOW USARTC
       1024 : B0 E0                      clr     R0
       1026 : 92 0C                      lde     @RR12, R0
       1028 : 92 0C                      lde     @RR12, R0
       102A : 92 0C                      lde     @RR12, R0       ; safest way to sync mode
       102C : 0C 40                      ld      R0, #CMD_IR_bm
       102E : 92 0C                      lde     @RR12, R0       ; reset
       1030 : FF                         nop
       1031 : FF                         nop
       1032 : 0C 4E                      ld      R0, #ASYNC_MODE
       1034 : 92 0C                      lde     @RR12, R0       ; async 1stop 8data x16
       1036 : FF                         nop
       1037 : FF                         nop
       1038 : 0C 36                      ld      R0, #RX_EN_TX_DIS
       103A : 92 0C                      lde     @RR12, R0       ; RTS/DTR, error reset, Rx enable, Tx disable
       103C : 0C 01                      ld      R0, #INTR_IRQ0
       103E : DC 02                      ld      R13, #LOW USARTRI
       1040 : 92 0C                      lde     @RR12, R0       ; enable RxRDY interrupt using IRQ0
       1042 : 0C 02                      ld      R0, #INTR_IRQ1
       1044 : DC 03                      ld      R13, #LOW USARTTI
       1046 : 92 0C                      lde     @RR12, R0       ; enable TxRDY interrupt using IRQ1
       1048 :
       1048 : E6 F9 34                   ld      IPR, #IPR_BCA LOR IPR_B02 LOR IPR_C14 LOR IPR_A35
       104B :                            ;; enable IRQ0 and IRQ1
       104B : E6 FB 03                   ld      IMR, #IMR_IRQ0 LOR IMR_IRQ1
       104E : 9F                         ei
       104F :
       104F :                    receive_loop:
       104F : D6 10 C6                   call    getchar
       1052 : FB FB                      jr      nc, receive_loop
       1054 : 42 00                      or      R0, R0
       1056 : EB 01                      jr      nz, echo_back
       1058 : 7F                         halt
       1059 :                    echo_back:
       1059 : 18 E0                      ld      R1, R0          ; save letter
       105B : D6 10 E1                   call    putchar         ; echo
       105E : 0C 20                      ld      R0, #' '        ; space
       1060 : D6 10 E1                   call    putchar
       1063 : D6 10 73                   call    put_hex8        ; print in hex
       1066 : 0C 20                      ld      R0, #' '        ; space
       1068 : D6 10 E1                   call    putchar
       106B : D6 10 98                   call    put_bin8        ; print in binary
       106E : D6 10 D8                   call    newline
       1071 : 8B DC                      jr      receive_loop
       1073 :
       1073 :                    ;;; Print uint8_t in hex
       1073 :                    ;;; @param R1 uint8_t value to be printed in hex.
       1073 :                    ;;; @clobber R0
       1073 :                    put_hex8:
       1073 : 0C 30                      ld      R0, #'0'
       1075 : D6 10 E1                   call    putchar
       1078 : 0C 78                      ld      R0, #'x'
       107A : D6 10 E1                   call    putchar
       107D : 08 E1                      ld      R0, R1
       107F : F0 E0                      swap    R0
       1081 : D6 10 86                   call    put_hex4
       1084 : 08 E1                      ld      R0, R1
       1086 :                    put_hex4:
       1086 : 56 E0 0F                   and     R0, #%F
       1089 : A6 E0 0A                   cp      R0, #10
       108C : 7B 05                      jr      c, put_hex8_dec ; A<10
       108E : 06 E0 37                   add     R0, #'A'-10
       1091 : 8B 4E                      jr      putchar
       1093 :                    put_hex8_dec:
       1093 : 06 E0 30                   add     R0, #'0'
       1096 : 8B 49                      jr      putchar
       1098 :
       1098 :                    ;;; Print uint8_t in binary
       1098 :                    ;;; @param R1 uint8_t value to be printed in binary.
       1098 :                    ;;; @clobber R0
       1098 :                    put_bin8:
       1098 : 70 E4                      push    R4
       109A : 0C 30                      ld      R0, #'0'
       109C : D6 10 E1                   call    putchar
       109F : 0C 62                      ld      R0, #'b'
       10A1 : D6 10 E1                   call    putchar
       10A4 : 48 E1                      ld      R4, R1
       10A6 : D6 10 B1                   call    put_bin4
       10A9 : 90 E4                      rl      R4
       10AB : D6 10 B1                   call    put_bin4
       10AE : 50 E4                      pop     R4
       10B0 : AF                         ret
       10B1 :                    put_bin4:
       10B1 : D6 10 B6                   call    put_bin2
       10B4 : 90 E4                      rl      R4
       10B6 :                    put_bin2:
       10B6 : D6 10 BB                   call    put_bin1
       10B9 : 90 E4                      rl      R4
       10BB :                    put_bin1:
       10BB : 0C 30                      ld      R0, #'0'
       10BD : 42 44                      or      R4, R4
       10BF : DD 10 C4                   jp      pl, put_bin0    ; MSB=0
       10C2 : 0C 31                      ld      R0, #'1'        ; MSB=1
       10C4 :                    put_bin0:
       10C4 : 8B 1B                      jr      putchar
       10C6 :
       10C6 :                    ;;; Get character
       10C6 :                    ;;; @return R0
       10C6 :                    ;;; @return FLAGS.C 0 if no character
       10C6 :                    getchar:
       10C6 : 70 E3                      push    R3
       10C8 : 70 E2                      push    R2
       10CA : 2C 20                      ld      R2, #HIGH rx_queue
       10CC : 3C 00                      ld      R3, #LOW rx_queue
       10CE : 8F                         di
       10CF : D6 11 6C                   call    queue_remove
       10D2 : 9F                         ei
       10D3 : 50 E2                      pop     R2
       10D5 : 50 E3                      pop     R3
       10D7 : AF                         ret
       10D8 :
       10D8 :                    ;;; Put newline
       10D8 :                    ;;; @clobber R0
       10D8 :                    newline:
       10D8 : 0C 0D                      ld      R0, #%0D
       10DA : D6 10 E1                   call    putchar
       10DD : 0C 0A                      ld      R0, #%0A
       10DF : 8B 00                      jr      putchar
       10E1 :
       10E1 :                    ;;; Put character
       10E1 :                    ;;; @param R0
       10E1 :                    putchar:
       10E1 : 70 E0                      push    R0
       10E3 : 70 E2                      push    R2
       10E5 : 70 E3                      push    R3
       10E7 : 2C 20                      ld      R2, #HIGH tx_queue
       10E9 : 3C 80                      ld      R3, #LOW tx_queue
       10EB :                    putchar_retry:
       10EB : 8F                         di
       10EC : D6 11 28                   call    queue_add
       10EF : 9F                         ei
       10F0 : FB F9                      jr      nc, putchar_retry ; branch if queue is full
       10F2 : 2C FF                      ld      R2, #HIGH USARTC
       10F4 : 3C 01                      ld      R3, #LOW USARTC
       10F6 : 0C 37                      ld      R0, #RX_EN_TX_EN
       10F8 : 92 02                      lde     @RR2, R0        ; enable Tx
       10FA :                    putchar_exit:
       10FA : 50 E3                      pop     R3
       10FC : 50 E2                      pop     R2
       10FE : 50 E0                      pop     R0
       1100 : AF                         ret
       1101 :
       1101 :                            include "queue.inc"
(1)    1101 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    1101 :                    ;;; [queue] queue structure
(1)    1101 : =0                 queue_len:      equ     0       ; queue length
(1)    1101 : =1                 queue_size:     equ     1       ; buffer size
(1)    1101 : =2                 queue_put:      equ     2       ; queue put index
(1)    1101 : =3                 queue_get:      equ     3       ; queue get index
(1)    1101 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)    1101 :
(1)    1101 :                    ;;; [queue] Initialize queue
(1)    1101 :                    ;;; @param RR2 queue work space pointer
(1)    1101 :                    ;;; @param R1 queue work space size
(1)    1101 :                    ;;; @clobber R1
(1)    1101 :                    queue_init:
(1)    1101 : 70 E0                      push    R0
(1)    1103 : 70 E2                      push    R2
(1)    1105 : 70 E3                      push    R3
(1)    1107 : B0 E0                      clr     R0
(1)    1109 : 92 02                      lde     @RR2, R0        ; queue_len
(1)    110B : A0 E2                      incw    RR2
(1)    110D : 08 E1                      ld      R0, R1
(1)    110F : 26 E0 04                   sub     R0, #queue_buf
(1)    1112 : 92 02                      lde     @RR2, R0        ; queue_size
(1)    1114 : A0 E2                      incw    RR2
(1)    1116 : 06 E0 02                   add     R0, #2          ; for queue_put and queue_get
(1)    1119 : B0 E1                      clr     R1
(1)    111B :                    queue_init_loop:
(1)    111B : 92 12                      lde     @RR2, R1
(1)    111D : A0 E2                      incw    RR2
(1)    111F : 0A FA                      djnz    R0, queue_init_loop
(1)    1121 : 50 E3                      pop     R3
(1)    1123 : 50 E2                      pop     R2
(1)    1125 : 50 E0                      pop     R0
(1)    1127 : AF                         ret
(1)    1128 :
(1)    1128 :                    ;;; [queue] Add an element to queue
(1)    1128 :                    ;;; @param RR2 queue work space pointer
(1)    1128 :                    ;;; @param R0 an element
(1)    1128 :                    ;;; @return FLAGS.C 0 if queue is full
(1)    1128 :                    queue_add:
(1)    1128 : 70 E1                      push    R1
(1)    112A : 70 E4                      push    R4              ; save R1, R4
(1)    112C : 82 12                      lde     R1, @RR2        ; queue_len
(1)    112E : 1E                         inc     R1              ; queue_len++
(1)    112F : A0 E2                      incw    RR2             ; RR2 points queue_size
(1)    1131 : 82 42                      lde     R4, @RR2        ; R4=queue_size
(1)    1133 : A2 14                      cp      R1, R4
(1)    1135 : 80 E2                      decw    RR2                ; RR2 points queue_len
(1)    1137 : 7B 05                      jr      c, queue_add_store ; queue_len < queue_size
(1)    1139 : 50 E4                      pop     R4                 ; restore R1, R4
(1)    113B : 50 E1                      pop     R1
(1)    113D : AF                         ret                     ; return with FLAGS.C=0
(1)    113E :                    queue_add_store:
(1)    113E : 92 12                      lde     @RR2, R1        ; update queue_len
(1)    1140 : A0 E2                      incw    RR2
(1)    1142 : A0 E2                      incw    RR2             ; RR2 points to queue_put
(1)    1144 : 82 12                      lde     R1, @RR2        ; queue_put
(1)    1146 : 70 E3                      push    R3              ; save RR2
(1)    1148 : 70 E2                      push    R2
(1)    114A : A0 E2                      incw    RR2
(1)    114C : A0 E2                      incw    RR2             ; RR2 points to queue_buf
(1)    114E : 02 31                      add     R3, R1
(1)    1150 : 16 E2 00                   adc     R2, #0          ; RR2=&queue_buf[queue_put]
(1)    1153 : 92 02                      lde     @RR2, R0        ; store an element
(1)    1155 : 50 E2                      pop     R2              ; restore RR2 points to queue_put
(1)    1157 : 50 E3                      pop     R3
(1)    1159 : 1E                         inc     R1              ; queue_put++
(1)    115A : A2 14                      cp      R1, R4
(1)    115C : 7B 02                      jr      c, queue_add_update ; queue_put < queue_size
(1)    115E : B0 E1                      clr     R1
(1)    1160 :                    queue_add_update:
(1)    1160 : 92 12                      lde     @RR2, R1        ; queue_put
(1)    1162 : 80 E2                      decw    RR2
(1)    1164 : 80 E2                      decw    RR2             ; RR2 points queue_len
(1)    1166 : DF                         scf                     ; set carry flag
(1)    1167 : 50 E4                      pop     R4              ; restpre R1, R4
(1)    1169 : 50 E1                      pop     R1              ; restore R1
(1)    116B : AF                         ret
(1)    116C :
(1)    116C :                    ;;; [queue] Remove an element from queue
(1)    116C :                    ;;; @param RR2 queue work space pointer
(1)    116C :                    ;;; @return R0 an element
(1)    116C :                    ;;; @return FLAGS.C 0 if queue is empty
(1)    116C :                    queue_remove:
(1)    116C : 70 E1                      push    R1              ; save R1
(1)    116E : 82 12                      lde     R1, @RR2        ; queue_len
(1)    1170 : 42 11                      or      R1, R1
(1)    1172 : EB 04                      jr      nz, queue_remove_elem ; queue_len > 0
(1)    1174 : CF                         rcf                           ; reset carry flag
(1)    1175 : 50 E1                      pop     R1
(1)    1177 : AF                         ret
(1)    1178 :                    queue_remove_elem:
(1)    1178 : 70 E4                      push    R4              ; save R4
(1)    117A : 00 E1                      dec     R1              ; queue_len--
(1)    117C : 92 12                      lde     @RR2, R1        ; update queue_len
(1)    117E : A0 E2                      incw    RR2
(1)    1180 : 82 42                      lde     R4, @RR2        ; R4=queue_size
(1)    1182 : A0 E2                      incw    RR2
(1)    1184 : A0 E2                      incw    RR2             ; RR2 points queue_get
(1)    1186 : 70 E3                      push    R3
(1)    1188 : 70 E2                      push    R2
(1)    118A : 82 12                      lde     R1, @RR2        ; queue_get
(1)    118C : A0 E2                      incw    RR2             ; RR2 points queue_buf
(1)    118E : 02 31                      add     R3, R1
(1)    1190 : 16 E2 00                   adc     R2, #0          ; RR2=&queue_buf[queue_get]
(1)    1193 : 82 02                      lde     R0, @RR2        ; read an element
(1)    1195 : 50 E2                      pop     R2              ; restore RR2 points to queue_get
(1)    1197 : 50 E3                      pop     R3
(1)    1199 : 1E                         inc     R1              ; queue_get++
(1)    119A : A2 14                      cp      R1, R4
(1)    119C : 7B 02                      jr      c, queue_remove_update ; queue_get < queue_size
(1)    119E : B0 E1                      clr     R1
(1)    11A0 :                    queue_remove_update:
(1)    11A0 : 92 12                      lde     @RR2, R1        ; update queue_get
(1)    11A2 : 80 E2                      decw    RR2
(1)    11A4 : 80 E2                      decw    RR2
(1)    11A6 : 80 E2                      decw    RR2             ; RR2 points queue_len
(1)    11A8 : 50 E4                      pop     R4              ; restore R1, R4
(1)    11AA : 50 E1                      pop     R1
(1)    11AC : DF                         scf                     ; set carry
(1)    11AD : AF                         ret
       11AE :
       11AE :                            setrp   -1
       11AE :                    isr_intr_rx:
       11AE : 70 E0                      push    R0
       11B0 : 70 E2                      push    R2
       11B2 : 70 E3                      push    R3
       11B4 : 2C FF                      ld      R2, #HIGH USARTS
       11B6 : 3C 01                      ld      R3, #LOW USARTS
       11B8 : 82 02                      lde     R0, @RR2        ; USARTS
       11BA : 56 E0 02                   and     R0, #ST_RxRDY_bm
       11BD : 6B 0B                      jr      z, isr_intr_rx_exit
       11BF : 3C 00                      ld      R3, #LOW USARTD
       11C1 : 82 02                      lde     R0, @RR2        ; USARTD
       11C3 : 2C 20                      ld      R2, #HIGH rx_queue
       11C5 : 3C 00                      ld      R3, #LOW rx_queue
       11C7 : D6 11 28                   call    queue_add
       11CA :                    isr_intr_rx_exit:
       11CA : 50 E3                      pop     R3
       11CC : 50 E2                      pop     R2
       11CE : 50 E0                      pop     R0
       11D0 : BF                         iret
       11D1 :
       11D1 :                    isr_intr_tx:
       11D1 : 70 E0                      push    R0
       11D3 : 70 E2                      push    R2
       11D5 : 70 E3                      push    R3
       11D7 : 2C FF                      ld      R2, #HIGH USARTS
       11D9 : 3C 01                      ld      R3, #LOW USARTS
       11DB : 82 02                      lde     R0, @RR2        ; USARTS
       11DD : 56 E0 01                   and     R0, #ST_TxRDY_bm
       11E0 : 6B 0F                      jr      z, isr_intr_tx_exit
       11E2 : 2C 20                      ld      R2, #HIGH tx_queue
       11E4 : 3C 80                      ld      R3, #LOW tx_queue
       11E6 : D6 11 6C                   call    queue_remove
       11E9 : 2C FF                      ld      R2, #HIGH USARTD
       11EB : 3C 00                      ld      R3, #LOW USARTD
       11ED : FB 09                      jr      nc, isr_intr_send_empty
       11EF : 92 02                      lde     @RR2, R0        ; USARTD
       11F1 :                    isr_intr_tx_exit:
       11F1 : 50 E3                      pop     R3
       11F3 : 50 E2                      pop     R2
       11F5 : 50 E0                      pop     R0
       11F7 : BF                         iret
       11F8 :                    isr_intr_send_empty:
       11F8 : 3C 01                      ld      R3, #LOW USARTC
       11FA : 0C 36                      ld      R0, #RX_EN_TX_DIS
       11FC : 92 02                      lde     @RR2, R0        ; disable Tx
       11FE : 50 E3                      pop     R3
       1200 : 50 E2                      pop     R2
       1202 : 50 E0                      pop     R0
       1204 : BF                         iret
       1205 :
       1205 :                            end
