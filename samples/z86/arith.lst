          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     z86c
          0 :                            option  "reg-alias", "disable"
          0 :
          0 :                            include "z8.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; Z8
(1)       0 : =FC                FLAGS:  equ     252               ; R/W: Flags register
(1)       0 : =80                F_CARRY:        equ     %(2)10000000 ; set to 1 if carry
(1)       0 : =40                F_ZERO:         equ     %(2)01000000 ; set to 1 if zero
(1)       0 : =20                F_SIGN:         equ     %(2)00100000 ; set to 1 if negative
(1)       0 : =10                F_OVERFLOW:     equ     %(2)00010000 ; set to 1 if overflow
(1)       0 : =8                 F_DECIMAL_ADJ:  equ     %(2)00001000 ; decimal adjust
(1)       0 : =4                 F_HALF_CARRY:   equ     %(2)00000100 ; set to 1 if carry from bit-3
(1)       0 : =2                 F_USER2:        equ     %(2)00000010 ; User flag F2
(1)       0 : =1                 F_USER1:        equ     %(2)00000001 ; User flah F1
(1)       0 :                    ;;; Interrupt vectors
(1)       0 : =0                 VEC_IRQ0:       equ     %0000   ; IRQ0
(1)       0 : =2                 VEC_IRQ1:       equ     %0002   ; IRQ1
(1)       0 : =4                 VEC_IRQ2:       equ     %0004   ; IRQ2/Tin
(1)       0 : =6                 VEC_IRQ3:       equ     %0006   ; IRQ3/Serial in
(1)       0 : =8                 VEC_IRQ4:       equ     %0008   ; IRQ4/Serial out/T0
(1)       0 : =A                 VEC_IRQ5:       equ     %000A   ; IRQ5/T1
(1)       0 :                    ;;; Reset origin
(1)       0 : =C                 ORG_RESET:      equ     %000C   ; RESET
(1)       0 :                    ;;; I/O Ports
(1)       0 : =2                 PORT2:          equ     2       ; Port 2
(1)       0 : =3                 PORT3:          equ     3       ; Port 3
(1)       0 : =F7                P3M:            equ     247       ; W/O: Port 3 Mode Register
(1)       0 : =80                P3M_PARITY:     equ     %(2)10000000 ; 1=Parity on
(1)       0 : =40                P3M_SERIAL:     equ     %(2)01000000 ; 1=P30 is serial in, P37 is serial out
(1)       0 : =1                 P3M_P2PUSHPULL: equ     %(2)00000001 ; 1=Port 2 is push-pull, 0=open drain
(1)       0 : =F6                P2M:            equ     246       ; W/O: Port 2 Mode Register, 0=output, 1=input
(1)       0 : =F8                P01M:           equ     248       ; W/O: Port 0 and 1 Mode Register
(1)       0 : =82                P01M_P0ADDR:    equ     %(2)10000010 ; Port 0 is A8~A15
(1)       0 : =10                P01M_P1DATA:    equ     %(2)00010000 ; Port 1 is AD0~AD7
(1)       0 : =4                 P01M_INTERNAL:  equ     %(2)00000100 ; Stack is on internal memory
(1)       0 :                    ;;; Interrupt
(1)       0 : =F9                IPR:    equ     249             ; W/O: Interrupt Priority
(1)       0 : =1                 IPR_CAB:        equ     %(2)000001 ; C > A > B
(1)       0 : =8                 IPR_ABC:        equ     %(2)001000 ; A > B > C
(1)       0 : =9                 IPR_ACB:        equ     %(2)001001 ; A > C > B
(1)       0 : =10                IPR_BCA:        equ     %(2)010000 ; B > C > A
(1)       0 : =11                IPR_CBA:        equ     %(2)010001 ; C > B > A
(1)       0 : =18                IPR_BAC:        equ     %(2)011000 ; B > A > C
(1)       0 : =0                 IPR_A53:        equ     %(2)000000 ; A: IRQ5 > IRQ3
(1)       0 : =20                IPR_A35:        equ     %(2)100000 ; A: IRQ3 > IRQ5
(1)       0 : =0                 IPR_B20:        equ     %(2)000000 ; B: IRQ2 > IRQ0
(1)       0 : =4                 IPR_B02:        equ     %(2)000100 ; B: IRQ0 > IRQ2
(1)       0 : =0                 IPR_C14:        equ     %(2)000000 ; C: IRQ0 > IRQ4
(1)       0 : =2                 IPR_C41:        equ     %(2)000010 ; C: IRQ4 > IRQ0
(1)       0 : =FB                IMR:    equ     251             ; R/W: Interrupt Mask
(1)       0 : =80                IMR_ENABLE:     equ     %(2)10000000 ; Interrupt enable
(1)       0 : =1                 IMR_IRQ0:       equ     (1 SHL 0)
(1)       0 : =2                 IMR_IRQ1:       equ     (1 SHL 1)
(1)       0 : =4                 IMR_IRQ2:       equ     (1 SHL 2)
(1)       0 : =8                 IMR_IRQ3:       equ     (1 SHL 3)
(1)       0 : =10                IMR_IRQ4:       equ     (1 SHL 4)
(1)       0 : =20                IMR_IRQ5:       equ     (1 SHL 5)
(1)       0 : =FA                IRQ:    equ     250             ; R/W: Interrupt Request
(1)       0 : =1                 IRQ_IRQ0:       equ     IMR_IRQ0
(1)       0 : =2                 IRQ_IRQ1:       equ     IMR_IRQ1
(1)       0 : =4                 IRQ_IRQ2:       equ     IMR_IRQ2
(1)       0 : =8                 IRQ_IRQ3:       equ     IMR_IRQ3
(1)       0 : =10                IRQ_IRQ4:       equ     IMR_IRQ4
(1)       0 : =20                IRQ_IRQ5:       equ     IMR_IRQ5
(1)       0 :                    ;;; Counter/Timers
(1)       0 : =F5                PRE0:   equ     245             ; W/O: Prescaler 0 register
(1)       0 : =1                 PRE0_MODULO:    equ     %(2)00000001 ; 1=Modulo-N, 0=Single-pass
(1)       0 : =FC                PRE0_gm:        equ     %(2)11111100 ; Modulo mask
(1)       0 : =2                 PRE0_gp:        equ     2         ; Modulo bit position
(1)       0 : =F3                PRE1:   equ     243               ; W/O: Prescaler 1 register
(1)       0 : =1                 PRE1_MODULO:    equ     %(2)00000001 ; 1=Modulo-N, 0=SinglePass
(1)       0 : =2                 PRE1_INTERNAL:  equ     %(2)00000010 ; 1=T1 internal, 0=T1 external
(1)       0 : =FC                PRE1_gm:        equ     %(2)11111100 ; Modulo mask
(1)       0 : =2                 PRE1_gp:        equ     2         ; Modulo bit position
(1)       0 : =F2                T1:     equ     242               ; R/W: Counter/Timer 1 Register
(1)       0 : =F4                T0:     equ     244               ; R/W: Counter/Timer 0 Register
(1)       0 : =F1                TMR:    equ     241               ; R/W: Timer Mode Register
(1)       0 : =1                 TMR_LOAD_T0:    equ     %(2)00000001 ; 1=Load T0
(1)       0 : =2                 TMR_ENABLE_T0:  equ     %(2)00000010 ; 1=Enable T0
(1)       0 : =4                 TMR_LOAD_T1:    equ     %(2)00000100 ; 1=Load T1
(1)       0 : =8                 TMR_ENABLE_T1:  equ     %(2)00001000 ; 1=Enable T1
(1)       0 : =0                 TMR_TOUT_OFF:   equ     %(2)00000000 ; TOUT off
(1)       0 : =40                TMR_TOUT_T0:    equ     %(2)01000000 ; TOUT=T0
(1)       0 : =80                TMR_TOUT_T1:    equ     %(2)10000000 ; TOUT=T1
(1)       0 : =C0                TMR_TOUT_CLOCK: equ     %(2)11000000 ; TOUT=internal clock
(1)       0 :                    ;;;
(1)       0 : =F0                SIO:    equ     240             ; R/W: Serial I/O Register
(1)       0 : =FD                RP:     equ     253             ; R/W: Register pointer
(1)       0 : =FE                SPH:    equ     254             ; R/W: Stack Pointer High
(1)       0 : =FF                SPL:    equ     255             ; R/W: Stack Pointer Low
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =FF00              USART:  equ     %FF00
          0 : =FF00              USARTD: equ     USART+0         ; Data register
          0 : =FF01              USARTS: equ     USART+1         ; Status register
          0 : =FF01              USARTC: equ     USART+1         ; Control register
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     %(2)11000000
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 SHL MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 SHL MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 SHL MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     %(2)00100000
(1)       0 : =10                MODE_PARITY_bm: equ     %(2)00010000
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     %(2)00001100
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 SHL MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 SHL MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 SHL MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 SHL MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     %(2)00000011
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 SHL MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ     (2 SHL MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ     (3 SHL MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     %(2)10000000   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     %(2)01000000   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     %(2)00100000   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     %(2)00010000   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     %(2)00001000   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     %(2)00000100   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     %(2)00000010   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     %(2)00000001   ; Transmit enable
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     %(2)10000000   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     %(2)01000000   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     %(2)00100000   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     %(2)00010000   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     %(2)00001000   ; Parity Error
(1)       0 : =4                 ST_TxEMPTY_bm:  equ     %(2)00000100   ; Transmitter empty
(1)       0 : =2                 ST_RxRDY_bm:    equ     %(2)00000010   ; Receiver ready
(1)       0 : =1                 ST_TxRDY_bm:    equ     %(2)00000001   ; Transmitter ready
(1)       0 :                    ;;; Interrupt name for receive/transmit interrupt
(1)       0 : =0                 INTR_NONE:      equ     0
(1)       0 : =1                 INTR_IRQ0:      equ     1
(1)       0 : =2                 INTR_IRQ1:      equ     2
(1)       0 : =3                 INTR_IRQ2:      equ     3
          0 :                    ;;; Async 1stop 8data x16
          0 : =4E                ASYNC_MODE:     equ     MODE_STOP1_gc LOR MODE_LEN8_gc LOR MODE_BAUD_X16
          0 :                    ;;; RTS/DTR, error reset, Rx enable, Tx enable
          0 : =37                RX_EN_TX_EN:    equ     CMD_RTS_bm LOR CMD_DTR_bm LOR CMD_ER_bm LOR CMD_RxEN_bm LOR CMD_TxEN_bm
          0 :
          C :                            org     ORG_RESET
          C : 8D 10 00                   jp      init_config
          F :
         40 :                            org     %40
         40 :                    a:      ds      2
         42 :                    b:      ds      2
         44 :
       1000 :                            org     %1000
       1000 : =1000              stack:  equ     $
       1000 :
       1000 :                    init_config:
       1000 : 31 F0                      srp     #%F0
       1002 :                            setrp   %F0
       1002 :                            ;; Stack is on external memory
       1002 : 8C 92                      ld      P01M, #P01M_P0ADDR LOR P01M_P1DATA
       1004 : 6C FF                      ld      P2M, #%FF       ; Port 2 is input
       1006 : EC 10                      ld      SPH, #HIGH stack
       1008 : FC 00                      ld      SPL, #LOW stack
       100A :
       100A :                    init_usart:
       100A : 31 10                      srp     #%10
       100C :                            setrp   %10
       100C : CC FF                      ld      r12, #HIGH USARTC
       100E : DC 01                      ld      r13, #LOW USARTC
       1010 : B0 E0                      clr     r0
       1012 : 92 0C                      lde     @rr12, r0
       1014 : 92 0C                      lde     @rr12, r0
       1016 : 92 0C                      lde     @rr12, r0       ; safest way to sync mode
       1018 : 0C 40                      ld      r0, #CMD_IR_bm
       101A : 92 0C                      lde     @rr12, r0       ; reset
       101C : FF                         nop
       101D : FF                         nop
       101E : 0C 4E                      ld      r0, #ASYNC_MODE
       1020 : 92 0C                      lde     @rr12, r0       ; async 1stop 8data x16
       1022 : FF                         nop
       1023 : FF                         nop
       1024 : 0C 37                      ld      r0, #RX_EN_TX_EN
       1026 : 92 0C                      lde     @rr12, r0 ; RTS/DTR, error reset, Rx enable, Tx enable
       1028 : 8C FF                      ld      r8, #HIGH USARTD
       102A : 9C 00                      ld      r9, #LOW USARTD
       102C :
       102C : D6 10 E3                   call      arith
       102F : 7F                         halt
       1030 :
       1030 :                    putchar:
       1030 : 70 E0                      push    r0
       1032 : A0 E8                      incw    rr8
       1034 :                    putchar_loop:   
       1034 : 82 08                      lde     r0, @rr8
       1036 : 76 E0 01                   tm      r0, #ST_TxRDY_bm
       1039 : 6B F9                      jr      z, putchar_loop
       103B : 50 E0                      pop     r0
       103D : 80 E8                      decw    rr8
       103F : 92 08                      lde     @rr8, r0
       1041 : AF                         ret
       1042 :
       1042 :                    newline:
       1042 : 70 E0                      push    r0
       1044 : 0C 0D                      ld      r0, #%0D
       1046 : D6 10 30                   call    putchar
       1049 : 0C 0A                      ld      r0, #%0A
       104B : D6 10 30                   call    putchar
       104E : 50 E0                      pop     r0
       1050 : AF                         ret
       1051 :
       1051 :                    putspace:
       1051 : 70 E0                      push    r0
       1053 : 0C 20                      ld      r0, #' '
       1055 : D6 10 30                   call    putchar
       1058 : 50 E0                      pop     r0
       105A : AF                         ret
       105B :
       105B :                    putflags:
       105B : 18 FC                      ld      r1, FLAGS
       105D : 76 E1 F0                   tm      r1, #F_CARRY LOR F_ZERO LOR F_SIGN LOR F_OVERFLOW
       1060 : EB 01                      jr      nz, putflags_spc
       1062 : AF                         ret
       1063 :                    putflags_spc:
       1063 : D6 10 51                   call    putspace
       1066 : 19 FC                      ld      FLAGS, r1
       1068 : FB 05                      jr      nc, putflags_nc
       106A : 0C 43                      ld      r0, #'C'
       106C : D6 10 30                   call    putchar
       106F :                    putflags_nc:
       106F : 19 FC                      ld      FLAGS, r1
       1071 : EB 05                      jr      nz, putflags_nz
       1073 : 0C 5A                      ld      r0, #'Z'
       1075 : D6 10 30                   call    putchar
       1078 :                    putflags_nz:
       1078 : 19 FC                      ld      FLAGS, r1
       107A : DB 05                      jr      pl, putflags_pl
       107C : 0C 53                      ld      r0, #'S'
       107E : D6 10 30                   call    putchar
       1081 :                    putflags_pl:
       1081 : 19 FC                      ld      FLAGS, r1
       1083 : CB 05                      jr      nov, putflags_nov
       1085 : 0C 56                      ld      r0, #'V'
       1087 : D6 10 30                   call    putchar
       108A :                    putflags_nov:
       108A : AF                         ret
       108B :
       108B :                    expr:
       108B : 70 E0                      push    r0
       108D : 08 40                      ld      r0, a
       108F : 18 41                      ld      r1, a+1
       1091 : D6 13 02                   call    print_int16
       1094 : D6 10 51                   call    putspace
       1097 : 50 E0                      pop     r0
       1099 : D6 10 30                   call    putchar
       109C : D6 10 51                   call    putspace
       109F : 08 42                      ld      r0, b
       10A1 : 18 43                      ld      r1, b+1
       10A3 : 8D 13 02                   jp      print_int16
       10A6 :
       10A6 :                    answer:
       10A6 : D6 10 51                   call    putspace
       10A9 : 0C 3D                      ld      r0, #'='
       10AB : D6 10 30                   call    putchar
       10AE : D6 10 51                   call    putspace
       10B1 : 08 40                      ld      r0, a
       10B3 : 18 41                      ld      r1, a+1
       10B5 : D6 13 02                   call    print_int16
       10B8 : 8D 10 42                   jp      newline
       10BB :
       10BB :                    comp:
       10BB : 4C 40                      ld      r4, #a
       10BD : 5C 42                      ld      r5, #b
       10BF : D6 13 4D                   call    cmpsi2
       10C2 : 70 FC                      push    FLAGS
       10C4 : AB 08                      jr      gt, comp_gt
       10C6 : 6B 0A                      jr      eq, comp_eq
       10C8 : 1B 0C                      jr      lt, comp_lt
       10CA : 0C 3F                      ld      r0, #'?'
       10CC : 8B 0A                      jr      comp_out
       10CE :                    comp_gt:
       10CE : 0C 3E                      ld      r0, #'>'
       10D0 : 8B 06                      jr      comp_out
       10D2 :                    comp_eq:
       10D2 : 0C 3D                      ld      r0, #'='
       10D4 : 8B 02                      jr      comp_out
       10D6 :                    comp_lt:
       10D6 : 0C 3C                      ld      r0, #'<'
       10D8 :                    comp_out:
       10D8 : D6 10 8B                   call    expr
       10DB : 50 FC                      pop     FLAGS
       10DD : D6 10 5B                   call    putflags
       10E0 : 8D 10 42                   jp      newline
       10E3 :
       10E3 :                    arith:
       10E3 : 4C 40                      ld      r4, #a
       10E5 : 5C 42                      ld      r5, #b
       10E7 :
       10E7 : E6 40 00                   ld      a, #0
       10EA : E6 41 00                   ld      a+1, #0
       10ED : E6 42 92                   ld      b, #HIGH -28000
       10F0 : E6 43 A0                   ld      b+1, #LOW -28000
       10F3 : 0C 2D                      ld      r0, #'-'
       10F5 : D6 10 8B                   call    expr
       10F8 : D6 13 18                   call    negsi2
       10FB : D6 10 A6                   call    answer          ; 28000
       10FE :
       10FE : E6 40 00                   ld      a, #0
       1101 : E6 41 00                   ld      a+1, #0
       1104 : E6 42 6D                   ld      b, #HIGH 28000
       1107 : E6 43 60                   ld      b+1, #LOW 28000
       110A : 0C 2D                      ld      r0, #'-'
       110C : D6 10 8B                   call    expr
       110F : D6 13 18                   call    negsi2
       1112 : D6 10 A6                   call    answer          ; -28000
       1115 :
       1115 : E6 40 46                   ld      a, #HIGH 18000
       1118 : E6 41 50                   ld      a+1, #LOW 18000
       111B : E6 42 6D                   ld      b, #HIGH 28000
       111E : E6 43 60                   ld      b+1, #LOW 28000
       1121 : 0C 2B                      ld      r0, #'+'
       1123 : D6 10 8B                   call    expr
       1126 : D6 13 29                   call    addsi2
       1129 : D6 10 A6                   call    answer          ; -19536
       112C :
       112C : E6 40 46                   ld      a, #HIGH 18000
       112F : E6 41 50                   ld      a+1, #LOW 18000
       1132 : E6 42 B9                   ld      b, #HIGH -18000
       1135 : E6 43 B0                   ld      b+1, #LOW -18000
       1138 : 0C 2B                      ld      r0, #'+'
       113A : D6 10 8B                   call    expr
       113D : D6 13 29                   call    addsi2
       1140 : D6 10 A6                   call    answer          ; 0
       1143 :
       1143 : E6 40 92                   ld      a, #HIGH -28000
       1146 : E6 41 A0                   ld      a+1, #LOW -28000
       1149 : 0C 2B                      ld      r0, #'+'
       114B : D6 10 8B                   call    expr
       114E : D6 13 29                   call    addsi2
       1151 : D6 10 A6                   call    answer          ; 29536
       1154 :
       1154 : E6 40 46                   ld      a, #HIGH 18000
       1157 : E6 41 50                   ld      a+1, #LOW 18000
       115A : E6 42 92                   ld      b, #HIGH -28000
       115D : E6 43 A0                   ld      b+1, #LOW -28000
       1160 : 0C 2D                      ld      r0, #'-'
       1162 : D6 10 8B                   call    expr
       1165 : D6 13 3B                   call    subsi2
       1168 : D6 10 A6                   call    answer          ; -19536
       116B :
       116B : E6 40 46                   ld      a, #HIGH 18000
       116E : E6 41 50                   ld      a+1, #LOW 18000
       1171 : E6 42 B9                   ld      b, #HIGH -18000
       1174 : E6 43 B0                   ld      b+1, #LOW -18000
       1177 : 0C 2D                      ld      r0, #'-'
       1179 : D6 10 8B                   call    expr
       117C : D6 13 3B                   call    subsi2
       117F : D6 10 A6                   call    answer          ; 29536
       1182 :
       1182 : E6 40 92                   ld      a, #HIGH -28000
       1185 : E6 41 A0                   ld      a+1, #LOW -28000
       1188 : 0C 2D                      ld      r0, #'-'
       118A : D6 10 8B                   call    expr
       118D : D6 13 3B                   call    subsi2
       1190 : D6 10 A6                   call    answer          ; -10000
       1193 :
       1193 : E6 40 01                   ld      a, #HIGH 300
       1196 : E6 41 2C                   ld      a+1, #LOW 300
       1199 : E6 42 FF                   ld      b, #HIGH -200
       119C : E6 43 38                   ld      b+1, #LOW -200
       119F : 0C 2A                      ld      r0, #'*'
       11A1 : D6 10 8B                   call    expr
       11A4 : D6 13 A7                   call    mulsi2
       11A7 : D6 10 A6                   call    answer          ; 5536
       11AA :
       11AA : E6 40 00                   ld      a, #HIGH 100
       11AD : E6 41 64                   ld      a+1, #LOW 100
       11B0 : E6 42 FE                   ld      b, #HIGH -300
       11B3 : E6 43 D4                   ld      b+1, #LOW -300
       11B6 : 0C 2A                      ld      r0, #'*'
       11B8 : D6 10 8B                   call    expr
       11BB : D6 13 A7                   call    mulsi2
       11BE : D6 10 A6                   call    answer          ; -30000
       11C1 :
       11C1 : E6 40 FF                   ld      a, #HIGH -200
       11C4 : E6 41 38                   ld      a+1, #LOW -200
       11C7 : E6 42 FF                   ld      b, #HIGH -100
       11CA : E6 43 9C                   ld      b+1, #LOW -100
       11CD : 0C 2A                      ld      r0, #'*'
       11CF : D6 10 8B                   call    expr
       11D2 : D6 13 A7                   call    mulsi2
       11D5 : D6 10 A6                   call    answer          ; 20000
       11D8 :
       11D8 : E6 40 FF                   ld      a, #HIGH -200
       11DB : E6 41 38                   ld      a+1, #LOW -200
       11DE : E6 42 00                   ld      b, #HIGH 100
       11E1 : E6 43 64                   ld      b+1, #LOW 100
       11E4 : 0C 2F                      ld      r0, #'/'
       11E6 : D6 10 8B                   call    expr
       11E9 : D6 14 1B                   call    divsi2
       11EC : D6 10 A6                   call    answer          ; -2
       11EF :
       11EF : E6 40 75                   ld      a, #HIGH 30000
       11F2 : E6 41 30                   ld      a+1, #LOW 30000
       11F5 : 0C 2F                      ld      r0, #'/'
       11F7 : D6 10 8B                   call    expr
       11FA : D6 14 1B                   call    divsi2
       11FD : D6 10 A6                   call    answer          ; 30
       1200 :
       1200 : E6 40 8A                   ld      a, #HIGH -30000
       1203 : E6 41 D0                   ld      a+1, #LOW -30000
       1206 : E6 42 FF                   ld      b, #HIGH -200
       1209 : E6 43 38                   ld      b+1, #LOW -200
       120C : 0C 2F                      ld      r0, #'/'
       120E : D6 10 8B                   call    expr
       1211 : D6 14 1B                   call    divsi2
       1214 : D6 10 A6                   call    answer          ; 150
       1217 :
       1217 : E6 40 8A                   ld      a, #HIGH -30000
       121A : E6 41 D0                   ld      a+1, #LOW -30000
       121D : E6 42 00                   ld      b, #HIGH 78
       1220 : E6 43 4E                   ld      b+1, #LOW 78
       1223 : 0C 2F                      ld      r0, #'/'
       1225 : D6 10 8B                   call    expr
       1228 : D6 14 1B                   call    divsi2
       122B : D6 10 A6                   call    answer          ; -384
       122E :
       122E : E6 40 13                   ld      a, #HIGH 5000
       1231 : E6 41 88                   ld      a+1, #LOW 5000
       1234 : E6 42 0F                   ld      b, #HIGH 4000
       1237 : E6 43 A0                   ld      b+1, #LOW 4000
       123A : D6 10 BB                   call    comp
       123D :
       123D : E6 42 13                   ld      b, #HIGH 5000
       1240 : E6 43 88                   ld      b+1, #LOW 5000
       1243 : D6 10 BB                   call    comp
       1246 :
       1246 : E6 40 0F                   ld      a, #HIGH 4000
       1249 : E6 41 A0                   ld      a+1, #LOW 4000
       124C : D6 10 BB                   call    comp
       124F :
       124F : E6 40 EC                   ld      a, #HIGH -5000
       1252 : E6 41 78                   ld      a+1, #LOW -5000
       1255 : E6 42 F0                   ld      b, #HIGH -4000
       1258 : E6 43 60                   ld      b+1, #LOW -4000
       125B : D6 10 BB                   call    comp
       125E :
       125E : E6 42 EC                   ld      b, #HIGH -5000
       1261 : E6 43 78                   ld      b+1, #LOW -5000
       1264 : D6 10 BB                   call    comp
       1267 :
       1267 : E6 40 F0                   ld      a, #HIGH -4000
       126A : E6 41 60                   ld      a+1, #LOW -4000
       126D : D6 10 BB                   call    comp
       1270 :
       1270 : E6 40 7F                   ld      a, #HIGH 32700
       1273 : E6 41 BC                   ld      a+1, #LOW 32700
       1276 : E6 42 7F                   ld      b, #HIGH 32600
       1279 : E6 43 58                   ld      b+1, #LOW 32600
       127C : D6 10 BB                   call    comp
       127F :
       127F : E6 42 7F                   ld      b, #HIGH 32700
       1282 : E6 43 BC                   ld      b+1, #LOW 32700
       1285 : D6 10 BB                   call    comp
       1288 :
       1288 : E6 40 7F                   ld      a, #HIGH 32600
       128B : E6 41 58                   ld      a+1, #LOW 32600
       128E : D6 10 BB                   call    comp
       1291 :
       1291 : E6 40 80                   ld      a, #HIGH -32700
       1294 : E6 41 44                   ld      a+1, #LOW -32700
       1297 : E6 42 80                   ld      b, #HIGH -32600
       129A : E6 43 A8                   ld      b+1, #LOW -32600
       129D : D6 10 BB                   call    comp
       12A0 :
       12A0 : E6 42 80                   ld      b, #HIGH -32700
       12A3 : E6 43 44                   ld      b+1, #LOW -32700
       12A6 : D6 10 BB                   call    comp
       12A9 :
       12A9 : E6 40 80                   ld      a, #HIGH -32600
       12AC : E6 41 A8                   ld      a+1, #LOW -32600
       12AF : D6 10 BB                   call    comp
       12B2 :
       12B2 : E6 40 46                   ld      a, #HIGH 18000
       12B5 : E6 41 50                   ld      a+1, #LOW 18000
       12B8 : E6 42 92                   ld      b, #HIGH -28000
       12BB : E6 43 A0                   ld      b+1, #LOW -28000
       12BE : D6 10 BB                   call    comp
       12C1 :
       12C1 : E6 42 46                   ld      b, #HIGH 18000
       12C4 : E6 43 50                   ld      b+1, #LOW 18000
       12C7 : D6 10 BB                   call    comp
       12CA :
       12CA : E6 40 92                   ld      a, #HIGH -28000
       12CD : E6 41 A0                   ld      a+1, #LOW -28000
       12D0 : D6 10 BB                   call    comp
       12D3 :
       12D3 : AF                         ret
       12D4 :
       12D4 :                            include "arith.inc"
(1)    12D4 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    12D4 :                            cpu     z86c
(1)    12D4 :                            option  optimize-index, on
(1)    12D4 :
(1)    12D4 :                    ;;; Print unsigned 16-bit integer as decimal
(1)    12D4 :                    ;;; @param rr0: value
(1)    12D4 :                    ;;; @clobber rr0 rr12 rr14
(1)    12D4 :                    print_uint16:
(1)    12D4 : A0 E0                      incw    rr0
(1)    12D6 : 80 E0                      decw    rr0
(1)    12D8 : EB 06                      jr      nz, print_uint16_inner
(1)    12DA : 0C 30                      ld      r0, #'0'
(1)    12DC : D6 10 30                   call    putchar
(1)    12DF :                    print_uint16_end:
(1)    12DF : AF                         ret
(1)    12E0 :                    print_uint16_inner:
(1)    12E0 : A0 E0                      incw    rr0
(1)    12E2 : 80 E0                      decw    rr0
(1)    12E4 : 6B F9                      jr      z, print_uint16_end
(1)    12E6 : E8 E0                      ld      r14, r0
(1)    12E8 : F8 E1                      ld      r15, r1
(1)    12EA : CC 00                      ld      r12, #HIGH 10
(1)    12EC : DC 0A                      ld      r13, #LOW 10
(1)    12EE : D6 13 DA                   call    udiv16
(1)    12F1 : 70 EF                      push    r15
(1)    12F3 : 08 EC                      ld      r0, r12
(1)    12F5 : 18 ED                      ld      r1, r13
(1)    12F7 : D6 12 E0                   call    print_uint16_inner
(1)    12FA : 50 E0                      pop     r0
(1)    12FC : 06 E0 30                   add     r0, #'0'
(1)    12FF : 8D 10 30                   jp      putchar
(1)    1302 :
(1)    1302 :                    ;;; Print signed 16-bit integer as decimal
(1)    1302 :                    ;;; @param rr0: value
(1)    1302 :                    ;;; @clobber rr0
(1)    1302 :                    print_int16:
(1)    1302 : 42 00                      or      r0, r0
(1)    1304 : DB CE                      jr      pl, print_uint16
(1)    1306 : 70 E0                      push    r0
(1)    1308 : 0C 2D                      ld      r0, #'-'
(1)    130A : D6 10 30                   call    putchar
(1)    130D : 50 E0                      pop     r0
(1)    130F : 60 E1                      com     r1
(1)    1311 : 60 E0                      com     r0
(1)    1313 : A0 E0                      incw    rr0
(1)    1315 : 8D 12 D4                   jp      print_uint16
(1)    1318 :
(1)    1318 :                    ;;; Negation; result = -value
(1)    1318 :                    ;;; @param @r4: result
(1)    1318 :                    ;;; @param @r5: value
(1)    1318 :                    ;;; @clobber r14, r15
(1)    1318 :                    negsi2:
(1)    1318 : E3 E5                      ld      r14, 0(r5)
(1)    131A : C7 F5 01                   ld      r15, 1(r5)
(1)    131D : 60 EE                      com     r14
(1)    131F : 60 EF                      com     r15
(1)    1321 : A0 EE                      incw    rr14
(1)    1323 : F3 4E                      ld      0(r4), r14
(1)    1325 : D7 F4 01                   ld      1(r4), r15
(1)    1328 : AF                         ret
(1)    1329 :
(1)    1329 :                    ;;; Signed addition: summand += addend
(1)    1329 :                    ;;; @param @r4: summand
(1)    1329 :                    ;;; @param @r5: addend
(1)    1329 :                    ;;; @clobber r14, r15
(1)    1329 :                    addsi2:
(1)    1329 : E3 E4                      ld      r14, 0(r4)
(1)    132B : C7 F4 01                   ld      r15, 1(r4)
(1)    132E : 5E                         inc     r5
(1)    132F : 03 F5                      add     r15, @r5
(1)    1331 : 00 E5                      dec     r5
(1)    1333 : 13 E5                      adc     r14, @r5
(1)    1335 : F3 4E                      ld      0(r4), r14
(1)    1337 : D7 F4 01                   ld      1(r4), r15
(1)    133A : AF                         ret
(1)    133B :
(1)    133B :                    ;;; Singed subtraction: minuend -= subtrahend
(1)    133B :                    ;;; @param @r4: minuend
(1)    133B :                    ;;; @param @r5: subtrahend
(1)    133B :                    ;;; @clobber r14, r15
(1)    133B :                    subsi2:
(1)    133B : E3 E4                      ld      r14, 0(r4)
(1)    133D : C7 F4 01                   ld      r15, 1(r4)
(1)    1340 : 5E                         inc     r5
(1)    1341 : 23 F5                      sub     r15, @r5
(1)    1343 : 00 E5                      dec     r5
(1)    1345 : 33 E5                      sbc     r14, @r5
(1)    1347 : F3 4E                      ld      0(r4), r14
(1)    1349 : D7 F4 01                   ld      1(r4), r15
(1)    134C : AF                         ret
(1)    134D :
(1)    134D :                    ;;; Signed comparison: minuend - subtrahend
(1)    134D :                    ;;; @param @r4: minuend
(1)    134D :                    ;;; @param @r5: subtrahend
(1)    134D :                    ;;; @clobber r14, r15
(1)    134D :                    cmpsi2:
(1)    134D : E3 E4                      ld      r14, 0(r4)
(1)    134F : C7 F4 01                   ld      r15, 1(r4)
(1)    1352 : 5E                         inc     r5
(1)    1353 : 23 F5                      sub     r15, @r5
(1)    1355 : 00 E5                      dec     r5
(1)    1357 : 33 E5                      sbc     r14, @r5        ; rr14=@r4-@r5
(1)    1359 : D6 13 5D                   call    addsub_flags    ; set C,Z,S,V
(1)    135C : AF                         ret
(1)    135D :
(1)    135D :                    ;;; Set add/sub flags
(1)    135D :                    ;;; @param @r4: operand 1
(1)    135D :                    ;;; @param @r5: operand 2
(1)    135D :                    ;;; @param rr14: result
(1)    135D :                    ;;; @param FLAGS
(1)    135D :                    ;;; @return FLAGS: C, Z, S, V
(1)    135D :                    addsub_flags:
(1)    135D : 70 EF                      push    r15
(1)    135F : 70 EE                      push    r14
(1)    1361 : 70 ED                      push    r13
(1)    1363 : D8 FC                      ld      r13, FLAGS
(1)    1365 : 46 ED 50                   or      r13, #F_ZERO LOR F_OVERFLOW ; set Z, V
(1)    1368 : 42 FE                      or      r15, r14
(1)    136A : 6B 03                      jr      z, addsub_flags_z
(1)    136C : B6 ED 40                   xor     r13, #F_ZERO    ; clear Z
(1)    136F :                    addsub_flags_z:
(1)    136F : B3 E4                      xor     r14, @r4
(1)    1371 : B3 E5                      xor     r14, @r5        ; r14:7 carry into S
(1)    1373 : FB 03                      jr      nc, addsub_flags_nc
(1)    1375 : B6 EE 80                   xor     r14, #%80       ; r14:7=C^(carry into S)
(1)    1378 :                    addsub_flags_nc:
(1)    1378 : 5B 03                      jr      mi, addsub_flags_v
(1)    137A : B6 ED 10                   xor     r13, #F_OVERFLOW ; clear V
(1)    137D :                    addsub_flags_v:
(1)    137D : D9 FC                      ld      FLAGS, r13
(1)    137F : 50 ED                      pop     r13
(1)    1381 : 50 EE                      pop     r14
(1)    1383 : 50 EF                      pop     r15
(1)    1385 : AF                         ret
(1)    1386 :
(1)    1386 :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)    1386 :                    ;;; @param rr14: multiplicand
(1)    1386 :                    ;;; @param rr12: multiplier
(1)    1386 :                    ;;; @return rr14: result
(1)    1386 :                    ;;; @clobber r10-r15
(1)    1386 :                    umul16:
(1)    1386 : A8 EE                      ld      r10, r14        ; rr10=multiplicand
(1)    1388 : B8 EF                      ld      r11, r15
(1)    138A : EC 00                      ld      r14, #0         ; result=0
(1)    138C : FC 00                      ld      r15, #0
(1)    138E : 8B 10                      jr      umul16_check
(1)    1390 :                    umul16_loop:
(1)    1390 : CF                         rcf                     ; multiplier >>= 1
(1)    1391 : C0 EC                      rrc     r12
(1)    1393 : C0 ED                      rrc     r13
(1)    1395 : FB 04                      jr      nc, umul16_next ; if lsb(multiplier) == 0
(1)    1397 : 02 FB                      add     r15, r11
(1)    1399 : 12 EA                      adc     r14, r10        ; result += multiplicand
(1)    139B :                    umul16_next:
(1)    139B : CF                         rcf                     ; multiplicand <<= 1
(1)    139C : 10 EB                      rlc     r11
(1)    139E : 10 EA                      rlc     r10
(1)    13A0 :                    umul16_check:
(1)    13A0 : A0 EC                      incw    rr12
(1)    13A2 : 80 EC                      decw    rr12
(1)    13A4 : EB EA                      jr      nz, umul16_loop ; while multiplier != 0
(1)    13A6 :                    umul16_end:
(1)    13A6 : AF                         ret
(1)    13A7 :
(1)    13A7 :                    ;;; Signed multiplication: multiplicand *= multiplier
(1)    13A7 :                    ;;; @param @r4: multiplicand
(1)    13A7 :                    ;;; @param @r5: multiplier
(1)    13A7 :                    ;;; @clobber r10-r15
(1)    13A7 :                    mulsi2:
(1)    13A7 : E3 E4                      ld      r14, 0(r4)
(1)    13A9 : C7 F4 01                   ld      r15, 1(r4)
(1)    13AC : E3 C5                      ld      r12, 0(r5)
(1)    13AE : C7 D5 01                   ld      r13, 1(r5)
(1)    13B1 : 42 CC                      or      r12, r12
(1)    13B3 : DB 06                      jr      pl, mulsi2_abs_muliplicand
(1)    13B5 : 60 EC                      com     r12
(1)    13B7 : 60 ED                      com     r13
(1)    13B9 : A0 EC                      incw    rr12            ; multiplicand = -multiplicand
(1)    13BB :                    mulsi2_abs_muliplicand:
(1)    13BB : 42 EE                      or      r14, r14
(1)    13BD : DB 06                      jr      pl, mulsi2_multiply
(1)    13BF : 60 EE                      com     r14
(1)    13C1 : 60 EF                      com     r15
(1)    13C3 : A0 EE                      incw    rr14            ; multiplier = -multiplier
(1)    13C5 :                    mulsi2_multiply:
(1)    13C5 : D6 13 86                   call    umul16          ; result = multiplicand * multiplier
(1)    13C8 : E3 C4                      ld      r12, @r4
(1)    13CA : B3 C5                      xor     r12, @r5        ; r12=sign(@r4)^sign(@r5)
(1)    13CC : DB 06                      jr      pl, mulsi2_end
(1)    13CE : 60 EE                      com     r14
(1)    13D0 : 60 EF                      com     r15
(1)    13D2 : A0 EE                      incw    rr14            ; result = -result
(1)    13D4 :                    mulsi2_end:
(1)    13D4 : F3 4E                      ld      0(r4), r14
(1)    13D6 : D7 F4 01                   ld      1(r4), r15
(1)    13D9 : AF                         ret
(1)    13DA :
(1)    13DA :                    ;;; Unsigned division: dividend / divisor = quotient ... reminder
(1)    13DA :                    ;;; @praram rr14: dividend
(1)    13DA :                    ;;; @praram rr12: divisor
(1)    13DA :                    ;;; @return rr14: reminder
(1)    13DA :                    ;;; @return rr12: quotient
(1)    13DA :                    ;;; @clobber r10-r15
(1)    13DA :                    udiv16:
(1)    13DA : 70 E9                      push    r9
(1)    13DC : A0 EC                      incw    rr12
(1)    13DE : 80 EC                      decw    rr12
(1)    13E0 : 6D 14 18                   jp      z, udiv16_end
(1)    13E3 : 9C 01                      ld      r9, #1          ; r9=bits
(1)    13E5 : 8D 13 EE                   jp      udiv16_prep
(1)    13E8 :                    udiv16_prep_loop:
(1)    13E8 : CF                         rcf                     ; divisor <<= 1
(1)    13E9 : 10 ED                      rlc     r13
(1)    13EB : 10 EC                      rlc     r12
(1)    13ED : 9E                         inc     r9
(1)    13EE :                    udiv16_prep:                    ; while msb(divisor) == 0
(1)    13EE : 42 CC                      or      r12, r12
(1)    13F0 : DB F6                      jr      pl, udiv16_prep_loop
(1)    13F2 : AC 00                      ld      r10, #0
(1)    13F4 : BC 00                      ld      r11, #0         ; rr10=quotient
(1)    13F6 : 8D 14 03                   jp      udiv16_enter_loop
(1)    13F9 :                    udiv16_loop:
(1)    13F9 : CF                         rcf                     ; divisor >>= 1
(1)    13FA : C0 EC                      rrc     r12
(1)    13FC : C0 ED                      rrc     r13
(1)    13FE : CF                         rcf                     ; quotient <<= 1
(1)    13FF : 10 EB                      rlc     r11
(1)    1401 : 10 EA                      rlc     r10
(1)    1403 :                    udiv16_enter_loop:
(1)    1403 : 22 FD                      sub     r15, r13        ; dividend -= divisor
(1)    1405 : 32 EC                      sbc     r14, r12
(1)    1407 : 7D 14 0E                   jp      c, udiv16_readd ; if dividend < 0
(1)    140A : BE                         inc     r11             ; quotient |= 1
(1)    140B : 8D 14 12                   jp      udiv16_next
(1)    140E :                    udiv16_readd:
(1)    140E : 02 FD                      add     r15, r13        ; dividend += divisor
(1)    1410 : 12 EC                      adc     r14, r12        ; FLAG.D is always cleared
(1)    1412 :                    udiv16_next:
(1)    1412 : 9A E5                      djnz    r9, udiv16_loop ; rr14=reminder
(1)    1414 : C8 EA                      ld      r12, r10        ; rr12=quotient
(1)    1416 : D8 EB                      ld      r13, r11
(1)    1418 :                    udiv16_end:
(1)    1418 : 50 E9                      pop     r9
(1)    141A : AF                         ret
(1)    141B :
(1)    141B :                    ;;; Signed division: dividend *= divisor
(1)    141B :                    ;;; @param @r4: dividend
(1)    141B :                    ;;; @param @r5: divisor
(1)    141B :                    ;;; @clobber r10-r15
(1)    141B :                    divsi2:
(1)    141B : E3 E4                      ld      r14, 0(r4)
(1)    141D : C7 F4 01                   ld      r15, 1(r4)
(1)    1420 : E3 C5                      ld      r12, 0(r5)
(1)    1422 : C7 D5 01                   ld      r13, 1(r5)
(1)    1425 : 42 EE                      or      r14, r14
(1)    1427 : DB 06                      jr      pl, divsi2_abs_dividend
(1)    1429 : 60 EE                      com     r14
(1)    142B : 60 EF                      com     r15
(1)    142D : A0 EE                      incw    rr14            ; dividend = -dividend
(1)    142F :                    divsi2_abs_dividend:
(1)    142F : 42 CC                      or      r12, r12
(1)    1431 : DB 06                      jr      pl, divsi2_divide
(1)    1433 : 60 EC                      com     r12
(1)    1435 : 60 ED                      com     r13
(1)    1437 : A0 EC                      incw    rr12            ; divisor = -divisor
(1)    1439 :                    divsi2_divide:
(1)    1439 : D6 13 DA                   call    udiv16
(1)    143C : E3 E4                      ld      r14, @r4
(1)    143E : B3 E5                      xor     r14, @r5        ; r14=sign(@r4)^sign(@r5)
(1)    1440 : DB 06                      jr      pl, divsi2_end
(1)    1442 : 60 EC                      com     r12
(1)    1444 : 60 ED                      com     r13
(1)    1446 : A0 EC                      incw    rr12            ; dividend = = -dividend
(1)    1448 :                    divsi2_end:
(1)    1448 : F3 4C                      ld      0(r4), r12
(1)    144A : D7 D4 01                   ld      1(r4), r13
(1)    144D : AF                         ret
(1)    144E :
(1)    144E :                    ;;; Local Variables:
(1)    144E :                    ;;; mode: asm
(1)    144E :                    ;;; End:
(1)    144E :                    ;;; vim: set ft=asm et ts=4 sw=4:
       144E :
       144E :                            end
