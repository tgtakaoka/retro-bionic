          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     z86c
          0 :                            option  "reg-alias", "disable"
          0 :
          0 :                            include "z8.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; Z8
(1)       0 : =FC                FLAGS:  equ     252               ; R/W: Flags register
(1)       0 : =80                F_CARRY:        equ     %(2)10000000 ; set to 1 if carry
(1)       0 : =40                F_ZERO:         equ     %(2)01000000 ; set to 1 if zero
(1)       0 : =20                F_SIGN:         equ     %(2)00100000 ; set to 1 if negative
(1)       0 : =10                F_OVERFLOW:     equ     %(2)00010000 ; set to 1 if overflow
(1)       0 : =8                 F_DECIMAL_ADJ:  equ     %(2)00001000 ; decimal adjust
(1)       0 : =4                 F_HALF_CARRY:   equ     %(2)00000100 ; set to 1 if carry from bit-3
(1)       0 : =2                 F_USER2:        equ     %(2)00000010 ; User flag F2
(1)       0 : =1                 F_USER1:        equ     %(2)00000001 ; User flah F1
(1)       0 :                    ;;; Interrupt vectors
(1)       0 : =0                 VEC_IRQ0:       equ     %0000   ; IRQ0
(1)       0 : =2                 VEC_IRQ1:       equ     %0002   ; IRQ1
(1)       0 : =4                 VEC_IRQ2:       equ     %0004   ; IRQ2/Tin
(1)       0 : =6                 VEC_IRQ3:       equ     %0006   ; IRQ3/Serial in
(1)       0 : =8                 VEC_IRQ4:       equ     %0008   ; IRQ4/Serial out/T0
(1)       0 : =A                 VEC_IRQ5:       equ     %000A   ; IRQ5/T1
(1)       0 :                    ;;; Reset origin
(1)       0 : =C                 ORG_RESET:      equ     %000C   ; RESET
(1)       0 :                    ;;; I/O Ports
(1)       0 : =2                 PORT2:          equ     2       ; Port 2
(1)       0 : =3                 PORT3:          equ     3       ; Port 3
(1)       0 : =F7                P3M:            equ     247       ; W/O: Port 3 Mode Register
(1)       0 : =80                P3M_PARITY:     equ     %(2)10000000 ; 1=Parity on
(1)       0 : =40                P3M_SERIAL:     equ     %(2)01000000 ; 1=P30 is serial in, P37 is serial out
(1)       0 : =1                 P3M_P2PUSHPULL: equ     %(2)00000001 ; 1=Port 2 is push-pull, 0=open drain
(1)       0 : =F6                P2M:            equ     246       ; W/O: Port 2 Mode Register, 0=output, 1=input
(1)       0 : =F8                P01M:           equ     248       ; W/O: Port 0 and 1 Mode Register
(1)       0 : =82                P01M_P0ADDR:    equ     %(2)10000010 ; Port 0 is A8~A15
(1)       0 : =10                P01M_P1DATA:    equ     %(2)00010000 ; Port 1 is AD0~AD7
(1)       0 : =4                 P01M_INTERNAL:  equ     %(2)00000100 ; Stack is on internal memory
(1)       0 :                    ;;; Interrupt
(1)       0 : =F9                IPR:    equ     249             ; W/O: Interrupt Priority
(1)       0 : =1                 IPR_CAB:        equ     %(2)000001 ; C > A > B
(1)       0 : =8                 IPR_ABC:        equ     %(2)001000 ; A > B > C
(1)       0 : =9                 IPR_ACB:        equ     %(2)001001 ; A > C > B
(1)       0 : =10                IPR_BCA:        equ     %(2)010000 ; B > C > A
(1)       0 : =11                IPR_CBA:        equ     %(2)010001 ; C > B > A
(1)       0 : =18                IPR_BAC:        equ     %(2)011000 ; B > A > C
(1)       0 : =0                 IPR_A53:        equ     %(2)000000 ; A: IRQ5 > IRQ3
(1)       0 : =20                IPR_A35:        equ     %(2)100000 ; A: IRQ3 > IRQ5
(1)       0 : =0                 IPR_B20:        equ     %(2)000000 ; B: IRQ2 > IRQ0
(1)       0 : =4                 IPR_B02:        equ     %(2)000100 ; B: IRQ0 > IRQ2
(1)       0 : =0                 IPR_C14:        equ     %(2)000000 ; C: IRQ0 > IRQ4
(1)       0 : =2                 IPR_C41:        equ     %(2)000010 ; C: IRQ4 > IRQ0
(1)       0 : =FB                IMR:    equ     251             ; R/W: Interrupt Mask
(1)       0 : =80                IMR_ENABLE:     equ     %(2)10000000 ; Interrupt enable
(1)       0 : =1                 IMR_IRQ0:       equ     (1 SHL 0)
(1)       0 : =2                 IMR_IRQ1:       equ     (1 SHL 1)
(1)       0 : =4                 IMR_IRQ2:       equ     (1 SHL 2)
(1)       0 : =8                 IMR_IRQ3:       equ     (1 SHL 3)
(1)       0 : =10                IMR_IRQ4:       equ     (1 SHL 4)
(1)       0 : =20                IMR_IRQ5:       equ     (1 SHL 5)
(1)       0 : =FA                IRQ:    equ     250             ; R/W: Interrupt Request
(1)       0 : =1                 IRQ_IRQ0:       equ     IMR_IRQ0
(1)       0 : =2                 IRQ_IRQ1:       equ     IMR_IRQ1
(1)       0 : =4                 IRQ_IRQ2:       equ     IMR_IRQ2
(1)       0 : =8                 IRQ_IRQ3:       equ     IMR_IRQ3
(1)       0 : =10                IRQ_IRQ4:       equ     IMR_IRQ4
(1)       0 : =20                IRQ_IRQ5:       equ     IMR_IRQ5
(1)       0 :                    ;;; Counter/Timers
(1)       0 : =F5                PRE0:   equ     245             ; W/O: Prescaler 0 register
(1)       0 : =1                 PRE0_MODULO:    equ     %(2)00000001 ; 1=Modulo-N, 0=Single-pass
(1)       0 : =FC                PRE0_gm:        equ     %(2)11111100 ; Modulo mask
(1)       0 : =2                 PRE0_gp:        equ     2         ; Modulo bit position
(1)       0 : =F3                PRE1:   equ     243               ; W/O: Prescaler 1 register
(1)       0 : =1                 PRE1_MODULO:    equ     %(2)00000001 ; 1=Modulo-N, 0=SinglePass
(1)       0 : =2                 PRE1_INTERNAL:  equ     %(2)00000010 ; 1=T1 internal, 0=T1 external
(1)       0 : =FC                PRE1_gm:        equ     %(2)11111100 ; Modulo mask
(1)       0 : =2                 PRE1_gp:        equ     2         ; Modulo bit position
(1)       0 : =F2                T1:     equ     242               ; R/W: Counter/Timer 1 Register
(1)       0 : =F4                T0:     equ     244               ; R/W: Counter/Timer 0 Register
(1)       0 : =F1                TMR:    equ     241               ; R/W: Timer Mode Register
(1)       0 : =1                 TMR_LOAD_T0:    equ     %(2)00000001 ; 1=Load T0
(1)       0 : =2                 TMR_ENABLE_T0:  equ     %(2)00000010 ; 1=Enable T0
(1)       0 : =4                 TMR_LOAD_T1:    equ     %(2)00000100 ; 1=Load T1
(1)       0 : =8                 TMR_ENABLE_T1:  equ     %(2)00001000 ; 1=Enable T1
(1)       0 : =0                 TMR_TOUT_OFF:   equ     %(2)00000000 ; TOUT off
(1)       0 : =40                TMR_TOUT_T0:    equ     %(2)01000000 ; TOUT=T0
(1)       0 : =80                TMR_TOUT_T1:    equ     %(2)10000000 ; TOUT=T1
(1)       0 : =C0                TMR_TOUT_CLOCK: equ     %(2)11000000 ; TOUT=internal clock
(1)       0 :                    ;;;
(1)       0 : =F0                SIO:    equ     240             ; R/W: Serial I/O Register
(1)       0 : =FD                RP:     equ     253             ; R/W: Register pointer
(1)       0 : =FE                SPH:    equ     254             ; R/W: Stack Pointer High
(1)       0 : =FF                SPL:    equ     255             ; R/W: Stack Pointer Low
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =FF00              USART:  equ     %FF00
          0 : =FF00              USARTD: equ     USART+0         ; Data register
          0 : =FF01              USARTS: equ     USART+1         ; Status register
          0 : =FF01              USARTC: equ     USART+1         ; Control register
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     %(2)11000000
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 SHL MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 SHL MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 SHL MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     %(2)00100000
(1)       0 : =10                MODE_PARITY_bm: equ     %(2)00010000
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     %(2)00001100
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 SHL MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 SHL MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 SHL MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 SHL MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     %(2)00000011
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 SHL MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ     (2 SHL MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ     (3 SHL MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     %(2)10000000   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     %(2)01000000   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     %(2)00100000   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     %(2)00010000   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     %(2)00001000   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     %(2)00000100   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     %(2)00000010   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     %(2)00000001   ; Transmit enable
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     %(2)10000000   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     %(2)01000000   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     %(2)00100000   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     %(2)00010000   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     %(2)00001000   ; Parity Error
(1)       0 : =4                 ST_TxEMPTY_bm:  equ     %(2)00000100   ; Transmitter empty
(1)       0 : =2                 ST_RxRDY_bm:    equ     %(2)00000010   ; Receiver ready
(1)       0 : =1                 ST_TxRDY_bm:    equ     %(2)00000001   ; Transmitter ready
(1)       0 :                    ;;; Interrupt name for receive/transmit interrupt
(1)       0 : =0                 INTR_NONE:      equ     0
(1)       0 : =1                 INTR_IRQ0:      equ     1
(1)       0 : =2                 INTR_IRQ1:      equ     2
(1)       0 : =3                 INTR_IRQ2:      equ     3
          0 :                    ;;; Async 1stop 8data x16
          0 : =4E                ASYNC_MODE:     equ     MODE_STOP1_gc LOR MODE_LEN8_gc LOR MODE_BAUD_X16
          0 :                    ;;; RTS/DTR, error reset, Rx enable, Tx enable
          0 : =37                RX_EN_TX_EN:    equ     CMD_RTS_bm LOR CMD_DTR_bm LOR CMD_ER_bm LOR CMD_RxEN_bm LOR CMD_TxEN_bm
          0 :
          C :                            org     ORG_RESET
          C :                            setrp   -1
          C : 8D 10 00                   jp      init_config
          F :
         40 :                            org     %40
         40 :                    a:      ds      2
         42 :                    b:      ds      2
         44 :
       1000 :                            org     %1000
       1000 : =1000              stack:  equ     $
       1000 :
       1000 :                    init_config:
       1000 :                            ;; Stack is on external memory
       1000 : E6 F8 92                   ld      P01M, #P01M_P0ADDR LOR P01M_P1DATA
       1003 : E6 F6 FF                   ld      P2M, #%FF       ; Port 2 is input
       1006 : E6 FE 10                   ld      SPH, #HIGH stack
       1009 : E6 FF 00                   ld      SPL, #LOW stack
       100C :
       100C :                    init_usart:
       100C : 31 10                      srp     #%10
       100E :                            setrp   %10
       100E : CC FF                      ld      R12, #HIGH USARTC
       1010 : DC 01                      ld      R13, #LOW USARTC
       1012 : B0 E0                      clr     R0
       1014 : 92 0C                      lde     @RR12, R0
       1016 : 92 0C                      lde     @RR12, R0
       1018 : 92 0C                      lde     @RR12, R0       ; safest way to sync mode
       101A : 0C 40                      ld      R0, #CMD_IR_bm
       101C : 92 0C                      lde     @RR12, R0       ; reset
       101E : FF                         nop
       101F : FF                         nop
       1020 : 0C 4E                      ld      R0, #ASYNC_MODE
       1022 : 92 0C                      lde     @RR12, R0       ; async 1stop 8data x16
       1024 : FF                         nop
       1025 : FF                         nop
       1026 : 0C 37                      ld      R0, #RX_EN_TX_EN
       1028 : 92 0C                      lde     @RR12, R0 ; RTS/DTR, error reset, Rx enable, Tx enable
       102A : 8C FF                      ld      R8, #HIGH USARTD
       102C : 9C 00                      ld      R9, #LOW USARTD
       102E :
       102E : D6 10 E5                   call      arith
       1031 : 7F                         halt
       1032 :
       1032 :                    putchar:
       1032 : 70 E0                      push    R0
       1034 : A0 E8                      incw    RR8
       1036 :                    putchar_loop:   
       1036 : 82 08                      lde     R0, @RR8
       1038 : 76 E0 01                   tm      R0, #ST_TxRDY_bm
       103B : 6B F9                      jr      z, putchar_loop
       103D : 50 E0                      pop     R0
       103F : 80 E8                      decw    RR8
       1041 : 92 08                      lde     @RR8, R0
       1043 : AF                         ret
       1044 :
       1044 :                    newline:
       1044 : 70 E0                      push    R0
       1046 : 0C 0D                      ld      R0, #%0D
       1048 : D6 10 32                   call    putchar
       104B : 0C 0A                      ld      R0, #%0A
       104D : D6 10 32                   call    putchar
       1050 : 50 E0                      pop     R0
       1052 : AF                         ret
       1053 :
       1053 :                    putspace:
       1053 : 70 E0                      push    R0
       1055 : 0C 20                      ld      R0, #' '
       1057 : D6 10 32                   call    putchar
       105A : 50 E0                      pop     R0
       105C : AF                         ret
       105D :
       105D :                    putflags:
       105D : 18 FC                      ld      R1, FLAGS
       105F : 76 E1 F0                   tm      R1, #F_CARRY LOR F_ZERO LOR F_SIGN LOR F_OVERFLOW
       1062 : EB 01                      jr      nz, putflags_spc
       1064 : AF                         ret
       1065 :                    putflags_spc:
       1065 : D6 10 53                   call    putspace
       1068 : 19 FC                      ld      FLAGS, R1
       106A : FB 05                      jr      nc, putflags_nc
       106C : 0C 43                      ld      R0, #'C'
       106E : D6 10 32                   call    putchar
       1071 :                    putflags_nc:
       1071 : 19 FC                      ld      FLAGS, R1
       1073 : EB 05                      jr      nz, putflags_nz
       1075 : 0C 5A                      ld      R0, #'Z'
       1077 : D6 10 32                   call    putchar
       107A :                    putflags_nz:
       107A : 19 FC                      ld      FLAGS, R1
       107C : DB 05                      jr      pl, putflags_pl
       107E : 0C 53                      ld      R0, #'S'
       1080 : D6 10 32                   call    putchar
       1083 :                    putflags_pl:
       1083 : 19 FC                      ld      FLAGS, R1
       1085 : CB 05                      jr      nov, putflags_nov
       1087 : 0C 56                      ld      R0, #'V'
       1089 : D6 10 32                   call    putchar
       108C :                    putflags_nov:
       108C : AF                         ret
       108D :
       108D :                    expr:
       108D : 70 E0                      push    R0
       108F : 08 40                      ld      R0, a
       1091 : 18 41                      ld      R1, a+1
       1093 : D6 13 04                   call    print_int16
       1096 : D6 10 53                   call    putspace
       1099 : 50 E0                      pop     R0
       109B : D6 10 32                   call    putchar
       109E : D6 10 53                   call    putspace
       10A1 : 08 42                      ld      R0, b
       10A3 : 18 43                      ld      R1, b+1
       10A5 : 8D 13 04                   jp      print_int16
       10A8 :
       10A8 :                    answer:
       10A8 : D6 10 53                   call    putspace
       10AB : 0C 3D                      ld      R0, #'='
       10AD : D6 10 32                   call    putchar
       10B0 : D6 10 53                   call    putspace
       10B3 : 08 40                      ld      R0, a
       10B5 : 18 41                      ld      R1, a+1
       10B7 : D6 13 04                   call    print_int16
       10BA : 8D 10 44                   jp      newline
       10BD :
       10BD :                    comp:
       10BD : 4C 40                      ld      R4, #a
       10BF : 5C 42                      ld      R5, #b
       10C1 : D6 13 4F                   call    cmpsi2
       10C4 : 70 FC                      push    FLAGS
       10C6 : AB 08                      jr      gt, comp_gt
       10C8 : 6B 0A                      jr      eq, comp_eq
       10CA : 1B 0C                      jr      lt, comp_lt
       10CC : 0C 3F                      ld      R0, #'?'
       10CE : 8B 0A                      jr      comp_out
       10D0 :                    comp_gt:
       10D0 : 0C 3E                      ld      R0, #'>'
       10D2 : 8B 06                      jr      comp_out
       10D4 :                    comp_eq:
       10D4 : 0C 3D                      ld      R0, #'='
       10D6 : 8B 02                      jr      comp_out
       10D8 :                    comp_lt:
       10D8 : 0C 3C                      ld      R0, #'<'
       10DA :                    comp_out:
       10DA : D6 10 8D                   call    expr
       10DD : 50 FC                      pop     FLAGS
       10DF : D6 10 5D                   call    putflags
       10E2 : 8D 10 44                   jp      newline
       10E5 :
       10E5 :                    arith:
       10E5 : 4C 40                      ld      R4, #a
       10E7 : 5C 42                      ld      R5, #b
       10E9 :
       10E9 : E6 40 00                   ld      a, #0
       10EC : E6 41 00                   ld      a+1, #0
       10EF : E6 42 92                   ld      b, #HIGH -28000
       10F2 : E6 43 A0                   ld      b+1, #LOW -28000
       10F5 : 0C 2D                      ld      R0, #'-'
       10F7 : D6 10 8D                   call    expr
       10FA : D6 13 1A                   call    negsi2
       10FD : D6 10 A8                   call    answer          ; 28000
       1100 :
       1100 : E6 40 00                   ld      a, #0
       1103 : E6 41 00                   ld      a+1, #0
       1106 : E6 42 6D                   ld      b, #HIGH 28000
       1109 : E6 43 60                   ld      b+1, #LOW 28000
       110C : 0C 2D                      ld      R0, #'-'
       110E : D6 10 8D                   call    expr
       1111 : D6 13 1A                   call    negsi2
       1114 : D6 10 A8                   call    answer          ; -28000
       1117 :
       1117 : E6 40 46                   ld      a, #HIGH 18000
       111A : E6 41 50                   ld      a+1, #LOW 18000
       111D : E6 42 6D                   ld      b, #HIGH 28000
       1120 : E6 43 60                   ld      b+1, #LOW 28000
       1123 : 0C 2B                      ld      R0, #'+'
       1125 : D6 10 8D                   call    expr
       1128 : D6 13 2B                   call    addsi2
       112B : D6 10 A8                   call    answer          ; -19536
       112E :
       112E : E6 40 46                   ld      a, #HIGH 18000
       1131 : E6 41 50                   ld      a+1, #LOW 18000
       1134 : E6 42 B9                   ld      b, #HIGH -18000
       1137 : E6 43 B0                   ld      b+1, #LOW -18000
       113A : 0C 2B                      ld      R0, #'+'
       113C : D6 10 8D                   call    expr
       113F : D6 13 2B                   call    addsi2
       1142 : D6 10 A8                   call    answer          ; 0
       1145 :
       1145 : E6 40 92                   ld      a, #HIGH -28000
       1148 : E6 41 A0                   ld      a+1, #LOW -28000
       114B : 0C 2B                      ld      R0, #'+'
       114D : D6 10 8D                   call    expr
       1150 : D6 13 2B                   call    addsi2
       1153 : D6 10 A8                   call    answer          ; 29536
       1156 :
       1156 : E6 40 46                   ld      a, #HIGH 18000
       1159 : E6 41 50                   ld      a+1, #LOW 18000
       115C : E6 42 92                   ld      b, #HIGH -28000
       115F : E6 43 A0                   ld      b+1, #LOW -28000
       1162 : 0C 2D                      ld      R0, #'-'
       1164 : D6 10 8D                   call    expr
       1167 : D6 13 3D                   call    subsi2
       116A : D6 10 A8                   call    answer          ; -19536
       116D :
       116D : E6 40 46                   ld      a, #HIGH 18000
       1170 : E6 41 50                   ld      a+1, #LOW 18000
       1173 : E6 42 B9                   ld      b, #HIGH -18000
       1176 : E6 43 B0                   ld      b+1, #LOW -18000
       1179 : 0C 2D                      ld      R0, #'-'
       117B : D6 10 8D                   call    expr
       117E : D6 13 3D                   call    subsi2
       1181 : D6 10 A8                   call    answer          ; 29536
       1184 :
       1184 : E6 40 92                   ld      a, #HIGH -28000
       1187 : E6 41 A0                   ld      a+1, #LOW -28000
       118A : 0C 2D                      ld      R0, #'-'
       118C : D6 10 8D                   call    expr
       118F : D6 13 3D                   call    subsi2
       1192 : D6 10 A8                   call    answer          ; -10000
       1195 :
       1195 : E6 40 01                   ld      a, #HIGH 300
       1198 : E6 41 2C                   ld      a+1, #LOW 300
       119B : E6 42 FF                   ld      b, #HIGH -200
       119E : E6 43 38                   ld      b+1, #LOW -200
       11A1 : 0C 2A                      ld      R0, #'*'
       11A3 : D6 10 8D                   call    expr
       11A6 : D6 13 A9                   call    mulsi2
       11A9 : D6 10 A8                   call    answer          ; 5536
       11AC :
       11AC : E6 40 00                   ld      a, #HIGH 100
       11AF : E6 41 64                   ld      a+1, #LOW 100
       11B2 : E6 42 FE                   ld      b, #HIGH -300
       11B5 : E6 43 D4                   ld      b+1, #LOW -300
       11B8 : 0C 2A                      ld      R0, #'*'
       11BA : D6 10 8D                   call    expr
       11BD : D6 13 A9                   call    mulsi2
       11C0 : D6 10 A8                   call    answer          ; -30000
       11C3 :
       11C3 : E6 40 FF                   ld      a, #HIGH -200
       11C6 : E6 41 38                   ld      a+1, #LOW -200
       11C9 : E6 42 FF                   ld      b, #HIGH -100
       11CC : E6 43 9C                   ld      b+1, #LOW -100
       11CF : 0C 2A                      ld      R0, #'*'
       11D1 : D6 10 8D                   call    expr
       11D4 : D6 13 A9                   call    mulsi2
       11D7 : D6 10 A8                   call    answer          ; 20000
       11DA :
       11DA : E6 40 FF                   ld      a, #HIGH -200
       11DD : E6 41 38                   ld      a+1, #LOW -200
       11E0 : E6 42 00                   ld      b, #HIGH 100
       11E3 : E6 43 64                   ld      b+1, #LOW 100
       11E6 : 0C 2F                      ld      R0, #'/'
       11E8 : D6 10 8D                   call    expr
       11EB : D6 14 1D                   call    divsi2
       11EE : D6 10 A8                   call    answer          ; -2
       11F1 :
       11F1 : E6 40 75                   ld      a, #HIGH 30000
       11F4 : E6 41 30                   ld      a+1, #LOW 30000
       11F7 : 0C 2F                      ld      R0, #'/'
       11F9 : D6 10 8D                   call    expr
       11FC : D6 14 1D                   call    divsi2
       11FF : D6 10 A8                   call    answer          ; 30
       1202 :
       1202 : E6 40 8A                   ld      a, #HIGH -30000
       1205 : E6 41 D0                   ld      a+1, #LOW -30000
       1208 : E6 42 FF                   ld      b, #HIGH -200
       120B : E6 43 38                   ld      b+1, #LOW -200
       120E : 0C 2F                      ld      R0, #'/'
       1210 : D6 10 8D                   call    expr
       1213 : D6 14 1D                   call    divsi2
       1216 : D6 10 A8                   call    answer          ; 150
       1219 :
       1219 : E6 40 8A                   ld      a, #HIGH -30000
       121C : E6 41 D0                   ld      a+1, #LOW -30000
       121F : E6 42 00                   ld      b, #HIGH 78
       1222 : E6 43 4E                   ld      b+1, #LOW 78
       1225 : 0C 2F                      ld      R0, #'/'
       1227 : D6 10 8D                   call    expr
       122A : D6 14 1D                   call    divsi2
       122D : D6 10 A8                   call    answer          ; -384
       1230 :
       1230 : E6 40 13                   ld      a, #HIGH 5000
       1233 : E6 41 88                   ld      a+1, #LOW 5000
       1236 : E6 42 0F                   ld      b, #HIGH 4000
       1239 : E6 43 A0                   ld      b+1, #LOW 4000
       123C : D6 10 BD                   call    comp
       123F :
       123F : E6 42 13                   ld      b, #HIGH 5000
       1242 : E6 43 88                   ld      b+1, #LOW 5000
       1245 : D6 10 BD                   call    comp
       1248 :
       1248 : E6 40 0F                   ld      a, #HIGH 4000
       124B : E6 41 A0                   ld      a+1, #LOW 4000
       124E : D6 10 BD                   call    comp
       1251 :
       1251 : E6 40 EC                   ld      a, #HIGH -5000
       1254 : E6 41 78                   ld      a+1, #LOW -5000
       1257 : E6 42 F0                   ld      b, #HIGH -4000
       125A : E6 43 60                   ld      b+1, #LOW -4000
       125D : D6 10 BD                   call    comp
       1260 :
       1260 : E6 42 EC                   ld      b, #HIGH -5000
       1263 : E6 43 78                   ld      b+1, #LOW -5000
       1266 : D6 10 BD                   call    comp
       1269 :
       1269 : E6 40 F0                   ld      a, #HIGH -4000
       126C : E6 41 60                   ld      a+1, #LOW -4000
       126F : D6 10 BD                   call    comp
       1272 :
       1272 : E6 40 7F                   ld      a, #HIGH 32700
       1275 : E6 41 BC                   ld      a+1, #LOW 32700
       1278 : E6 42 7F                   ld      b, #HIGH 32600
       127B : E6 43 58                   ld      b+1, #LOW 32600
       127E : D6 10 BD                   call    comp
       1281 :
       1281 : E6 42 7F                   ld      b, #HIGH 32700
       1284 : E6 43 BC                   ld      b+1, #LOW 32700
       1287 : D6 10 BD                   call    comp
       128A :
       128A : E6 40 7F                   ld      a, #HIGH 32600
       128D : E6 41 58                   ld      a+1, #LOW 32600
       1290 : D6 10 BD                   call    comp
       1293 :
       1293 : E6 40 80                   ld      a, #HIGH -32700
       1296 : E6 41 44                   ld      a+1, #LOW -32700
       1299 : E6 42 80                   ld      b, #HIGH -32600
       129C : E6 43 A8                   ld      b+1, #LOW -32600
       129F : D6 10 BD                   call    comp
       12A2 :
       12A2 : E6 42 80                   ld      b, #HIGH -32700
       12A5 : E6 43 44                   ld      b+1, #LOW -32700
       12A8 : D6 10 BD                   call    comp
       12AB :
       12AB : E6 40 80                   ld      a, #HIGH -32600
       12AE : E6 41 A8                   ld      a+1, #LOW -32600
       12B1 : D6 10 BD                   call    comp
       12B4 :
       12B4 : E6 40 46                   ld      a, #HIGH 18000
       12B7 : E6 41 50                   ld      a+1, #LOW 18000
       12BA : E6 42 92                   ld      b, #HIGH -28000
       12BD : E6 43 A0                   ld      b+1, #LOW -28000
       12C0 : D6 10 BD                   call    comp
       12C3 :
       12C3 : E6 42 46                   ld      b, #HIGH 18000
       12C6 : E6 43 50                   ld      b+1, #LOW 18000
       12C9 : D6 10 BD                   call    comp
       12CC :
       12CC : E6 40 92                   ld      a, #HIGH -28000
       12CF : E6 41 A0                   ld      a+1, #LOW -28000
       12D2 : D6 10 BD                   call    comp
       12D5 :
       12D5 : AF                         ret
       12D6 :
       12D6 :                            include "arith.inc"
(1)    12D6 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    12D6 :                            cpu     z86c
(1)    12D6 :                            option  optimize-index, on
(1)    12D6 :
(1)    12D6 :                    ;;; Print unsigned 16-bit integer as decimal
(1)    12D6 :                    ;;; @param RR0: value
(1)    12D6 :                    ;;; @clobber RR0 RR12 RR14
(1)    12D6 :                    print_uint16:
(1)    12D6 : A0 E0                      incw    RR0
(1)    12D8 : 80 E0                      decw    RR0
(1)    12DA : EB 06                      jr      nz, print_uint16_inner
(1)    12DC : 0C 30                      ld      R0, #'0'
(1)    12DE : D6 10 32                   call    putchar
(1)    12E1 :                    print_uint16_end:
(1)    12E1 : AF                         ret
(1)    12E2 :                    print_uint16_inner:
(1)    12E2 : A0 E0                      incw    RR0
(1)    12E4 : 80 E0                      decw    RR0
(1)    12E6 : 6B F9                      jr      z, print_uint16_end
(1)    12E8 : E8 E0                      ld      R14, R0
(1)    12EA : F8 E1                      ld      R15, R1
(1)    12EC : CC 00                      ld      R12, #HIGH 10
(1)    12EE : DC 0A                      ld      R13, #LOW 10
(1)    12F0 : D6 13 DC                   call    udiv16
(1)    12F3 : 70 EF                      push    R15
(1)    12F5 : 08 EC                      ld      R0, R12
(1)    12F7 : 18 ED                      ld      R1, R13
(1)    12F9 : D6 12 E2                   call    print_uint16_inner
(1)    12FC : 50 E0                      pop     R0
(1)    12FE : 06 E0 30                   add     R0, #'0'
(1)    1301 : 8D 10 32                   jp      putchar
(1)    1304 :
(1)    1304 :                    ;;; Print signed 16-bit integer as decimal
(1)    1304 :                    ;;; @param RR0: value
(1)    1304 :                    ;;; @clobber RR0
(1)    1304 :                    print_int16:
(1)    1304 : 42 00                      or      R0, R0
(1)    1306 : DB CE                      jr      pl, print_uint16
(1)    1308 : 70 E0                      push    R0
(1)    130A : 0C 2D                      ld      R0, #'-'
(1)    130C : D6 10 32                   call    putchar
(1)    130F : 50 E0                      pop     R0
(1)    1311 : 60 E1                      com     R1
(1)    1313 : 60 E0                      com     R0
(1)    1315 : A0 E0                      incw    RR0
(1)    1317 : 8D 12 D6                   jp      print_uint16
(1)    131A :
(1)    131A :                    ;;; Negation; result = -value
(1)    131A :                    ;;; @param @R4: result
(1)    131A :                    ;;; @param @R5: value
(1)    131A :                    ;;; @clobber R14, R15
(1)    131A :                    negsi2:
(1)    131A : E3 E5                      ld      R14, 0(R5)
(1)    131C : C7 F5 01                   ld      R15, 1(R5)
(1)    131F : 60 EE                      com     R14
(1)    1321 : 60 EF                      com     R15
(1)    1323 : A0 EE                      incw    RR14
(1)    1325 : F3 4E                      ld      0(R4), R14
(1)    1327 : D7 F4 01                   ld      1(R4), R15
(1)    132A : AF                         ret
(1)    132B :
(1)    132B :                    ;;; Signed addition: summand += addend
(1)    132B :                    ;;; @param @R4: summand
(1)    132B :                    ;;; @param @R5: addend
(1)    132B :                    ;;; @clobber R14, R15
(1)    132B :                    addsi2:
(1)    132B : E3 E4                      ld      R14, 0(R4)
(1)    132D : C7 F4 01                   ld      R15, 1(R4)
(1)    1330 : 5E                         inc     R5
(1)    1331 : 03 F5                      add     R15, @R5
(1)    1333 : 00 E5                      dec     R5
(1)    1335 : 13 E5                      adc     R14, @R5
(1)    1337 : F3 4E                      ld      0(R4), R14
(1)    1339 : D7 F4 01                   ld      1(R4), R15
(1)    133C : AF                         ret
(1)    133D :
(1)    133D :                    ;;; Singed subtraction: minuend -= subtrahend
(1)    133D :                    ;;; @param @R4: minuend
(1)    133D :                    ;;; @param @R5: subtrahend
(1)    133D :                    ;;; @clobber R14, R15
(1)    133D :                    subsi2:
(1)    133D : E3 E4                      ld      R14, 0(R4)
(1)    133F : C7 F4 01                   ld      R15, 1(R4)
(1)    1342 : 5E                         inc     R5
(1)    1343 : 23 F5                      sub     R15, @R5
(1)    1345 : 00 E5                      dec     R5
(1)    1347 : 33 E5                      sbc     R14, @R5
(1)    1349 : F3 4E                      ld      0(R4), R14
(1)    134B : D7 F4 01                   ld      1(R4), R15
(1)    134E : AF                         ret
(1)    134F :
(1)    134F :                    ;;; Signed comparison: minuend - subtrahend
(1)    134F :                    ;;; @param @R4: minuend
(1)    134F :                    ;;; @param @R5: subtrahend
(1)    134F :                    ;;; @clobber R14, R15
(1)    134F :                    cmpsi2:
(1)    134F : E3 E4                      ld      R14, 0(R4)
(1)    1351 : C7 F4 01                   ld      R15, 1(R4)
(1)    1354 : 5E                         inc     R5
(1)    1355 : 23 F5                      sub     R15, @R5
(1)    1357 : 00 E5                      dec     R5
(1)    1359 : 33 E5                      sbc     R14, @R5        ; RR14=@R4-@R5
(1)    135B : D6 13 5F                   call    addsub_flags    ; set C,Z,S,V
(1)    135E : AF                         ret
(1)    135F :
(1)    135F :                    ;;; Set add/sub flags
(1)    135F :                    ;;; @param @R4: operand 1
(1)    135F :                    ;;; @param @R5: operand 2
(1)    135F :                    ;;; @param RR14: result
(1)    135F :                    ;;; @param FLAGS
(1)    135F :                    ;;; @return FLAGS: C, Z, S, V
(1)    135F :                    addsub_flags:
(1)    135F : 70 EF                      push    R15
(1)    1361 : 70 EE                      push    R14
(1)    1363 : 70 ED                      push    R13
(1)    1365 : D8 FC                      ld      R13, FLAGS
(1)    1367 : 46 ED 50                   or      R13, #F_ZERO LOR F_OVERFLOW ; set Z, V
(1)    136A : 42 FE                      or      R15, R14
(1)    136C : 6B 03                      jr      z, addsub_flags_z
(1)    136E : B6 ED 40                   xor     R13, #F_ZERO    ; clear Z
(1)    1371 :                    addsub_flags_z:
(1)    1371 : B3 E4                      xor     R14, @R4
(1)    1373 : B3 E5                      xor     R14, @R5        ; R14:7 carry into S
(1)    1375 : FB 03                      jr      nc, addsub_flags_nc
(1)    1377 : B6 EE 80                   xor     R14, #%80       ; R14:7=C^(carry into S)
(1)    137A :                    addsub_flags_nc:
(1)    137A : 5B 03                      jr      mi, addsub_flags_v
(1)    137C : B6 ED 10                   xor     R13, #F_OVERFLOW ; clear V
(1)    137F :                    addsub_flags_v:
(1)    137F : D9 FC                      ld      FLAGS, R13
(1)    1381 : 50 ED                      pop     R13
(1)    1383 : 50 EE                      pop     R14
(1)    1385 : 50 EF                      pop     R15
(1)    1387 : AF                         ret
(1)    1388 :
(1)    1388 :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)    1388 :                    ;;; @param RR14: multiplicand
(1)    1388 :                    ;;; @param RR12: multiplier
(1)    1388 :                    ;;; @return RR14: result
(1)    1388 :                    ;;; @clobber R10-R15
(1)    1388 :                    umul16:
(1)    1388 : A8 EE                      ld      R10, R14        ; RR10=multiplicand
(1)    138A : B8 EF                      ld      R11, R15
(1)    138C : EC 00                      ld      R14, #0         ; result=0
(1)    138E : FC 00                      ld      R15, #0
(1)    1390 : 8B 10                      jr      umul16_check
(1)    1392 :                    umul16_loop:
(1)    1392 : CF                         rcf                     ; multiplier >>= 1
(1)    1393 : C0 EC                      rrc     R12
(1)    1395 : C0 ED                      rrc     R13
(1)    1397 : FB 04                      jr      nc, umul16_next ; if lsb(multiplier) == 0
(1)    1399 : 02 FB                      add     R15, R11
(1)    139B : 12 EA                      adc     R14, R10        ; result += multiplicand
(1)    139D :                    umul16_next:
(1)    139D : CF                         rcf                     ; multiplicand <<= 1
(1)    139E : 10 EB                      rlc     R11
(1)    13A0 : 10 EA                      rlc     R10
(1)    13A2 :                    umul16_check:
(1)    13A2 : A0 EC                      incw    RR12
(1)    13A4 : 80 EC                      decw    RR12
(1)    13A6 : EB EA                      jr      nz, umul16_loop ; while multiplier != 0
(1)    13A8 :                    umul16_end:
(1)    13A8 : AF                         ret
(1)    13A9 :
(1)    13A9 :                    ;;; Signed multiplication: multiplicand *= multiplier
(1)    13A9 :                    ;;; @param @R4: multiplicand
(1)    13A9 :                    ;;; @param @R5: multiplier
(1)    13A9 :                    ;;; @clobber R10-R15
(1)    13A9 :                    mulsi2:
(1)    13A9 : E3 E4                      ld      R14, 0(R4)
(1)    13AB : C7 F4 01                   ld      R15, 1(R4)
(1)    13AE : E3 C5                      ld      R12, 0(R5)
(1)    13B0 : C7 D5 01                   ld      R13, 1(R5)
(1)    13B3 : 42 CC                      or      R12, R12
(1)    13B5 : DB 06                      jr      pl, mulsi2_abs_muliplicand
(1)    13B7 : 60 EC                      com     R12
(1)    13B9 : 60 ED                      com     R13
(1)    13BB : A0 EC                      incw    RR12            ; multiplicand = -multiplicand
(1)    13BD :                    mulsi2_abs_muliplicand:
(1)    13BD : 42 EE                      or      R14, R14
(1)    13BF : DB 06                      jr      pl, mulsi2_multiply
(1)    13C1 : 60 EE                      com     R14
(1)    13C3 : 60 EF                      com     R15
(1)    13C5 : A0 EE                      incw    RR14            ; multiplier = -multiplier
(1)    13C7 :                    mulsi2_multiply:
(1)    13C7 : D6 13 88                   call    umul16          ; result = multiplicand * multiplier
(1)    13CA : E3 C4                      ld      R12, @R4
(1)    13CC : B3 C5                      xor     R12, @R5        ; R12=sign(@R4)^sign(@R5)
(1)    13CE : DB 06                      jr      pl, mulsi2_end
(1)    13D0 : 60 EE                      com     R14
(1)    13D2 : 60 EF                      com     R15
(1)    13D4 : A0 EE                      incw    RR14            ; result = -result
(1)    13D6 :                    mulsi2_end:
(1)    13D6 : F3 4E                      ld      0(R4), R14
(1)    13D8 : D7 F4 01                   ld      1(R4), R15
(1)    13DB : AF                         ret
(1)    13DC :
(1)    13DC :                    ;;; Unsigned division: dividend / divisor = quotient ... reminder
(1)    13DC :                    ;;; @praram RR14: dividend
(1)    13DC :                    ;;; @praram RR12: divisor
(1)    13DC :                    ;;; @return RR14: reminder
(1)    13DC :                    ;;; @return RR12: quotient
(1)    13DC :                    ;;; @clobber R10-R15
(1)    13DC :                    udiv16:
(1)    13DC : 70 E9                      push    R9
(1)    13DE : A0 EC                      incw    RR12
(1)    13E0 : 80 EC                      decw    RR12
(1)    13E2 : 6D 14 1A                   jp      z, udiv16_end
(1)    13E5 : 9C 01                      ld      R9, #1          ; R9=bits
(1)    13E7 : 8D 13 F0                   jp      udiv16_prep
(1)    13EA :                    udiv16_prep_loop:
(1)    13EA : CF                         rcf                     ; divisor <<= 1
(1)    13EB : 10 ED                      rlc     R13
(1)    13ED : 10 EC                      rlc     R12
(1)    13EF : 9E                         inc     R9
(1)    13F0 :                    udiv16_prep:                    ; while msb(divisor) == 0
(1)    13F0 : 42 CC                      or      R12, R12
(1)    13F2 : DB F6                      jr      pl, udiv16_prep_loop
(1)    13F4 : AC 00                      ld      R10, #0
(1)    13F6 : BC 00                      ld      R11, #0         ; RR10=quotient
(1)    13F8 : 8D 14 05                   jp      udiv16_enter_loop
(1)    13FB :                    udiv16_loop:
(1)    13FB : CF                         rcf                     ; divisor >>= 1
(1)    13FC : C0 EC                      rrc     R12
(1)    13FE : C0 ED                      rrc     R13
(1)    1400 : CF                         rcf                     ; quotient <<= 1
(1)    1401 : 10 EB                      rlc     R11
(1)    1403 : 10 EA                      rlc     R10
(1)    1405 :                    udiv16_enter_loop:
(1)    1405 : 22 FD                      sub     R15, R13        ; dividend -= divisor
(1)    1407 : 32 EC                      sbc     R14, R12
(1)    1409 : 7D 14 10                   jp      c, udiv16_readd ; if dividend < 0
(1)    140C : BE                         inc     R11             ; quotient |= 1
(1)    140D : 8D 14 14                   jp      udiv16_next
(1)    1410 :                    udiv16_readd:
(1)    1410 : 02 FD                      add     R15, R13        ; dividend += divisor
(1)    1412 : 12 EC                      adc     R14, R12        ; FLAG.D is always cleared
(1)    1414 :                    udiv16_next:
(1)    1414 : 9A E5                      djnz    R9, udiv16_loop ; RR14=reminder
(1)    1416 : C8 EA                      ld      R12, R10        ; RR12=quotient
(1)    1418 : D8 EB                      ld      R13, R11
(1)    141A :                    udiv16_end:
(1)    141A : 50 E9                      pop     R9
(1)    141C : AF                         ret
(1)    141D :
(1)    141D :                    ;;; Signed division: dividend *= divisor
(1)    141D :                    ;;; @param @R4: dividend
(1)    141D :                    ;;; @param @R5: divisor
(1)    141D :                    ;;; @clobber R10-R15
(1)    141D :                    divsi2:
(1)    141D : E3 E4                      ld      R14, 0(R4)
(1)    141F : C7 F4 01                   ld      R15, 1(R4)
(1)    1422 : E3 C5                      ld      R12, 0(R5)
(1)    1424 : C7 D5 01                   ld      R13, 1(R5)
(1)    1427 : 42 EE                      or      R14, R14
(1)    1429 : DB 06                      jr      pl, divsi2_abs_dividend
(1)    142B : 60 EE                      com     R14
(1)    142D : 60 EF                      com     R15
(1)    142F : A0 EE                      incw    RR14            ; dividend = -dividend
(1)    1431 :                    divsi2_abs_dividend:
(1)    1431 : 42 CC                      or      R12, R12
(1)    1433 : DB 06                      jr      pl, divsi2_divide
(1)    1435 : 60 EC                      com     R12
(1)    1437 : 60 ED                      com     R13
(1)    1439 : A0 EC                      incw    RR12            ; divisor = -divisor
(1)    143B :                    divsi2_divide:
(1)    143B : D6 13 DC                   call    udiv16
(1)    143E : E3 E4                      ld      R14, @R4
(1)    1440 : B3 E5                      xor     R14, @R5        ; R14=sign(@R4)^sign(@R5)
(1)    1442 : DB 06                      jr      pl, divsi2_end
(1)    1444 : 60 EC                      com     R12
(1)    1446 : 60 ED                      com     R13
(1)    1448 : A0 EC                      incw    RR12            ; dividend = = -dividend
(1)    144A :                    divsi2_end:
(1)    144A : F3 4C                      ld      0(R4), R12
(1)    144C : D7 D4 01                   ld      1(R4), R13
(1)    144F : AF                         ret
(1)    1450 :
(1)    1450 :                    ;;; Local Variables:
(1)    1450 :                    ;;; mode: asm
(1)    1450 :                    ;;; End:
(1)    1450 :                    ;;; vim: set ft=asm et ts=4 sw=4:
       1450 :
       1450 :                            end
