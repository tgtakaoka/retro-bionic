          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     z86c
          0 :                            option  "reg-alias", "disable"
          0 :
          0 :                            include "z8.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; Z8
(1)       0 : =FC                FLAGS:  equ     252               ; R/W: Flags register
(1)       0 : =80                F_CARRY:        equ     %(2)10000000 ; set to 1 if carry
(1)       0 : =40                F_ZERO:         equ     %(2)01000000 ; set to 1 if zero
(1)       0 : =20                F_SIGN:         equ     %(2)00100000 ; set to 1 if negative
(1)       0 : =10                F_OVERFLOW:     equ     %(2)00010000 ; set to 1 if overflow
(1)       0 : =8                 F_DECIMAL_ADJ:  equ     %(2)00001000 ; decimal adjust
(1)       0 : =4                 F_HALF_CARRY:   equ     %(2)00000100 ; set to 1 if carry from bit-3
(1)       0 : =2                 F_USER2:        equ     %(2)00000010 ; User flag F2
(1)       0 : =1                 F_USER1:        equ     %(2)00000001 ; User flah F1
(1)       0 :                    ;;; Interrupt vectors
(1)       0 : =0                 VEC_IRQ0:       equ     %0000   ; IRQ0
(1)       0 : =2                 VEC_IRQ1:       equ     %0002   ; IRQ1
(1)       0 : =4                 VEC_IRQ2:       equ     %0004   ; IRQ2/Tin
(1)       0 : =6                 VEC_IRQ3:       equ     %0006   ; IRQ3/Serial in
(1)       0 : =8                 VEC_IRQ4:       equ     %0008   ; IRQ4/Serial out/T0
(1)       0 : =A                 VEC_IRQ5:       equ     %000A   ; IRQ5/T1
(1)       0 :                    ;;; Reset origin
(1)       0 : =C                 ORG_RESET:      equ     %000C   ; RESET
(1)       0 :                    ;;; I/O Ports
(1)       0 : =2                 PORT2:          equ     2       ; Port 2
(1)       0 : =3                 PORT3:          equ     3       ; Port 3
(1)       0 : =F7                P3M:            equ     247       ; W/O: Port 3 Mode Register
(1)       0 : =80                P3M_PARITY:     equ     %(2)10000000 ; 1=Parity on
(1)       0 : =40                P3M_SERIAL:     equ     %(2)01000000 ; 1=P30 is serial in, P37 is serial out
(1)       0 : =1                 P3M_P2PUSHPULL: equ     %(2)00000001 ; 1=Port 2 is push-pull, 0=open drain
(1)       0 : =F6                P2M:            equ     246       ; W/O: Port 2 Mode Register, 0=output, 1=input
(1)       0 : =F8                P01M:           equ     248       ; W/O: Port 0 and 1 Mode Register
(1)       0 : =82                P01M_P0ADDR:    equ     %(2)10000010 ; Port 0 is A8~A15
(1)       0 : =10                P01M_P1DATA:    equ     %(2)00010000 ; Port 1 is AD0~AD7
(1)       0 : =4                 P01M_INTERNAL:  equ     %(2)00000100 ; Stack is on internal memory
(1)       0 :                    ;;; Interrupt
(1)       0 : =F9                IPR:    equ     249             ; W/O: Interrupt Priority
(1)       0 : =1                 IPR_CAB:        equ     %(2)000001 ; C > A > B
(1)       0 : =8                 IPR_ABC:        equ     %(2)001000 ; A > B > C
(1)       0 : =9                 IPR_ACB:        equ     %(2)001001 ; A > C > B
(1)       0 : =10                IPR_BCA:        equ     %(2)010000 ; B > C > A
(1)       0 : =11                IPR_CBA:        equ     %(2)010001 ; C > B > A
(1)       0 : =18                IPR_BAC:        equ     %(2)011000 ; B > A > C
(1)       0 : =0                 IPR_A53:        equ     %(2)000000 ; A: IRQ5 > IRQ3
(1)       0 : =20                IPR_A35:        equ     %(2)100000 ; A: IRQ3 > IRQ5
(1)       0 : =0                 IPR_B20:        equ     %(2)000000 ; B: IRQ2 > IRQ0
(1)       0 : =4                 IPR_B02:        equ     %(2)000100 ; B: IRQ0 > IRQ2
(1)       0 : =0                 IPR_C14:        equ     %(2)000000 ; C: IRQ0 > IRQ4
(1)       0 : =2                 IPR_C41:        equ     %(2)000010 ; C: IRQ4 > IRQ0
(1)       0 : =FB                IMR:    equ     251             ; R/W: Interrupt Mask
(1)       0 : =80                IMR_ENABLE:     equ     %(2)10000000 ; Interrupt enable
(1)       0 : =1                 IMR_IRQ0:       equ     (1 SHL 0)
(1)       0 : =2                 IMR_IRQ1:       equ     (1 SHL 1)
(1)       0 : =4                 IMR_IRQ2:       equ     (1 SHL 2)
(1)       0 : =8                 IMR_IRQ3:       equ     (1 SHL 3)
(1)       0 : =10                IMR_IRQ4:       equ     (1 SHL 4)
(1)       0 : =20                IMR_IRQ5:       equ     (1 SHL 5)
(1)       0 : =FA                IRQ:    equ     250             ; R/W: Interrupt Request
(1)       0 : =1                 IRQ_IRQ0:       equ     IMR_IRQ0
(1)       0 : =2                 IRQ_IRQ1:       equ     IMR_IRQ1
(1)       0 : =4                 IRQ_IRQ2:       equ     IMR_IRQ2
(1)       0 : =8                 IRQ_IRQ3:       equ     IMR_IRQ3
(1)       0 : =10                IRQ_IRQ4:       equ     IMR_IRQ4
(1)       0 : =20                IRQ_IRQ5:       equ     IMR_IRQ5
(1)       0 :                    ;;; Counter/Timers
(1)       0 : =F5                PRE0:   equ     245             ; W/O: Prescaler 0 register
(1)       0 : =1                 PRE0_MODULO:    equ     %(2)00000001 ; 1=Modulo-N, 0=Single-pass
(1)       0 : =FC                PRE0_gm:        equ     %(2)11111100 ; Modulo mask
(1)       0 : =2                 PRE0_gp:        equ     2         ; Modulo bit position
(1)       0 : =F3                PRE1:   equ     243               ; W/O: Prescaler 1 register
(1)       0 : =1                 PRE1_MODULO:    equ     %(2)00000001 ; 1=Modulo-N, 0=SinglePass
(1)       0 : =2                 PRE1_INTERNAL:  equ     %(2)00000010 ; 1=T1 internal, 0=T1 external
(1)       0 : =FC                PRE1_gm:        equ     %(2)11111100 ; Modulo mask
(1)       0 : =2                 PRE1_gp:        equ     2         ; Modulo bit position
(1)       0 : =F2                T1:     equ     242               ; R/W: Counter/Timer 1 Register
(1)       0 : =F4                T0:     equ     244               ; R/W: Counter/Timer 0 Register
(1)       0 : =F1                TMR:    equ     241               ; R/W: Timer Mode Register
(1)       0 : =1                 TMR_LOAD_T0:    equ     %(2)00000001 ; 1=Load T0
(1)       0 : =2                 TMR_ENABLE_T0:  equ     %(2)00000010 ; 1=Enable T0
(1)       0 : =4                 TMR_LOAD_T1:    equ     %(2)00000100 ; 1=Load T1
(1)       0 : =8                 TMR_ENABLE_T1:  equ     %(2)00001000 ; 1=Enable T1
(1)       0 : =0                 TMR_TOUT_OFF:   equ     %(2)00000000 ; TOUT off
(1)       0 : =40                TMR_TOUT_T0:    equ     %(2)01000000 ; TOUT=T0
(1)       0 : =80                TMR_TOUT_T1:    equ     %(2)10000000 ; TOUT=T1
(1)       0 : =C0                TMR_TOUT_CLOCK: equ     %(2)11000000 ; TOUT=internal clock
(1)       0 :                    ;;;
(1)       0 : =F0                SIO:    equ     240             ; R/W: Serial I/O Register
(1)       0 : =FD                RP:     equ     253             ; R/W: Register pointer
(1)       0 : =FE                SPH:    equ     254             ; R/W: Stack Pointer High
(1)       0 : =FF                SPL:    equ     255             ; R/W: Stack Pointer Low
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =FF00              USART:          equ     %FF00
          0 : =FF00              USARTD:         equ     USART+0 ; Receive/Transmit data
          0 : =FF01              USARTS:         equ     USART+1 ; Status register
          0 : =FF01              USARTC:         equ     USART+1 ; Control register
          0 : =FF02              USARTRI:        equ     USART+2 ; Receive interrupt name (IRQ0~2)
          0 : =FF03              USARTTI:        equ     USART+3 ; Transmit interrupt name (IRQ0~2)
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     %(2)11000000
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 SHL MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 SHL MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 SHL MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     %(2)00100000
(1)       0 : =10                MODE_PARITY_bm: equ     %(2)00010000
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     %(2)00001100
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 SHL MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 SHL MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 SHL MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 SHL MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     %(2)00000011
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 SHL MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ     (2 SHL MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ     (3 SHL MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     %(2)10000000   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     %(2)01000000   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     %(2)00100000   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     %(2)00010000   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     %(2)00001000   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     %(2)00000100   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     %(2)00000010   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     %(2)00000001   ; Transmit enable
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     %(2)10000000   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     %(2)01000000   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     %(2)00100000   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     %(2)00010000   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     %(2)00001000   ; Parity Error
(1)       0 : =4                 ST_TxEMPTY_bm:  equ     %(2)00000100   ; Transmitter empty
(1)       0 : =2                 ST_RxRDY_bm:    equ     %(2)00000010   ; Receiver ready
(1)       0 : =1                 ST_TxRDY_bm:    equ     %(2)00000001   ; Transmitter ready
(1)       0 :                    ;;; Interrupt name for receive/transmit interrupt
(1)       0 : =0                 INTR_NONE:      equ     0
(1)       0 : =1                 INTR_IRQ0:      equ     1
(1)       0 : =2                 INTR_IRQ1:      equ     2
(1)       0 : =3                 INTR_IRQ2:      equ     3
          0 :                    ;;; Async 1stop 8data x16
          0 : =4E                ASYNC_MODE:     equ     MODE_STOP1_gc LOR MODE_LEN8_gc LOR MODE_BAUD_X16
          0 :                    ;;; RTS/DTR, error reset, Rx enable, Tx enable
          0 : =37                RX_EN_TX_EN:    equ     CMD_RTS_bm LOR CMD_DTR_bm LOR CMD_ER_bm LOR CMD_RxEN_bm LOR CMD_TxEN_bm
          0 : =36                RX_EN_TX_DIS:   equ     CMD_RTS_bm LOR CMD_DTR_bm LOR CMD_ER_bm LOR CMD_RxEN_bm
          0 :
       2000 :                            org     %2000
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       ds      rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       ds      tx_queue_size
       2100 :
       2100 :                    ;;; work area for mandelbrot.inc
         40 :                            org     %40
         40 :                    c229:   ds      2
         42 :                    c416:   ds      2
         44 :                    c100:   ds      2
         46 :                    vF:     ds      2
         48 :                    vC:     ds      2
         4A :                    vD:     ds      2
         4C :                    vA:     ds      2
         4E :                    vB:     ds      2
         50 :                    vP:     ds      2
         52 :                    vQ:     ds      2
         54 :                    vS:     ds      2
         56 :                    vT:     ds      2
         58 :                    tmp:    ds      2
         5A :                    vY:     ds      2
         5C :                    vX:     ds      2
         5E :                    vI:     ds      2
         60 :
       1000 :                            org     %1000
       1000 : =1000              stack:  equ     $
       1000 :
          0 :                            org     VEC_IRQ0
          0 : 04 4D                      dw      isr_intr_rx
          2 :
          2 :                            org     VEC_IRQ1
          2 : 04 70                      dw      isr_intr_tx
          4 :
          C :                            org     ORG_RESET
          C :                            setrp   -1
          C :                    init_config:
          C :                            ;; Stack is on external memory
          C : E6 F8 92                   ld      P01M, #P01M_P0ADDR LOR P01M_P1DATA
          F : E6 F6 FF                   ld      P2M, #%FF       ; Port 2 is input
         12 : E6 FE 10                   ld      SPH, #HIGH stack
         15 : E6 FF 00                   ld      SPL, #LOW stack
         18 : 31 10                      srp     #%10
         1A :                            setrp   %10
         1A : 2C 20                      ld      R2, #HIGH rx_queue
         1C : 3C 00                      ld      R3, #LOW rx_queue
         1E : 1C 80                      ld      R1, #rx_queue_size
         20 : D6 03 A0                   call    queue_init
         23 : 2C 20                      ld      R2, #HIGH tx_queue
         25 : 3C 80                      ld      R3, #LOW tx_queue
         27 : 1C 80                      ld      R1, #tx_queue_size
         29 : D6 03 A0                   call    queue_init
         2C :
         2C :                    init_usart:
         2C : CC FF                      ld      R12, #HIGH USARTC
         2E : DC 01                      ld      R13, #LOW USARTC
         30 : B0 E0                      clr     R0
         32 : 92 0C                      lde     @RR12, R0
         34 : 92 0C                      lde     @RR12, R0
         36 : 92 0C                      lde     @RR12, R0       ; safest way to sync mode
         38 : 0C 40                      ld      R0, #CMD_IR_bm
         3A : 92 0C                      lde     @RR12, R0       ; reset
         3C : FF                         nop
         3D : FF                         nop
         3E : 0C 4E                      ld      R0, #ASYNC_MODE
         40 : 92 0C                      lde     @RR12, R0       ; async 1stop 8data x16
         42 : FF                         nop
         43 : FF                         nop
         44 : 0C 36                      ld      R0, #RX_EN_TX_DIS
         46 : 92 0C                      lde     @RR12, R0       ; RTS/DTR, error reset, Rx enable, Tx disable
         48 : 0C 01                      ld      R0, #INTR_IRQ0
         4A : DC 02                      ld      R13, #LOW USARTRI
         4C : 92 0C                      lde     @RR12, R0       ; enable RxRDY interrupt using IRQ0
         4E : 0C 02                      ld      R0, #INTR_IRQ1
         50 : DC 03                      ld      R13, #LOW USARTTI
         52 : 92 0C                      lde     @RR12, R0       ; enable TxRDY interrupt using IRQ1
         54 :
         54 : E6 F9 34                   ld      IPR, #IPR_BCA LOR IPR_B02 LOR IPR_C14 LOR IPR_A35
         57 :                            ;; enable IRQ0 and IRQ1
         57 : E6 FB 03                   ld      IMR, #IMR_IRQ0 LOR IMR_IRQ1
         5A : 9F                         ei
         5B :
         5B :                    loop:
         5B : D6 00 A2                   call    mandelbrot
         5E : D6 00 95                   call    newline
         61 : 8B F8                      jr      loop
         63 :
         63 :                    ;;; Get character
         63 :                    ;;; @return R0
         63 :                    ;;; @return FLAGS.C 0 if no character
         63 :                    getchar:
         63 : 70 E3                      push    R3
         65 : 70 E2                      push    R2
         67 : 2C 20                      ld      R2, #HIGH rx_queue
         69 : 3C 00                      ld      R3, #LOW rx_queue
         6B : 8F                         di
         6C : D6 04 0B                   call    queue_remove
         6F : 9F                         ei
         70 : 50 E2                      pop     R2
         72 : 50 E3                      pop     R3
         74 : AF                         ret
         75 :
         75 :                    ;;; Put character
         75 :                    ;;; @param R0
         75 :                    putchar:
         75 : 70 E0                      push    R0
         77 : 70 E2                      push    R2
         79 : 70 E3                      push    R3
         7B : 2C 20                      ld      R2, #HIGH tx_queue
         7D : 3C 80                      ld      R3, #LOW tx_queue
         7F :                    putchar_retry:
         7F : 8F                         di
         80 : D6 03 C7                   call    queue_add
         83 : 9F                         ei
         84 : FB F9                      jr      nc, putchar_retry ; branch if queue is full
         86 : 2C FF                      ld      R2, #HIGH USARTC
         88 : 3C 01                      ld      R3, #LOW USARTC
         8A : 0C 37                      ld      R0, #RX_EN_TX_EN
         8C : 92 02                      lde     @RR2, R0        ; enable Tx
         8E :                    putchar_exit:
         8E : 50 E3                      pop     R3
         90 : 50 E2                      pop     R2
         92 : 50 E0                      pop     R0
         94 : AF                         ret
         95 :
         95 :                    newline:
         95 : 0C 0D                      ld      R0, #%0D
         97 : D6 00 75                   call    putchar
         9A : 0C 0A                      ld      R0, #%0A
         9C : 8B D7                      jr      putchar
         9E :
         9E :                    putspace:
         9E : 0C 20                      ld      R0, #' '
         A0 : 8B D3                      jr      putchar
         A2 :
         A2 :                            include "mandelbrot.inc"
(1)      A2 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)      A2 :
(1)      A2 :                    mandelbrot:
(1)      A2 : E6 40 00                   ld      c229, #HIGH 229
(1)      A5 : E6 41 E5                   ld      c229+1, #LOW 229
(1)      A8 : E6 42 01                   ld      c416, #HIGH 416
(1)      AB : E6 43 A0                   ld      c416+1, #LOW 416
(1)      AE : E6 44 00                   ld      c100, #HIGH 100
(1)      B1 : E6 45 64                   ld      c100+1, #LOW 100
(1)      B4 : E6 46 00                   ld      vF, #HIGH 50    ; F=50
(1)      B7 : E6 47 32                   ld      vF+1, #LOW 50
(1)      BA : E6 5A FF                   ld      vY, #HIGH -12   ; Y=-12
(1)      BD : E6 5B F4                   ld      vY+1, #LOW -12
(1)      C0 :                    loop_y:
(1)      C0 : E6 5C FF                   ld      vX, #HIGH -49   ; X=-49
(1)      C3 : E6 5D CF                   ld      vX+1, #LOW -49
(1)      C6 :                    loop_x:
(1)      C6 : E4 5C 48                   ld      vC, vX          ; C=X
(1)      C9 : E4 5D 49                   ld      vC+1, vX+1      ; C=X
(1)      CC : 4C 48                      ld      R4, #vC
(1)      CE : 5C 40                      ld      R5, #c229
(1)      D0 : D6 02 F9                   call    mulsi2          ; C=X*229
(1)      D3 : 5C 44                      ld      R5, #c100
(1)      D5 : D6 03 6D                   call    divsi2          ; C=X*229/100
(1)      D8 : E4 5A 4A                   ld      vD, vY          ; D=Y
(1)      DB : E4 5B 4B                   ld      vD+1, vY+1
(1)      DE : 4C 4A                      ld      R4, #vD
(1)      E0 : 5C 42                      ld      R5, #c416
(1)      E2 : D6 02 F9                   call    mulsi2          ; D=Y*416
(1)      E5 : 5C 44                      ld      R5, #c100
(1)      E7 : D6 03 6D                   call    divsi2          ; D=Y*416/100
(1)      EA : E4 48 4C                   ld      vA, vC          ; A=C
(1)      ED : E4 49 4D                   ld      vA+1, vC+1
(1)      F0 : E4 4A 4E                   ld      vB, vD          ; B=D
(1)      F3 : E4 4B 4F                   ld      vB+1, vD+1
(1)      F6 : E6 5E 00                   ld      vI, #HIGH 0     ; I=0
(1)      F9 : E6 5F 00                   ld      vI+1, #LOW 0
(1)      FC :
(1)      FC :                            ;; ld      R2, #'Y'
(1)      FC :                            ;; ld      R0, vY
(1)      FC :                            ;; ld      R1, vY+1
(1)      FC :                            ;; call    print
(1)      FC :                            ;; ld      R2, #'X'
(1)      FC :                            ;; ld      R0, vX
(1)      FC :                            ;; ld      R1, vX+1
(1)      FC :                            ;; call    print
(1)      FC :                            ;; ld      R2, #'C'
(1)      FC :                            ;; ld      R0, vC
(1)      FC :                            ;; ld      R1, vC+1
(1)      FC :                            ;; call    print
(1)      FC :                            ;; ld      R2, #'D'
(1)      FC :                            ;; ld      R0, vD
(1)      FC :                            ;; ld      R1, vD+1
(1)      FC :                            ;; call    print
(1)      FC :                            ;; call    newline
(1)      FC :
(1)      FC :                    loop_i:
(1)      FC : E4 4E 52                   ld      vQ, vB          ; Q=B
(1)      FF : E4 4F 53                   ld      vQ+1, vB+1
(1)     102 : 4C 52                      ld      R4, #vQ
(1)     104 : 5C 46                      ld      R5, #vF
(1)     106 : D6 03 6D                   call    divsi2          ; Q=B/F
(1)     109 : E4 52 58                   ld      tmp, vQ
(1)     10C : E4 53 59                   ld      tmp+1, vQ+1     ; tmp=Q
(1)     10F : 4C 58                      ld      R4, #tmp
(1)     111 : 5C 46                      ld      R5, #vF
(1)     113 : D6 02 F9                   call    mulsi2          ; tmp=Q*F
(1)     116 : E4 4E 54                   ld      vS, vB
(1)     119 : E4 4F 55                   ld      vS+1, vB+1      ; S=B
(1)     11C : 4C 54                      ld      R4, #vS
(1)     11E : 5C 58                      ld      R5, #tmp
(1)     120 : D6 02 8D                   call    subsi2          ; S=B-Q*F
(1)     123 : E4 4E 58                   ld      tmp, vB
(1)     126 : E4 4F 59                   ld      tmp+1, vB+1
(1)     129 : 4C 58                      ld      R4, #tmp
(1)     12B : 5C 4E                      ld      R5, #vB
(1)     12D : D6 02 F9                   call    mulsi2          ; tmp=B*B
(1)     130 : E4 4C 56                   ld      vT, vA
(1)     133 : E4 4D 57                   ld      vT+1, vA+1
(1)     136 : 4C 56                      ld      R4, #vT
(1)     138 : 5C 4C                      ld      R5, #vA
(1)     13A : D6 02 F9                   call    mulsi2          ; T=A*A
(1)     13D : 5C 58                      ld      R5, #tmp
(1)     13F : D6 02 8D                   call    subsi2          ; T=A*A-B*B
(1)     142 : 5C 46                      ld      R5, #vF
(1)     144 : D6 03 6D                   call    divsi2          ; T=(A*A-B*B)/F
(1)     147 : 5C 48                      ld      R5, #vC
(1)     149 : D6 02 7B                   call    addsi2          ; T=(A*A-B*B)/F+C
(1)     14C : E4 4C 58                   ld      tmp, vA
(1)     14F : E4 4D 59                   ld      tmp+1, vA+1
(1)     152 : 4C 58                      ld      R4, #tmp
(1)     154 : 5C 54                      ld      R5, #vS
(1)     156 : D6 02 F9                   call    mulsi2          ; tmp=A*S
(1)     159 : 5C 46                      ld      R5, #vF
(1)     15B : D6 03 6D                   call    divsi2          ; tmp=A*S/F
(1)     15E : E4 4C 4E                   ld      vB, vA          ; B=A
(1)     161 : E4 4D 4F                   ld      vB+1, vA+1
(1)     164 : 4C 4E                      ld      R4, #vB
(1)     166 : 5C 52                      ld      R5, #vQ
(1)     168 : D6 02 F9                   call    mulsi2          ; B=A*Q
(1)     16B : 5C 58                      ld      R5, #tmp
(1)     16D : D6 02 7B                   call    addsi2          ; B=A*Q+A*S/F
(1)     170 : 5C 4E                      ld      R5, #vB
(1)     172 : D6 02 7B                   call    addsi2          ; B=2*(A*Q+A*S/F)
(1)     175 : 5C 4A                      ld      R5, #vD
(1)     177 : D6 02 7B                   call    addsi2          ; B=2*(A*Q+A*S/F)+D
(1)     17A : 08 56                      ld      R0, vT
(1)     17C : 18 57                      ld      R1, vT+1
(1)     17E : 09 4C                      ld      vA, R0          ; A=T
(1)     180 : 19 4D                      ld      vA+1, R1
(1)     182 : 09 50                      ld      vP, R0
(1)     184 : 19 51                      ld      vP+1, R1        ; P=A
(1)     186 : 4C 50                      ld      R4, #vP
(1)     188 : 5C 46                      ld      R5, #vF
(1)     18A : D6 03 6D                   call    divsi2          ; P=A/F
(1)     18D : E4 4E 52                   ld      vQ, vB
(1)     190 : E4 4F 53                   ld      vQ+1, vB+1
(1)     193 : 4C 52                      ld      R4, #vQ
(1)     195 : D6 03 6D                   call    divsi2          ; Q=B/F
(1)     198 : E4 52 58                   ld      tmp, vQ
(1)     19B : E4 53 59                   ld      tmp+1, vQ+1
(1)     19E : 4C 58                      ld      R4, #tmp
(1)     1A0 : 5C 52                      ld      R5, #vQ
(1)     1A2 : D6 02 F9                   call    mulsi2          ; tmp=Q*Q
(1)     1A5 : E4 50 56                   ld      vT, vP
(1)     1A8 : E4 51 57                   ld      vT+1, vP+1
(1)     1AB : 4C 56                      ld      R4, #vT
(1)     1AD : 5C 50                      ld      R5, #vP
(1)     1AF : D6 02 F9                   call    mulsi2          ; T=P*P
(1)     1B2 : 5C 58                      ld      R5, #tmp
(1)     1B4 : D6 02 7B                   call    addsi2          ; T=P*P+Q*Q
(1)     1B7 :
(1)     1B7 :                            ;; call    putspace
(1)     1B7 :                            ;; ld      R2, #'I'
(1)     1B7 :                            ;; ld      R0, vI
(1)     1B7 :                            ;; ld      R1, vI+1
(1)     1B7 :                            ;; call    print
(1)     1B7 :                            ;; ld      R2, #'A'
(1)     1B7 :                            ;; ld      R0, vA
(1)     1B7 :                            ;; ld      R1, vA+1
(1)     1B7 :                            ;; call    print
(1)     1B7 :                            ;; ld      R2, #'B'
(1)     1B7 :                            ;; ld      R0, vB
(1)     1B7 :                            ;; ld      R1, vB+1
(1)     1B7 :                            ;; call    print
(1)     1B7 :                            ;; ld      R2, #'P'
(1)     1B7 :                            ;; ld      R0, vP
(1)     1B7 :                            ;; ld      R1, vP+1
(1)     1B7 :                            ;; call    print
(1)     1B7 :                            ;; ld      R2, #'Q'
(1)     1B7 :                            ;; ld      R0, vQ
(1)     1B7 :                            ;; ld      R1, vQ+1
(1)     1B7 :                            ;; call    print
(1)     1B7 :                            ;; ld      R2, #'T'
(1)     1B7 :                            ;; ld      R0, vT
(1)     1B7 :                            ;; ld      R1, vT+1
(1)     1B7 :                            ;; call    print
(1)     1B7 :                            ;; call    newline
(1)     1B7 :
(1)     1B7 : 08 56                      ld      R0, vT
(1)     1B9 : 42 00                      or      R0, R0
(1)     1BB : EB 15                      jr      nz, print_i     ; if T(>=0)>4
(1)     1BD : 18 57                      ld      R1, vT+1
(1)     1BF : 26 E1 05                   sub     R1, #4+1
(1)     1C2 : DB 0E                      jr      pl, print_i     ; if T>4
(1)     1C4 : 20 5F                      inc     vI+1
(1)     1C6 : 08 5F                      ld      R0, vI+1
(1)     1C8 : 26 E0 10                   sub     R0, #16
(1)     1CB : 5D 00 FC                   jp      mi, loop_i      ; if I<16
(1)     1CE : 0C 20                      ld      R0, #' '
(1)     1D0 : 8B 0D                      jr      print_char
(1)     1D2 :                    print_i:
(1)     1D2 : 08 5F                      ld      R0, vI+1
(1)     1D4 : 06 E0 30                   add     R0, #'0'
(1)     1D7 : A6 E0 3A                   cp      R0, #'9'+1
(1)     1DA : 7B 03                      jr      c, print_char   ; if I<'9'+1
(1)     1DC : 06 E0 07                   add     R0, #'A'-'0'-10
(1)     1DF :                    print_char:
(1)     1DF : D6 00 75                   call    putchar
(1)     1E2 :
(1)     1E2 :                            ;; push    R0
(1)     1E2 :                            ;; ld      R0, #'@'
(1)     1E2 :                            ;; call    putchar
(1)     1E2 :                            ;; ld      R0, #'='
(1)     1E2 :                            ;; call    putchar
(1)     1E2 :                            ;; pop     R0
(1)     1E2 :                            ;; call    putchar
(1)     1E2 :                            ;; call    newline
(1)     1E2 :
(1)     1E2 : D6 00 63                   call    getchar
(1)     1E5 : FB 05                      jr      nc, next_x
(1)     1E7 : 42 00                      or      R0, R0
(1)     1E9 : EB 01                      jr      nz, next_x
(1)     1EB : 7F                         halt
(1)     1EC :                    next_x:
(1)     1EC : A0 5C                      incw    vX
(1)     1EE : 08 5C                      ld      R0, vX
(1)     1F0 : 42 00                      or      R0, R0
(1)     1F2 : ED 00 C6                   jp      nz, loop_x      ; if X<0
(1)     1F5 : 08 5D                      ld      R0, vX+1
(1)     1F7 : 26 E0 1E                   sub     R0, #30
(1)     1FA : 5D 00 C6                   jp      mi, loop_x      ; if X<30
(1)     1FD : D6 00 95                   call    newline
(1)     200 : A0 5A                      incw    vY
(1)     202 : 08 5A                      ld      R0, vY
(1)     204 : 42 00                      or      R0, R0
(1)     206 : ED 00 C0                   jp      nz, loop_y      ; if X<0
(1)     209 : 08 5B                      ld      R0, vY+1
(1)     20B : 26 E0 0D                   sub     R0, #13
(1)     20E : 1D 00 C0                   jp      lt, loop_y      ; if X<13
(1)     211 : AF                         ret
(1)     212 :
(1)     212 :                    ;;; Print variable
(1)     212 :                    ;;; @param R2 variable name
(1)     212 :                    ;;; @param RR0 variable value
(1)     212 :                    print:
(1)     212 : 70 E0                      push    R0
(1)     214 : 08 E2                      ld      R0, R2
(1)     216 : D6 00 75                   call    putchar
(1)     219 : 0C 3D                      ld      R0, #'='
(1)     21B : D6 00 75                   call    putchar
(1)     21E : 50 E0                      pop     R0
(1)     220 : D6 02 54                   call    print_int16
(1)     223 : 8D 00 9E                   jp      putspace
        226 :                            include "arith.inc"
(1)     226 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     226 :                            cpu     z86c
(1)     226 :                            option  optimize-index, on
(1)     226 :
(1)     226 :                    ;;; Print unsigned 16-bit integer as decimal
(1)     226 :                    ;;; @param RR0: value
(1)     226 :                    ;;; @clobber RR0 RR12 RR14
(1)     226 :                    print_uint16:
(1)     226 : A0 E0                      incw    RR0
(1)     228 : 80 E0                      decw    RR0
(1)     22A : EB 06                      jr      nz, print_uint16_inner
(1)     22C : 0C 30                      ld      R0, #'0'
(1)     22E : D6 00 75                   call    putchar
(1)     231 :                    print_uint16_end:
(1)     231 : AF                         ret
(1)     232 :                    print_uint16_inner:
(1)     232 : A0 E0                      incw    RR0
(1)     234 : 80 E0                      decw    RR0
(1)     236 : 6B F9                      jr      z, print_uint16_end
(1)     238 : E8 E0                      ld      R14, R0
(1)     23A : F8 E1                      ld      R15, R1
(1)     23C : CC 00                      ld      R12, #HIGH 10
(1)     23E : DC 0A                      ld      R13, #LOW 10
(1)     240 : D6 03 2C                   call    udiv16
(1)     243 : 70 EF                      push    R15
(1)     245 : 08 EC                      ld      R0, R12
(1)     247 : 18 ED                      ld      R1, R13
(1)     249 : D6 02 32                   call    print_uint16_inner
(1)     24C : 50 E0                      pop     R0
(1)     24E : 06 E0 30                   add     R0, #'0'
(1)     251 : 8D 00 75                   jp      putchar
(1)     254 :
(1)     254 :                    ;;; Print signed 16-bit integer as decimal
(1)     254 :                    ;;; @param RR0: value
(1)     254 :                    ;;; @clobber RR0
(1)     254 :                    print_int16:
(1)     254 : 42 00                      or      R0, R0
(1)     256 : DB CE                      jr      pl, print_uint16
(1)     258 : 70 E0                      push    R0
(1)     25A : 0C 2D                      ld      R0, #'-'
(1)     25C : D6 00 75                   call    putchar
(1)     25F : 50 E0                      pop     R0
(1)     261 : 60 E1                      com     R1
(1)     263 : 60 E0                      com     R0
(1)     265 : A0 E0                      incw    RR0
(1)     267 : 8D 02 26                   jp      print_uint16
(1)     26A :
(1)     26A :                    ;;; Negation; result = -value
(1)     26A :                    ;;; @param @R4: result
(1)     26A :                    ;;; @param @R5: value
(1)     26A :                    ;;; @clobber R14, R15
(1)     26A :                    negsi2:
(1)     26A : E3 E5                      ld      R14, 0(R5)
(1)     26C : C7 F5 01                   ld      R15, 1(R5)
(1)     26F : 60 EE                      com     R14
(1)     271 : 60 EF                      com     R15
(1)     273 : A0 EE                      incw    RR14
(1)     275 : F3 4E                      ld      0(R4), R14
(1)     277 : D7 F4 01                   ld      1(R4), R15
(1)     27A : AF                         ret
(1)     27B :
(1)     27B :                    ;;; Signed addition: summand += addend
(1)     27B :                    ;;; @param @R4: summand
(1)     27B :                    ;;; @param @R5: addend
(1)     27B :                    ;;; @clobber R14, R15
(1)     27B :                    addsi2:
(1)     27B : E3 E4                      ld      R14, 0(R4)
(1)     27D : C7 F4 01                   ld      R15, 1(R4)
(1)     280 : 5E                         inc     R5
(1)     281 : 03 F5                      add     R15, @R5
(1)     283 : 00 E5                      dec     R5
(1)     285 : 13 E5                      adc     R14, @R5
(1)     287 : F3 4E                      ld      0(R4), R14
(1)     289 : D7 F4 01                   ld      1(R4), R15
(1)     28C : AF                         ret
(1)     28D :
(1)     28D :                    ;;; Singed subtraction: minuend -= subtrahend
(1)     28D :                    ;;; @param @R4: minuend
(1)     28D :                    ;;; @param @R5: subtrahend
(1)     28D :                    ;;; @clobber R14, R15
(1)     28D :                    subsi2:
(1)     28D : E3 E4                      ld      R14, 0(R4)
(1)     28F : C7 F4 01                   ld      R15, 1(R4)
(1)     292 : 5E                         inc     R5
(1)     293 : 23 F5                      sub     R15, @R5
(1)     295 : 00 E5                      dec     R5
(1)     297 : 33 E5                      sbc     R14, @R5
(1)     299 : F3 4E                      ld      0(R4), R14
(1)     29B : D7 F4 01                   ld      1(R4), R15
(1)     29E : AF                         ret
(1)     29F :
(1)     29F :                    ;;; Signed comparison: minuend - subtrahend
(1)     29F :                    ;;; @param @R4: minuend
(1)     29F :                    ;;; @param @R5: subtrahend
(1)     29F :                    ;;; @clobber R14, R15
(1)     29F :                    cmpsi2:
(1)     29F : E3 E4                      ld      R14, 0(R4)
(1)     2A1 : C7 F4 01                   ld      R15, 1(R4)
(1)     2A4 : 5E                         inc     R5
(1)     2A5 : 23 F5                      sub     R15, @R5
(1)     2A7 : 00 E5                      dec     R5
(1)     2A9 : 33 E5                      sbc     R14, @R5        ; RR14=@R4-@R5
(1)     2AB : D6 02 AF                   call    addsub_flags    ; set C,Z,S,V
(1)     2AE : AF                         ret
(1)     2AF :
(1)     2AF :                    ;;; Set add/sub flags
(1)     2AF :                    ;;; @param @R4: operand 1
(1)     2AF :                    ;;; @param @R5: operand 2
(1)     2AF :                    ;;; @param RR14: result
(1)     2AF :                    ;;; @param FLAGS
(1)     2AF :                    ;;; @return FLAGS: C, Z, S, V
(1)     2AF :                    addsub_flags:
(1)     2AF : 70 EF                      push    R15
(1)     2B1 : 70 EE                      push    R14
(1)     2B3 : 70 ED                      push    R13
(1)     2B5 : D8 FC                      ld      R13, FLAGS
(1)     2B7 : 46 ED 50                   or      R13, #F_ZERO LOR F_OVERFLOW ; set Z, V
(1)     2BA : 42 FE                      or      R15, R14
(1)     2BC : 6B 03                      jr      z, addsub_flags_z
(1)     2BE : B6 ED 40                   xor     R13, #F_ZERO    ; clear Z
(1)     2C1 :                    addsub_flags_z:
(1)     2C1 : B3 E4                      xor     R14, @R4
(1)     2C3 : B3 E5                      xor     R14, @R5        ; R14:7 carry into S
(1)     2C5 : FB 03                      jr      nc, addsub_flags_nc
(1)     2C7 : B6 EE 80                   xor     R14, #%80       ; R14:7=C^(carry into S)
(1)     2CA :                    addsub_flags_nc:
(1)     2CA : 5B 03                      jr      mi, addsub_flags_v
(1)     2CC : B6 ED 10                   xor     R13, #F_OVERFLOW ; clear V
(1)     2CF :                    addsub_flags_v:
(1)     2CF : D9 FC                      ld      FLAGS, R13
(1)     2D1 : 50 ED                      pop     R13
(1)     2D3 : 50 EE                      pop     R14
(1)     2D5 : 50 EF                      pop     R15
(1)     2D7 : AF                         ret
(1)     2D8 :
(1)     2D8 :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)     2D8 :                    ;;; @param RR14: multiplicand
(1)     2D8 :                    ;;; @param RR12: multiplier
(1)     2D8 :                    ;;; @return RR14: result
(1)     2D8 :                    ;;; @clobber R10-R15
(1)     2D8 :                    umul16:
(1)     2D8 : A8 EE                      ld      R10, R14        ; RR10=multiplicand
(1)     2DA : B8 EF                      ld      R11, R15
(1)     2DC : EC 00                      ld      R14, #0         ; result=0
(1)     2DE : FC 00                      ld      R15, #0
(1)     2E0 : 8B 10                      jr      umul16_check
(1)     2E2 :                    umul16_loop:
(1)     2E2 : CF                         rcf                     ; multiplier >>= 1
(1)     2E3 : C0 EC                      rrc     R12
(1)     2E5 : C0 ED                      rrc     R13
(1)     2E7 : FB 04                      jr      nc, umul16_next ; if lsb(multiplier) == 0
(1)     2E9 : 02 FB                      add     R15, R11
(1)     2EB : 12 EA                      adc     R14, R10        ; result += multiplicand
(1)     2ED :                    umul16_next:
(1)     2ED : CF                         rcf                     ; multiplicand <<= 1
(1)     2EE : 10 EB                      rlc     R11
(1)     2F0 : 10 EA                      rlc     R10
(1)     2F2 :                    umul16_check:
(1)     2F2 : A0 EC                      incw    RR12
(1)     2F4 : 80 EC                      decw    RR12
(1)     2F6 : EB EA                      jr      nz, umul16_loop ; while multiplier != 0
(1)     2F8 :                    umul16_end:
(1)     2F8 : AF                         ret
(1)     2F9 :
(1)     2F9 :                    ;;; Signed multiplication: multiplicand *= multiplier
(1)     2F9 :                    ;;; @param @R4: multiplicand
(1)     2F9 :                    ;;; @param @R5: multiplier
(1)     2F9 :                    ;;; @clobber R10-R15
(1)     2F9 :                    mulsi2:
(1)     2F9 : E3 E4                      ld      R14, 0(R4)
(1)     2FB : C7 F4 01                   ld      R15, 1(R4)
(1)     2FE : E3 C5                      ld      R12, 0(R5)
(1)     300 : C7 D5 01                   ld      R13, 1(R5)
(1)     303 : 42 CC                      or      R12, R12
(1)     305 : DB 06                      jr      pl, mulsi2_abs_muliplicand
(1)     307 : 60 EC                      com     R12
(1)     309 : 60 ED                      com     R13
(1)     30B : A0 EC                      incw    RR12            ; multiplicand = -multiplicand
(1)     30D :                    mulsi2_abs_muliplicand:
(1)     30D : 42 EE                      or      R14, R14
(1)     30F : DB 06                      jr      pl, mulsi2_multiply
(1)     311 : 60 EE                      com     R14
(1)     313 : 60 EF                      com     R15
(1)     315 : A0 EE                      incw    RR14            ; multiplier = -multiplier
(1)     317 :                    mulsi2_multiply:
(1)     317 : D6 02 D8                   call    umul16          ; result = multiplicand * multiplier
(1)     31A : E3 C4                      ld      R12, @R4
(1)     31C : B3 C5                      xor     R12, @R5        ; R12=sign(@R4)^sign(@R5)
(1)     31E : DB 06                      jr      pl, mulsi2_end
(1)     320 : 60 EE                      com     R14
(1)     322 : 60 EF                      com     R15
(1)     324 : A0 EE                      incw    RR14            ; result = -result
(1)     326 :                    mulsi2_end:
(1)     326 : F3 4E                      ld      0(R4), R14
(1)     328 : D7 F4 01                   ld      1(R4), R15
(1)     32B : AF                         ret
(1)     32C :
(1)     32C :                    ;;; Unsigned division: dividend / divisor = quotient ... reminder
(1)     32C :                    ;;; @praram RR14: dividend
(1)     32C :                    ;;; @praram RR12: divisor
(1)     32C :                    ;;; @return RR14: reminder
(1)     32C :                    ;;; @return RR12: quotient
(1)     32C :                    ;;; @clobber R10-R15
(1)     32C :                    udiv16:
(1)     32C : 70 E9                      push    R9
(1)     32E : A0 EC                      incw    RR12
(1)     330 : 80 EC                      decw    RR12
(1)     332 : 6D 03 6A                   jp      z, udiv16_end
(1)     335 : 9C 01                      ld      R9, #1          ; R9=bits
(1)     337 : 8D 03 40                   jp      udiv16_prep
(1)     33A :                    udiv16_prep_loop:
(1)     33A : CF                         rcf                     ; divisor <<= 1
(1)     33B : 10 ED                      rlc     R13
(1)     33D : 10 EC                      rlc     R12
(1)     33F : 9E                         inc     R9
(1)     340 :                    udiv16_prep:                    ; while msb(divisor) == 0
(1)     340 : 42 CC                      or      R12, R12
(1)     342 : DB F6                      jr      pl, udiv16_prep_loop
(1)     344 : AC 00                      ld      R10, #0
(1)     346 : BC 00                      ld      R11, #0         ; RR10=quotient
(1)     348 : 8D 03 55                   jp      udiv16_enter_loop
(1)     34B :                    udiv16_loop:
(1)     34B : CF                         rcf                     ; divisor >>= 1
(1)     34C : C0 EC                      rrc     R12
(1)     34E : C0 ED                      rrc     R13
(1)     350 : CF                         rcf                     ; quotient <<= 1
(1)     351 : 10 EB                      rlc     R11
(1)     353 : 10 EA                      rlc     R10
(1)     355 :                    udiv16_enter_loop:
(1)     355 : 22 FD                      sub     R15, R13        ; dividend -= divisor
(1)     357 : 32 EC                      sbc     R14, R12
(1)     359 : 7D 03 60                   jp      c, udiv16_readd ; if dividend < 0
(1)     35C : BE                         inc     R11             ; quotient |= 1
(1)     35D : 8D 03 64                   jp      udiv16_next
(1)     360 :                    udiv16_readd:
(1)     360 : 02 FD                      add     R15, R13        ; dividend += divisor
(1)     362 : 12 EC                      adc     R14, R12        ; FLAG.D is always cleared
(1)     364 :                    udiv16_next:
(1)     364 : 9A E5                      djnz    R9, udiv16_loop ; RR14=reminder
(1)     366 : C8 EA                      ld      R12, R10        ; RR12=quotient
(1)     368 : D8 EB                      ld      R13, R11
(1)     36A :                    udiv16_end:
(1)     36A : 50 E9                      pop     R9
(1)     36C : AF                         ret
(1)     36D :
(1)     36D :                    ;;; Signed division: dividend *= divisor
(1)     36D :                    ;;; @param @R4: dividend
(1)     36D :                    ;;; @param @R5: divisor
(1)     36D :                    ;;; @clobber R10-R15
(1)     36D :                    divsi2:
(1)     36D : E3 E4                      ld      R14, 0(R4)
(1)     36F : C7 F4 01                   ld      R15, 1(R4)
(1)     372 : E3 C5                      ld      R12, 0(R5)
(1)     374 : C7 D5 01                   ld      R13, 1(R5)
(1)     377 : 42 EE                      or      R14, R14
(1)     379 : DB 06                      jr      pl, divsi2_abs_dividend
(1)     37B : 60 EE                      com     R14
(1)     37D : 60 EF                      com     R15
(1)     37F : A0 EE                      incw    RR14            ; dividend = -dividend
(1)     381 :                    divsi2_abs_dividend:
(1)     381 : 42 CC                      or      R12, R12
(1)     383 : DB 06                      jr      pl, divsi2_divide
(1)     385 : 60 EC                      com     R12
(1)     387 : 60 ED                      com     R13
(1)     389 : A0 EC                      incw    RR12            ; divisor = -divisor
(1)     38B :                    divsi2_divide:
(1)     38B : D6 03 2C                   call    udiv16
(1)     38E : E3 E4                      ld      R14, @R4
(1)     390 : B3 E5                      xor     R14, @R5        ; R14=sign(@R4)^sign(@R5)
(1)     392 : DB 06                      jr      pl, divsi2_end
(1)     394 : 60 EC                      com     R12
(1)     396 : 60 ED                      com     R13
(1)     398 : A0 EC                      incw    RR12            ; dividend = = -dividend
(1)     39A :                    divsi2_end:
(1)     39A : F3 4C                      ld      0(R4), R12
(1)     39C : D7 D4 01                   ld      1(R4), R13
(1)     39F : AF                         ret
(1)     3A0 :
(1)     3A0 :                    ;;; Local Variables:
(1)     3A0 :                    ;;; mode: asm
(1)     3A0 :                    ;;; End:
(1)     3A0 :                    ;;; vim: set ft=asm et ts=4 sw=4:
        3A0 :                            include "queue.inc"
(1)     3A0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     3A0 :                    ;;; [queue] queue structure
(1)     3A0 : =0                 queue_len:      equ     0       ; queue length
(1)     3A0 : =1                 queue_size:     equ     1       ; buffer size
(1)     3A0 : =2                 queue_put:      equ     2       ; queue put index
(1)     3A0 : =3                 queue_get:      equ     3       ; queue get index
(1)     3A0 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     3A0 :
(1)     3A0 :                    ;;; [queue] Initialize queue
(1)     3A0 :                    ;;; @param RR2 queue work space pointer
(1)     3A0 :                    ;;; @param R1 queue work space size
(1)     3A0 :                    ;;; @clobber R1
(1)     3A0 :                    queue_init:
(1)     3A0 : 70 E0                      push    R0
(1)     3A2 : 70 E2                      push    R2
(1)     3A4 : 70 E3                      push    R3
(1)     3A6 : B0 E0                      clr     R0
(1)     3A8 : 92 02                      lde     @RR2, R0        ; queue_len
(1)     3AA : A0 E2                      incw    RR2
(1)     3AC : 08 E1                      ld      R0, R1
(1)     3AE : 26 E0 04                   sub     R0, #queue_buf
(1)     3B1 : 92 02                      lde     @RR2, R0        ; queue_size
(1)     3B3 : A0 E2                      incw    RR2
(1)     3B5 : 06 E0 02                   add     R0, #2          ; for queue_put and queue_get
(1)     3B8 : B0 E1                      clr     R1
(1)     3BA :                    queue_init_loop:
(1)     3BA : 92 12                      lde     @RR2, R1
(1)     3BC : A0 E2                      incw    RR2
(1)     3BE : 0A FA                      djnz    R0, queue_init_loop
(1)     3C0 : 50 E3                      pop     R3
(1)     3C2 : 50 E2                      pop     R2
(1)     3C4 : 50 E0                      pop     R0
(1)     3C6 : AF                         ret
(1)     3C7 :
(1)     3C7 :                    ;;; [queue] Add an element to queue
(1)     3C7 :                    ;;; @param RR2 queue work space pointer
(1)     3C7 :                    ;;; @param R0 an element
(1)     3C7 :                    ;;; @return FLAGS.C 0 if queue is full
(1)     3C7 :                    queue_add:
(1)     3C7 : 70 E1                      push    R1
(1)     3C9 : 70 E4                      push    R4              ; save R1, R4
(1)     3CB : 82 12                      lde     R1, @RR2        ; queue_len
(1)     3CD : 1E                         inc     R1              ; queue_len++
(1)     3CE : A0 E2                      incw    RR2             ; RR2 points queue_size
(1)     3D0 : 82 42                      lde     R4, @RR2        ; R4=queue_size
(1)     3D2 : A2 14                      cp      R1, R4
(1)     3D4 : 80 E2                      decw    RR2                ; RR2 points queue_len
(1)     3D6 : 7B 05                      jr      c, queue_add_store ; queue_len < queue_size
(1)     3D8 : 50 E4                      pop     R4                 ; restore R1, R4
(1)     3DA : 50 E1                      pop     R1
(1)     3DC : AF                         ret                     ; return with FLAGS.C=0
(1)     3DD :                    queue_add_store:
(1)     3DD : 92 12                      lde     @RR2, R1        ; update queue_len
(1)     3DF : A0 E2                      incw    RR2
(1)     3E1 : A0 E2                      incw    RR2             ; RR2 points to queue_put
(1)     3E3 : 82 12                      lde     R1, @RR2        ; queue_put
(1)     3E5 : 70 E3                      push    R3              ; save RR2
(1)     3E7 : 70 E2                      push    R2
(1)     3E9 : A0 E2                      incw    RR2
(1)     3EB : A0 E2                      incw    RR2             ; RR2 points to queue_buf
(1)     3ED : 02 31                      add     R3, R1
(1)     3EF : 16 E2 00                   adc     R2, #0          ; RR2=&queue_buf[queue_put]
(1)     3F2 : 92 02                      lde     @RR2, R0        ; store an element
(1)     3F4 : 50 E2                      pop     R2              ; restore RR2 points to queue_put
(1)     3F6 : 50 E3                      pop     R3
(1)     3F8 : 1E                         inc     R1              ; queue_put++
(1)     3F9 : A2 14                      cp      R1, R4
(1)     3FB : 7B 02                      jr      c, queue_add_update ; queue_put < queue_size
(1)     3FD : B0 E1                      clr     R1
(1)     3FF :                    queue_add_update:
(1)     3FF : 92 12                      lde     @RR2, R1        ; queue_put
(1)     401 : 80 E2                      decw    RR2
(1)     403 : 80 E2                      decw    RR2             ; RR2 points queue_len
(1)     405 : DF                         scf                     ; set carry flag
(1)     406 : 50 E4                      pop     R4              ; restpre R1, R4
(1)     408 : 50 E1                      pop     R1              ; restore R1
(1)     40A : AF                         ret
(1)     40B :
(1)     40B :                    ;;; [queue] Remove an element from queue
(1)     40B :                    ;;; @param RR2 queue work space pointer
(1)     40B :                    ;;; @return R0 an element
(1)     40B :                    ;;; @return FLAGS.C 0 if queue is empty
(1)     40B :                    queue_remove:
(1)     40B : 70 E1                      push    R1              ; save R1
(1)     40D : 82 12                      lde     R1, @RR2        ; queue_len
(1)     40F : 42 11                      or      R1, R1
(1)     411 : EB 04                      jr      nz, queue_remove_elem ; queue_len > 0
(1)     413 : CF                         rcf                           ; reset carry flag
(1)     414 : 50 E1                      pop     R1
(1)     416 : AF                         ret
(1)     417 :                    queue_remove_elem:
(1)     417 : 70 E4                      push    R4              ; save R4
(1)     419 : 00 E1                      dec     R1              ; queue_len--
(1)     41B : 92 12                      lde     @RR2, R1        ; update queue_len
(1)     41D : A0 E2                      incw    RR2
(1)     41F : 82 42                      lde     R4, @RR2        ; R4=queue_size
(1)     421 : A0 E2                      incw    RR2
(1)     423 : A0 E2                      incw    RR2             ; RR2 points queue_get
(1)     425 : 70 E3                      push    R3
(1)     427 : 70 E2                      push    R2
(1)     429 : 82 12                      lde     R1, @RR2        ; queue_get
(1)     42B : A0 E2                      incw    RR2             ; RR2 points queue_buf
(1)     42D : 02 31                      add     R3, R1
(1)     42F : 16 E2 00                   adc     R2, #0          ; RR2=&queue_buf[queue_get]
(1)     432 : 82 02                      lde     R0, @RR2        ; read an element
(1)     434 : 50 E2                      pop     R2              ; restore RR2 points to queue_get
(1)     436 : 50 E3                      pop     R3
(1)     438 : 1E                         inc     R1              ; queue_get++
(1)     439 : A2 14                      cp      R1, R4
(1)     43B : 7B 02                      jr      c, queue_remove_update ; queue_get < queue_size
(1)     43D : B0 E1                      clr     R1
(1)     43F :                    queue_remove_update:
(1)     43F : 92 12                      lde     @RR2, R1        ; update queue_get
(1)     441 : 80 E2                      decw    RR2
(1)     443 : 80 E2                      decw    RR2
(1)     445 : 80 E2                      decw    RR2             ; RR2 points queue_len
(1)     447 : 50 E4                      pop     R4              ; restore R1, R4
(1)     449 : 50 E1                      pop     R1
(1)     44B : DF                         scf                     ; set carry
(1)     44C : AF                         ret
        44D :
        44D :                            setrp   -1
        44D :                    isr_intr_rx:
        44D : 70 E0                      push    R0
        44F : 70 E2                      push    R2
        451 : 70 E3                      push    R3
        453 : 2C FF                      ld      R2, #HIGH USARTS
        455 : 3C 01                      ld      R3, #LOW USARTS
        457 : 82 02                      lde     R0, @RR2        ; USARTS
        459 : 56 E0 02                   and     R0, #ST_RxRDY_bm
        45C : 6B 0B                      jr      z, isr_intr_rx_exit
        45E : 3C 00                      ld      R3, #LOW USARTD
        460 : 82 02                      lde     R0, @RR2        ; USARTD
        462 : 2C 20                      ld      R2, #HIGH rx_queue
        464 : 3C 00                      ld      R3, #LOW rx_queue
        466 : D6 03 C7                   call    queue_add
        469 :                    isr_intr_rx_exit:
        469 : 50 E3                      pop     R3
        46B : 50 E2                      pop     R2
        46D : 50 E0                      pop     R0
        46F : BF                         iret
        470 :
        470 :                    isr_intr_tx:
        470 : 70 E0                      push    R0
        472 : 70 E2                      push    R2
        474 : 70 E3                      push    R3
        476 : 2C FF                      ld      R2, #HIGH USARTS
        478 : 3C 01                      ld      R3, #LOW USARTS
        47A : 82 02                      lde     R0, @RR2        ; USARTS
        47C : 56 E0 01                   and     R0, #ST_TxRDY_bm
        47F : 6B 0F                      jr      z, isr_intr_tx_exit
        481 : 2C 20                      ld      R2, #HIGH tx_queue
        483 : 3C 80                      ld      R3, #LOW tx_queue
        485 : D6 04 0B                   call    queue_remove
        488 : 2C FF                      ld      R2, #HIGH USARTD
        48A : 3C 00                      ld      R3, #LOW USARTD
        48C : FB 09                      jr      nc, isr_intr_send_empty
        48E : 92 02                      lde     @RR2, R0        ; USARTD
        490 :                    isr_intr_tx_exit:
        490 : 50 E3                      pop     R3
        492 : 50 E2                      pop     R2
        494 : 50 E0                      pop     R0
        496 : BF                         iret
        497 :                    isr_intr_send_empty:
        497 : 3C 01                      ld      R3, #LOW USARTC
        499 : 0C 36                      ld      R0, #RX_EN_TX_DIS
        49B : 92 02                      lde     @RR2, R0        ; disable Tx
        49D : 50 E3                      pop     R3
        49F : 50 E2                      pop     R2
        4A1 : 50 E0                      pop     R0
        4A3 : BF                         iret
        4A4 :
        4A4 :                            end
