          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     z86c
          0 :                            option  "reg-alias", "disable"
          0 :
          0 :                            include "z8.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; Z8
(1)       0 : =FC                FLAGS:  equ     252               ; R/W: Flags register
(1)       0 : =80                F_CARRY:        equ     %(2)10000000 ; set to 1 if carry
(1)       0 : =40                F_ZERO:         equ     %(2)01000000 ; set to 1 if zero
(1)       0 : =20                F_SIGN:         equ     %(2)00100000 ; set to 1 if negative
(1)       0 : =10                F_OVERFLOW:     equ     %(2)00010000 ; set to 1 if overflow
(1)       0 : =8                 F_DECIMAL_ADJ:  equ     %(2)00001000 ; decimal adjust
(1)       0 : =4                 F_HALF_CARRY:   equ     %(2)00000100 ; set to 1 if carry from bit-3
(1)       0 : =2                 F_USER2:        equ     %(2)00000010 ; User flag F2
(1)       0 : =1                 F_USER1:        equ     %(2)00000001 ; User flah F1
(1)       0 :                    ;;; Interrupt vectors
(1)       0 : =0                 VEC_IRQ0:       equ     %0000   ; IRQ0
(1)       0 : =2                 VEC_IRQ1:       equ     %0002   ; IRQ1
(1)       0 : =4                 VEC_IRQ2:       equ     %0004   ; IRQ2/Tin
(1)       0 : =6                 VEC_IRQ3:       equ     %0006   ; IRQ3/Serial in
(1)       0 : =8                 VEC_IRQ4:       equ     %0008   ; IRQ4/Serial out/T0
(1)       0 : =A                 VEC_IRQ5:       equ     %000A   ; IRQ5/T1
(1)       0 :                    ;;; Reset origin
(1)       0 : =C                 ORG_RESET:      equ     %000C   ; RESET
(1)       0 :                    ;;; I/O Ports
(1)       0 : =2                 PORT2:          equ     2       ; Port 2
(1)       0 : =3                 PORT3:          equ     3       ; Port 3
(1)       0 : =F7                P3M:            equ     247       ; W/O: Port 3 Mode Register
(1)       0 : =80                P3M_PARITY:     equ     %(2)10000000 ; 1=Parity on
(1)       0 : =40                P3M_SERIAL:     equ     %(2)01000000 ; 1=P30 is serial in, P37 is serial out
(1)       0 : =1                 P3M_P2PUSHPULL: equ     %(2)00000001 ; 1=Port 2 is push-pull, 0=open drain
(1)       0 : =F6                P2M:            equ     246       ; W/O: Port 2 Mode Register, 0=output, 1=input
(1)       0 : =F8                P01M:           equ     248       ; W/O: Port 0 and 1 Mode Register
(1)       0 : =82                P01M_P0ADDR:    equ     %(2)10000010 ; Port 0 is A8~A15
(1)       0 : =10                P01M_P1DATA:    equ     %(2)00010000 ; Port 1 is AD0~AD7
(1)       0 : =4                 P01M_INTERNAL:  equ     %(2)00000100 ; Stack is on internal memory
(1)       0 :                    ;;; Interrupt
(1)       0 : =F9                IPR:    equ     249             ; W/O: Interrupt Priority
(1)       0 : =1                 IPR_CAB:        equ     %(2)000001 ; C > A > B
(1)       0 : =8                 IPR_ABC:        equ     %(2)001000 ; A > B > C
(1)       0 : =9                 IPR_ACB:        equ     %(2)001001 ; A > C > B
(1)       0 : =10                IPR_BCA:        equ     %(2)010000 ; B > C > A
(1)       0 : =11                IPR_CBA:        equ     %(2)010001 ; C > B > A
(1)       0 : =18                IPR_BAC:        equ     %(2)011000 ; B > A > C
(1)       0 : =0                 IPR_A53:        equ     %(2)000000 ; A: IRQ5 > IRQ3
(1)       0 : =20                IPR_A35:        equ     %(2)100000 ; A: IRQ3 > IRQ5
(1)       0 : =0                 IPR_B20:        equ     %(2)000000 ; B: IRQ2 > IRQ0
(1)       0 : =4                 IPR_B02:        equ     %(2)000100 ; B: IRQ0 > IRQ2
(1)       0 : =0                 IPR_C14:        equ     %(2)000000 ; C: IRQ0 > IRQ4
(1)       0 : =2                 IPR_C41:        equ     %(2)000010 ; C: IRQ4 > IRQ0
(1)       0 : =FB                IMR:    equ     251             ; R/W: Interrupt Mask
(1)       0 : =80                IMR_ENABLE:     equ     %(2)10000000 ; Interrupt enable
(1)       0 : =1                 IMR_IRQ0:       equ     (1 SHL 0)
(1)       0 : =2                 IMR_IRQ1:       equ     (1 SHL 1)
(1)       0 : =4                 IMR_IRQ2:       equ     (1 SHL 2)
(1)       0 : =8                 IMR_IRQ3:       equ     (1 SHL 3)
(1)       0 : =10                IMR_IRQ4:       equ     (1 SHL 4)
(1)       0 : =20                IMR_IRQ5:       equ     (1 SHL 5)
(1)       0 : =FA                IRQ:    equ     250             ; R/W: Interrupt Request
(1)       0 : =1                 IRQ_IRQ0:       equ     IMR_IRQ0
(1)       0 : =2                 IRQ_IRQ1:       equ     IMR_IRQ1
(1)       0 : =4                 IRQ_IRQ2:       equ     IMR_IRQ2
(1)       0 : =8                 IRQ_IRQ3:       equ     IMR_IRQ3
(1)       0 : =10                IRQ_IRQ4:       equ     IMR_IRQ4
(1)       0 : =20                IRQ_IRQ5:       equ     IMR_IRQ5
(1)       0 :                    ;;; Counter/Timers
(1)       0 : =F5                PRE0:   equ     245             ; W/O: Prescaler 0 register
(1)       0 : =1                 PRE0_MODULO:    equ     %(2)00000001 ; 1=Modulo-N, 0=Single-pass
(1)       0 : =FC                PRE0_gm:        equ     %(2)11111100 ; Modulo mask
(1)       0 : =2                 PRE0_gp:        equ     2         ; Modulo bit position
(1)       0 : =F3                PRE1:   equ     243               ; W/O: Prescaler 1 register
(1)       0 : =1                 PRE1_MODULO:    equ     %(2)00000001 ; 1=Modulo-N, 0=SinglePass
(1)       0 : =2                 PRE1_INTERNAL:  equ     %(2)00000010 ; 1=T1 internal, 0=T1 external
(1)       0 : =FC                PRE1_gm:        equ     %(2)11111100 ; Modulo mask
(1)       0 : =2                 PRE1_gp:        equ     2         ; Modulo bit position
(1)       0 : =F2                T1:     equ     242               ; R/W: Counter/Timer 1 Register
(1)       0 : =F4                T0:     equ     244               ; R/W: Counter/Timer 0 Register
(1)       0 : =F1                TMR:    equ     241               ; R/W: Timer Mode Register
(1)       0 : =1                 TMR_LOAD_T0:    equ     %(2)00000001 ; 1=Load T0
(1)       0 : =2                 TMR_ENABLE_T0:  equ     %(2)00000010 ; 1=Enable T0
(1)       0 : =4                 TMR_LOAD_T1:    equ     %(2)00000100 ; 1=Load T1
(1)       0 : =8                 TMR_ENABLE_T1:  equ     %(2)00001000 ; 1=Enable T1
(1)       0 : =0                 TMR_TOUT_OFF:   equ     %(2)00000000 ; TOUT off
(1)       0 : =40                TMR_TOUT_T0:    equ     %(2)01000000 ; TOUT=T0
(1)       0 : =80                TMR_TOUT_T1:    equ     %(2)10000000 ; TOUT=T1
(1)       0 : =C0                TMR_TOUT_CLOCK: equ     %(2)11000000 ; TOUT=internal clock
(1)       0 :                    ;;;
(1)       0 : =F0                SIO:    equ     240             ; R/W: Serial I/O Register
(1)       0 : =FD                RP:     equ     253             ; R/W: Register pointer
(1)       0 : =FE                SPH:    equ     254             ; R/W: Stack Pointer High
(1)       0 : =FF                SPL:    equ     255             ; R/W: Stack Pointer Low
          0 :
       2000 :                            org     %2000
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       ds      rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       ds      tx_queue_size
       2100 :
          6 :                            org     VEC_IRQ3
          6 : 11 9C                      dw      isr_intr_rx
          8 :
          8 :                            org     VEC_IRQ4
          8 : 11 B5                      dw      isr_intr_tx
          A :
          C :                            org     ORG_RESET
          C :                            setrp   -1
          C : 8D 10 00                   jp      init_config
          F :
       1000 :                            org     %1000
       1000 : =1000              stack:  equ     $
       1000 :
       1000 :                    init_config:
       1000 :                            ;; Stack is on external memory
       1000 : E6 F8 92                   ld      P01M, #P01M_P0ADDR LOR P01M_P1DATA
       1003 : E6 FE 10                   ld      SPH, #HIGH stack
       1006 : E6 FF 00                   ld      SPL, #LOW stack
       1009 : 31 10                      srp     #%10
       100B :                            setrp   %10
       100B : 2C 20                      ld      R2, #HIGH rx_queue
       100D : 3C 00                      ld      R3, #LOW rx_queue
       100F : 1C 80                      ld      R1, #rx_queue_size
       1011 : D6 10 EF                   call    queue_init
       1014 : 2C 20                      ld      R2, #HIGH tx_queue
       1016 : 3C 80                      ld      R3, #LOW tx_queue
       1018 : 1C 80                      ld      R1, #tx_queue_size
       101A : D6 10 EF                   call    queue_init
       101D :
       101D :                    ;;; XTAL=14.7546MHz
       101D :                    ;;; p=1 for PRE0, t=12 for T0
       101D :                    ;;; bit rate = 14754600 / (2 x 4 x p x t x 16) = 9600 bps
       101D :                    init_sio:
       101D : 08 F0                      ld      R0, SIO          ; dummy read
       101F : 46 03 80                   or      PORT3, #%80      ; TxD(P37)=High
       1022 : E6 F7 41                   ld      P3M, #P3M_SERIAL LOR P3M_P2PUSHPULL ; enable SIO I/O
       1025 : E6 F4 0C                   ld      T0, #12
       1028 : E6 F5 05                   ld      PRE0, #(1 SHL PRE0_gp) LOR PRE0_MODULO ; modulo-N
       102B : 46 F1 03                   or      TMR, #TMR_LOAD_T0 LOR TMR_ENABLE_T0
       102E :
       102E :                    init_irq:
       102E : E6 F9 2F                   ld      IPR, #IPR_ACB LOR IPR_A35 LOR IPR_C41 LOR IPR_B02
       1031 : E6 FB 08                   ld      IMR, #IMR_IRQ3 ; enable IRQ3
       1034 : 9F                         ei                     ; clear IRQ and enable interrupt system
       1035 :
       1035 :                    receive_loop:
       1035 : D6 10 B5                   call    getchar
       1038 : FB FB                      jr      nc, receive_loop
       103A : 42 00                      or      R0, R0
       103C : EB 01                      jr      nz, echo_back
       103E : 7F                         halt
       103F :                    echo_back:
       103F : 18 E0                      ld      R1, R0          ; save letter
       1041 : D6 10 C7                   call    putchar         ; echo
       1044 : 0C 20                      ld      R0, #' '        ; space
       1046 : D6 10 C7                   call    putchar
       1049 : D6 10 62                   call    put_hex8        ; print in hex
       104C : 0C 20                      ld      R0, #' '        ; space
       104E : D6 10 C7                   call    putchar
       1051 : D6 10 87                   call    put_bin8        ; print in binary
       1054 : D6 10 59                   call    newline
       1057 : 8B DC                      jr      receive_loop
       1059 :
       1059 :                    ;;; Put newline
       1059 :                    ;;; @clobber R0
       1059 :                    newline:
       1059 : 0C 0D                      ld      R0, #%0D
       105B : D6 10 C7                   call    putchar
       105E : 0C 0A                      ld      R0, #%0A
       1060 : 8B 65                      jr      putchar
       1062 :
       1062 :                    ;;; Print uint8_t in hex
       1062 :                    ;;; @param R1 uint8_t value to be printed in hex.
       1062 :                    ;;; @clobber R0
       1062 :                    put_hex8:
       1062 : 0C 30                      ld      R0, #'0'
       1064 : D6 10 C7                   call    putchar
       1067 : 0C 78                      ld      R0, #'x'
       1069 : D6 10 C7                   call    putchar
       106C : 08 E1                      ld      R0, R1
       106E : F0 E0                      swap    R0
       1070 : D6 10 75                   call    put_hex4
       1073 : 08 E1                      ld      R0, R1
       1075 :                    put_hex4:
       1075 : 56 E0 0F                   and     R0, #%F
       1078 : A6 E0 0A                   cp      R0, #10
       107B : 7B 05                      jr      c, put_hex8_dec ; A<10
       107D : 06 E0 37                   add     R0, #'A'-10
       1080 : 8B 45                      jr      putchar
       1082 :                    put_hex8_dec:
       1082 : 06 E0 30                   add     R0, #'0'
       1085 : 8B 40                      jr      putchar
       1087 :
       1087 :                    ;;; Print uint8_t in binary
       1087 :                    ;;; @param R1 uint8_t value to be printed in binary.
       1087 :                    ;;; @clobber R0
       1087 :                    put_bin8:
       1087 : 70 E4                      push    R4
       1089 : 0C 30                      ld      R0, #'0'
       108B : D6 10 C7                   call    putchar
       108E : 0C 62                      ld      R0, #'b'
       1090 : D6 10 C7                   call    putchar
       1093 : 48 E1                      ld      R4, R1
       1095 : D6 10 A0                   call    put_bin4
       1098 : 90 E4                      rl      R4
       109A : D6 10 A0                   call    put_bin4
       109D : 50 E4                      pop     R4
       109F : AF                         ret
       10A0 :                    put_bin4:
       10A0 : D6 10 A5                   call    put_bin2
       10A3 : 90 E4                      rl      R4
       10A5 :                    put_bin2:
       10A5 : D6 10 AA                   call    put_bin1
       10A8 : 90 E4                      rl      R4
       10AA :                    put_bin1:
       10AA : 0C 30                      ld      R0, #'0'
       10AC : 42 44                      or      R4, R4
       10AE : DD 10 B3                   jp      pl, put_bin0    ; MSB=0
       10B1 : 0C 31                      ld      R0, #'1'        ; MSB=1
       10B3 :                    put_bin0:
       10B3 : 8B 12                      jr      putchar
       10B5 :
       10B5 :                    ;;; Get character
       10B5 :                    ;;; @return R0
       10B5 :                    ;;; @return FLAGS.C 0 if no character
       10B5 :                    getchar:
       10B5 : 70 E3                      push    R3
       10B7 : 70 E2                      push    R2
       10B9 : 2C 20                      ld      R2, #HIGH rx_queue
       10BB : 3C 00                      ld      R3, #LOW rx_queue
       10BD : 8F                         di
       10BE : D6 11 5A                   call    queue_remove
       10C1 : 9F                         ei
       10C2 : 50 E2                      pop     R2
       10C4 : 50 E3                      pop     R3
       10C6 : AF                         ret
       10C7 :
       10C7 :                    ;;; Put character
       10C7 :                    ;;; @param R0
       10C7 :                    putchar:
       10C7 : 70 E0                      push    R0
       10C9 : 70 E3                      push    R3
       10CB : 70 E2                      push    R2
       10CD : 2C 20                      ld      R2, #HIGH tx_queue
       10CF : 3C 80                      ld      R3, #LOW tx_queue
       10D1 :                    putchar_retry:
       10D1 : 8F                         di
       10D2 : D6 11 16                   call    queue_add
       10D5 : 9F                         ei
       10D6 : FB F9                      jr      nc, putchar_retry ; branch if queue is full
       10D8 : 50 E2                      pop     R2
       10DA : 50 E3                      pop     R3
       10DC : 8F                         di
       10DD : 76 FB 10                   tm      IMR, #IMR_IRQ4
       10E0 : EB 09                      jr      nz, putchar_exit ; already enabled
       10E2 : 46 02 04                   OR      PORT2, #4
       10E5 : 46 FB 10                   or      IMR, #IMR_IRQ4   ; enable IRQ4
       10E8 : 46 FA 10                   or      IRQ, #IRQ_IRQ4   ; software IRQ4
       10EB :                    putchar_exit:
       10EB : 9F                         ei
       10EC : 50 E0                      pop     R0
       10EE : AF                         ret
       10EF :
       10EF :                            include "queue.inc"
(1)    10EF :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    10EF :                    ;;; [queue] queue structure
(1)    10EF : =0                 queue_len:      equ     0       ; queue length
(1)    10EF : =1                 queue_size:     equ     1       ; buffer size
(1)    10EF : =2                 queue_put:      equ     2       ; queue put index
(1)    10EF : =3                 queue_get:      equ     3       ; queue get index
(1)    10EF : =4                 queue_buf:      equ     4       ; buffer start offset
(1)    10EF :
(1)    10EF :                    ;;; [queue] Initialize queue
(1)    10EF :                    ;;; @param RR2 queue work space pointer
(1)    10EF :                    ;;; @param R1 queue work space size
(1)    10EF :                    ;;; @clobber R1
(1)    10EF :                    queue_init:
(1)    10EF : 70 E0                      push    R0
(1)    10F1 : 70 E2                      push    R2
(1)    10F3 : 70 E3                      push    R3
(1)    10F5 : B0 E0                      clr     R0
(1)    10F7 : 92 02                      lde     @RR2, R0        ; queue_len
(1)    10F9 : A0 E2                      incw    RR2
(1)    10FB : 08 E1                      ld      R0, R1
(1)    10FD : 26 E0 04                   sub     R0, #queue_buf
(1)    1100 : 92 02                      lde     @RR2, R0        ; queue_size
(1)    1102 : A0 E2                      incw    RR2
(1)    1104 : 06 E0 02                   add     R0, #2          ; for queue_put and queue_get
(1)    1107 : B0 E1                      clr     R1
(1)    1109 :                    queue_init_loop:
(1)    1109 : 92 12                      lde     @RR2, R1
(1)    110B : A0 E2                      incw    RR2
(1)    110D : 0A FA                      djnz    R0, queue_init_loop
(1)    110F : 50 E3                      pop     R3
(1)    1111 : 50 E2                      pop     R2
(1)    1113 : 50 E0                      pop     R0
(1)    1115 : AF                         ret
(1)    1116 :
(1)    1116 :                    ;;; [queue] Add an element to queue
(1)    1116 :                    ;;; @param RR2 queue work space pointer
(1)    1116 :                    ;;; @param R0 an element
(1)    1116 :                    ;;; @return FLAGS.C 0 if queue is full
(1)    1116 :                    queue_add:
(1)    1116 : 70 E1                      push    R1
(1)    1118 : 70 E4                      push    R4              ; save R1, R4
(1)    111A : 82 12                      lde     R1, @RR2        ; queue_len
(1)    111C : 1E                         inc     R1              ; queue_len++
(1)    111D : A0 E2                      incw    RR2             ; RR2 points queue_size
(1)    111F : 82 42                      lde     R4, @RR2        ; R4=queue_size
(1)    1121 : A2 14                      cp      R1, R4
(1)    1123 : 80 E2                      decw    RR2                ; RR2 points queue_len
(1)    1125 : 7B 05                      jr      c, queue_add_store ; queue_len < queue_size
(1)    1127 : 50 E4                      pop     R4                 ; restore R1, R4
(1)    1129 : 50 E1                      pop     R1
(1)    112B : AF                         ret                     ; return with FLAGS.C=0
(1)    112C :                    queue_add_store:
(1)    112C : 92 12                      lde     @RR2, R1        ; update queue_len
(1)    112E : A0 E2                      incw    RR2
(1)    1130 : A0 E2                      incw    RR2             ; RR2 points to queue_put
(1)    1132 : 82 12                      lde     R1, @RR2        ; queue_put
(1)    1134 : 70 E3                      push    R3              ; save RR2
(1)    1136 : 70 E2                      push    R2
(1)    1138 : A0 E2                      incw    RR2
(1)    113A : A0 E2                      incw    RR2             ; RR2 points to queue_buf
(1)    113C : 02 31                      add     R3, R1
(1)    113E : 16 E2 00                   adc     R2, #0          ; RR2=&queue_buf[queue_put]
(1)    1141 : 92 02                      lde     @RR2, R0        ; store an element
(1)    1143 : 50 E2                      pop     R2              ; restore RR2 points to queue_put
(1)    1145 : 50 E3                      pop     R3
(1)    1147 : 1E                         inc     R1              ; queue_put++
(1)    1148 : A2 14                      cp      R1, R4
(1)    114A : 7B 02                      jr      c, queue_add_update ; queue_put < queue_size
(1)    114C : B0 E1                      clr     R1
(1)    114E :                    queue_add_update:
(1)    114E : 92 12                      lde     @RR2, R1        ; queue_put
(1)    1150 : 80 E2                      decw    RR2
(1)    1152 : 80 E2                      decw    RR2             ; RR2 points queue_len
(1)    1154 : DF                         scf                     ; set carry flag
(1)    1155 : 50 E4                      pop     R4              ; restpre R1, R4
(1)    1157 : 50 E1                      pop     R1              ; restore R1
(1)    1159 : AF                         ret
(1)    115A :
(1)    115A :                    ;;; [queue] Remove an element from queue
(1)    115A :                    ;;; @param RR2 queue work space pointer
(1)    115A :                    ;;; @return R0 an element
(1)    115A :                    ;;; @return FLAGS.C 0 if queue is empty
(1)    115A :                    queue_remove:
(1)    115A : 70 E1                      push    R1              ; save R1
(1)    115C : 82 12                      lde     R1, @RR2        ; queue_len
(1)    115E : 42 11                      or      R1, R1
(1)    1160 : EB 04                      jr      nz, queue_remove_elem ; queue_len > 0
(1)    1162 : CF                         rcf                           ; reset carry flag
(1)    1163 : 50 E1                      pop     R1
(1)    1165 : AF                         ret
(1)    1166 :                    queue_remove_elem:
(1)    1166 : 70 E4                      push    R4              ; save R4
(1)    1168 : 00 E1                      dec     R1              ; queue_len--
(1)    116A : 92 12                      lde     @RR2, R1        ; update queue_len
(1)    116C : A0 E2                      incw    RR2
(1)    116E : 82 42                      lde     R4, @RR2        ; R4=queue_size
(1)    1170 : A0 E2                      incw    RR2
(1)    1172 : A0 E2                      incw    RR2             ; RR2 points queue_get
(1)    1174 : 70 E3                      push    R3
(1)    1176 : 70 E2                      push    R2
(1)    1178 : 82 12                      lde     R1, @RR2        ; queue_get
(1)    117A : A0 E2                      incw    RR2             ; RR2 points queue_buf
(1)    117C : 02 31                      add     R3, R1
(1)    117E : 16 E2 00                   adc     R2, #0          ; RR2=&queue_buf[queue_get]
(1)    1181 : 82 02                      lde     R0, @RR2        ; read an element
(1)    1183 : 50 E2                      pop     R2              ; restore RR2 points to queue_get
(1)    1185 : 50 E3                      pop     R3
(1)    1187 : 1E                         inc     R1              ; queue_get++
(1)    1188 : A2 14                      cp      R1, R4
(1)    118A : 7B 02                      jr      c, queue_remove_update ; queue_get < queue_size
(1)    118C : B0 E1                      clr     R1
(1)    118E :                    queue_remove_update:
(1)    118E : 92 12                      lde     @RR2, R1        ; update queue_get
(1)    1190 : 80 E2                      decw    RR2
(1)    1192 : 80 E2                      decw    RR2
(1)    1194 : 80 E2                      decw    RR2             ; RR2 points queue_len
(1)    1196 : 50 E4                      pop     R4              ; restore R1, R4
(1)    1198 : 50 E1                      pop     R1
(1)    119A : DF                         scf                     ; set carry
(1)    119B : AF                         ret
       119C :
       119C :                            setrp   -1
       119C :                    isr_intr_rx:
       119C : 70 E0                      push    R0
       119E : 08 F0                      ld      R0, SIO             ; read received letter
       11A0 : 56 FA F7                   and     IRQ, #LNOT IRQ_IRQ3 ; acknowledge IRQ3
       11A3 : 70 E3                      push    R3
       11A5 : 70 E2                      push    R2
       11A7 : 2C 20                      ld      R2, #HIGH rx_queue
       11A9 : 3C 00                      ld      R3, #LOW rx_queue
       11AB : D6 11 16                   call    queue_add
       11AE : 50 E2                      pop     R2
       11B0 : 50 E3                      pop     R3
       11B2 : 50 E0                      pop     R0
       11B4 : BF                         iret
       11B5 :
       11B5 :                    isr_intr_tx:
       11B5 : 56 FA EF                   and     IRQ, #LNOT IRQ_IRQ4 ; acknowledge IRQ4
       11B8 : 70 E0                      push    R0
       11BA : 70 E3                      push    R3
       11BC : 70 E2                      push    R2
       11BE : 2C 20                      ld      R2, #HIGH tx_queue
       11C0 : 3C 80                      ld      R3, #LOW tx_queue
       11C2 : D6 11 5A                   call    queue_remove
       11C5 : 50 E2                      pop     R2
       11C7 : 50 E3                      pop     R3
       11C9 : FB 05                      jr      nc, isr_intr_send_empty
       11CB : 09 F0                      ld      SIO, R0         ; write sending letter
       11CD : 50 E0                      pop     R0
       11CF : BF                         iret
       11D0 :                    isr_intr_send_empty:
       11D0 : 56 FB EF                   and     IMR, #LNOT IMR_IRQ4 ; disable IRQ4
       11D3 : 50 E0                      pop     R0
       11D5 : BF                         iret
