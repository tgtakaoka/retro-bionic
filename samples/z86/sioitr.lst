          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     z86c
          0 :                            option  "reg-alias", "disable"
          0 :
          0 :                            include "z8.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; Z8
(1)       0 : =FC                FLAGS:  equ     252               ; R/W: Flags register
(1)       0 : =80                F_CARRY:        equ     %(2)10000000 ; set to 1 if carry
(1)       0 : =40                F_ZERO:         equ     %(2)01000000 ; set to 1 if zero
(1)       0 : =20                F_SIGN:         equ     %(2)00100000 ; set to 1 if negative
(1)       0 : =10                F_OVERFLOW:     equ     %(2)00010000 ; set to 1 if overflow
(1)       0 : =8                 F_DECIMAL_ADJ:  equ     %(2)00001000 ; decimal adjust
(1)       0 : =4                 F_HALF_CARRY:   equ     %(2)00000100 ; set to 1 if carry from bit-3
(1)       0 : =2                 F_USER2:        equ     %(2)00000010 ; User flag F2
(1)       0 : =1                 F_USER1:        equ     %(2)00000001 ; User flah F1
(1)       0 :                    ;;; Interrupt vectors
(1)       0 : =0                 VEC_IRQ0:       equ     %0000   ; IRQ0
(1)       0 : =2                 VEC_IRQ1:       equ     %0002   ; IRQ1
(1)       0 : =4                 VEC_IRQ2:       equ     %0004   ; IRQ2/Tin
(1)       0 : =6                 VEC_IRQ3:       equ     %0006   ; IRQ3/Serial in
(1)       0 : =8                 VEC_IRQ4:       equ     %0008   ; IRQ4/Serial out/T0
(1)       0 : =A                 VEC_IRQ5:       equ     %000A   ; IRQ5/T1
(1)       0 :                    ;;; Reset origin
(1)       0 : =C                 ORG_RESET:      equ     %000C   ; RESET
(1)       0 :                    ;;; I/O Ports
(1)       0 : =2                 PORT2:          equ     2       ; Port 2
(1)       0 : =3                 PORT3:          equ     3       ; Port 3
(1)       0 : =F7                P3M:            equ     247       ; W/O: Port 3 Mode Register
(1)       0 : =80                P3M_PARITY:     equ     %(2)10000000 ; 1=Parity on
(1)       0 : =40                P3M_SERIAL:     equ     %(2)01000000 ; 1=P30 is serial in, P37 is serial out
(1)       0 : =1                 P3M_P2PUSHPULL: equ     %(2)00000001 ; 1=Port 2 is push-pull, 0=open drain
(1)       0 : =F6                P2M:            equ     246       ; W/O: Port 2 Mode Register, 0=output, 1=input
(1)       0 : =F8                P01M:           equ     248       ; W/O: Port 0 and 1 Mode Register
(1)       0 : =82                P01M_P0ADDR:    equ     %(2)10000010 ; Port 0 is A8~A15
(1)       0 : =10                P01M_P1DATA:    equ     %(2)00010000 ; Port 1 is AD0~AD7
(1)       0 : =4                 P01M_INTERNAL:  equ     %(2)00000100 ; Stack is on internal memory
(1)       0 :                    ;;; Interrupt
(1)       0 : =F9                IPR:    equ     249             ; W/O: Interrupt Priority
(1)       0 : =1                 IPR_CAB:        equ     %(2)000001 ; C > A > B
(1)       0 : =8                 IPR_ABC:        equ     %(2)001000 ; A > B > C
(1)       0 : =9                 IPR_ACB:        equ     %(2)001001 ; A > C > B
(1)       0 : =10                IPR_BCA:        equ     %(2)010000 ; B > C > A
(1)       0 : =11                IPR_CBA:        equ     %(2)010001 ; C > B > A
(1)       0 : =18                IPR_BAC:        equ     %(2)011000 ; B > A > C
(1)       0 : =0                 IPR_A53:        equ     %(2)000000 ; A: IRQ5 > IRQ3
(1)       0 : =20                IPR_A35:        equ     %(2)100000 ; A: IRQ3 > IRQ5
(1)       0 : =0                 IPR_B20:        equ     %(2)000000 ; B: IRQ2 > IRQ0
(1)       0 : =4                 IPR_B02:        equ     %(2)000100 ; B: IRQ0 > IRQ2
(1)       0 : =0                 IPR_C14:        equ     %(2)000000 ; C: IRQ0 > IRQ4
(1)       0 : =2                 IPR_C41:        equ     %(2)000010 ; C: IRQ4 > IRQ0
(1)       0 : =FB                IMR:    equ     251             ; R/W: Interrupt Mask
(1)       0 : =80                IMR_ENABLE:     equ     %(2)10000000 ; Interrupt enable
(1)       0 : =1                 IMR_IRQ0:       equ     (1 SHL 0)
(1)       0 : =2                 IMR_IRQ1:       equ     (1 SHL 1)
(1)       0 : =4                 IMR_IRQ2:       equ     (1 SHL 2)
(1)       0 : =8                 IMR_IRQ3:       equ     (1 SHL 3)
(1)       0 : =10                IMR_IRQ4:       equ     (1 SHL 4)
(1)       0 : =20                IMR_IRQ5:       equ     (1 SHL 5)
(1)       0 : =FA                IRQ:    equ     250             ; R/W: Interrupt Request
(1)       0 : =1                 IRQ_IRQ0:       equ     IMR_IRQ0
(1)       0 : =2                 IRQ_IRQ1:       equ     IMR_IRQ1
(1)       0 : =4                 IRQ_IRQ2:       equ     IMR_IRQ2
(1)       0 : =8                 IRQ_IRQ3:       equ     IMR_IRQ3
(1)       0 : =10                IRQ_IRQ4:       equ     IMR_IRQ4
(1)       0 : =20                IRQ_IRQ5:       equ     IMR_IRQ5
(1)       0 :                    ;;; Counter/Timers
(1)       0 : =F5                PRE0:   equ     245             ; W/O: Prescaler 0 register
(1)       0 : =1                 PRE0_MODULO:    equ     %(2)00000001 ; 1=Modulo-N, 0=Single-pass
(1)       0 : =FC                PRE0_gm:        equ     %(2)11111100 ; Modulo mask
(1)       0 : =2                 PRE0_gp:        equ     2         ; Modulo bit position
(1)       0 : =F3                PRE1:   equ     243               ; W/O: Prescaler 1 register
(1)       0 : =1                 PRE1_MODULO:    equ     %(2)00000001 ; 1=Modulo-N, 0=SinglePass
(1)       0 : =2                 PRE1_INTERNAL:  equ     %(2)00000010 ; 1=T1 internal, 0=T1 external
(1)       0 : =FC                PRE1_gm:        equ     %(2)11111100 ; Modulo mask
(1)       0 : =2                 PRE1_gp:        equ     2         ; Modulo bit position
(1)       0 : =F2                T1:     equ     242               ; R/W: Counter/Timer 1 Register
(1)       0 : =F4                T0:     equ     244               ; R/W: Counter/Timer 0 Register
(1)       0 : =F1                TMR:    equ     241               ; R/W: Timer Mode Register
(1)       0 : =1                 TMR_LOAD_T0:    equ     %(2)00000001 ; 1=Load T0
(1)       0 : =2                 TMR_ENABLE_T0:  equ     %(2)00000010 ; 1=Enable T0
(1)       0 : =4                 TMR_LOAD_T1:    equ     %(2)00000100 ; 1=Load T1
(1)       0 : =8                 TMR_ENABLE_T1:  equ     %(2)00001000 ; 1=Enable T1
(1)       0 : =0                 TMR_TOUT_OFF:   equ     %(2)00000000 ; TOUT off
(1)       0 : =40                TMR_TOUT_T0:    equ     %(2)01000000 ; TOUT=T0
(1)       0 : =80                TMR_TOUT_T1:    equ     %(2)10000000 ; TOUT=T1
(1)       0 : =C0                TMR_TOUT_CLOCK: equ     %(2)11000000 ; TOUT=internal clock
(1)       0 :                    ;;;
(1)       0 : =F0                SIO:    equ     240             ; R/W: Serial I/O Register
(1)       0 : =FD                RP:     equ     253             ; R/W: Register pointer
(1)       0 : =FE                SPH:    equ     254             ; R/W: Stack Pointer High
(1)       0 : =FF                SPL:    equ     255             ; R/W: Stack Pointer Low
          0 :
       2000 :                            org     %2000
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       ds      rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       ds      tx_queue_size
       2100 :
          6 :                            org     VEC_IRQ3
          6 : 11 9B                      dw      isr_intr_rx
          8 :
          8 :                            org     VEC_IRQ4
          8 : 11 B4                      dw      isr_intr_tx
          A :
          C :                            org     ORG_RESET
          C : 8D 10 00                   jp      init_config
          F :
       1000 :                            org     %1000
       1000 : =1000              stack:  equ     $
       1000 :
       1000 :                    init_config:
       1000 : 31 F0                      srp     #%F0
       1002 :                            setrp   %F0
       1002 :                            ;; Stack is on external memory
       1002 : 8C 92                      ld      P01M, #P01M_P0ADDR LOR P01M_P1DATA
       1004 : EC 10                      ld      SPH, #HIGH stack
       1006 : FC 00                      ld      SPL, #LOW stack
       1008 : 31 10                      srp     #%10
       100A :                            setrp   %10
       100A : 2C 20                      ld      r2, #HIGH rx_queue
       100C : 3C 00                      ld      r3, #LOW rx_queue
       100E : 1C 80                      ld      r1, #rx_queue_size
       1010 : D6 10 EE                   call    queue_init
       1013 : 2C 20                      ld      r2, #HIGH tx_queue
       1015 : 3C 80                      ld      r3, #LOW tx_queue
       1017 : 1C 80                      ld      r1, #tx_queue_size
       1019 : D6 10 EE                   call    queue_init
       101C :
       101C :                    ;;; XTAL=14.7546MHz
       101C :                    ;;; p=1 for PRE0, t=12 for T0
       101C :                    ;;; bit rate = 14754600 / (2 x 4 x p x t x 16) = 9600 bps
       101C :                    init_sio:
       101C : 08 F0                      ld      r0, SIO          ; dummy read
       101E : 46 03 80                   or      PORT3, #%80      ; TxD(P37)=High
       1021 : E6 F7 41                   ld      P3M, #P3M_SERIAL LOR P3M_P2PUSHPULL ; enable SIO I/O
       1024 : E6 F4 0C                   ld      T0, #12
       1027 : E6 F5 05                   ld      PRE0, #(1 SHL PRE0_gp) LOR PRE0_MODULO ; modulo-N
       102A : 46 F1 03                   or      TMR, #TMR_LOAD_T0 LOR TMR_ENABLE_T0
       102D :
       102D :                    init_irq:
       102D : E6 F9 2F                   ld      IPR, #IPR_ACB LOR IPR_A35 LOR IPR_C41 LOR IPR_B02
       1030 : E6 FB 08                   ld      IMR, #IMR_IRQ3 ; enable IRQ3
       1033 : 9F                         ei                     ; clear IRQ and enable interrupt system
       1034 :
       1034 :                    receive_loop:
       1034 : D6 10 B4                   call    getchar
       1037 : FB FB                      jr      nc, receive_loop
       1039 : 42 00                      or      r0, r0
       103B : EB 01                      jr      nz, echo_back
       103D : 7F                         halt
       103E :                    echo_back:
       103E : 18 E0                      ld      r1, r0          ; save letter
       1040 : D6 10 C6                   call    putchar         ; echo
       1043 : 0C 20                      ld      r0, #' '        ; space
       1045 : D6 10 C6                   call    putchar
       1048 : D6 10 61                   call    put_hex8        ; print in hex
       104B : 0C 20                      ld      r0, #' '        ; space
       104D : D6 10 C6                   call    putchar
       1050 : D6 10 86                   call    put_bin8        ; print in binary
       1053 : D6 10 58                   call    newline
       1056 : 8B DC                      jr      receive_loop
       1058 :
       1058 :                    ;;; Put newline
       1058 :                    ;;; @clobber r0
       1058 :                    newline:
       1058 : 0C 0D                      ld      r0, #%0D
       105A : D6 10 C6                   call    putchar
       105D : 0C 0A                      ld      r0, #%0A
       105F : 8B 65                      jr      putchar
       1061 :
       1061 :                    ;;; Print uint8_t in hex
       1061 :                    ;;; @param r1 uint8_t value to be printed in hex.
       1061 :                    ;;; @clobber r0
       1061 :                    put_hex8:
       1061 : 0C 30                      ld      r0, #'0'
       1063 : D6 10 C6                   call    putchar
       1066 : 0C 78                      ld      r0, #'x'
       1068 : D6 10 C6                   call    putchar
       106B : 08 E1                      ld      r0, r1
       106D : F0 E0                      swap    r0
       106F : D6 10 74                   call    put_hex4
       1072 : 08 E1                      ld      r0, r1
       1074 :                    put_hex4:
       1074 : 56 E0 0F                   and     r0, #%F
       1077 : A6 E0 0A                   cp      r0, #10
       107A : 7B 05                      jr      c, put_hex8_dec ; A<10
       107C : 06 E0 37                   add     r0, #'A'-10
       107F : 8B 45                      jr      putchar
       1081 :                    put_hex8_dec:
       1081 : 06 E0 30                   add     r0, #'0'
       1084 : 8B 40                      jr      putchar
       1086 :
       1086 :                    ;;; Print uint8_t in binary
       1086 :                    ;;; @param r1 uint8_t value to be printed in binary.
       1086 :                    ;;; @clobber r0
       1086 :                    put_bin8:
       1086 : 70 E4                      push    r4
       1088 : 0C 30                      ld      r0, #'0'
       108A : D6 10 C6                   call    putchar
       108D : 0C 62                      ld      r0, #'b'
       108F : D6 10 C6                   call    putchar
       1092 : 48 E1                      ld      r4, r1
       1094 : D6 10 9F                   call    put_bin4
       1097 : 90 E4                      rl      r4
       1099 : D6 10 9F                   call    put_bin4
       109C : 50 E4                      pop     r4
       109E : AF                         ret
       109F :                    put_bin4:
       109F : D6 10 A4                   call    put_bin2
       10A2 : 90 E4                      rl      r4
       10A4 :                    put_bin2:
       10A4 : D6 10 A9                   call    put_bin1
       10A7 : 90 E4                      rl      r4
       10A9 :                    put_bin1:
       10A9 : 0C 30                      ld      r0, #'0'
       10AB : 42 44                      or      r4, r4
       10AD : DD 10 B2                   jp      pl, put_bin0    ; MSB=0
       10B0 : 0C 31                      ld      r0, #'1'        ; MSB=1
       10B2 :                    put_bin0:
       10B2 : 8B 12                      jr      putchar
       10B4 :
       10B4 :                    ;;; Get character
       10B4 :                    ;;; @return r0
       10B4 :                    ;;; @return FLAGS.C 0 if no character
       10B4 :                    getchar:
       10B4 : 70 E3                      push    r3
       10B6 : 70 E2                      push    r2
       10B8 : 2C 20                      ld      r2, #HIGH rx_queue
       10BA : 3C 00                      ld      r3, #LOW rx_queue
       10BC : 8F                         di
       10BD : D6 11 59                   call    queue_remove
       10C0 : 9F                         ei
       10C1 : 50 E2                      pop     r2
       10C3 : 50 E3                      pop     r3
       10C5 : AF                         ret
       10C6 :
       10C6 :                    ;;; Put character
       10C6 :                    ;;; @param r0
       10C6 :                    putchar:
       10C6 : 70 E0                      push    r0
       10C8 : 70 E3                      push    r3
       10CA : 70 E2                      push    r2
       10CC : 2C 20                      ld      r2, #HIGH tx_queue
       10CE : 3C 80                      ld      r3, #LOW tx_queue
       10D0 :                    putchar_retry:
       10D0 : 8F                         di
       10D1 : D6 11 15                   call    queue_add
       10D4 : 9F                         ei
       10D5 : FB F9                      jr      nc, putchar_retry ; branch if queue is full
       10D7 : 50 E2                      pop     r2
       10D9 : 50 E3                      pop     r3
       10DB : 8F                         di
       10DC : 76 FB 10                   tm      IMR, #IMR_IRQ4
       10DF : EB 09                      jr      nz, putchar_exit ; already enabled
       10E1 : 46 02 04                   OR      PORT2, #4
       10E4 : 46 FB 10                   or      IMR, #IMR_IRQ4   ; enable IRQ4
       10E7 : 46 FA 10                   or      IRQ, #IRQ_IRQ4   ; software IRQ4
       10EA :                    putchar_exit:
       10EA : 9F                         ei
       10EB : 50 E0                      pop     r0
       10ED : AF                         ret
       10EE :
       10EE :                            include "queue.inc"
(1)    10EE :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    10EE :                    ;;; [queue] queue structure
(1)    10EE : =0                 queue_len:      equ     0       ; queue length
(1)    10EE : =1                 queue_size:     equ     1       ; buffer size
(1)    10EE : =2                 queue_put:      equ     2       ; queue put index
(1)    10EE : =3                 queue_get:      equ     3       ; queue get index
(1)    10EE : =4                 queue_buf:      equ     4       ; buffer start offset
(1)    10EE :
(1)    10EE :                    ;;; [queue] Initialize queue
(1)    10EE :                    ;;; @param rr2 queue work space pointer
(1)    10EE :                    ;;; @param r1 queue work space size
(1)    10EE :                    ;;; @clobber r1
(1)    10EE :                    queue_init:
(1)    10EE : 70 E0                      push    r0
(1)    10F0 : 70 E2                      push    r2
(1)    10F2 : 70 E3                      push    r3
(1)    10F4 : B0 E0                      clr     r0
(1)    10F6 : 92 02                      lde     @rr2, r0        ; queue_len
(1)    10F8 : A0 E2                      incw    rr2
(1)    10FA : 08 E1                      ld      r0, r1
(1)    10FC : 26 E0 04                   sub     r0, #queue_buf
(1)    10FF : 92 02                      lde     @rr2, r0        ; queue_size
(1)    1101 : A0 E2                      incw    rr2
(1)    1103 : 06 E0 02                   add     r0, #2          ; for queue_put and queue_get
(1)    1106 : B0 E1                      clr     r1
(1)    1108 :                    queue_init_loop:
(1)    1108 : 92 12                      lde     @rr2, r1
(1)    110A : A0 E2                      incw    rr2
(1)    110C : 0A FA                      djnz    r0, queue_init_loop
(1)    110E : 50 E3                      pop     r3
(1)    1110 : 50 E2                      pop     r2
(1)    1112 : 50 E0                      pop     r0
(1)    1114 : AF                         ret
(1)    1115 :
(1)    1115 :                    ;;; [queue] Add an element to queue
(1)    1115 :                    ;;; @param rr2 queue work space pointer
(1)    1115 :                    ;;; @param r0 an element
(1)    1115 :                    ;;; @return FLAGS.C 0 if queue is full
(1)    1115 :                    queue_add:
(1)    1115 : 70 E1                      push    r1
(1)    1117 : 70 E4                      push    r4              ; save r1, r4
(1)    1119 : 82 12                      lde     r1, @rr2        ; queue_len
(1)    111B : 1E                         inc     r1              ; queue_len++
(1)    111C : A0 E2                      incw    rr2             ; rr2 points queue_size
(1)    111E : 82 42                      lde     r4, @rr2        ; r4=queue_size
(1)    1120 : A2 14                      cp      r1, r4
(1)    1122 : 80 E2                      decw    rr2                ; rr2 points queue_len
(1)    1124 : 7B 05                      jr      c, queue_add_store ; queue_len < queue_size
(1)    1126 : 50 E4                      pop     r4                 ; restore r1, r4
(1)    1128 : 50 E1                      pop     r1
(1)    112A : AF                         ret                     ; return with FLAGS.C=0
(1)    112B :                    queue_add_store:
(1)    112B : 92 12                      lde     @rr2, r1        ; update queue_len
(1)    112D : A0 E2                      incw    rr2
(1)    112F : A0 E2                      incw    rr2             ; rr2 points to queue_put
(1)    1131 : 82 12                      lde     r1, @rr2        ; queue_put
(1)    1133 : 70 E3                      push    r3              ; save rr2
(1)    1135 : 70 E2                      push    r2
(1)    1137 : A0 E2                      incw    rr2
(1)    1139 : A0 E2                      incw    rr2             ; rr2 points to queue_buf
(1)    113B : 02 31                      add     r3, r1
(1)    113D : 16 E2 00                   adc     r2, #0          ; rr2=&queue_buf[queue_put]
(1)    1140 : 92 02                      lde     @rr2, r0        ; store an element
(1)    1142 : 50 E2                      pop     r2              ; restore rr2 points to queue_put
(1)    1144 : 50 E3                      pop     r3
(1)    1146 : 1E                         inc     r1              ; queue_put++
(1)    1147 : A2 14                      cp      r1, r4
(1)    1149 : 7B 02                      jr      c, queue_add_update ; queue_put < queue_size
(1)    114B : B0 E1                      clr     r1
(1)    114D :                    queue_add_update:
(1)    114D : 92 12                      lde     @rr2, r1        ; queue_put
(1)    114F : 80 E2                      decw    rr2
(1)    1151 : 80 E2                      decw    rr2             ; rr2 points queue_len
(1)    1153 : DF                         scf                     ; set carry flag
(1)    1154 : 50 E4                      pop     r4              ; restpre r1, r4
(1)    1156 : 50 E1                      pop     r1              ; restore r1
(1)    1158 : AF                         ret
(1)    1159 :
(1)    1159 :                    ;;; [queue] Remove an element from queue
(1)    1159 :                    ;;; @param rr2 queue work space pointer
(1)    1159 :                    ;;; @return r0 an element
(1)    1159 :                    ;;; @return FLAGS.C 0 if queue is empty
(1)    1159 :                    queue_remove:
(1)    1159 : 70 E1                      push    r1              ; save r1
(1)    115B : 82 12                      lde     r1, @rr2        ; queue_len
(1)    115D : 42 11                      or      r1, r1
(1)    115F : EB 04                      jr      nz, queue_remove_elem ; queue_len > 0
(1)    1161 : CF                         rcf                           ; reset carry flag
(1)    1162 : 50 E1                      pop     r1
(1)    1164 : AF                         ret
(1)    1165 :                    queue_remove_elem:
(1)    1165 : 70 E4                      push    r4              ; save r4
(1)    1167 : 00 E1                      dec     r1              ; queue_len--
(1)    1169 : 92 12                      lde     @rr2, r1        ; update queue_len
(1)    116B : A0 E2                      incw    rr2
(1)    116D : 82 42                      lde     r4, @rr2        ; r4=queue_size
(1)    116F : A0 E2                      incw    rr2
(1)    1171 : A0 E2                      incw    rr2             ; rr2 points queue_get
(1)    1173 : 70 E3                      push    r3
(1)    1175 : 70 E2                      push    r2
(1)    1177 : 82 12                      lde     r1, @rr2        ; queue_get
(1)    1179 : A0 E2                      incw    rr2             ; rr2 points queue_buf
(1)    117B : 02 31                      add     r3, r1
(1)    117D : 16 E2 00                   adc     r2, #0          ; rr2=&queue_buf[queue_get]
(1)    1180 : 82 02                      lde     r0, @rr2        ; read an element
(1)    1182 : 50 E2                      pop     r2              ; restore rr2 points to queue_get
(1)    1184 : 50 E3                      pop     r3
(1)    1186 : 1E                         inc     r1              ; queue_get++
(1)    1187 : A2 14                      cp      r1, r4
(1)    1189 : 7B 02                      jr      c, queue_remove_update ; queue_get < queue_size
(1)    118B : B0 E1                      clr     r1
(1)    118D :                    queue_remove_update:
(1)    118D : 92 12                      lde     @rr2, r1        ; update queue_get
(1)    118F : 80 E2                      decw    rr2
(1)    1191 : 80 E2                      decw    rr2
(1)    1193 : 80 E2                      decw    rr2             ; rr2 points queue_len
(1)    1195 : 50 E4                      pop     r4              ; restore r1, r4
(1)    1197 : 50 E1                      pop     r1
(1)    1199 : DF                         scf                     ; set carry
(1)    119A : AF                         ret
       119B :
       119B :                            setrp   -1
       119B :                    isr_intr_rx:
       119B : 70 E0                      push    r0
       119D : 08 F0                      ld      r0, SIO             ; read received letter
       119F : 56 FA F7                   and     IRQ, #LNOT IRQ_IRQ3 ; acknowledge IRQ3
       11A2 : 70 E3                      push    r3
       11A4 : 70 E2                      push    r2
       11A6 : 2C 20                      ld      r2, #HIGH rx_queue
       11A8 : 3C 00                      ld      r3, #LOW rx_queue
       11AA : D6 11 15                   call    queue_add
       11AD : 50 E2                      pop     r2
       11AF : 50 E3                      pop     r3
       11B1 : 50 E0                      pop     r0
       11B3 : BF                         iret
       11B4 :
       11B4 :                    isr_intr_tx:
       11B4 : 56 FA EF                   and     IRQ, #LNOT IRQ_IRQ4 ; acknowledge IRQ4
       11B7 : 70 E0                      push    r0
       11B9 : 70 E3                      push    r3
       11BB : 70 E2                      push    r2
       11BD : 2C 20                      ld      r2, #HIGH tx_queue
       11BF : 3C 80                      ld      r3, #LOW tx_queue
       11C1 : D6 11 59                   call    queue_remove
       11C4 : 50 E2                      pop     r2
       11C6 : 50 E3                      pop     r3
       11C8 : FB 05                      jr      nc, isr_intr_send_empty
       11CA : 09 F0                      ld      SIO, r0         ; write sending letter
       11CC : 50 E0                      pop     r0
       11CE : BF                         iret
       11CF :                    isr_intr_send_empty:
       11CF : 56 FB EF                   and     IMR, #LNOT IMR_IRQ4 ; disable IRQ4
       11D2 : 50 E0                      pop     r0
       11D4 : BF                         iret
