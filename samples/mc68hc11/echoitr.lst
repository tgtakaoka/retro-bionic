          0 :                            cpu     6811
          0 :                            include "mc68hc11.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; MC68HC11
(1)       0 :                    ;;; Condition Code Register (CC)
(1)       0 : =1                 CC_CARRY      equ  %00000001   ; set to 1 if carry occurred
(1)       0 : =2                 CC_OVERFLOW   equ  %00000010   ; set to 1 if overflow occurred
(1)       0 : =4                 CC_ZERO       equ  %00000100   ; set to 1 if result is zero
(1)       0 : =8                 CC_NEGATIVE   equ  %00001000   ; set to 1 if result is negative
(1)       0 : =10                CC_IRQ        equ  %00010000   ; if 1, IRQ is masked
(1)       0 : =20                CC_HALF_CARRY equ  %00100000   ; if 1, decimal carry from least digit occurred
(1)       0 : =40                CC_XIRQ       equ  %01000000   ; if 1, XIRQ is masked
(1)       0 : =80                CC_STOP       equ  %10000000   ; if 1, STOP instruction is disabled
(1)       0 :
(1)       0 :                    ;;; Vector
(1)       0 : =FFF2              VEC_IRQ:        equ     $FFF2  ; $FFF2: #IRQ 
(1)       0 : =FFF4              VEC_XIRQ:       equ     $FFF4  ; $FFF4: #XIRQ
(1)       0 : =FFF6              VEC_SWI:        equ     $FFF6  ; $FFF6: Software Interrupt
(1)       0 : =FFF8              VEC_ILOP:       equ     $FFF8  ; $FFF8: Illegal Opecode Trap
(1)       0 : =FFFA              VEC_COP:        equ     $FFFA  ; $FFFA: COP (Watchdog) Failure
(1)       0 : =FFFC              VEC_CMF:        equ     $FFFC  ; $FFFC: Clock Monitor Fail
(1)       0 : =FFFE              VEC_RESET:      equ     $FFFE  ; $FFFE: Reset
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA:   equ     $DF00
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     %11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     %00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     %00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     %00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     %00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     %00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     %00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     %00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     %00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     %00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     %00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     %00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     %00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     %00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     %01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     %00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     %00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     %01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     %01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     %10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     %00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     %00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     %00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     %00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     %00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     %00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     %01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     %10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data:      equ     ACIA+1          ; Data register
          0 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
          0 : =B4                RX_INT_TX_INT:  equ     WSB_8N1_gc|RIEB_bm|TCB_EI_gc
          0 :
       2000 :                            org     $2000
       2000 :
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       rmb     rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       rmb     tx_queue_size
       2100 :
       1000 :                            org     $1000
       1000 : =FFF               stack:  equ     *-1             ; MC6801's SP is post-decrement/pre-increment
       1000 :
       FFF2 :                            org     VEC_IRQ
       FFF2 : 01 DF                      fdb     isr_irq
       FFF4 :
       FFF6 :                            org     VEC_SWI
       FFF6 : FF F6                      fdb     VEC_SWI         ; for halt to system
       FFF8 :
       FFFE :                            org     VEC_RESET
       FFFE : 01 00                      fdb     initialize
      10000 :
        100 :                            org     $0100
        100 :                    initialize:
        100 : 8E 0F FF                   lds     #stack
        103 : CE 20 00                   ldx     #rx_queue
        106 : C6 80                      ldab    #rx_queue_size
        108 : BD 01 98                   jsr     queue_init
        10B : CE 20 80                   ldx     #tx_queue
        10E : C6 80                      ldab    #tx_queue_size
        110 : BD 01 98                   jsr     queue_init
        113 :                            ;; initialize ACIA
        113 : 86 03                      ldaa    #CDS_RESET_gc   ; master reset
        115 : B7 DF 00                   staa    ACIA_control
        118 : 86 94                      ldaa    #RX_INT_TX_NO   ; disable Tx interrupt
        11A : B7 DF 00                   staa    ACIA_control
        11D : 0E                         cli                     ; enable IRQ
        11E : 20 01                      bra     loop
        120 :
        120 :                    wait:
        120 : 3E                         wai
        121 :                    loop:
        121 : 8D 56                      bsr     getchar
        123 : 24 FB                      bcc     wait
        125 : 4D                         tsta
        126 : 27 13                      beq     halt_to_system
        128 : 16                         tab
        129 : 8D 59                      bsr     putchar         ; echo
        12B : 86 20                      ldaa    #' '            ; space
        12D : 8D 55                      bsr     putchar
        12F : 8D 13                      bsr     put_hex8        ; print in hex
        131 : 86 20                      ldaa    #' '            ; space
        133 : 8D 4F                      bsr     putchar
        135 : 8D 27                      bsr     put_bin8        ; print in binary
        137 : 8D 03                      bsr     newline
        139 : 20 E6                      bra     loop
        13B :                    halt_to_system:
        13B : 3F                         swi
        13C :
        13C :                    ;;; Put newline
        13C :                    ;;; @clobber A
        13C :                    newline:
        13C : 86 0D                      ldaa    #$0D
        13E : 8D 44                      bsr     putchar
        140 : 86 0A                      ldaa    #$0A
        142 : 20 40                      bra     putchar
        144 :
        144 :                    ;;; Print uint8_t in hex
        144 :                    ;;; @param B uint8_t value to be printed in hex.
        144 :                    ;;; @clobber A
        144 :                    put_hex8:
        144 : 86 30                      ldaa    #'0'
        146 : 8D 3C                      bsr     putchar
        148 : 86 78                      ldaa    #'x'
        14A : 8D 38                      bsr     putchar
        14C : 17                         tba
        14D : 44                         lsra
        14E : 44                         lsra
        14F : 44                         lsra
        150 : 44                         lsra
        151 : 8D 01                      bsr     put_hex4
        153 : 17                         tba
        154 :                    put_hex4:
        154 : 84 0F                      anda    #$0F
        156 : 8B 90                      adda    #$90            ; $90-$9F
        158 : 19                         daa                     ; $90-$09, $00-$05(C=1)
        159 : 89 40                      adca    #$40            ; $D0-$D9, $41-$46
        15B : 19                         daa                     ; $30-$39, $41-$46
        15C : 20 26                      bra     putchar
        15E :
        15E :                    ;;; Print uint8_t in binary
        15E :                    ;;; @param B uint8_t value to be printed in binary.
        15E :                    ;;; @clobber A
        15E :                    put_bin8:
        15E : 37                         pshb
        15F : 86 30                      ldaa    #'0'
        161 : 8D 21                      bsr     putchar
        163 : 86 62                      ldaa    #'b'
        165 : 8D 1D                      bsr     putchar
        167 : 8D 04                      bsr     put_bin4
        169 : 8D 02                      bsr     put_bin4
        16B : 33                         pulb
        16C : 39                         rts
        16D :                    put_bin4:
        16D : 8D 00                      bsr     put_bin2
        16F :                    put_bin2:
        16F : 8D 00                      bsr     put_bin1
        171 :                    put_bin1:
        171 : 86 30                      ldaa    #'0'
        173 : 58                         lslb                    ; C=MSB
        174 : 24 0E                      bcc     putchar         ; MSB=0
        176 : 4C                         inca                    ; MSB=1
        177 : 20 0B                      bra     putchar
        179 :
        179 :                    ;;; Get character
        179 :                    ;;; @return A
        179 :                    ;;; @return CC.C 0 if no character
        179 :                    getchar:
        179 : 3C                         pshx
        17A : 0F                         sei                     ; disable IRQ
        17B : CE 20 00                   ldx     #rx_queue
        17E : BD 01 C3                   jsr     queue_remove
        181 : 0E                         cli
        182 : 38                         pulx
        183 : 39                         rts
        184 :
        184 :                    ;;; Put character
        184 :                    ;;; @param A
        184 :                    putchar:
        184 : 36                         psha
        185 : 3C                         pshx
        186 : CE 20 80                   ldx     #tx_queue
        189 :                    putchar_retry:
        189 : 0F                         sei                     ; disable IRQ
        18A : BD 01 A7                   jsr     queue_add
        18D : 0E                         cli                     ; enable IRQ
        18E : 24 F9                      bcc     putchar_retry   ; branch if queue is full
        190 : 86 B4                      ldaa    #RX_INT_TX_INT  ; enable Tx interrupt
        192 : B7 DF 00                   staa    ACIA_control
        195 : 38                         pulx
        196 : 32                         pula
        197 : 39                         rts
        198 :
        198 :                            include "queue.inc"
(1)     198 :                    ;;; [queue] queue structure
(1)     198 : =0                 queue_len:      equ     0       ; queue length
(1)     198 : =1                 queue_size:     equ     1       ; buffer size
(1)     198 : =2                 queue_put:      equ     2       ; queue put index
(1)     198 : =3                 queue_get:      equ     3       ; queue get index
(1)     198 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     198 :
(1)     198 :                    ;;; [queue] Initialize queue
(1)     198 :                    ;;; @param X queue work space pointer
(1)     198 :                    ;;; @param B queue work space size
(1)     198 :                    ;;; @clobber B
(1)     198 :                    queue_init:
(1)     198 : 37                         pshb
(1)     199 : 3C                         pshx
(1)     19A :                    queue_init_loop:
(1)     19A : 6F 00                      clr     0,x
(1)     19C : 08                         inx
(1)     19D : 5A                         decb
(1)     19E : 26 FA                      bne     queue_init_loop
(1)     1A0 : 38                         pulx
(1)     1A1 : 33                         pulb
(1)     1A2 : C0 04                      subb    #queue_buf
(1)     1A4 : E7 01                      stab    queue_size,x
(1)     1A6 : 39                         rts
(1)     1A7 :
(1)     1A7 :                    ;;; [queue] Add an element to queue
(1)     1A7 :                    ;;; @param X queue work space pointer
(1)     1A7 :                    ;;; @param A an element
(1)     1A7 :                    ;;; @return CC.C 0 if queue is full
(1)     1A7 :                    queue_add:
(1)     1A7 : 37                 	pshb
(1)     1A8 : E6 00                      ldab    queue_len,x
(1)     1AA : E1 01                      cmpb    queue_size,x
(1)     1AC : 24 13                      bhs     queue_add_return ; carry is cleared
(1)     1AE : E6 02                      ldab    queue_put,x     ; 8 bits offset
(1)     1B0 : 3C                         pshx
(1)     1B1 : 3A                         abx                     ; X+=B
(1)     1B2 : A7 04                      staa    queue_buf,x     ; store an element
(1)     1B4 : 38                         pulx
(1)     1B5 : 6C 00                      inc     queue_len,x
(1)     1B7 : 5C                         incb
(1)     1B8 : E7 02                      stab    queue_put,x
(1)     1BA : E1 01                      cmpb    queue_size,x
(1)     1BC : 25 03                      blo     queue_add_return ; carry is set
(1)     1BE : 6F 02                      clr     queue_put,x
(1)     1C0 : 0D                         sec                     ; set carry
(1)     1C1 :                    queue_add_return:
(1)     1C1 : 33                 	pulb
(1)     1C2 : 39                         rts
(1)     1C3 :
(1)     1C3 :                    ;;; [queue] Remove an element from queue
(1)     1C3 :                    ;;; @param X queue work space pointer
(1)     1C3 :                    ;;; @return A an element
(1)     1C3 :                    ;;; @return CC.C 0 if queue is empty
(1)     1C3 :                    queue_remove:
(1)     1C3 : 6D 00                      tst     queue_len,x
(1)     1C5 : 26 02                      bne     queue_remove_elem
(1)     1C7 : 0C                         clc                     ; clear carry
(1)     1C8 : 39                         rts
(1)     1C9 :                    queue_remove_elem
(1)     1C9 : 37                 	pshb
(1)     1CA : E6 03                      ldab    queue_get,x     ; 8 bits offset
(1)     1CC : 3C                         pshx
(1)     1CD : 3A                         abx                     ; X+=B
(1)     1CE : A6 04                      ldaa    queue_buf,x     ; read an element
(1)     1D0 : 38                         pulx
(1)     1D1 : 6A 00                      dec     queue_len,x
(1)     1D3 : 5C                         incb
(1)     1D4 : E7 03                      stab    queue_get,x
(1)     1D6 : E1 01                      cmpb    queue_size,x
(1)     1D8 : 25 03                      blo     queue_remove_return ; carry is set
(1)     1DA : 6F 03                      clr     queue_get,x
(1)     1DC : 0D                         sec                     ; set carry
(1)     1DD :                    queue_remove_return:
(1)     1DD : 33                         pulb
(1)     1DE : 39                         rts
(1)     1DF :
(1)     1DF :                    ;;; Local Variables:
(1)     1DF :                    ;;; mode: asm
(1)     1DF :                    ;;; End:
(1)     1DF :                    ;;; vim: set ft=asm et ts=4 sw=4:
        1DF :
        1DF :                    isr_irq:
        1DF : F6 DF 00                   ldab    ACIA_status
        1E2 : C5 80                      bitb    #IRQF_bm
        1E4 : 27 1C                      beq     isr_irq_exit
        1E6 : C5 01                      bitb    #RDRF_bm
        1E8 : 27 09                      beq     isr_irq_send
        1EA : B6 DF 01                   ldaa    ACIA_data       ; receive character
        1ED : CE 20 00                   ldx     #rx_queue
        1F0 : BD 01 A7                   jsr     queue_add
        1F3 :                    isr_irq_send:
        1F3 : C5 02                      bitb    #TDRE_bm
        1F5 : 27 0B                      beq     isr_irq_exit
        1F7 : CE 20 80                   ldx     #tx_queue
        1FA : BD 01 C3                   jsr     queue_remove
        1FD : 24 04                      bcc     isr_irq_send_empty
        1FF : B7 DF 01                   staa    ACIA_data       ; send character
        202 :                    isr_irq_exit:
        202 : 3B                         rti
        203 :                    isr_irq_send_empty:
        203 : 86 94                      ldaa    #RX_INT_TX_NO
        205 : B7 DF 00                   staa    ACIA_control    ; disable Tx interrupt
        208 : 3B                         rti
