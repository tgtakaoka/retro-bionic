          0 :                            cpu     6811
          0 :                            include "mc68hc11.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; MC68HC11
(1)       0 :                    ;;; Condition Code Register (CC)
(1)       0 : =1                 CC_CARRY      equ  %00000001   ; set to 1 if carry occurred
(1)       0 : =2                 CC_OVERFLOW   equ  %00000010   ; set to 1 if overflow occurred
(1)       0 : =4                 CC_ZERO       equ  %00000100   ; set to 1 if result is zero
(1)       0 : =8                 CC_NEGATIVE   equ  %00001000   ; set to 1 if result is negative
(1)       0 : =10                CC_IRQ        equ  %00010000   ; if 1, IRQ is masked
(1)       0 : =20                CC_HALF_CARRY equ  %00100000   ; if 1, decimal carry from least digit occurred
(1)       0 : =40                CC_XIRQ       equ  %01000000   ; if 1, XIRQ is masked
(1)       0 : =80                CC_STOP       equ  %10000000   ; if 1, STOP instruction is disabled
(1)       0 :
(1)       0 :                    ;;; Vector
(1)       0 : =FFF2              VEC_IRQ:        equ     $FFF2  ; $FFF2: #IRQ 
(1)       0 : =FFF4              VEC_XIRQ:       equ     $FFF4  ; $FFF4: #XIRQ
(1)       0 : =FFF6              VEC_SWI:        equ     $FFF6  ; $FFF6: Software Interrupt
(1)       0 : =FFF8              VEC_ILOP:       equ     $FFF8  ; $FFF8: Illegal Opecode Trap
(1)       0 : =FFFA              VEC_COP:        equ     $FFFA  ; $FFFA: COP (Watchdog) Failure
(1)       0 : =FFFC              VEC_CMF:        equ     $FFFC  ; $FFFC: Clock Monitor Fail
(1)       0 : =FFFE              VEC_RESET:      equ     $FFFE  ; $FFFE: Reset
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA:   equ     $DF00
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     %11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     %00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     %00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     %00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     %00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     %00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     %00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     %00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     %00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     %00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     %00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     %00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     %00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     %00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     %01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     %00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     %00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     %01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     %01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     %10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     %00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     %00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     %00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     %00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     %00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     %00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     %01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     %10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data:      equ     ACIA+1          ; Data register
          0 :
         40 :                            org     $40
         40 :                    R0:
         40 :                    R0H:    rmb     1
         41 :                    R0L:    rmb     1
         42 :                    R1:
         42 :                    R1H:    rmb     1
         43 :                    R1L:    rmb     1
         44 :                    R2:
         44 :                    R2H:    rmb     1
         45 :                    R2L:    rmb     1
         46 :                    sign:   rmb     1
         47 :
       1000 :                            org     $1000
       1000 : =FFF               stack:  equ     *-1             ; MC6800's SP is post-decrement/pre-increment
       1000 :
       FFF6 :                            org     VEC_SWI
       FFF6 : FF F6                      fdb     VEC_SWI         ; for halt to system
       FFF8 :
       FFFE :                            org     VEC_RESET
       FFFE : 01 00                      fdb     initialize
      10000 :
        100 :                            org     $0100
        100 :                    initialize:
        100 : 8E 0F FF                   lds     #stack
        103 : 86 03                      ldaa    #CDS_RESET_gc   ; Master reset
        105 : B7 DF 00                   staa    ACIA_control
        108 : 86 14                      ldaa    #WSB_8N1_gc     ; 8 bits + No Parity + 1 Stop Bits
        10A :                                                    ; Transmit, Receive interrupts disabled
        10A : B7 DF 00                   staa    ACIA_control
        10D :
        10D : BD 01 74                   jsr     arith
        110 : 3F                         swi
        111 :
        111 :                    ;;; Print out char
        111 :                    ;;; @param A char
        111 :                    ;;; @clobber A
        111 :                    putspace:
        111 : 86 20                      ldaa    #' '
        113 : 20 06                      bra     putchar
        115 :                    newline:
        115 : 86 0D                      ldaa    #$0D
        117 : 8D 02                      bsr     putchar
        119 : 86 0A                      ldaa    #$0A
        11B :                    putchar:
        11B : 37                         pshb
        11C : F6 DF 00                   ldab    ACIA_status
        11F : C5 02                      bitb    #TDRE_bm
        121 : 33                         pulb
        122 : 27 F7                      beq     putchar
        124 : B7 DF 01                   staa    ACIA_data
        127 : 39                         rts
        128 :
        128 :                    ;;; Print "v1 op v2"
        128 :                    ;;; @param X v1
        128 :                    ;;; @param Y v2
        128 :                    ;;; @param A op
        128 :                    ;;; @return D v1
        128 :                    ;;; @return X v2
        128 :                    ;;; @clobber R1 R2
        128 :                    expr:
        128 : 36                         psha
        129 : DF 42                      stx     R1
        12B : 18 DF 44                   sty     R2
        12E : DC 42                      ldd     R1
        130 : BD 03 13                   jsr     print_int16     ; print v1
        133 : 8D DC                      bsr     putspace
        135 : 32                         pula
        136 : 8D E3                      bsr     putchar         ; print op
        138 : 8D D7                      bsr     putspace
        13A : DC 44                      ldd     R2
        13C : BD 03 13                   jsr     print_int16     ; print v2
        13F : DC 42                      ldd     R1
        141 : DE 44                      ldx     R2
        143 : 39                         rts
        144 :
        144 :                    ;;; Print " = v\n"
        144 :                    ;;; @param D v
        144 :                    answer:
        144 : 36                         psha
        145 : 8D CA                      bsr     putspace
        147 : 86 3D                      ldaa    #'='
        149 : 8D D0                      bsr     putchar
        14B : 8D C4                      bsr     putspace
        14D : 32                         pula
        14E : BD 03 13                   jsr     print_int16     ; print v
        151 : 20 C2                      bra     newline
        153 :
        153 :                    ;;; Print "v1 rel v2"
        153 :                    ;;; @clobber R1 R2
        153 :                    comp:
        153 : DF 42                      stx     R1
        155 : 18 DF 44                   sty     R2
        158 : DC 42                      ldd     R1
        15A : 93 44                      subd    R2
        15C : 27 0C                      beq     comp_eq
        15E : 2D 0E                      blt     comp_lt
        160 : 2E 04                      bgt     comp_gt
        162 : 86 3F                      ldaa    #'?'
        164 : 20 0A                      bra     comp_out
        166 :                    comp_gt:
        166 : 86 3E                      ldaa    #'>'
        168 : 20 06                      bra     comp_out
        16A :                    comp_eq:
        16A : 86 3D                      ldaa    #'='
        16C : 20 02                      bra     comp_out
        16E :                    comp_lt:
        16E : 86 3C                      ldaa    #'<'
        170 :                    comp_out:
        170 : 8D B6                      bsr     expr
        172 : 20 A1                      bra     newline
        174 :
        174 :                    arith:
        174 : CE 46 50                   ldx     #18000
        177 : 18 CE 6D 60                ldy     #28000
        17B : 86 2B                      ldaa    #'+'
        17D : BD 01 28                   jsr     expr
        180 : D3 44                      addd    R2
        182 : BD 01 44                   jsr     answer          ; -19536
        185 :
        185 : CE 46 50                   ldx     #18000
        188 : 18 CE B9 B0                ldy     #-18000
        18C : 86 2B                      ldaa    #'+'
        18E : BD 01 28                   jsr     expr
        191 : D3 44                      addd    R2
        193 : BD 01 44                   jsr     answer          ; 0
        196 :
        196 : CE B9 B0                   ldx     #-18000
        199 : 18 CE B9 B0                ldy     #-18000
        19D : 86 2B                      ldaa    #'+'
        19F : BD 01 28                   jsr     expr
        1A2 : D3 44                      addd    R2
        1A4 : BD 01 44                   jsr     answer          ; 29536
        1A7 :
        1A7 : CE B9 B0                   ldx     #-18000
        1AA : 18 CE 92 A0                ldy     #-28000
        1AE : 86 2D                      ldaa    #'-'
        1B0 : BD 01 28                   jsr     expr
        1B3 : 93 44                      subd    R2
        1B5 : BD 01 44                   jsr     answer          ; -19536
        1B8 :
        1B8 : CE 46 50                   ldx     #18000
        1BB : 18 CE B9 B0                ldy     #-18000
        1BF : 86 2D                      ldaa    #'-'
        1C1 : BD 01 28                   jsr     expr
        1C4 : 93 44                      subd    R2
        1C6 : BD 01 44                   jsr     answer          ; 29536
        1C9 :
        1C9 : CE 92 A0                   ldx     #-28000
        1CC : 18 CE B9 B0                ldy     #-18000
        1D0 : 86 2D                      ldaa    #'-'
        1D2 : BD 01 28                   jsr     expr
        1D5 : 93 44                      subd    R2
        1D7 : BD 01 44                   jsr     answer          ; -10000
        1DA :
        1DA : CE 00 64                   ldx     #100
        1DD : 18 CE 01 2C                ldy     #300
        1E1 : 86 2A                      ldaa    #'*'
        1E3 : BD 01 28                   jsr     expr
        1E6 : BD 03 58                   jsr     mul16
        1E9 : BD 01 44                   jsr     answer          ; 30000
        1EC :
        1EC : CE 00 C8                   ldx     #200
        1EF : 18 CE 00 64                ldy     #100
        1F3 : 86 2A                      ldaa    #'*'
        1F5 : BD 01 28                   jsr     expr
        1F8 : BD 03 58                   jsr     mul16
        1FB : BD 01 44                   jsr     answer          ; 20000
        1FE :
        1FE : CE 01 2C                   ldx     #300
        201 : 18 CE FF 38                ldy     #-200
        205 : 86 2A                      ldaa    #'*'
        207 : BD 01 28                   jsr     expr
        20A : BD 03 58                   jsr     mul16
        20D : BD 01 44                   jsr     answer          ; 5536
        210 :
        210 : CE 00 64                   ldx     #100
        213 : 18 CE FE D4                ldy     #-300
        217 : 86 2A                      ldaa    #'*'
        219 : BD 01 28                   jsr     expr
        21C : BD 03 58                   jsr     mul16
        21F : BD 01 44                   jsr     answer          ; -30000
        222 :
        222 : CE FF 38                   ldx     #-200
        225 : 18 CE FF 9C                ldy     #-100
        229 : 86 2A                      ldaa    #'*'
        22B : BD 01 28                   jsr     expr
        22E : BD 03 58                   jsr     mul16
        231 : BD 01 44                   jsr     answer          ; 20000
        234 :
        234 : CE 75 30                   ldx     #30000
        237 : 18 CE 00 64                ldy     #100
        23B : 86 2F                      ldaa    #'/'
        23D : BD 01 28                   jsr     expr
        240 : BD 03 7D                   jsr     div16           ; R0=R1/R2
        243 : BD 01 44                   jsr     answer          ; 30
        246 :
        246 : CE FF 38                   ldx     #-200
        249 : 18 CE 00 64                ldy     #100
        24D : 86 2F                      ldaa    #'/'
        24F : BD 01 28                   jsr     expr
        252 : BD 03 7D                   jsr     div16           ; R0=R1/R2
        255 : BD 01 44                   jsr     answer          ; -2
        258 :
        258 : CE 8A D0                   ldx     #-30000
        25B : 18 CE FF 38                ldy     #-200
        25F : 86 2F                      ldaa    #'/'
        261 : BD 01 28                   jsr     expr
        264 : BD 03 7D                   jsr     div16           ; R0=R1/R2
        267 : BD 01 44                   jsr     answer          ; 150
        26A :
        26A : CE 8A D0                   ldx     #-30000
        26D : 18 CE 00 4E                ldy     #78
        271 : 86 2F                      ldaa    #'/'
        273 : BD 01 28                   jsr     expr
        276 : BD 03 7D                   jsr     div16           ; R0=R1/R2
        279 : BD 01 44                   jsr     answer          ; -384
        27C :
        27C : CE 13 88                   ldx     #5000
        27F : 18 CE 0F A0                ldy     #4000
        283 : BD 01 53                   jsr     comp
        286 :
        286 : CE 13 88                   ldx     #5000
        289 : 18 CE 13 88                ldy     #5000
        28D : BD 01 53                   jsr     comp
        290 :
        290 : CE 0F A0                   ldx     #4000
        293 : 18 CE 13 88                ldy     #5000
        297 : BD 01 53                   jsr     comp
        29A :
        29A : CE EC 78                   ldx     #-5000
        29D : 18 CE F0 60                ldy     #-4000
        2A1 : BD 01 53                   jsr     comp
        2A4 :
        2A4 : CE EC 78                   ldx     #-5000
        2A7 : 18 CE EC 78                ldy     #-5000
        2AB : BD 01 53                   jsr     comp
        2AE :
        2AE : CE F0 60                   ldx     #-4000
        2B1 : 18 CE EC 78                ldy     #-5000
        2B5 : BD 01 53                   jsr     comp
        2B8 :
        2B8 : CE 7F BC                   ldx     #32700
        2BB : 18 CE 7F 58                ldy     #32600
        2BF : BD 01 53                   jsr     comp
        2C2 :
        2C2 : CE 7F BC                   ldx     #32700
        2C5 : 18 CE 7F BC                ldy     #32700
        2C9 : BD 01 53                   jsr     comp
        2CC :
        2CC : CE 7F 58                   ldx     #32600
        2CF : 18 CE 7F BC                ldy     #32700
        2D3 : BD 01 53                   jsr     comp
        2D6 :
        2D6 : CE 80 44                   ldx     #-32700
        2D9 : 18 CE 80 A8                ldy     #-32600
        2DD : BD 01 53                   jsr     comp
        2E0 :
        2E0 : CE 80 44                   ldx     #-32700
        2E3 : 18 CE 80 44                ldy     #-32700
        2E7 : BD 01 53                   jsr     comp
        2EA :
        2EA : CE 80 A8                   ldx     #-32600
        2ED : 18 CE 80 44                ldy     #-32700
        2F1 : BD 01 53                   jsr     comp
        2F4 :
        2F4 : CE 46 50                   ldx     #18000
        2F7 : 18 CE 92 A0                ldy     #-28000
        2FB : BD 01 53                   jsr     comp
        2FE :
        2FE : CE 92 A0                   ldx     #-28000
        301 : 18 CE 92 A0                ldy     #-28000
        305 : BD 01 53                   jsr     comp
        308 :
        308 : CE 92 A0                   ldx     #-28000
        30B : 18 CE 46 50                ldy     #18000
        30F : BD 01 53                   jsr     comp
        312 : 39                         rts
        313 :
        313 :                            include "arith.inc"
(1)     313 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     313 :                            cpu     6811
(1)     313 :
(1)     313 :                    ;;; Print signed 16-bit integer as decimal
(1)     313 :                    ;;; @param D value
(1)     313 :                    ;;; @clobber D X
(1)     313 :                    print_int16:
(1)     313 : 4D                         tsta
(1)     314 : 2A 0B                      bpl     print_uint16
(1)     316 : 36                         psha
(1)     317 : 86 2D                      ldaa    #'-'
(1)     319 : BD 01 1B                   jsr     putchar
(1)     31C : 32                         pula
(1)     31D : 40                         nega
(1)     31E : 50                         negb
(1)     31F : 82 00                      sbca    #0        ; negate value
(1)     321 :                    ;;; Print unsigned 16-bit integer as decimal
(1)     321 :                    ;;; @param D value
(1)     321 :                    ;;; @clobber D X
(1)     321 :                    print_uint16:
(1)     321 : C3 00 00                   addd    #0
(1)     324 : 27 0E                      beq     print_uint16_zero
(1)     326 :                    print_uint16_loop:
(1)     326 : C3 00 00                   addd    #0
(1)     329 : 27 0E                      beq     print_uint16_end ; branch if value == 0
(1)     32B : CE 00 0A                   ldx     #10
(1)     32E : 02                         idiv                    ; D/X, D=remainder, X=quotient
(1)     32F : 37                         pshb                    ; push remainder
(1)     330 : 8F                         xgdx                    ; D=quotient
(1)     331 : 8D F3                      bsr     print_uint16_loop
(1)     333 : 32                         pula
(1)     334 :                    print_uint16_zero:
(1)     334 : 8A 30                      oraa    #'0'
(1)     336 : 7E 01 1B                   jmp     putchar
(1)     339 :                    print_uint16_end:
(1)     339 : 39                         rts
(1)     33A :
(1)     33A :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)     33A :                    ;;; @param D multiplicand
(1)     33A :                    ;;; @param X multiplier
(1)     33A :                    ;;; @return D result
(1)     33A :                    ;;; @clobber R0 R1 R2
(1)     33A :                    umul16:
(1)     33A : DD 42                      std     R1
(1)     33C : DF 44                      stx     R2
(1)     33E : 96 45                      ldaa    R2L
(1)     340 : 3D                         mul                     ; low(multiplicand)*low(multiplier)
(1)     341 : DD 40                      std     R0
(1)     343 : 96 43                      ldaa    R1L
(1)     345 : D6 44                      ldab    R2H
(1)     347 : 3D                         mul                     ; low(multiplicand)*high(multiplier)
(1)     348 : DB 40                      addb    R0H
(1)     34A : D7 40                      stab    R0H
(1)     34C : 96 42                      ldaa    R1H
(1)     34E : D6 45                      ldab    R2L
(1)     350 : 3D                         mul                     ; high(multiplicand)*low(multiplier)
(1)     351 : DB 40                      addb    R0H
(1)     353 : D7 40                      stab    R0H
(1)     355 : DC 40                      ldd     R0
(1)     357 : 39                         rts
(1)     358 :
(1)     358 :                    ;;; Multiply; result = multiplicand * multiplier
(1)     358 :                    ;;; @param D multiplicand
(1)     358 :                    ;;; @param X multiplier
(1)     358 :                    ;;; @return D result
(1)     358 :                    ;;; @clobber R0 R1 R2
(1)     358 :                    mul16:
(1)     358 : DD 42                      std     R1
(1)     35A : DF 44                      stx     R2
(1)     35C : 98 44                      eora    R2H
(1)     35E : 97 46                      staa    sign            ; save hi(multiplicand^multiplier)
(1)     360 : 96 42                      ldaa    R1H
(1)     362 : 2A 04                      bpl     mul16_multiplier
(1)     364 : 40                         nega
(1)     365 : 50                         negb
(1)     366 : 82 00                      sbca    #0              ; negate multiplicand
(1)     368 :                    mul16_multiplier:
(1)     368 : 8F                         xgdx
(1)     369 : 4D                         tsta
(1)     36A : 2A 04                      bpl     mul16_multiply
(1)     36C : 40                         nega
(1)     36D : 50                         negb
(1)     36E : 82 00                      sbca    #0              ; negate multiplier
(1)     370 :                    mul16_multiply:
(1)     370 : 8F                         xgdx
(1)     371 : 8D C7                      bsr     umul16          ; R0=result
(1)     373 : 7D 00 46                   tst     sign            ; (multiplicand^multiplier)
(1)     376 : 2A 04                      bpl     mul16_end
(1)     378 : 40                         nega
(1)     379 : 50                         negb
(1)     37A : 82 00                      sbca    #0              ; negate result
(1)     37C :                    mul16_end:
(1)     37C : 39                         rts
(1)     37D :
(1)     37D :                    ;;; Division; dividend / divisor = quotient ... remainder
(1)     37D :                    ;;; @param D dividend
(1)     37D :                    ;;; @param X divisor
(1)     37D :                    ;;; @return D quotient
(1)     37D :                    ;;; @return X remainder
(1)     37D :                    ;;; @clobber R0 R1 R2
(1)     37D :                    div16:
(1)     37D : DD 42                      std     R1
(1)     37F : DF 44                      stx     R2
(1)     381 : 98 44                      eora    R2H
(1)     383 : 97 46                      staa    sign            ; save hi(dividend^divisor)
(1)     385 : 96 42                      ldaa    R1H
(1)     387 : 2A 04                      bpl     div16_divisor
(1)     389 : 40                         nega
(1)     38A : 50                         negb
(1)     38B : 82 00                      sbca    #0              ; negate dividend
(1)     38D :                    div16_divisor:
(1)     38D : 8F                         xgdx
(1)     38E : 4D                         tsta
(1)     38F : 2A 04                      bpl     div16_divide
(1)     391 : 40                         nega
(1)     392 : 50                         negb
(1)     393 : 82 00                      sbca    #0              ; negate divisor
(1)     395 :                    div16_divide:
(1)     395 : 8F                         xgdx
(1)     396 : 02                         idiv                    ; D/X, X=quotient, D=remainder
(1)     397 : 8F                         xgdx
(1)     398 : 7D 00 46                   tst     sign            ; A=(dividend^divisor)
(1)     39B : 2A 04                      bpl     div16_end
(1)     39D : 40                         nega
(1)     39E : 50                         negb
(1)     39F : 82 00                      sbca    #0              ; negate result
(1)     3A1 :                    div16_end:
(1)     3A1 : 39                         rts
