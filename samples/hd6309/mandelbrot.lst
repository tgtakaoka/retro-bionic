          0 :                            cpu     6309
          0 :                            include "mc6809.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; Condition Code Register (CC)
(1)       0 : =1                 CC_CARRY      equ  %00000001   ; set to 1 if carry occurred
(1)       0 : =2                 CC_OVERFLOW   equ  %00000010   ; set to 1 if overflow occurred
(1)       0 : =4                 CC_ZERO       equ  %00000100   ; set to 1 if result is zero
(1)       0 : =8                 CC_NEGATIVE   equ  %00001000   ; set to 1 if result is negative
(1)       0 : =10                CC_IRQ        equ  %00010000   ; if 1, IRQ is masked
(1)       0 : =20                CC_HALF_CARRY equ  %00100000   ; if 1, decimal carry from least digit occurred
(1)       0 : =40                CC_FIRQ       equ  %01000000   ; if 1, FIRQ is masked
(1)       0 : =80                CC_ENTIRE     equ  %10000000   ; set to 1 if entire registers are pushed
(1)       0 :
(1)       0 :                    ;;; Vector
(1)       0 : =FFF2              VEC_SWI3:       equ     $FFF2  ; $FFF2: Software Interrupt 3
(1)       0 : =FFF4              VEC_SWI2:       equ     $FFF4  ; $FFF4: Software Interrupt 2
(1)       0 : =FFF6              VEC_FIRQ:       equ     $FFF6  ; $FFF6: Fast Interrupt Request
(1)       0 : =FFF8              VEC_IRQ:        equ     $FFF8  ; $FFF8: Interrupt Request
(1)       0 : =FFFA              VEC_SWI:        equ     $FFFA  ; $FFFA: Software Interrupt
(1)       0 : =FFFC              VEC_NMI:        equ     $FFFC  ; $FFFC: Non Maskable Interrupt
(1)       0 : =FFFE              VEC_RESET:      equ     $FFFE  ; $FFFE: Reset
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA:   equ     $DF00
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     %11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     %00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     %00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     %00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     %00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     %00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     %00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     %00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     %00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     %00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     %00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     %00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     %00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     %00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     %01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     %00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     %00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     %01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     %01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     %10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     %00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     %00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     %00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     %00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     %00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     %00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     %01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     %10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data:      equ     ACIA+1          ; Data register
          0 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
          0 : =B4                RX_INT_TX_INT:  equ     WSB_8N1_gc|RIEB_bm|TCB_EI_gc
          0 :
         20 :                            org     $20
         20 :                    ;;; Working space for mandelbrot.inc
         20 : =32                F:      equ     50
         20 :                    vC:     rmb     2
         22 :                    vD:     rmb     2
         24 :                    vA:     rmb     2
         26 :                    vB:     rmb     2
         28 :                    vS:     rmb     2
         2A :                    vP:     rmb     2
         2C :                    vQ:     rmb     2
         2E :                    vY:     rmb     1
         2F :                    vX:     rmb     1
         30 :                    vI:     rmb     1
         31 :
       2000 :                            org     $2000
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       rmb     rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       rmb     tx_queue_size
       2100 :
       1000 :                            org     $1000
       1000 : =FFF               stack:  equ     *-1             ; MC6800's SP is post-decrement/pre-increment
       1000 :
       FFF6 :                            org     VEC_FIRQ
       FFF6 : 02 D3                      fdb     isr_firq
       FFF8 :
       FFFA :                            org     VEC_SWI
       FFFA : FF FA                      fdb     VEC_SWI         ; for halt to system
       FFFC :
       FFFE :                            org     VEC_RESET
       FFFE : 01 00                      fdb     main
      10000 :
        100 :                            org     $0100
        100 :                    main:
        100 : 11 3D 01                   ldmd    #1
        103 : 10 CE 0F FF                lds     #stack
        107 : 8E 20 00                   ldx     #rx_queue
        10A : C6 80                      ldb     #rx_queue_size
        10C : 17 01 79                   lbsr    queue_init
        10F : 8E 20 80                   ldx     #tx_queue
        112 : C6 80                      ldb     #tx_queue_size
        114 : 17 01 71                   lbsr    queue_init
        117 :                            ;; initialize ACIA
        117 : 86 03                      lda     #CDS_RESET_gc   ; master reset
        119 : B7 DF 00                   sta     ACIA_control
        11C : 86 94                      lda     #RX_INT_TX_NO
        11E : B7 DF 00                   sta     ACIA_control
        121 : 86 F6                      lda     #VEC_FIRQ       ; FIRQ
        123 : B7 DF 02                   sta     ACIA+2          ; set #FIRQ name for MC6805 emulator
        126 : 1C BF                      andcc   #~CC_FIRQ       ; Clear FIRQ mask
        128 :
        128 :                    loop:
        128 : BD 01 6D                   jsr     mandelbrot
        12B : BD 01 42                   jsr     newline
        12E : 20 F8                      bra     loop
        130 :
        130 :                    ;;; Get character
        130 :                    ;;; @return A
        130 :                    ;;; @return CC.C 0 if no character
        130 :                    getchar:
        130 : 34 10                      pshs    x
        132 : 8E 20 00                   ldx     #rx_queue
        135 : 1A 40                      orcc    #CC_FIRQ         ; disable FIRQ
        137 : 17 01 7A                   lbsr     queue_remove
        13A : 1C BF                      andcc   #~CC_FIRQ        ; enable FIRQ
        13C : 35 90                      puls    x,pc
        13E :
        13E :                    ;;; Put character
        13E :                    ;;; @param A
        13E :                    putspace:
        13E : 86 20                      lda     #' '
        140 : 20 06                      bra     putchar
        142 :                    newline:
        142 : 86 0D                      lda     #$0D
        144 : 8D 02                      bsr     putchar
        146 : 86 0A                      lda     #$0A
        148 :                    putchar:
        148 : 34 12                      pshs    x,a
        14A : 8E 20 80                   ldx     #tx_queue
        14D :                    putchar_retry:
        14D : 1A 40                      orcc    #CC_FIRQ         ; disable FIRQ
        14F : 17 01 44                   lbsr    queue_add
        152 : 1C BF                      andcc   #~CC_FIRQ        ; enable FIRQ
        154 : 24 F7                      bcc     putchar_retry    ; branch if queue is full
        156 : 86 B4                      lda     #RX_INT_TX_INT   ; enable Tx interrupt
        158 : B7 DF 00                   sta     ACIA_control
        15B : 35 92                      puls    a,x,pc
        15D :
        15D :                            include "mandelbrot.inc"
(1)     15D :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     15D :                            cpu     6309
(1)     15D :
(1)     15D :                    ;;; Print variable: "A=variable "
(1)     15D :                    ;;; @param W variable
(1)     15D :                    ;;; @param A variable letter
(1)     15D :                    print:
(1)     15D : BD 01 48                   jsr     putchar         ; print variable letter
(1)     160 : 86 3D                      lda     #'='
(1)     162 : BD 01 48                   jsr     putchar         ; '='
(1)     165 : 1F 60                      tfr     W, D
(1)     167 : BD 02 50                   jsr     print_int16
(1)     16A : 7E 01 3E                   jmp     putspace
(1)     16D :
(1)     16D :                    mandelbrot:
(1)     16D : 86 F4                      lda     #-12
(1)     16F : 97 2E                      sta     vY              ; Y=-12
(1)     171 :                    loop_y:
(1)     171 : 86 CF                      lda     #-49
(1)     173 : 97 2F                      sta     vX              ; X=-49
(1)     175 :                    loop_x:
(1)     175 : D6 2F                      ldb     vX              ; B: X
(1)     177 : 1D                         sex                     ; D: X
(1)     178 : 11 8F 00 E5                muld    #229            ; Q: X*229
(1)     17C : 11 8E 00 64                divq    #100            ; W: X*229/100
(1)     180 : 10 97 20                   stw     vC              ; C=X*229/100
(1)     183 : 10 97 24                   stw     vA              ; A=C
(1)     186 : D6 2E                      ldb     vY              ; B: Y
(1)     188 : 1D                         sex                     ; D: Y
(1)     189 : 11 8F 01 A0                muld    #416            ; Q: Y*416
(1)     18D : 11 8E 00 64                divq    #100            ; W: Y*416/100
(1)     191 : 10 97 22                   stw     vD              ; D=Y*416/100
(1)     194 : 10 97 26                   stw     vB              ; B=D
(1)     197 : 0F 30                      clr     vI              ; I=0
(1)     199 :
(1)     199 :                            ;; ldb     vY              ; Y
(1)     199 :                            ;; sex
(1)     199 :                            ;; tfr     D,W
(1)     199 :                            ;; lda     #'Y'
(1)     199 :                            ;; jsr     print
(1)     199 :                            ;; ldb     vX              ; X
(1)     199 :                            ;; sex
(1)     199 :                            ;; tfr     D,W
(1)     199 :                            ;; lda     #'X'
(1)     199 :                            ;; jsr     print
(1)     199 :                            ;; ldw     vC              ; C
(1)     199 :                            ;; lda     #'C'
(1)     199 :                            ;; jsr     print
(1)     199 :                            ;; ldw     vD              ; D
(1)     199 :                            ;; lda     #'D'
(1)     199 :                            ;; jsr     print
(1)     199 :                            ;; jsr     newline
(1)     199 :
(1)     199 :                    loop_i:
(1)     199 : 10 96 26                   ldw     vB              ; W: B
(1)     19C : 14                         sexw                    ; Q: B
(1)     19D : 11 8E 00 32                divq    #F              ; W: B/F
(1)     1A1 : 10 97 2C                   stw     vQ              ; Q=B/F
(1)     1A4 : 1F 60                      tfr     W, D            ; D: Q
(1)     1A6 : 11 8F FF CE                muld    #-F             ; Q: -Q*F
(1)     1AA : 10 9B 26                   addw    vB              ; W: B-Q*F
(1)     1AD : 10 97 28                   stw     vS              ; S=B-Q*F
(1)     1B0 : DC 26                      ldd     vB              ; D: B
(1)     1B2 : 11 9F 26                   muld    vB              ; Q: B*B
(1)     1B5 : 10 38                      pshsw                   ; push B*B
(1)     1B7 : DC 24                      ldd     vA              ; D: A
(1)     1B9 : 11 9F 24                   muld    vA              ; Q: A*A
(1)     1BC : 10 A0 E1                   subw    ,S++            ; W: A*A-B*B
(1)     1BF : 14                         sexw                    ; Q: A*A-B*B
(1)     1C0 : 11 8E 00 32                divq    #F              ; W: (A*A-B*B)/F
(1)     1C4 : 10 9B 20                   addw    vC              ; W: (A*A-B*B)/F+C
(1)     1C7 : 10 38                      pshsw                   ; push (A*A-B*B)/F+C
(1)     1C9 : DC 24                      ldd     vA              ; D: A
(1)     1CB : 11 9F 2C                   muld    vQ              ; Q: A*Q
(1)     1CE : 10 38                      pshsw                   ; push A*Q
(1)     1D0 : DC 24                      ldd     vA              ; D: A
(1)     1D2 : 11 9F 28                   muld    vS              ; Q: A*S
(1)     1D5 : 11 8E 00 32                divq    #F              ; W: A*S/F
(1)     1D9 : 35 06                      puls    D               ; D: A*Q
(1)     1DB : 10 30 60                   addr    W, D            ; D: A*Q+A*S/F
(1)     1DE : 10 30 00                   addr    D, D            ; D: 2*(A*Q+A*S/F)
(1)     1E1 : D3 22                      addd    vD              ; D: 2*(A*Q+A*S/F)+D
(1)     1E3 : DD 26                      std     vB              ; B=2*(A*Q+A*S/F)+D
(1)     1E5 : 10 39                      pulsw                   ; pop (A*A-B*B)/F+C
(1)     1E7 : 10 97 24                   stw     vA              ; A=(A*A-B*B)/F+C
(1)     1EA : 14                         sexw                    ; Q: A
(1)     1EB : 11 8E 00 32                divq    #F              ; W: A/F
(1)     1EF : 10 97 2A                   stw     vP              ; P=A/F
(1)     1F2 : 1F 60                      tfr     W, D            ; D: P
(1)     1F4 : 11 9F 2A                   muld    vP              ; Q: P*P
(1)     1F7 : 10 38                      pshsw                   ; push P*P
(1)     1F9 : 10 96 26                   ldw     vB              ; W: B
(1)     1FC : 14                         sexw                    ; Q: B
(1)     1FD : 11 8E 00 32                divq    #F              ; W: B/F
(1)     201 : 10 97 2C                   stw     vQ              ; Q=B/F
(1)     204 : 1F 60                      tfr     W, D            ; D: Q
(1)     206 : 11 9F 2C                   muld    vQ              ; Q: Q*Q
(1)     209 : 10 AB E1                   addw    ,S++            ; W: P*P+Q*Q
(1)     20C :
(1)     20C :                            ;; pshsw                   ; save P*P+Q*Q
(1)     20C :                            ;; jsr     putspace
(1)     20C :                            ;; ldb     vI              ; I
(1)     20C :                            ;; sex
(1)     20C :                            ;; tfr     D, W
(1)     20C :                            ;; lda     #'I'
(1)     20C :                            ;; jsr     print
(1)     20C :                            ;; ldw     vA              ; A
(1)     20C :                            ;; lda     #'A'
(1)     20C :                            ;; jsr     print
(1)     20C :                            ;; ldw     vB              ; B
(1)     20C :                            ;; lda     #'B'
(1)     20C :                            ;; jsr     print
(1)     20C :                            ;; ldw     vP              ; P
(1)     20C :                            ;; lda     #'P'
(1)     20C :                            ;; jsr     print
(1)     20C :                            ;; ldw     vQ              ; Q
(1)     20C :                            ;; lda     #'Q'
(1)     20C :                            ;; jsr     print
(1)     20C :                            ;; jsr     newline
(1)     20C :                            ;; pulsw                   ; pop P*P+Q*Q
(1)     20C :
(1)     20C : 10 81 00 04                cmpw    #4
(1)     210 : 2E 0E                      bgt     print_i         ; if 4<P*P+Q*Q
(1)     212 : 0C 30                      inc     vI              ; I+=1
(1)     214 : 96 30                      lda     vI
(1)     216 : 81 10                      cmpa    #16
(1)     218 : 10 25 FF 7D                lblo    loop_i          ; if I<16
(1)     21C : 86 20                      lda     #' '
(1)     21E : 20 0C                      bra     print_char
(1)     220 :                    print_i:
(1)     220 : 96 30                      lda     vI
(1)     222 : 80 0A                      suba    #10
(1)     224 : 2A 04                      bpl     print_i2       ; if I>=10
(1)     226 : 8B 3A                      adda    #10+'0'
(1)     228 : 20 02                      bra     print_char
(1)     22A :                    print_i2:
(1)     22A : 8B 41                      adda    #'A'
(1)     22C :                    print_char:
(1)     22C : BD 01 48                   jsr     putchar
(1)     22F :
(1)     22F :                            ;; pshs    A
(1)     22F :                            ;; lda     #'@'
(1)     22F :                            ;; jsr     putchar
(1)     22F :                            ;; lda     #'='
(1)     22F :                            ;; jsr     putchar
(1)     22F :                            ;; puls    A
(1)     22F :                            ;; jsr     putchar
(1)     22F :                            ;; jsr     newline
(1)     22F :
(1)     22F : BD 01 30                   jsr     getchar
(1)     232 : 24 04                      bcc     next_x
(1)     234 : 4D                         tsta
(1)     235 : 26 01                      bne     next_x
(1)     237 : 3F                         swi                     ; halt to system
(1)     238 :                    next_x:
(1)     238 : 0C 2F                      inc     vX              ; X+=1
(1)     23A : 96 2F                      lda     vX
(1)     23C : 81 1E                      cmpa    #30
(1)     23E : 10 2D FF 33                lblt    loop_x          ; if X<30
(1)     242 : BD 01 42                   jsr     newline
(1)     245 : 0C 2E                      inc     vY              ; Y+=1
(1)     247 : 96 2E                      lda     vY
(1)     249 : 81 0D                      cmpa    #13
(1)     24B : 10 2D FF 22                lblt    loop_y          ; if Y<13
(1)     24F : 39                         rts
        250 :                            include "arith.inc"
(1)     250 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     250 :                            cpu     6309
(1)     250 :
(1)     250 :                    ;;; Print signed 16-bit integer as decimal
(1)     250 :                    ;;; @param D value
(1)     250 :                    print_int16:
(1)     250 : 34 06                      pshs   D
(1)     252 : 10 4D                      tstd
(1)     254 : 2A 09                      bpl     print_int16_print
(1)     256 : 86 2D                      lda     #'-'
(1)     258 : BD 01 48                   jsr     putchar
(1)     25B : EC E4                      ldd     ,S
(1)     25D : 10 40                      negd
(1)     25F :                    print_int16_print:
(1)     25F : 10 38                      pshsw
(1)     261 : 1F 06                      tfr     D, W
(1)     263 : 8D 04                      bsr     print_uint16
(1)     265 : 10 39                      pulsw
(1)     267 : 35 86                      puls    D, PC
(1)     269 :                    ;;; Print unsigned 16-bit integer as decimal
(1)     269 :                    ;;; @param W value
(1)     269 :                    ;;; @clobber D W
(1)     269 :                    print_uint16:
(1)     269 : 10 5D                      tstw
(1)     26B : 26 05                      bne     print_uint16_loop
(1)     26D : 86 30                      lda     #'0'
(1)     26F : 7E 01 48                   jmp     putchar
(1)     272 :                    print_uint16_loop:
(1)     272 : 10 5D                      tstw
(1)     274 : 27 11                      beq     print_uint16_end ; branch if value == 0
(1)     276 : 10 4F                      clrd
(1)     278 : 11 8E 00 0A                divq    #10             ; D:W/10=W...D
(1)     27C : 34 04                      pshs    B               ; push remainder
(1)     27E : 8D F2                      bsr     print_uint16_loop
(1)     280 : 35 02                      puls    A
(1)     282 : 8A 30                      ora     #'0'
(1)     284 : 7E 01 48                   jmp     putchar
(1)     287 :                    print_uint16_end:
(1)     287 : 39                         rts
        288 :                            include "queue.inc"
(1)     288 :                    ;;; -*- mode: asm; mode: flying-spell; -*-
(1)     288 :                    ;;; [queue] queue structure
(1)     288 : =0                 queue_len:      equ     0       ; queue length
(1)     288 : =1                 queue_size:     equ     1       ; buffer size
(1)     288 : =2                 queue_put:      equ     2       ; queue put index
(1)     288 : =3                 queue_get:      equ     3       ; queue get index
(1)     288 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     288 :
(1)     288 :                    ;;; [queue] Initialize queue
(1)     288 :                    ;;; @param X queue work space pointer
(1)     288 :                    ;;; @param B queue work space size
(1)     288 :                    queue_init:
(1)     288 : 34 14                      pshs    x,b
(1)     28A :                    queue_init_loop:
(1)     28A : 6F 80                      clr     ,x+
(1)     28C : 5A                         decb
(1)     28D : 26 FB                      bne     queue_init_loop
(1)     28F : 35 14                      puls    b,x
(1)     291 : C0 04                      subb    #queue_buf
(1)     293 : E7 01                      stb     queue_size,x
(1)     295 : 39                         rts
(1)     296 :
(1)     296 :                    ;;; [queue] Add an element to queue
(1)     296 :                    ;;; @param X queue work space pointer
(1)     296 :                    ;;; @param A an element
(1)     296 :                    ;;; @return CC.C 0 if queue is full
(1)     296 :                    queue_add:
(1)     296 : 34 54                      pshs    u,x,b
(1)     298 : 1F 13                      tfr     x,u
(1)     29A : E6 C4                      ldb     queue_len,u
(1)     29C : E1 41                      cmpb    queue_size,u
(1)     29E : 24 12                      bhs     queue_add_return ;carry is cleared
(1)     2A0 : E6 42                      ldb     queue_put,u     ; 8 bits offset
(1)     2A2 : 3A                         abx                     ; X+=B
(1)     2A3 : A7 04                      sta     queue_buf,x     ; store an element
(1)     2A5 : 6C C4                      inc     queue_len,u
(1)     2A7 : 5C                         incb
(1)     2A8 : E7 42                      stb     queue_put,u
(1)     2AA : E1 41                      cmpb    queue_size,u
(1)     2AC : 25 04                      blo     queue_add_return ; carry is set
(1)     2AE : 6F 42                      clr     queue_put,u
(1)     2B0 : 1A 01                      orcc    #CC_CARRY       ; set carry
(1)     2B2 :                    queue_add_return:
(1)     2B2 : 35 D4                      puls    b,x,u,pc
(1)     2B4 :
(1)     2B4 :                    ;;; [queue] Remove an element from queue
(1)     2B4 :                    ;;; @param X queue work space pointer
(1)     2B4 :                    ;;; @return A an element
(1)     2B4 :                    ;;; @return CC.C 0 if queue is empty
(1)     2B4 :                    queue_remove:
(1)     2B4 : 6D 84                      tst     queue_len,x
(1)     2B6 : 26 03                      bne     queue_remove_elem
(1)     2B8 : 1C FE                      andcc   #~CC_CARRY      ; clear carry
(1)     2BA : 39                         rts
(1)     2BB :                    queue_remove_elem:
(1)     2BB : 34 54                      pshs    u,x,b
(1)     2BD : 1F 13                      tfr     x,u
(1)     2BF : E6 43                      ldb     queue_get,u     ; 8 bits offset
(1)     2C1 : 3A                         abx                     ; X+=B
(1)     2C2 : A6 04                      lda     queue_buf,x
(1)     2C4 : 6A C4                      dec     queue_len,u
(1)     2C6 : 5C                         incb
(1)     2C7 : E7 43                      stb     queue_get,u
(1)     2C9 : E1 41                      cmpb    queue_size,u
(1)     2CB : 25 04                      blo     queue_remove_return ; carry is set
(1)     2CD : 6F 43                      clr     queue_get,u
(1)     2CF : 1A 01                      orcc    #CC_CARRY       ; set carry
(1)     2D1 :                    queue_remove_return:
(1)     2D1 : 35 D4                      puls    b,x,u,pc
        2D3 :
        2D3 :                    isr_firq:
        2D3 : 34 16                      pshs    x,b,a
        2D5 : F6 DF 00                   ldb     ACIA_status
        2D8 : C5 80                      bitb    #IRQF_bm
        2DA : 27 1C                      beq     isr_firq_exit
        2DC : C5 01                      bitb    #RDRF_bm
        2DE : 27 09                      beq     isr_firq_send
        2E0 : B6 DF 01                   lda     ACIA_data       ; receive character
        2E3 : 8E 20 00                   ldx     #rx_queue
        2E6 : BD 02 96                   jsr     queue_add
        2E9 :                    isr_firq_send:
        2E9 : C5 02                      bitb    #TDRE_bm
        2EB : 27 0B                      beq     isr_firq_exit
        2ED : 8E 20 80                   ldx     #tx_queue
        2F0 : BD 02 B4                   jsr     queue_remove
        2F3 : 24 06                      bcc     isr_firq_send_empty
        2F5 : B7 DF 01                   sta     ACIA_data       ; send character
        2F8 :                    isr_firq_exit:
        2F8 : 35 16                      puls    a,b,x
        2FA : 3B                         rti
        2FB :                    isr_firq_send_empty:
        2FB : 86 94                      lda     #RX_INT_TX_NO
        2FD : B7 DF 00                   sta     ACIA_control    ; disable Tx interrupt
        300 : 35 16                      puls    a,b,x
        302 : 3B                         rti
