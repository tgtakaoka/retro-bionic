          0 :                    *** -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            include "tms9900.inc"
(1)       0 :                    *** -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            *** TMS9900
(1)       0 :                            cpu     tms9900
(1)       0 :                            *** Status Register
(1)       0 : =8000              ST_LGT:         equ     ?1000000000000000 ; Logical Greater Than
(1)       0 : =4000              ST_AGT:         equ     ?0100000000000000 ; Arithmetic Greater Than
(1)       0 : =2000              ST_EQ:          equ     ?0010000000000000 ; Equal
(1)       0 : =1000              ST_C:           equ     ?0001000000000000 ; Carry
(1)       0 : =800               ST_OV:          equ     ?0000100000000000 ; Overflow
(1)       0 : =400               ST_OP:          equ     ?0000010000000000 ; Parity
(1)       0 : =200               ST_X:           equ     ?0000001000000000 ; XOP
(1)       0 : =F                 ST_INT_gm:      equ     ?0000000000001111 ; Interrupt mask
(1)       0 :                            *** Vector
(1)       0 : =0                 VEC_RESET:      equ     >0000   ; Reset
(1)       0 : =4                 VEC_INT1:       equ     >0004   ; INT1
(1)       0 : =10                VEC_INT4:       equ     >0010   ; INT4
(1)       0 : =40                VEC_XOP0:       equ     >0040   ; XOP 0
(1)       0 : =44                VEC_XOP1:       equ     >0044   ; XOP 1
(1)       0 : =48                VEC_XOP2:       equ     >0048   ; XOP 2
(1)       0 : =4C                VEC_XOP3:       equ     >004C   ; XOP 3
(1)       0 : =50                VEC_XOP4:       equ     >0050   ; XOP 4
(1)       0 : =54                VEC_XOP5:       equ     >0054   ; XOP 5
(1)       0 : =58                VEC_XOP6:       equ     >0058   ; XOP 6
(1)       0 : =5C                VEC_XOP7:       equ     >005C   ; XOP 7
(1)       0 : =60                VEC_XOP8:       equ     >0060   ; XOP 8
(1)       0 : =64                VEC_XOP9:       equ     >0064   ; XOP 9
(1)       0 : =68                VEC_XOP10       equ     >0068   ; XOP 10
(1)       0 : =6C                VEC_XOP11:      equ     >006C   ; XOP 11
(1)       0 : =70                VEC_XOP12:      equ     >0070   ; XOP 12
(1)       0 : =74                VEC_XOP13:      equ     >0074   ; XOP 13
(1)       0 : =78                VEC_XOP14:      equ     >0078   ; XOP 14
(1)       0 : =7C                VEC_XOP15:      equ     >007C   ; XOP 15
          0 :
          0 :                            *** MC6850 Asynchronous Communication Interface Adapter
          0 : =80                ACIA:   equ     >0080
          0 :                            include "mc6850.inc"
(1)       0 :                    *** -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            *** MC6850
(1)       0 :                            *** Asynchronous Communication Interface Adapter
(1)       0 : =80                ACIA_control:   equ     ACIA+0
(1)       0 : =80                ACIA_status:    equ     ACIA+0
(1)       0 : =82                ACIA_data:      equ     ACIA+2
(1)       0 : =84                ACIA_intr:      equ     ACIA+4
(1)       0 :                            **  Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     ?11             Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     ?00000000       /1
(1)       0 : =0                 CDS_DIV16_gc:   equ     ?00000001       /16
(1)       0 : =0                 CDS_DIV64_gc:   equ     ?00000010       /64
(1)       0 : =3                 CDS_RESET_gc:   equ     ?00000011       Master Reset
(1)       0 :                            **  Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     ?00011100       Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     ?00000000       7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     ?00000100       7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     ?00001000       7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     ?00001100       7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     ?00010000       8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     ?00010100       8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     ?00011000       8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     ?00011100       8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            **  Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     ?01100000       Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     ?00000000       RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     ?00100000       RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     ?01000000       RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     ?01100000       RTS=Low,  Tx Interrupt Disabled
(1)       0 :                            *                               Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     ?10000000       Receive Interrupt Enable Bit mask
(1)       0 :                            *** Status register
(1)       0 : =1                 RDRF_bm:        equ     ?00000001       Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     ?00000010       Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     ?00000100       Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     ?00001000       Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     ?00010000       Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     ?00100000       Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     ?01000000       Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     ?10000000       Interrupt Request Flag
          0 :
          0 :                            org     VEC_RESET
          0 : 0100                       data    workspace
          2 : 0200                       data    initialize
          4 :
          4 :                            org     VEC_INT1
          4 : 0120                       data    workspace_int1
          6 : 02CE                       data    int1_isr
          8 :
         7C :                            org     VEC_XOP15
         7C : 007C                       data    VEC_XOP15       for halt to system
         7E : 007C                       data    VEC_XOP15
         80 :
         80 :                    hibyte: function v,(v)*256      Hi byte constant
         80 :
        100 :                            org     >0100
        100 :                    workspace:
        100 :                            bss     2*16            R0-R15
        120 :                    workspace_int1:
        120 :                            bss     2*16            R0~R15
        140 :
       2000 :                            org     >2000
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       bss     rx_queue_size
       2080 :
        200 :                            org     >0200
        200 :                    initialize:
        200 : 0209 2000                  li      R9, rx_queue
        204 : 0200 0080                  li      R0, rx_queue_size
        208 : 06A0 0260                  bl      @queue_init
        20C :                            * Initialize ACIA
        20C : 0200 0300                  li      R0, hibyte(CDS_RESET_gc)
        210 : D800 0080                  movb    R0, @ACIA_control       Master reset
        214 : 0200 9400                  li      R0, hibyte(WSB_8N1_gc++RIEB_bm)
        218 : D800 0080                  movb    R0, @ACIA_control       8 bits + No Parity + 1 Stop Bits
        21C : 0200 0400                  li      R0, hibyte(VEC_INT1)
        220 : D800 0084                  movb    R0, @ACIA_intr          set INT1 name for MC6805 emulator
        224 : 1001                       jmp     loop
        226 :
        226 :                    wait:
        226 : 0340                       idle
        228 : 0300 0000          loop:   limi    0               Disable interrupt
        22C : 0209 2000                  li      R9, rx_queue
        230 : 06A0 02A4                  bl      @queue_remove
        234 : 0300 000F                  limi    15              Enable interrupt
        238 : 17F6                       jnc     wait
        23A : E000                       soc     R0, R0
        23C : 1308                       jeq     halt_to_system
        23E : 06A0 0250          echo:   bl      @putchar
        242 : 0280 0D00                  ci      R0, hibyte(>0D) Cariage Return
        246 : 16F0                       jne     loop
        248 : 0200 0A00                  li      R0, hibyte(>0A) Newline
        24C : 10F8                       jmp     echo
        24E :                    halt_to_system:
        24E : 2FCF                       xop     R15,15
        250 :
        250 :                    putchar:
        250 : D060 0080                  movb    @ACIA_status, R1
        254 : 0241 0200                  andi    R1, hibyte(TDRE_bm)
        258 : 13FB                       jeq     putchar
        25A : D800 0082                  movb    R0, @ACIA_data
        25E : 045B                       rt
        260 :
        260 :                            include "queue.inc"
(1)     260 :                    *** -*- mode: asm; mode: flying-spell; -*-
(1)     260 :                    *** [queue] queue structure
(1)     260 : =0                 queue_len:      equ     0       ; queue length
(1)     260 : =2                 queue_size:     equ     2       ; buffer size
(1)     260 : =4                 queue_put:      equ     4       ; queue put index
(1)     260 : =6                 queue_get:      equ     6       ; queue get index
(1)     260 : =8                 queue_buf:      equ     8       ; buffer start offset
(1)     260 :
(1)     260 :                    *** [queue] Initialize queue
(1)     260 :                    *** @param R9 queue work space pointer
(1)     260 :                    *** @param R0 queue work space size
(1)     260 :                    *** @clobber R0 R1 R9
(1)     260 :                    queue_init:
(1)     260 : 04F9                       clr     *R9+            clear queue_len
(1)     262 : 0220 FFF8                  ai      R0, -queue_buf
(1)     266 : CE40                       mov     R0, *R9+        set queue_size
(1)     268 : 04F9                       clr     *R9+            clear queue_put
(1)     26A : 04F9                       clr     *R9+            clear queue_get
(1)     26C : 04C1                       clr     R1
(1)     26E :                    queue_init_loop:
(1)     26E : DE41                       movb    R1, *R9+
(1)     270 : 0600                       dec     R0
(1)     272 : 16FD                       jne     queue_init_loop
(1)     274 : 045B                       rt
(1)     276 :
(1)     276 :                    *** [queue] Add an element to queue
(1)     276 :                    *** @param R9 queue work space pointer
(1)     276 :                    *** @param R0 an element
(1)     276 :                    *** @return CC.C 0 if queue is full
(1)     276 :                    *** @clobber R1
(1)     276 :                    queue_add:
(1)     276 : 8A59 0002                  c       *R9, @queue_size(R9)    check queue_len
(1)     27A : 1A02                       jl      queue_add_element
(1)     27C : 04C1                       clr     R1                      to clear ST.C
(1)     27E : 1010                       jmp     queue_add_exit
(1)     280 :                    queue_add_element:
(1)     280 : C049                       mov     R9, R1
(1)     282 : A069 0004                  a       @queue_put(R9), R1
(1)     286 : D840 0008                  movb    R0, @queue_buf(R1)
(1)     28A : 0599                       inc     *R9                     update queue_len
(1)     28C : C069 0004                  mov     @queue_put(R9), R1
(1)     290 : 0581                       inc     R1
(1)     292 : 8A41 0002                  c       R1, @queue_size(R9)
(1)     296 : 1101                       jlt     queue_add_return
(1)     298 : 04C1                       clr     R1
(1)     29A :                    queue_add_return:
(1)     29A : CA41 0004                  mov     R1, @queue_put(R9)
(1)     29E : 0701                       seto    R1                      to set ST.C
(1)     2A0 :                    queue_add_exit:
(1)     2A0 : 0911                       srl     R1, 1                   set/clear ST.C
(1)     2A2 : 045B                       rt
(1)     2A4 :
(1)     2A4 :                    *** [queue] Remove an element from queue
(1)     2A4 :                    *** @param R9 queue work space pointer
(1)     2A4 :                    *** @return R0 an element
(1)     2A4 :                    *** @return CC.C 0 if queue is empty
(1)     2A4 :                    *** @clobber R1
(1)     2A4 :                    queue_remove:
(1)     2A4 : C059                       mov     *R9, R1                 check queue_len
(1)     2A6 : 1311                       jeq     queue_remove_exit       to clear ST.C
(1)     2A8 : C049                       mov     R9, R1
(1)     2AA : A069 0006                  a       @queue_get(R9), R1
(1)     2AE : 04C0                       clr     R0                      clear low byte
(1)     2B0 : D021 0008                  movb    @queue_buf(R1), R0
(1)     2B4 : 0619                       dec     *R9                     update queue_len
(1)     2B6 : C069 0006                  mov     @queue_get(R9), R1
(1)     2BA : 0581                       inc     R1
(1)     2BC : 8A41 0002                  c       R1, @queue_size(R9)
(1)     2C0 : 1101                       jlt     queue_remove_return
(1)     2C2 : 04C1                       clr     R1
(1)     2C4 :                    queue_remove_return:
(1)     2C4 : CA41 0006                  mov     R1, @queue_get(R9)
(1)     2C8 : 0701                       seto    R1                      to set ST.C
(1)     2CA :                    queue_remove_exit:
(1)     2CA : 0911                       srl     R1, 1                   set/clear ST.C
(1)     2CC : 045B                       rt
        2CE :
        2CE :                    int1_isr:
        2CE : D020 0080                  movb    @ACIA_status, R0
        2D2 : 0240 0100                  andi    R0, hibyte(RDRF_bm)
        2D6 : 1306                       jeq     int1_isr_exit
        2D8 : D020 0082                  movb    @ACIA_data, R0
        2DC : 0209 2000                  li      R9, rx_queue
        2E0 : 06A0 0276                  bl      @queue_add
        2E4 :                    int1_isr_exit:
        2E4 : 0380                       rtwp
