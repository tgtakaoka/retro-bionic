          0 :                    *** -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            include "tms9900.inc"
(1)       0 :                    *** -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            *** TMS9900
(1)       0 :                            cpu     tms9900
(1)       0 :                            *** Status Register
(1)       0 : =8000              ST_LGT:         equ     ?1000000000000000 ; Logical Greater Than
(1)       0 : =4000              ST_AGT:         equ     ?0100000000000000 ; Arithmetic Greater Than
(1)       0 : =2000              ST_EQ:          equ     ?0010000000000000 ; Equal
(1)       0 : =1000              ST_C:           equ     ?0001000000000000 ; Carry
(1)       0 : =800               ST_OV:          equ     ?0000100000000000 ; Overflow
(1)       0 : =400               ST_OP:          equ     ?0000010000000000 ; Parity
(1)       0 : =200               ST_X:           equ     ?0000001000000000 ; XOP
(1)       0 : =F                 ST_INT_gm:      equ     ?0000000000001111 ; Interrupt mask
(1)       0 :                            *** Vector
(1)       0 : =0                 VEC_RESET:      equ     >0000   ; Reset
(1)       0 : =4                 VEC_INT1:       equ     >0004   ; INT1
(1)       0 : =10                VEC_INT4:       equ     >0010   ; INT4
(1)       0 : =40                VEC_XOP0:       equ     >0040   ; XOP 0
(1)       0 : =44                VEC_XOP1:       equ     >0044   ; XOP 1
(1)       0 : =48                VEC_XOP2:       equ     >0048   ; XOP 2
(1)       0 : =4C                VEC_XOP3:       equ     >004C   ; XOP 3
(1)       0 : =50                VEC_XOP4:       equ     >0050   ; XOP 4
(1)       0 : =54                VEC_XOP5:       equ     >0054   ; XOP 5
(1)       0 : =58                VEC_XOP6:       equ     >0058   ; XOP 6
(1)       0 : =5C                VEC_XOP7:       equ     >005C   ; XOP 7
(1)       0 : =60                VEC_XOP8:       equ     >0060   ; XOP 8
(1)       0 : =64                VEC_XOP9:       equ     >0064   ; XOP 9
(1)       0 : =68                VEC_XOP10       equ     >0068   ; XOP 10
(1)       0 : =6C                VEC_XOP11:      equ     >006C   ; XOP 11
(1)       0 : =70                VEC_XOP12:      equ     >0070   ; XOP 12
(1)       0 : =74                VEC_XOP13:      equ     >0074   ; XOP 13
(1)       0 : =78                VEC_XOP14:      equ     >0078   ; XOP 14
(1)       0 : =7C                VEC_XOP15:      equ     >007C   ; XOP 15
          0 :
          0 :                            *** MC6850 Asynchronous Communication Interface Adapter
          0 : =80                ACIA:   equ     >0080
          0 :                            include "mc6850.inc"
(1)       0 :                    *** -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            *** MC6850
(1)       0 :                            *** Asynchronous Communication Interface Adapter
(1)       0 : =80                ACIA_control:   equ     ACIA+0
(1)       0 : =80                ACIA_status:    equ     ACIA+0
(1)       0 : =82                ACIA_data:      equ     ACIA+2
(1)       0 : =84                ACIA_intr:      equ     ACIA+4
(1)       0 :                            **  Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     ?11             Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     ?00000000       /1
(1)       0 : =0                 CDS_DIV16_gc:   equ     ?00000001       /16
(1)       0 : =0                 CDS_DIV64_gc:   equ     ?00000010       /64
(1)       0 : =3                 CDS_RESET_gc:   equ     ?00000011       Master Reset
(1)       0 :                            **  Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     ?00011100       Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     ?00000000       7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     ?00000100       7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     ?00001000       7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     ?00001100       7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     ?00010000       8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     ?00010100       8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     ?00011000       8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     ?00011100       8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            **  Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     ?01100000       Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     ?00000000       RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     ?00100000       RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     ?01000000       RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     ?01100000       RTS=Low,  Tx Interrupt Disabled
(1)       0 :                            *                               Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     ?10000000       Receive Interrupt Enable Bit mask
(1)       0 :                            *** Status register
(1)       0 : =1                 RDRF_bm:        equ     ?00000001       Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     ?00000010       Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     ?00000100       Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     ?00001000       Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     ?00010000       Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     ?00100000       Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     ?01000000       Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     ?10000000       Interrupt Request Flag
          0 :
          0 :                            org     VEC_RESET
          0 : 0100                       data    workspace
          2 : 0200                       data    initialize
          4 :
          4 :                            org     VEC_INT1
          4 : 0120                       data    workspace_int1
          6 : 03A8                       data    int1_isr
          8 :
         7C :                            org     VEC_XOP15
         7C : 007C                       data    VEC_XOP15       for halt to system
         7E : 007C                       data    VEC_XOP15
         80 :
         80 :                    hibyte: function v,(v)*256      Hi byte constant
         80 :
        100 :                            org     >0100
        100 :                    workspace:
        100 :                            bss     2*16            R0-R15
        120 :                    workspace_int1:
        120 :                            bss     2*16            R0-R15
        140 :
       2000 :                            org     >2000
       2000 : =2000              stack:          equ     $
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       bss     rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       bss     tx_queue_size
       2100 :
        200 :                            org     >0200
        200 :                    initialize:
        200 : 020A 2000                  li      R10, stack
        204 : 0209 2000                  li      R9, rx_queue
        208 : 0200 0080                  li      R0, rx_queue_size
        20C : 06A0 033A                  bl      @queue_init
        210 : 0209 2080                  li      R9, tx_queue
        214 : 0200 0080                  li      R0, tx_queue_size
        218 : 06A0 033A                  bl      @queue_init
        21C :                            * Initialize ACIA
        21C : 0200 0300                  li      R0, hibyte(CDS_RESET_gc)
        220 : D800 0080                  movb    R0, @ACIA_control       Master reset
        224 : 0200 9400                  li      R0, hibyte(WSB_8N1_gc++RIEB_bm)
        228 : D800 0080                  movb    R0, @ACIA_control       8 bits + No Parity + 1 Stop Bits
        22C : 0200 0400                  li      R0, hibyte(VEC_INT1)
        230 : D800 0084                  movb    R0, @ACIA_intr          set INT1 name for MC6805 emulator
        234 : 1001                       jmp     loop
        236 :
        236 :                    wait:
        236 : 0340                       idle
        238 :                    loop:
        238 : 06A0 02DE                  bl      @getchar
        23C : 17FC                       jnc     wait
        23E : E000                       soc     R0, R0
        240 : 1312                       jeq     halt_to_system
        242 :                    echo:
        242 : C040                       mov     R0, R1
        244 : 06A0 0314                  bl      @putchar
        248 : 0200 2000                  li      R0, hibyte(' ')
        24C : 06A0 0314                  bl      @putchar
        250 : 06A0 0268                  bl      @put_hex8
        254 : 0200 2000                  li      R0, hibyte(' ')
        258 : 06A0 0314                  bl      @putchar
        25C : 06A0 02A2                  bl      @put_bin8
        260 : 06A0 02FC                  bl      @newline
        264 : 10E9                       jmp     loop
        266 :                    halt_to_system:
        266 : 2FCF                       xop     R15,15
        268 :
        268 :                            *** Print uint8_t in hex
        268 :                            *** @param R1 uint8_t value to be printed in hex
        268 :                            *** @clobber R0
        268 :                    put_hex8:
        268 : 064A                       dect    R10
        26A : C68B                       mov     R11, *R10       Push return address
        26C : 0200 3000                  li      R0, hibyte('0')
        270 : 06A0 0314                  bl      @putchar
        274 : 0200 7800                  li      R0, hibyte('x')
        278 : 06A0 0314                  bl      @putchar
        27C : C001                       mov     R1, R0
        27E : 0940                       srl     R0, 4
        280 : 06A0 028E                  bl      @put_hex4
        284 : C001                       mov     R1, R0
        286 : 06A0 028E                  bl      @put_hex4
        28A : C2FA                       mov     *R10+, R11      Pop return address
        28C : 045B                       rt
        28E :                    put_hex4:
        28E : 0240 0F00                  andi    R0, hibyte(>0F)
        292 : 0280 0A00                  ci      R0, hibyte(10)
        296 : 1A02                       jl      put_hex4_dec
        298 : 0220 0700                  ai      R0, hibyte(-10+'A'-'0')
        29C :                    put_hex4_dec:
        29C : 0220 3000                  ai      R0, hibyte('0')
        2A0 : 1039                       jmp     putchar
        2A2 :
        2A2 :                            *** Print uint8_t in hex
        2A2 :                            *** @param R1 uint8_t value to be printed in binary.
        2A2 :                            *** @clobber R0
        2A2 :                    put_bin8:
        2A2 : 064A                       dect    R10
        2A4 : C68B                       mov     R11, *R10       Push return address
        2A6 : 064A                       dect    R10
        2A8 : C682                       mov     R2, *R10        Push R2
        2AA : 0200 3000                  li      R0, hibyte('0')
        2AE : 06A0 0314                  bl      @putchar
        2B2 : 0200 6200                  li      R0, hibyte('b')
        2B6 : 06A0 0314                  bl      @putchar
        2BA : 0202 8000                  li      R2, >8000
        2BE :                    put_bin8_loop:
        2BE : 2442                       czc     R2, R1
        2C0 : 1303                       jeq     put_bin8_zero
        2C2 : 0200 3100                  li      R0, hibyte('1')
        2C6 : 1002                       jmp     put_bin8_putchar
        2C8 :                    put_bin8_zero:
        2C8 : 0200 3000                  li      R0, hibyte('0')
        2CC :                    put_bin8_putchar:
        2CC : 06A0 0314                  bl      @putchar
        2D0 : 0912                       srl     R2, 1
        2D2 : 0282 0080                  ci      R2, >0080
        2D6 : 16F3                       jne     put_bin8_loop
        2D8 : C0BA                       mov     *R10+, R2       Pop R2
        2DA : C2FA                       mov     *R10+, R11      Pop return address
        2DC : 045B                       rt
        2DE :
        2DE :                            *** Get character
        2DE :                            *** @return R0
        2DE :                            *** @return ST.C 0 if no character
        2DE :                    getchar:
        2DE : 064A                       dect    R10
        2E0 : C68B                       mov     R11, *R10       Push return address
        2E2 : 064A                       dect    R10
        2E4 : C681                       mov     R1, *R10        Push R1
        2E6 : 0300 0000                  limi    0               Disable interrupt
        2EA : 0209 2000                  li      R9, rx_queue
        2EE : 06A0 037E                  bl      @queue_remove
        2F2 : 0300 000F                  limi    15              Enable interrupt
        2F6 : C07A                       mov     *R10+, R1       Pop R1
        2F8 : C2FA                       mov     *R10+, R11      Pop return address
        2FA : 045B                       rt
        2FC :
        2FC :                            *** Newline
        2FC :                            *** @clobber R0
        2FC :                    newline:
        2FC : 064A                       dect    R10
        2FE : C68B                       mov     R11, *R10       Push return address
        300 : 0200 0D00                  li      R0, hibyte(>0D)
        304 : 06A0 0314                  bl      @putchar
        308 : 0200 0A00                  li      R0, hibyte(>0A)
        30C : 06A0 0314                  bl      @putchar
        310 : C2FA                       mov     *R10+, R11      Pop return address
        312 : 045B                       rt
        314 :
        314 :                            *** Put character
        314 :                    putchar:
        314 : 064A                       dect    R10
        316 : C68B                       mov     R11, *R10       Push return address
        318 : 064A                       dect    R10
        31A : C681                       mov     R1, *R10        Push R1
        31C : 0300 0000                  limi    0               Disable interrupt
        320 : 0209 2080                  li      R9, tx_queue
        324 : 06A0 0350                  bl      @queue_add
        328 : 0300 000F                  limi    15              Enable interrupt
        32C : 0201 2000                  li      R1, hibyte(TCB_EI_gc)
        330 : F801 0080                  socb    R1, @ACIA_control       Enable Tx interrupt
        334 : C07A                       mov     *R10+, R1       Pop R1
        336 : C2FA                       mov     *R10+, R11      Pop return address
        338 : 045B                       rt
        33A :
        33A :                            include "queue.inc"
(1)     33A :                    *** -*- mode: asm; mode: flying-spell; -*-
(1)     33A :                    *** [queue] queue structure
(1)     33A : =0                 queue_len:      equ     0       ; queue length
(1)     33A : =2                 queue_size:     equ     2       ; buffer size
(1)     33A : =4                 queue_put:      equ     4       ; queue put index
(1)     33A : =6                 queue_get:      equ     6       ; queue get index
(1)     33A : =8                 queue_buf:      equ     8       ; buffer start offset
(1)     33A :
(1)     33A :                    *** [queue] Initialize queue
(1)     33A :                    *** @param R9 queue work space pointer
(1)     33A :                    *** @param R0 queue work space size
(1)     33A :                    *** @clobber R0 R1 R9
(1)     33A :                    queue_init:
(1)     33A : 04F9                       clr     *R9+            clear queue_len
(1)     33C : 0220 FFF8                  ai      R0, -queue_buf
(1)     340 : CE40                       mov     R0, *R9+        set queue_size
(1)     342 : 04F9                       clr     *R9+            clear queue_put
(1)     344 : 04F9                       clr     *R9+            clear queue_get
(1)     346 : 04C1                       clr     R1
(1)     348 :                    queue_init_loop:
(1)     348 : DE41                       movb    R1, *R9+
(1)     34A : 0600                       dec     R0
(1)     34C : 16FD                       jne     queue_init_loop
(1)     34E : 045B                       rt
(1)     350 :
(1)     350 :                    *** [queue] Add an element to queue
(1)     350 :                    *** @param R9 queue work space pointer
(1)     350 :                    *** @param R0 an element
(1)     350 :                    *** @return CC.C 0 if queue is full
(1)     350 :                    *** @clobber R1
(1)     350 :                    queue_add:
(1)     350 : 8A59 0002                  c       *R9, @queue_size(R9)    check queue_len
(1)     354 : 1A02                       jl      queue_add_element
(1)     356 : 04C1                       clr     R1                      to clear ST.C
(1)     358 : 1010                       jmp     queue_add_exit
(1)     35A :                    queue_add_element:
(1)     35A : C049                       mov     R9, R1
(1)     35C : A069 0004                  a       @queue_put(R9), R1
(1)     360 : D840 0008                  movb    R0, @queue_buf(R1)
(1)     364 : 0599                       inc     *R9                     update queue_len
(1)     366 : C069 0004                  mov     @queue_put(R9), R1
(1)     36A : 0581                       inc     R1
(1)     36C : 8A41 0002                  c       R1, @queue_size(R9)
(1)     370 : 1101                       jlt     queue_add_return
(1)     372 : 04C1                       clr     R1
(1)     374 :                    queue_add_return:
(1)     374 : CA41 0004                  mov     R1, @queue_put(R9)
(1)     378 : 0701                       seto    R1                      to set ST.C
(1)     37A :                    queue_add_exit:
(1)     37A : 0911                       srl     R1, 1                   set/clear ST.C
(1)     37C : 045B                       rt
(1)     37E :
(1)     37E :                    *** [queue] Remove an element from queue
(1)     37E :                    *** @param R9 queue work space pointer
(1)     37E :                    *** @return R0 an element
(1)     37E :                    *** @return CC.C 0 if queue is empty
(1)     37E :                    *** @clobber R1
(1)     37E :                    queue_remove:
(1)     37E : C059                       mov     *R9, R1                 check queue_len
(1)     380 : 1311                       jeq     queue_remove_exit       to clear ST.C
(1)     382 : C049                       mov     R9, R1
(1)     384 : A069 0006                  a       @queue_get(R9), R1
(1)     388 : 04C0                       clr     R0                      clear low byte
(1)     38A : D021 0008                  movb    @queue_buf(R1), R0
(1)     38E : 0619                       dec     *R9                     update queue_len
(1)     390 : C069 0006                  mov     @queue_get(R9), R1
(1)     394 : 0581                       inc     R1
(1)     396 : 8A41 0002                  c       R1, @queue_size(R9)
(1)     39A : 1101                       jlt     queue_remove_return
(1)     39C : 04C1                       clr     R1
(1)     39E :                    queue_remove_return:
(1)     39E : CA41 0006                  mov     R1, @queue_get(R9)
(1)     3A2 : 0701                       seto    R1                      to set ST.C
(1)     3A4 :                    queue_remove_exit:
(1)     3A4 : 0911                       srl     R1, 1                   set/clear ST.C
(1)     3A6 : 045B                       rt
        3A8 :
        3A8 :                    int1_isr:
        3A8 : D020 0080                  movb    @ACIA_status, R0
        3AC : 0240 0100                  andi    R0, hibyte(RDRF_bm)
        3B0 : 1306                       jeq     int1_isr_send   lo(R0) is cleared
        3B2 : D020 0082                  movb    @ACIA_data, R0
        3B6 : 0209 2000                  li      R9, rx_queue
        3BA : 06A0 0350                  bl      @queue_add
        3BE :                    int1_isr_send:
        3BE : D020 0080                  movb    @ACIA_status, R0
        3C2 : 0240 0200                  andi    R0, hibyte(TDRE_bm)
        3C6 : 1307                       jeq     int1_isr_exit
        3C8 : 0209 2080                  li      R9, tx_queue
        3CC : 06A0 037E                  bl      @queue_remove
        3D0 : 1703                       jnc     int1_isr_send_empty
        3D2 : D800 0082                  movb    R0, @ACIA_data
        3D6 :                    int1_isr_exit:
        3D6 : 0380                       rtwp
        3D8 :                    int1_isr_send_empty:
        3D8 :                            * Disable Tx interrupt
        3D8 : 0201 2000                  li      R1, hibyte(TCB_EI_gc)
        3DC : 5801 0080                  szcb    R1, @ACIA_control       Disable Tx interrupt
        3E0 : 0380                       rtwp
