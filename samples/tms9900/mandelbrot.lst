          0 :                    *** -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            include "tms9900.inc"
(1)       0 :                    *** -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            *** TMS9900
(1)       0 :                            cpu     tms9900
(1)       0 :                            *** Status Register
(1)       0 : =8000              ST_LGT:         equ     ?1000000000000000 ; Logical Greater Than
(1)       0 : =4000              ST_AGT:         equ     ?0100000000000000 ; Arithmetic Greater Than
(1)       0 : =2000              ST_EQ:          equ     ?0010000000000000 ; Equal
(1)       0 : =1000              ST_C:           equ     ?0001000000000000 ; Carry
(1)       0 : =800               ST_OV:          equ     ?0000100000000000 ; Overflow
(1)       0 : =400               ST_OP:          equ     ?0000010000000000 ; Parity
(1)       0 : =200               ST_X:           equ     ?0000001000000000 ; XOP
(1)       0 : =F                 ST_INT_gm:      equ     ?0000000000001111 ; Interrupt mask
(1)       0 :                            *** Vector
(1)       0 : =0                 VEC_RESET:      equ     >0000   ; Reset
(1)       0 : =4                 VEC_INT1:       equ     >0004   ; INT1
(1)       0 : =10                VEC_INT4:       equ     >0010   ; INT4
(1)       0 : =40                VEC_XOP0:       equ     >0040   ; XOP 0
(1)       0 : =44                VEC_XOP1:       equ     >0044   ; XOP 1
(1)       0 : =48                VEC_XOP2:       equ     >0048   ; XOP 2
(1)       0 : =4C                VEC_XOP3:       equ     >004C   ; XOP 3
(1)       0 : =50                VEC_XOP4:       equ     >0050   ; XOP 4
(1)       0 : =54                VEC_XOP5:       equ     >0054   ; XOP 5
(1)       0 : =58                VEC_XOP6:       equ     >0058   ; XOP 6
(1)       0 : =5C                VEC_XOP7:       equ     >005C   ; XOP 7
(1)       0 : =60                VEC_XOP8:       equ     >0060   ; XOP 8
(1)       0 : =64                VEC_XOP9:       equ     >0064   ; XOP 9
(1)       0 : =68                VEC_XOP10       equ     >0068   ; XOP 10
(1)       0 : =6C                VEC_XOP11:      equ     >006C   ; XOP 11
(1)       0 : =70                VEC_XOP12:      equ     >0070   ; XOP 12
(1)       0 : =74                VEC_XOP13:      equ     >0074   ; XOP 13
(1)       0 : =78                VEC_XOP14:      equ     >0078   ; XOP 14
(1)       0 : =7C                VEC_XOP15:      equ     >007C   ; XOP 15
          0 :
          0 :                            *** MC6850 Asynchronous Communication Interface Adapter
          0 : =80                ACIA:   equ     >0080
          0 :                            include "mc6850.inc"
(1)       0 :                    *** -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            *** MC6850
(1)       0 :                            *** Asynchronous Communication Interface Adapter
(1)       0 : =80                ACIA_control:   equ     ACIA+0
(1)       0 : =80                ACIA_status:    equ     ACIA+0
(1)       0 : =82                ACIA_data:      equ     ACIA+2
(1)       0 : =84                ACIA_intr:      equ     ACIA+4
(1)       0 :                            **  Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     ?11             Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     ?00000000       /1
(1)       0 : =0                 CDS_DIV16_gc:   equ     ?00000001       /16
(1)       0 : =0                 CDS_DIV64_gc:   equ     ?00000010       /64
(1)       0 : =3                 CDS_RESET_gc:   equ     ?00000011       Master Reset
(1)       0 :                            **  Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     ?00011100       Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     ?00000000       7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     ?00000100       7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     ?00001000       7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     ?00001100       7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     ?00010000       8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     ?00010100       8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     ?00011000       8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     ?00011100       8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            **  Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     ?01100000       Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     ?00000000       RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     ?00100000       RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     ?01000000       RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     ?01100000       RTS=Low,  Tx Interrupt Disabled
(1)       0 :                            *                               Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     ?10000000       Receive Interrupt Enable Bit mask
(1)       0 :                            *** Status register
(1)       0 : =1                 RDRF_bm:        equ     ?00000001       Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     ?00000010       Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     ?00000100       Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     ?00001000       Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     ?00010000       Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     ?00100000       Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     ?01000000       Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     ?10000000       Interrupt Request Flag
          0 :
          0 :                            org     VEC_RESET
          0 : 0100                       data    workspace
          2 : 0200                       data    initialize
          4 :
          4 :                            org     VEC_INT1
          4 : 0120                       data    workspace_int1
          6 : 055C                       data    int1_isr
          8 :
         7C :                            org     VEC_XOP15
         7C : 007C                       data    VEC_XOP15       for halt to system
         7E : 007C                       data    VEC_XOP15
         80 :
         80 :                    hibyte: function v,(v)*256      Hi byte constant
         80 :
        100 :                            org     >0100
        100 :                    workspace:
        100 :                            bss     2*16            R0-R15
        120 :                    workspace_int1:
        120 :                            bss     2*16            R0-R15
        140 :
       2000 :                            org     >2000
       2000 : =2000              stack:          equ     $
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       bss     rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       bss     tx_queue_size
       2100 :
        200 :                            org     >0200
        200 :                    initialize:
        200 : 020A 2000                  li      R10, stack
        204 : 0209 2000                  li      R9, rx_queue
        208 : 0200 0080                  li      R0, rx_queue_size
        20C : 06A0 04EE                  bl      @queue_init
        210 : 0209 2080                  li      R9, tx_queue
        214 : 0200 0080                  li      R0, tx_queue_size
        218 : 06A0 04EE                  bl      @queue_init
        21C :                            * Initialize ACIA
        21C : 0200 0300                  li      R0, hibyte(CDS_RESET_gc)
        220 : D800 0080                  movb    R0, @ACIA_control       Master reset
        224 : 0200 9400                  li      R0, hibyte(WSB_8N1_gc++RIEB_bm)
        228 : D800 0080                  movb    R0, @ACIA_control       8 bits + No Parity + 1 Stop Bits
        22C : 0200 0400                  li      R0, hibyte(VEC_INT1)
        230 : D800 0084                  movb    R0, @ACIA_intr          set INT1 name for MC6805 emulator
        234 :
        234 :                    loop:
        234 : 06A0 02D2                  bl      @mandelbrot
        238 : 06A0 025C                  bl      @newline
        23C : 10FB                       jmp     loop
        23E :
        23E :                            *** Get character
        23E :                            *** @return R0
        23E :                            *** @return ST.C 0 if no character
        23E :                    getchar:
        23E : 064A                       dect    R10
        240 : C68B                       mov     R11, *R10       Push return address
        242 : 064A                       dect    R10
        244 : C681                       mov     R1, *R10        Push R1
        246 : 0300 0000                  limi    0               Disable interrupt
        24A : 0209 2000                  li      R9, rx_queue
        24E : 06A0 0532                  bl      @queue_remove
        252 : 0300 000F                  limi    15              Enable interrupt
        256 : C07A                       mov     *R10+, R1       Pop R1
        258 : C2FA                       mov     *R10+, R11      Pop return address
        25A : 045B                       rt
        25C :
        25C :                    newline:
        25C : 064A                       dect    R10
        25E : C68B                       mov     R11, *R10       Push return address
        260 : 0200 0D00                  li      R0, hibyte(>0D)
        264 : 06A0 0278                  bl      @putchar
        268 : 0200 0A00                  li      R0, hibyte(>0A)
        26C : 06A0 0278                  bl      @putchar
        270 : C2FA                       mov     *R10+, R11      Pop return address
        272 : 045B                       rt
        274 :
        274 :                    putspace:
        274 : 0200 2000                  li      R0, hibyte(' ')
        278 :                    putchar:
        278 : 064A                       dect    R10
        27A : C68B                       mov     R11, *R10       Push return address
        27C : 064A                       dect    R10
        27E : C681                       mov     R1, *R10        Push R1
        280 : 0300 0000                  limi    0               Disable interrupt
        284 : 0209 2080                  li      R9, tx_queue
        288 : 06A0 0504                  bl      @queue_add
        28C : 0300 000F                  limi    15              Enable interrupt
        290 : 0201 2000                  li      R1, hibyte(TCB_EI_gc)
        294 : F801 0080                  socb    R1, @ACIA_control       Enable Tx interrupt
        298 : C07A                       mov     *R10+, R1       Pop R1
        29A : C2FA                       mov     *R10+, R11      Pop return address
        29C : 045B                       rt
        29E :
        29E :                            include "mandelbrot.inc"
(1)     29E :                    *** -*- mode: asm; mode: flyspell-prog* -*-
(1)     29E :
(1)     29E :                            *** Print variable: "name=variable "
(1)     29E :                            *** @param R1 variable
(1)     29E :                            *** @param R0 variable name
(1)     29E :                            *** @clobber R0 R1
(1)     29E :                    print:
(1)     29E : 064A                       dect    R10
(1)     2A0 : C68B                       mov     R11, *R10       Push return address
(1)     2A2 : 06A0 0278                  bl      @putchar        Print name
(1)     2A6 : 0200 3D00                  li      R0, hibyte('=')
(1)     2AA : 06A0 0278                  bl      @putchar
(1)     2AE : C001                       mov     R1, R0
(1)     2B0 : 06A0 0442                  bl      @print_int16
(1)     2B4 : 06A0 0274                  bl      @putspace
(1)     2B8 : C2FA                       mov     *R10+, R11      Pop return address
(1)     2BA : 045B                       rt
(1)     2BC :
(1)     2BC : =32                F:      equ     50
(1)     2BC :                    vC:     bss     2
(1)     2BE :                    vD:     bss     2
(1)     2C0 :                    vA:     bss     2
(1)     2C2 :                    vB:     bss     2
(1)     2C4 :                    vS:     bss     2
(1)     2C6 :                    vP:     bss     2
(1)     2C8 :                    vQ:     bss     2
(1)     2CA :                    vT:     bss     2
(1)     2CC :                    vY:     bss     2
(1)     2CE :                    vX:     bss     2
(1)     2D0 :                    vI:     bss     2
(1)     2D2 :
(1)     2D2 :                    mandelbrot:
(1)     2D2 : 064A                       dect    R10
(1)     2D4 : C68B                       mov     R11, *R10       Push return address
(1)     2D6 : 0200 FFF4                  li      R0, -12
(1)     2DA : C800 02CC                  mov     R0, @vY         Y=-12
(1)     2DE :                    loop_y:
(1)     2DE : 0200 FFCF                  li      R0, -49
(1)     2E2 : C800 02CE                  mov     R0, @vX         X=-49
(1)     2E6 :                    loop_x:
(1)     2E6 : C060 02CE                  mov     @vX, R1
(1)     2EA : 0202 00E5                  li      R2, 229
(1)     2EE : 06A0 04A2                  bl      @mul16          R1=X*229
(1)     2F2 : 0202 0064                  li      R2, 100
(1)     2F6 : 06A0 04B8                  bl      @divu16         R1=X*229/100
(1)     2FA : C801 02BC                  mov     R1, @vC         C=X*229/100
(1)     2FE : C801 02C0                  mov     R1, @vA         A=C
(1)     302 : C060 02CC                  mov     @vY, R1
(1)     306 : 0202 01A0                  li      R2, 416
(1)     30A : 06A0 04A2                  bl      @mul16          R1=Y*416
(1)     30E : 0202 0064                  li      R2, 100
(1)     312 : 06A0 04B8                  bl      @divu16         R1=Y*416/100
(1)     316 : C801 02BE                  mov     R1, @vD         D=Y*416/100
(1)     31A : C801 02C2                  mov     R1, @vB         B=D
(1)     31E : 04E0 02D0                  clr     @vI             I=0
(1)     322 :
(1)     322 :                            * mov     @vY, R1
(1)     322 :                            * li      R0, hibyte('Y')
(1)     322 :                            * bl      @print
(1)     322 :                            * mov     @vX, R1
(1)     322 :                            * li      R0, hibyte('X')
(1)     322 :                            * bl      @print
(1)     322 :                            * mov     @vC, R1
(1)     322 :                            * li      R0, hibyte('C')
(1)     322 :                            * bl      @print
(1)     322 :                            * mov     @vD, R1
(1)     322 :                            * li      R0, hibyte('D')
(1)     322 :                            * bl      @print
(1)     322 :                            * bl      @newline
(1)     322 :
(1)     322 :                    loop_i:
(1)     322 : C060 02C2                  mov     @vB, R1
(1)     326 : 0202 0032                  li      R2, F
(1)     32A : 06A0 04B8                  bl      @divu16         R1=B/F
(1)     32E : C801 02C8                  mov     R1, @vQ         Q=B/F
(1)     332 : 0202 FFCE                  li      R2, -F
(1)     336 : 06A0 04A2                  bl      @mul16          R1=-Q*F
(1)     33A : A060 02C2                  a       @vB, R1         R1=B-Q*F
(1)     33E : C801 02C4                  mov     R1, @vS         S=B-Q*F
(1)     342 : C060 02C2                  mov     @vB, R1
(1)     346 : C081                       mov     R1, R2
(1)     348 : 06A0 04A2                  bl      @mul16          R1=B*B
(1)     34C : C0C1                       mov     R1, R3          R3=B*B
(1)     34E : C060 02C0                  mov     @vA, R1
(1)     352 : C081                       mov     R1, R2
(1)     354 : 06A0 04A2                  bl      @mul16          R1=A*A
(1)     358 : 6043                       s       R3, R1          R1=A*A-B*B
(1)     35A : 0202 0032                  li      R2, F
(1)     35E : 06A0 04B8                  bl      @divu16         R1=(A*A-B*B)/F
(1)     362 : A060 02BC                  a       @vC, R1         R1=(A*A-B*B)/F+C
(1)     366 : C0C1                       mov     R1, R3          R3=(A*A-B*B)/F+C
(1)     368 : C060 02C0                  mov     @vA, R1
(1)     36C : C0A0 02C8                  mov     @vQ, R2
(1)     370 : 06A0 04A2                  bl      @mul16          R1=A*Q
(1)     374 : C101                       mov     R1, R4          R4=A*Q
(1)     376 : C060 02C0                  mov     @vA, R1
(1)     37A : C0A0 02C4                  mov     @vS, R2
(1)     37E : 06A0 04A2                  bl      @mul16          R1=A*S
(1)     382 : 0202 0032                  li      R2, F
(1)     386 : 06A0 04B8                  bl      @divu16         R1=A*S/F
(1)     38A : A044                       a       R4, R1          R1=A*Q+A*S/F
(1)     38C : A041                       a       R1, R1          R1=2*(A*Q+A*S/F)
(1)     38E : A060 02BE                  a       @vD, R1         R1=2*(A*Q+A*S/F)+D
(1)     392 : C801 02C2                  mov     R1, @vB         B=2*(A*Q+A*S/F)+D
(1)     396 : C043                       mov     R3, R1          R1=(A*A-B*B)/F+C
(1)     398 : C801 02C0                  mov     R1, @vA         A=(A*A-B*B)/F+C
(1)     39C : 0202 0032                  li      R2, F
(1)     3A0 : 06A0 04B8                  bl      @divu16         R1=A/F
(1)     3A4 : C801 02C6                  mov     R1, @vP         P=A/F
(1)     3A8 : C081                       mov     R1, R2
(1)     3AA : 06A0 04A2                  bl      @mul16          R1=P*P
(1)     3AE : C0C1                       mov     R1, R3          R3=P*P
(1)     3B0 : C060 02C2                  mov     @vB, R1
(1)     3B4 : 0202 0032                  li      R2, F
(1)     3B8 : 06A0 04B8                  bl      @divu16         R1=B/F
(1)     3BC : C801 02C8                  mov     R1, @vQ         Q=B/F
(1)     3C0 : C081                       mov     R1, R2
(1)     3C2 : 06A0 04A2                  bl      @mul16          R1=Q*Q
(1)     3C6 : A043                       a       R3, R1          R1=P*P+Q*Q
(1)     3C8 : C801 02CA                  mov     R1, @vT         T=P*P+Q*Q
(1)     3CC :
(1)     3CC :                            * bl      @putspace
(1)     3CC :                            * mov     @vI, R1
(1)     3CC :                            * li      R0, hibyte('I')
(1)     3CC :                            * bl      @print
(1)     3CC :                            * mov     @vA, R1
(1)     3CC :                            * li      R0, hibyte('A')
(1)     3CC :                            * bl      @print
(1)     3CC :                            * mov     @vB, R1
(1)     3CC :                            * li      R0, hibyte('B')
(1)     3CC :                            * bl      @print
(1)     3CC :                            * mov     @vP, R1
(1)     3CC :                            * li      R0, hibyte('P')
(1)     3CC :                            * bl      @print
(1)     3CC :                            * mov     @vQ, R1
(1)     3CC :                            * li      R0, hibyte('Q')
(1)     3CC :                            * bl      @print
(1)     3CC :                            * mov     @vT, R1
(1)     3CC :                            * li      R0, hibyte('T')
(1)     3CC :                            * bl      @print
(1)     3CC :                            * bl      @newline
(1)     3CC :
(1)     3CC : C020 02CA                  mov     @vT, R0
(1)     3D0 : 0280 0004                  ci      R0, 4
(1)     3D4 : 1514                       jgt     print_i         if 4<P*P+Q*Q
(1)     3D6 : 05A0 02D0                  inc     @vI             I+=1
(1)     3DA : C020 02D0                  mov     @vI, R0
(1)     3DE : 0280 0010                  ci      R0, 16
(1)     3E2 : 1402                       jhe     print_space
(1)     3E4 : 0460 0322                  b       @loop_i         if I<16
(1)     3E8 :                    print_space:
(1)     3E8 : 0200 2000                  li      R0, >2000
(1)     3EC : 100C                       jmp     print_char
(1)     3EE :                    print_table:
(1)     3EE : 3031                       data    '01'
(1)     3F0 : 3233                       data    '23'
(1)     3F2 : 3435                       data    '45'
(1)     3F4 : 3637                       data    '67'
(1)     3F6 : 3839                       data    '89'
(1)     3F8 : 4142                       data    'AB'
(1)     3FA : 4344                       data    'CD'
(1)     3FC : 4546                       data    'EF'
(1)     3FE :                    print_i:
(1)     3FE : C060 02D0                  mov     @vI, R1
(1)     402 : D021 03EE                  movb    @print_table(R1), R0
(1)     406 :                    print_char:
(1)     406 : 06A0 0278                  bl      @putchar
(1)     40A :
(1)     40A :                            * mov     R0, R2
(1)     40A :                            * li      R0, hibyte('@')
(1)     40A :                            * bl      @putchar
(1)     40A :                            * li      R0, hibyte('=')
(1)     40A :                            * bl      @putchar
(1)     40A :                            * mov     R2, R0
(1)     40A :                            * bl      @putchar
(1)     40A :                            * bl      @newline
(1)     40A :
(1)     40A : 06A0 023E                  bl      @getchar
(1)     40E : 1703                       jnc     next_x
(1)     410 : E000                       soc     R0, R0
(1)     412 : 1601                       jne     next_x
(1)     414 : 2FCF                       xop     R15,15          halt to system
(1)     416 :                    next_x:
(1)     416 : 05A0 02CE                  inc     @vX             X+=1
(1)     41A : C020 02CE                  mov     @vX, R0
(1)     41E : 0280 001E                  ci      R0, 30
(1)     422 : 1302                       jeq     next_y
(1)     424 : 0460 02E6                  b       @loop_x         if X<30
(1)     428 :                    next_y:
(1)     428 : 06A0 025C                  bl      @newline
(1)     42C : 05A0 02CC                  inc     @vY             Y+=1
(1)     430 : C020 02CC                  mov     @vY, R0
(1)     434 : 0280 000D                  ci      R0, 13
(1)     438 : 1302                       jeq     mandelbrot_end
(1)     43A : 0460 02DE                  b       @loop_y         if Y<13
(1)     43E :                    mandelbrot_end:
(1)     43E : C2FA                       mov     *R10+, R11      Pop return address
(1)     440 : 045B                       rt
        442 :                            include "arith.inc"
(1)     442 :                    *** -*- mode: asm; mode: flyspell-prog* -*-
(1)     442 :                            *** Print signed 16-bit integer as decimal
(1)     442 :                            *** @param R0 value
(1)     442 :                    print_int16:
(1)     442 : 064A                       dect    R10
(1)     444 : C68B                       mov     R11, *R10       Push return address
(1)     446 : 064A                       dect    R10
(1)     448 : C680                       mov     R0, *R10        Push R0
(1)     44A : 1314                       jeq     print_int16_zero
(1)     44C : 1506                       jgt     print_uint16
(1)     44E : 0200 2D00                  li      R0, hibyte('-')
(1)     452 : 06A0 0278                  bl      @putchar
(1)     456 : C01A                       mov     *R10, R0        Restore R0
(1)     458 : 0500                       neg     R0
(1)     45A :                    print_uint16:
(1)     45A : 064A                       dect    R10
(1)     45C : C681                       mov     R1, *R10        Push R1
(1)     45E : 064A                       dect    R10
(1)     460 : C682                       mov     R2, *R10        Push R2
(1)     462 : 0202 000A                  li      R2, 10
(1)     466 : 06A0 047E                  bl      @print_uint16_loop
(1)     46A : C0BA                       mov     *R10+, R2       Pop R2
(1)     46C : C07A                       mov     *R10+, R1       Pop R1
(1)     46E :                    print_int16_return:
(1)     46E : C03A                       mov     *R10+, R0       Pop R0
(1)     470 : C2FA                       mov     *R10+, R11      Pop return adddress
(1)     472 : 045B                       rt
(1)     474 :                    print_int16_zero:
(1)     474 : 0200 3000                  li      R0, hibyte('0')
(1)     478 : 06A0 0278                  bl      @putchar
(1)     47C : 10F8                       jmp     print_int16_return
(1)     47E :
(1)     47E :                    print_uint16_loop:
(1)     47E : 064A                       dect    R10
(1)     480 : C68B                       mov     R11, *R10       Push return address
(1)     482 : C040                       mov     R0, R1
(1)     484 : 130C                       jeq     print_uint16_return
(1)     486 : 04C0                       clr     R0
(1)     488 : 3C02                       div     R2, R0          R0:R1/R2 ; R0=quotient R1=reminder
(1)     48A : 064A                       dect    R10
(1)     48C : C681                       mov     R1, *R10        Push reminder
(1)     48E : 06A0 047E                  bl      @print_uint16_loop
(1)     492 : C03A                       mov     *R10+, R0       Pop reminder
(1)     494 : 06C0                       swpb    R0
(1)     496 : 0220 3000                  ai      R0, hibyte('0')
(1)     49A : 06A0 0278                  bl      @putchar
(1)     49E :                    print_uint16_return:
(1)     49E : C2FA                       mov     *R10+, R11      Pop return address
(1)     4A0 : 045B                       rt
(1)     4A2 :
(1)     4A2 :                            *** Multiply
(1)     4A2 :                            *** R1 * R2 = R1
(1)     4A2 :                            *** @clobber R0 R2
(1)     4A2 :                    mul16:
(1)     4A2 : C002                       mov     R2, R0
(1)     4A4 : 2881                       xor     R1, R2          R2=multiplicand^multiplyer
(1)     4A6 : 0740                       abs     R0
(1)     4A8 : 0741                       abs     R1
(1)     4AA : 3801                       mpy     R1, R0          R0:R1=R0*R1
(1)     4AC : 0200 8000                  li      R0, >8000
(1)     4B0 : 4002                       szc     R2, R0
(1)     4B2 : 1601                       jne     mul16_return
(1)     4B4 : 0501                       neg     R1
(1)     4B6 :                    mul16_return:
(1)     4B6 : 045B                       rt
(1)     4B8 :
(1)     4B8 :                            *** Unsigned Divide
(1)     4B8 :                            *** R1 / |R2| = R1
(1)     4B8 :                            *** @clobber R2, R0
(1)     4B8 :                    divu16:
(1)     4B8 : 04C0                       clr     R0
(1)     4BA : 0741                       abs     R1
(1)     4BC : 1103                       jlt     udiv16_negative R1 < 0
(1)     4BE : 3C02                       div     R2, R0          R0:R1/R2=R0..R1
(1)     4C0 : C040                       mov     R0, R1
(1)     4C2 : 045B                       rt
(1)     4C4 :                    udiv16_negative:
(1)     4C4 : 3C02                       div     R2, R0          R0:R1/R2=R0..R1
(1)     4C6 : 0500                       neg     R0
(1)     4C8 : C040                       mov     R0, R1
(1)     4CA : 045B                       rt
(1)     4CC :
(1)     4CC :                            *** Divide
(1)     4CC :                            *** R1 / R2 = R1 ... R0
(1)     4CC :                            *** @clobber R2
(1)     4CC :                    div16:
(1)     4CC : C001                       mov     R1, R0
(1)     4CE : 2802                       xor     R2, R0
(1)     4D0 : 064A                       dect    R10
(1)     4D2 : C680                       mov     R0, *R10        Push R1^R2
(1)     4D4 : 04C0                       clr     R0
(1)     4D6 : 0741                       abs     R1
(1)     4D8 : 0742                       abs     R2
(1)     4DA : 3C02                       div     R2, R0          R0:R1/R2=R0..R1
(1)     4DC : 0202 8000                  li      R2, >8000
(1)     4E0 : 40BA                       szc     *R10+, R2       Pop R1^R2
(1)     4E2 : 1601                       jne     div16_return
(1)     4E4 : 0500                       neg     R0
(1)     4E6 :                    div16_return:
(1)     4E6 : C080                       mov     R0, R2          Exchange R0, R1
(1)     4E8 : C001                       mov     R1, R0
(1)     4EA : C042                       mov     R2, R1
(1)     4EC : 045B                       rt
        4EE :                            include "queue.inc"
(1)     4EE :                    *** -*- mode: asm; mode: flying-spell; -*-
(1)     4EE :                    *** [queue] queue structure
(1)     4EE : =0                 queue_len:      equ     0       ; queue length
(1)     4EE : =2                 queue_size:     equ     2       ; buffer size
(1)     4EE : =4                 queue_put:      equ     4       ; queue put index
(1)     4EE : =6                 queue_get:      equ     6       ; queue get index
(1)     4EE : =8                 queue_buf:      equ     8       ; buffer start offset
(1)     4EE :
(1)     4EE :                    *** [queue] Initialize queue
(1)     4EE :                    *** @param R9 queue work space pointer
(1)     4EE :                    *** @param R0 queue work space size
(1)     4EE :                    *** @clobber R0 R1 R9
(1)     4EE :                    queue_init:
(1)     4EE : 04F9                       clr     *R9+            clear queue_len
(1)     4F0 : 0220 FFF8                  ai      R0, -queue_buf
(1)     4F4 : CE40                       mov     R0, *R9+        set queue_size
(1)     4F6 : 04F9                       clr     *R9+            clear queue_put
(1)     4F8 : 04F9                       clr     *R9+            clear queue_get
(1)     4FA : 04C1                       clr     R1
(1)     4FC :                    queue_init_loop:
(1)     4FC : DE41                       movb    R1, *R9+
(1)     4FE : 0600                       dec     R0
(1)     500 : 16FD                       jne     queue_init_loop
(1)     502 : 045B                       rt
(1)     504 :
(1)     504 :                    *** [queue] Add an element to queue
(1)     504 :                    *** @param R9 queue work space pointer
(1)     504 :                    *** @param R0 an element
(1)     504 :                    *** @return CC.C 0 if queue is full
(1)     504 :                    *** @clobber R1
(1)     504 :                    queue_add:
(1)     504 : 8A59 0002                  c       *R9, @queue_size(R9)    check queue_len
(1)     508 : 1A02                       jl      queue_add_element
(1)     50A : 04C1                       clr     R1                      to clear ST.C
(1)     50C : 1010                       jmp     queue_add_exit
(1)     50E :                    queue_add_element:
(1)     50E : C049                       mov     R9, R1
(1)     510 : A069 0004                  a       @queue_put(R9), R1
(1)     514 : D840 0008                  movb    R0, @queue_buf(R1)
(1)     518 : 0599                       inc     *R9                     update queue_len
(1)     51A : C069 0004                  mov     @queue_put(R9), R1
(1)     51E : 0581                       inc     R1
(1)     520 : 8A41 0002                  c       R1, @queue_size(R9)
(1)     524 : 1101                       jlt     queue_add_return
(1)     526 : 04C1                       clr     R1
(1)     528 :                    queue_add_return:
(1)     528 : CA41 0004                  mov     R1, @queue_put(R9)
(1)     52C : 0701                       seto    R1                      to set ST.C
(1)     52E :                    queue_add_exit:
(1)     52E : 0911                       srl     R1, 1                   set/clear ST.C
(1)     530 : 045B                       rt
(1)     532 :
(1)     532 :                    *** [queue] Remove an element from queue
(1)     532 :                    *** @param R9 queue work space pointer
(1)     532 :                    *** @return R0 an element
(1)     532 :                    *** @return CC.C 0 if queue is empty
(1)     532 :                    *** @clobber R1
(1)     532 :                    queue_remove:
(1)     532 : C059                       mov     *R9, R1                 check queue_len
(1)     534 : 1311                       jeq     queue_remove_exit       to clear ST.C
(1)     536 : C049                       mov     R9, R1
(1)     538 : A069 0006                  a       @queue_get(R9), R1
(1)     53C : 04C0                       clr     R0                      clear low byte
(1)     53E : D021 0008                  movb    @queue_buf(R1), R0
(1)     542 : 0619                       dec     *R9                     update queue_len
(1)     544 : C069 0006                  mov     @queue_get(R9), R1
(1)     548 : 0581                       inc     R1
(1)     54A : 8A41 0002                  c       R1, @queue_size(R9)
(1)     54E : 1101                       jlt     queue_remove_return
(1)     550 : 04C1                       clr     R1
(1)     552 :                    queue_remove_return:
(1)     552 : CA41 0006                  mov     R1, @queue_get(R9)
(1)     556 : 0701                       seto    R1                      to set ST.C
(1)     558 :                    queue_remove_exit:
(1)     558 : 0911                       srl     R1, 1                   set/clear ST.C
(1)     55A : 045B                       rt
        55C :
        55C :                    int1_isr:
        55C : D020 0080                  movb    @ACIA_status, R0
        560 : 0240 0100                  andi    R0, hibyte(RDRF_bm)
        564 : 1306                       jeq     int1_isr_send   lo(R0) is cleared
        566 : D020 0082                  movb    @ACIA_data, R0
        56A : 0209 2000                  li      R9, rx_queue
        56E : 06A0 0504                  bl      @queue_add
        572 :                    int1_isr_send:
        572 : D020 0080                  movb    @ACIA_status, R0
        576 : 0240 0200                  andi    R0, hibyte(TDRE_bm)
        57A : 1307                       jeq     int1_isr_exit
        57C : 0209 2080                  li      R9, tx_queue
        580 : 06A0 0532                  bl      @queue_remove
        584 : 1703                       jnc     int1_isr_send_empty
        586 : D800 0082                  movb    R0, @ACIA_data
        58A :                    int1_isr_exit:
        58A : 0380                       rtwp
        58C :                    int1_isr_send_empty:
        58C :                            * Disable Tx interrupt
        58C : 0201 2000                  li      R1, hibyte(TCB_EI_gc)
        590 : 5801 0080                  szcb    R1, @ACIA_control       Disable Tx interrupt
        594 : 0380                       rtwp
