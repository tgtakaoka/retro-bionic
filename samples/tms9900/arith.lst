          0 :                    *** -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            include "tms9900.inc"
(1)       0 :                    *** -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            *** TMS9900
(1)       0 :                            cpu     tms9900
(1)       0 :                            *** Status Register
(1)       0 : =8000              ST_LGT:         equ     ?1000000000000000 ; Logical Greater Than
(1)       0 : =4000              ST_AGT:         equ     ?0100000000000000 ; Arithmetic Greater Than
(1)       0 : =2000              ST_EQ:          equ     ?0010000000000000 ; Equal
(1)       0 : =1000              ST_C:           equ     ?0001000000000000 ; Carry
(1)       0 : =800               ST_OV:          equ     ?0000100000000000 ; Overflow
(1)       0 : =400               ST_OP:          equ     ?0000010000000000 ; Parity
(1)       0 : =200               ST_X:           equ     ?0000001000000000 ; XOP
(1)       0 : =F                 ST_INT_gm:      equ     ?0000000000001111 ; Interrupt mask
(1)       0 :                            *** Vector
(1)       0 : =0                 VEC_RESET:      equ     >0000   ; Reset
(1)       0 : =4                 VEC_INT1:       equ     >0004   ; INT1
(1)       0 : =10                VEC_INT4:       equ     >0010   ; INT4
(1)       0 : =40                VEC_XOP0:       equ     >0040   ; XOP 0
(1)       0 : =44                VEC_XOP1:       equ     >0044   ; XOP 1
(1)       0 : =48                VEC_XOP2:       equ     >0048   ; XOP 2
(1)       0 : =4C                VEC_XOP3:       equ     >004C   ; XOP 3
(1)       0 : =50                VEC_XOP4:       equ     >0050   ; XOP 4
(1)       0 : =54                VEC_XOP5:       equ     >0054   ; XOP 5
(1)       0 : =58                VEC_XOP6:       equ     >0058   ; XOP 6
(1)       0 : =5C                VEC_XOP7:       equ     >005C   ; XOP 7
(1)       0 : =60                VEC_XOP8:       equ     >0060   ; XOP 8
(1)       0 : =64                VEC_XOP9:       equ     >0064   ; XOP 9
(1)       0 : =68                VEC_XOP10       equ     >0068   ; XOP 10
(1)       0 : =6C                VEC_XOP11:      equ     >006C   ; XOP 11
(1)       0 : =70                VEC_XOP12:      equ     >0070   ; XOP 12
(1)       0 : =74                VEC_XOP13:      equ     >0074   ; XOP 13
(1)       0 : =78                VEC_XOP14:      equ     >0078   ; XOP 14
(1)       0 : =7C                VEC_XOP15:      equ     >007C   ; XOP 15
          0 :
          0 :                            *** MC6850 Asynchronous Communication Interface Adapter
          0 : =80                ACIA:   equ     >0080
          0 :                            include "mc6850.inc"
(1)       0 :                    *** -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            *** MC6850
(1)       0 :                            *** Asynchronous Communication Interface Adapter
(1)       0 : =80                ACIA_control:   equ     ACIA+0
(1)       0 : =80                ACIA_status:    equ     ACIA+0
(1)       0 : =82                ACIA_data:      equ     ACIA+2
(1)       0 : =84                ACIA_intr:      equ     ACIA+4
(1)       0 :                            **  Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     ?11             Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     ?00000000       /1
(1)       0 : =0                 CDS_DIV16_gc:   equ     ?00000001       /16
(1)       0 : =0                 CDS_DIV64_gc:   equ     ?00000010       /64
(1)       0 : =3                 CDS_RESET_gc:   equ     ?00000011       Master Reset
(1)       0 :                            **  Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     ?00011100       Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     ?00000000       7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     ?00000100       7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     ?00001000       7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     ?00001100       7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     ?00010000       8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     ?00010100       8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     ?00011000       8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     ?00011100       8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            **  Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     ?01100000       Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     ?00000000       RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     ?00100000       RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     ?01000000       RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     ?01100000       RTS=Low,  Tx Interrupt Disabled
(1)       0 :                            *                               Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     ?10000000       Receive Interrupt Enable Bit mask
(1)       0 :                            *** Status register
(1)       0 : =1                 RDRF_bm:        equ     ?00000001       Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     ?00000010       Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     ?00000100       Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     ?00001000       Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     ?00010000       Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     ?00100000       Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     ?01000000       Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     ?10000000       Interrupt Request Flag
          0 :
          0 :                            org     VEC_RESET
          0 : 0100                       data    workspace
          2 : 0200                       data    initialize
          4 :
         7C :                            org     VEC_XOP15
         7C : 007C                       data    VEC_XOP15       for halt to system
         7E : 007C                       data    VEC_XOP15
         80 :
        100 :                            org     >0100
        100 :                    workspace:
        100 :                            bss     2*16
        120 :
       2000 :                            org     >2000
       2000 : =2000              stack:          equ     $
       2000 :
       2000 :                    hibyte: function v,(v)*256      Hi byte constant
       2000 :
        200 :                            org     >0200
        200 :                    initialize:
        200 : 020A 2000                  li      R10, stack
        204 :                            * Initialize ACIA
        204 : 0200 0300                  li      R0, hibyte(CDS_RESET_gc)        Master reset
        208 : D800 0080                  movb    R0, @ACIA_control
        20C : 0200 1400                  li      R0, hibyte(WSB_8N1_gc)          8 bits + No Parity + 1 Stop Bits
        210 : D800 0080                  movb    R0, @ACIA_control
        214 : 06A0 02C2                  bl      @arith
        218 : 2FCF                       xop     R15,15          halt to system
        21A :
        21A :                    newline:
        21A : 064A                       dect    R10
        21C : C68B                       mov     R11, *R10               Push return address
        21E : 0200 0D00                  li      R0, hibyte(>0D)
        222 : 06A0 0236                  bl      @putchar
        226 : 0200 0A00                  li      R0, hibyte(>0A)
        22A : 06A0 0236                  bl      @putchar
        22E : C2FA                       mov     *R10+, R11              Pop return address
        230 : 045B                       rt
        232 :
        232 :                    putspace:
        232 : 0200 2000                  li      R0, hibyte(' ')
        236 :                    putchar:
        236 : 064A                       dect    R10
        238 : C681                       mov     R1, *R10                Push R1
        23A :                    putchar_loop:
        23A : D060 0080                  movb    @ACIA_status, R1
        23E : 0241 0200                  andi    R1, hibyte(TDRE_bm)
        242 : 13FB                       jeq     putchar_loop
        244 : D800 0082                  movb    R0, @ACIA_data
        248 : C07A                       mov     *R10+, R1               Pop R1
        24A : 045B                       rt
        24C :
        24C :                            *** Print "R1 op R2"
        24C :                            *** @params R0 op letter
        24C :                            *** @clobber R0
        24C :                    expr:
        24C : 064A                       dect    R10
        24E : C68B                       mov     R11, *R10       Push return address
        250 : 064A                       dect    R10
        252 : C680                       mov     R0, *R10        Push R0
        254 : C001                       mov     R1, R0
        256 : 06A0 04DA                  bl      @print_int16
        25A : 06A0 0232                  bl      @putspace
        25E : C03A                       mov     *R10+, R0       Pop R0
        260 : 06A0 0236                  bl      @putchar        Print op
        264 : 06A0 0232                  bl      @putspace
        268 : C002                       mov     R2, R0
        26A : 06A0 04DA                  bl      @print_int16
        26E : C2FA                       mov     *R10+, R11      Pop return address
        270 : 045B                       rt
        272 :
        272 :                            *** Print " = R1\n"
        272 :                            *** @clobber R0
        272 :                    answer:
        272 : 064A                       dect    R10
        274 : C68B                       mov     R11, *R10       Push return address
        276 : 06A0 0232                  bl      @putspace
        27A : 0200 3D00                  li      R0, hibyte('=')
        27E : 06A0 0236                  bl      @putchar
        282 : 06A0 0232                  bl      @putspace
        286 : C001                       mov     R1, R0
        288 : 06A0 04DA                  bl      @print_int16
        28C : 06A0 021A                  bl      @newline
        290 : C2FA                       mov     *R10+, R11      Pop return address
        292 : 045B                       rt
        294 :
        294 :                            *** Print "R1 rel R2"
        294 :                            *** @clobber R0
        294 :                    comp:
        294 : 8081                       c       R1, R2
        296 : 1308                       jeq     comp_eq
        298 : 110A                       jlt     comp_lt
        29A : 1503                       jgt     comp_gt
        29C : 0200 3F00                  li      R0, hibyte('?')
        2A0 : 1008                       jmp     comp_out
        2A2 :                    comp_gt:
        2A2 : 0200 3E00                  li      R0, hibyte('>')
        2A6 : 1005                       jmp     comp_out
        2A8 :                    comp_eq:
        2A8 : 0200 3D00                  li      R0, hibyte('=')
        2AC : 1002                       jmp     comp_out
        2AE :                    comp_lt:
        2AE : 0200 3C00                  li      R0, hibyte('<')
        2B2 :                    comp_out:
        2B2 : 064A                       dect    R10
        2B4 : C68B                       mov     R11, *R10       Push return address
        2B6 : 06A0 024C                  bl      @expr
        2BA : 06A0 021A                  bl      @newline
        2BE : C2FA                       mov     *R10+, R11      Pop return address
        2C0 : 045B                       rt
        2C2 :
        2C2 :                    arith:
        2C2 : 064A                       dect    R10
        2C4 : C68B                       mov     R11, *R10       Push return address
        2C6 :
        2C6 : 0201 4650                  li      R1, 18000
        2CA : 0202 6D60                  li      R2, 28000
        2CE : 0200 2B00                  li      R0, hibyte('+')
        2D2 : 06A0 024C                  bl      @expr
        2D6 : A042                       a       R2, R1          R1+=R2
        2D8 : 06A0 0272                  bl      @answer         ; -19536
        2DC :
        2DC : 0201 4650                  li      R1, 18000
        2E0 : 0202 B9B0                  li      R2, -18000
        2E4 : 0200 2B00                  li      R0, hibyte('+')
        2E8 : 06A0 024C                  bl      @expr
        2EC : A042                       a       R2, R1          R1+=R2
        2EE : 06A0 0272                  bl      @answer         ; 0
        2F2 :
        2F2 : 0201 B9B0                  li      R1, -18000
        2F6 : 0202 B9B0                  li      R2, -18000
        2FA : 0200 2B00                  li      R0, hibyte('+')
        2FE : 06A0 024C                  bl      @expr
        302 : A042                       a       R2, R1          R1+=R2
        304 : 06A0 0272                  bl      @answer         ; 29536
        308 :
        308 : 0201 B9B0                  li      R1, -18000
        30C : 0202 92A0                  li      R2, -28000
        310 : 0200 2D00                  li      R0, hibyte('-')
        314 : 06A0 024C                  bl      @expr
        318 : 6042                       s       R2, R1          R1-=R2
        31A : 06A0 0272                  bl      @answer         ; 10000
        31E :
        31E : 0201 4650                  li      R1, 18000
        322 : 0202 B9B0                  li      R2, -18000
        326 : 0200 2D00                  li      R0, hibyte('-')
        32A : 06A0 024C                  bl      @expr
        32E : 6042                       s       R2, R1          R1-=R2
        330 : 06A0 0272                  bl      @answer         ; -29536
        334 :
        334 : 0201 92A0                  li      R1, -28000
        338 : 0202 B9B0                  li      R2, -18000
        33C : 0200 2D00                  li      R0, hibyte('-')
        340 : 06A0 024C                  bl      @expr
        344 : 6042                       s       R2, R1          R1-=R2
        346 : 06A0 0272                  bl      @answer         ; -10000
        34A :
        34A : 0201 0064                  li      R1, 100
        34E : 0202 012C                  li      R2, 300
        352 : 0200 2A00                  li      R0, hibyte('*')
        356 : 06A0 024C                  bl      @expr
        35A : 06A0 053A                  bl      @mul16
        35E : 06A0 0272                  bl      @answer         ; 30000
        362 :
        362 : 0201 00C8                  li      R1, 200
        366 : 0202 0064                  li      R2, 100
        36A : 0200 2A00                  li      R0, hibyte('*')
        36E : 06A0 024C                  bl      @expr
        372 : 06A0 053A                  bl      @mul16
        376 : 06A0 0272                  bl      @answer         ; 20000
        37A :
        37A : 0201 012C                  li      R1, 300
        37E : 0202 FF38                  li      R2, -200
        382 : 0200 2A00                  li      R0, hibyte('*')
        386 : 06A0 024C                  bl      @expr
        38A : 06A0 053A                  bl      @mul16
        38E : 06A0 0272                  bl      @answer         ; 5536
        392 :
        392 : 0201 0064                  li      R1, 100
        396 : 0202 FED4                  li      R2, -300
        39A : 0200 2A00                  li      R0, hibyte('*')
        39E : 06A0 024C                  bl      @expr
        3A2 : 06A0 053A                  bl      @mul16
        3A6 : 06A0 0272                  bl      @answer         ; -30000
        3AA :
        3AA : 0201 FF38                  li      R1, -200
        3AE : 0202 FF9C                  li      R2, -100
        3B2 : 0200 2A00                  li      R0, hibyte('*')
        3B6 : 06A0 024C                  bl      @expr
        3BA : 06A0 053A                  bl      @mul16
        3BE : 06A0 0272                  bl      @answer         ; 20000
        3C2 :
        3C2 : 0201 7530                  li      R1, 30000
        3C6 : 0202 0064                  li      R2, 100
        3CA : 0200 2F00                  li      R0, hibyte('/')
        3CE : 06A0 024C                  bl      @expr
        3D2 : 06A0 0568                  bl      @div16
        3D6 : 06A0 0272                  bl      @answer         ; 300
        3DA :
        3DA : 0201 FF38                  li      R1, -200
        3DE : 0202 0064                  li      R2, 100
        3E2 : 0200 2F00                  li      R0, hibyte('/')
        3E6 : 06A0 024C                  bl      @expr
        3EA : 06A0 0568                  bl      @div16
        3EE : 06A0 0272                  bl      @answer         ; -2
        3F2 :
        3F2 : 0201 8AD0                  li      R1, -30000
        3F6 : 0202 FF38                  li      R2, -200
        3FA : 0200 2F00                  li      R0, hibyte('/')
        3FE : 06A0 024C                  bl      @expr
        402 : 06A0 0568                  bl      @div16
        406 : 06A0 0272                  bl      @answer         ; 150
        40A :
        40A : 0201 8AD0                  li      R1, -30000
        40E : 0202 004E                  li      R2, 78
        412 : 0200 2F00                  li      R0, hibyte('/')
        416 : 06A0 024C                  bl      @expr
        41A : 06A0 0568                  bl      @div16
        41E : 06A0 0272                  bl      @answer         ; -384
        422 :
        422 : 0201 1388                  li      R1, 5000
        426 : 0202 0FA0                  li      R2, 4000
        42A : 06A0 0294                  bl      @comp
        42E :
        42E : 0201 1388                  li      R1, 5000
        432 : 0202 1388                  li      R2, 5000
        436 : 06A0 0294                  bl      @comp
        43A :
        43A : 0201 0FA0                  li      R1, 4000
        43E : 0202 1388                  li      R2, 5000
        442 : 06A0 0294                  bl      @comp
        446 :
        446 : 0201 EC78                  li      R1, -5000
        44A : 0202 F060                  li      R2, -4000
        44E : 06A0 0294                  bl      @comp
        452 :
        452 : 0201 EC78                  li      R1, -5000
        456 : 0202 EC78                  li      R2, -5000
        45A : 06A0 0294                  bl      @comp
        45E :
        45E : 0201 F060                  li      R1, -4000
        462 : 0202 EC78                  li      R2, -5000
        466 : 06A0 0294                  bl      @comp
        46A :
        46A : 0201 7FBC                  li      R1, 32700
        46E : 0202 7F58                  li      R2, 32600
        472 : 06A0 0294                  bl      @comp
        476 :
        476 : 0201 7FBC                  li      R1, 32700
        47A : 0202 7FBC                  li      R2, 32700
        47E : 06A0 0294                  bl      @comp
        482 :
        482 : 0201 7F58                  li      R1, 32600
        486 : 0202 7FBC                  li      R2, 32700
        48A : 06A0 0294                  bl      @comp
        48E :
        48E : 0201 8044                  li      R1, -32700
        492 : 0202 80A8                  li      R2, -32600
        496 : 06A0 0294                  bl      @comp
        49A :
        49A : 0201 8044                  li      R1, -32700
        49E : 0202 8044                  li      R2, -32700
        4A2 : 06A0 0294                  bl      @comp
        4A6 :
        4A6 : 0201 80A8                  li      R1, -32600
        4AA : 0202 8044                  li      R2, -32700
        4AE : 06A0 0294                  bl      @comp
        4B2 :
        4B2 : 0201 4650                  li      R1, 18000
        4B6 : 0202 92A0                  li      R2, -28000
        4BA : 06A0 0294                  bl      @comp
        4BE :
        4BE : 0201 92A0                  li      R1, -28000
        4C2 : 0202 92A0                  li      R2, -28000
        4C6 : 06A0 0294                  bl      @comp
        4CA :
        4CA : 0201 92A0                  li      R1, -28000
        4CE : 0202 4650                  li      R2, 18000
        4D2 : 06A0 0294                  bl      @comp
        4D6 :
        4D6 : C2FA                       mov     *R10+, R11      Pop return address
        4D8 : 045B                       rt
        4DA :
        4DA :                            include "arith.inc"
(1)     4DA :                    *** -*- mode: asm; mode: flyspell-prog* -*-
(1)     4DA :                            *** Print signed 16-bit integer as decimal
(1)     4DA :                            *** @param R0 value
(1)     4DA :                    print_int16:
(1)     4DA : 064A                       dect    R10
(1)     4DC : C68B                       mov     R11, *R10       Push return address
(1)     4DE : 064A                       dect    R10
(1)     4E0 : C680                       mov     R0, *R10        Push R0
(1)     4E2 : 1314                       jeq     print_int16_zero
(1)     4E4 : 1506                       jgt     print_uint16
(1)     4E6 : 0200 2D00                  li      R0, hibyte('-')
(1)     4EA : 06A0 0236                  bl      @putchar
(1)     4EE : C01A                       mov     *R10, R0        Restore R0
(1)     4F0 : 0500                       neg     R0
(1)     4F2 :                    print_uint16:
(1)     4F2 : 064A                       dect    R10
(1)     4F4 : C681                       mov     R1, *R10        Push R1
(1)     4F6 : 064A                       dect    R10
(1)     4F8 : C682                       mov     R2, *R10        Push R2
(1)     4FA : 0202 000A                  li      R2, 10
(1)     4FE : 06A0 0516                  bl      @print_uint16_loop
(1)     502 : C0BA                       mov     *R10+, R2       Pop R2
(1)     504 : C07A                       mov     *R10+, R1       Pop R1
(1)     506 :                    print_int16_return:
(1)     506 : C03A                       mov     *R10+, R0       Pop R0
(1)     508 : C2FA                       mov     *R10+, R11      Pop return adddress
(1)     50A : 045B                       rt
(1)     50C :                    print_int16_zero:
(1)     50C : 0200 3000                  li      R0, hibyte('0')
(1)     510 : 06A0 0236                  bl      @putchar
(1)     514 : 10F8                       jmp     print_int16_return
(1)     516 :
(1)     516 :                    print_uint16_loop:
(1)     516 : 064A                       dect    R10
(1)     518 : C68B                       mov     R11, *R10       Push return address
(1)     51A : C040                       mov     R0, R1
(1)     51C : 130C                       jeq     print_uint16_return
(1)     51E : 04C0                       clr     R0
(1)     520 : 3C02                       div     R2, R0          R0:R1/R2 ; R0=quotient R1=reminder
(1)     522 : 064A                       dect    R10
(1)     524 : C681                       mov     R1, *R10        Push reminder
(1)     526 : 06A0 0516                  bl      @print_uint16_loop
(1)     52A : C03A                       mov     *R10+, R0       Pop reminder
(1)     52C : 06C0                       swpb    R0
(1)     52E : 0220 3000                  ai      R0, hibyte('0')
(1)     532 : 06A0 0236                  bl      @putchar
(1)     536 :                    print_uint16_return:
(1)     536 : C2FA                       mov     *R10+, R11      Pop return address
(1)     538 : 045B                       rt
(1)     53A :
(1)     53A :                            *** Multiply
(1)     53A :                            *** R1 * R2 = R1
(1)     53A :                            *** @clobber R0 R2
(1)     53A :                    mul16:
(1)     53A : C002                       mov     R2, R0
(1)     53C : 2881                       xor     R1, R2          R2=multiplicand^multiplyer
(1)     53E : 0740                       abs     R0
(1)     540 : 0741                       abs     R1
(1)     542 : 3801                       mpy     R1, R0          R0:R1=R0*R1
(1)     544 : 0200 8000                  li      R0, >8000
(1)     548 : 4002                       szc     R2, R0
(1)     54A : 1601                       jne     mul16_return
(1)     54C : 0501                       neg     R1
(1)     54E :                    mul16_return:
(1)     54E : 045B                       rt
(1)     550 :
(1)     550 :                            *** Unsigned Divide
(1)     550 :                            *** R1 / |R2| = R1
(1)     550 :                            *** @clobber R2, R0
(1)     550 :                    udiv16:
(1)     550 : 04C0                       clr     R0
(1)     552 : 0281 0000                  ci      R1, 0
(1)     556 : 1103                       jlt     udiv16_negative R1 < 0
(1)     558 : 3C02                       div     R2, R0          R0:R1/R2=R0..R1
(1)     55A : C040                       mov     R0, R1
(1)     55C : 045B                       rt
(1)     55E :                    udiv16_negative:
(1)     55E : 0741                       abs     R1
(1)     560 : 3C02                       div     R2, R0          R0:R1/R2=R0..R1
(1)     562 : 0500                       neg     R0
(1)     564 : C040                       mov     R0, R1
(1)     566 : 045B                       rt
(1)     568 :
(1)     568 :                            *** Divide
(1)     568 :                            *** R1 / R2 = R1 ... R0
(1)     568 :                            *** @clobber R2
(1)     568 :                    div16:
(1)     568 : C001                       mov     R1, R0
(1)     56A : 2802                       xor     R2, R0
(1)     56C : 064A                       dect    R10
(1)     56E : C680                       mov     R0, *R10        Push R1^R2
(1)     570 : 04C0                       clr     R0
(1)     572 : 0741                       abs     R1
(1)     574 : 0742                       abs     R2
(1)     576 : 3C02                       div     R2, R0          R0:R1/R2=R0..R1
(1)     578 : 0202 8000                  li      R2, >8000
(1)     57C : 40BA                       szc     *R10+, R2       Pop R1^R2
(1)     57E : 1601                       jne     div16_return
(1)     580 : 0500                       neg     R0
(1)     582 :                    div16_return:
(1)     582 : C080                       mov     R0, R2          Exchange R0, R1
(1)     584 : C001                       mov     R1, R0
(1)     586 : C042                       mov     R2, R1
(1)     588 : 045B                       rt
