          0 :                            cpu     6801
          0 :                            include "mc6801.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6801/MC6803
(1)       0 :                    ;;; Condition Code Register (CC)
(1)       0 : =1                 CC_CARRY      equ  %00000001   ; set to 1 if carry occurred
(1)       0 : =2                 CC_OVERFLOW   equ  %00000010   ; set to 1 if overflow occurred
(1)       0 : =4                 CC_ZERO       equ  %00000100   ; set to 1 if result is zero
(1)       0 : =8                 CC_NEGATIVE   equ  %00001000   ; set to 1 if result is negative
(1)       0 : =10                CC_IRQ        equ  %00010000   ; if 1, IRQ is masked
(1)       0 : =20                CC_HALF_CARRY equ  %00100000   ; if 1, decimal carry from least digit occurred
(1)       0 :
(1)       0 :                    ;;; Internal Register Area
(1)       0 : =0                 DDR1:   equ     $00          ; $00: Port 1 Data Direction Register
(1)       0 : =1                 DDR2:   equ     $01          ; $01: Port 2 Data Direction Register
(1)       0 : =2                 PORT1:  equ     $02          ; $02: Port 1 Data Register
(1)       0 : =3                 PORT2:  equ     $03          ; $03: Port 2 Data Register
(1)       0 : =4                 DDR3:   equ     $04          ; $04: Port 3 Data Direction Register
(1)       0 : =5                 DDR4:   equ     $05          ; $05: Port 4 Data Direction Register
(1)       0 : =6                 PORT3:  equ     $06          ; $06: Port 3 Data Register
(1)       0 : =7                 PORT4:  equ     $07          ; $07: Port 4 Data Register
(1)       0 : =8                 TCSR:   equ     $08          ; $08: Timer Control and Status Register
(1)       0 : =9                 TCNT:   equ     $09          ; $09: Timer Counter
(1)       0 : =B                 TOCR:   equ     $0B          ; $0B: Output Compare Register
(1)       0 : =D                 TCAP:   equ     $0D          ; $0D: Input Capture Register
(1)       0 : =F                 P3CSR:  equ     $0F          ; $0F: Port 3 Control and Status Register
(1)       0 : =10                RMCR:   equ     $10          ; $10: Rate and Mode Control Registers
(1)       0 : =11                TRCSR:  equ     $11          ; $11: Transmit Receive Control and Status Register
(1)       0 : =12                SCRDR:  equ     $12          ; $12: Receiver Data Register
(1)       0 : =13                SCTDR:  equ     $13          ; $13: Transmit Data Register
(1)       0 : =14                RAMCR:  equ     $14          ; $14: RAM Control Register
(1)       0 :
(1)       0 :                    ;;; Port 2 Data Register
(1)       0 : =E0                PC_gm:  equ     %11100000       ; PC group mask
(1)       0 : =5                 PC_gp:  equ     5               ; PC group position
(1)       0 : =20                PC0_bm: equ     %00100000       ; PC0
(1)       0 : =40                PC1_bm: equ     %01000000       ; PC1
(1)       0 : =80                PC2_bm: equ     %10000000       ; PC2
(1)       0 :
(1)       0 :                    ;;; Port 3 Control and Status Register
(1)       0 : =8                 P3_LATCH_bm:    equ     %00001000 ; Latch Enable
(1)       0 : =10                P3_OSS_bm:      equ     %00010000 ; Output Strobe Select
(1)       0 : =40                P3_IS3IE_bm:    equ     %01000000 ; IS3 IRQ1 Enable
(1)       0 : =80                P3_IS3F_bm:     equ     %10000000 ; IS3 Flag
(1)       0 :
(1)       0 :                    ;;; RAM Control Register
(1)       0 : =40                RAME_bm:        equ     %01000000 ; RAM Enable
(1)       0 : =80                STBY_PWR_bm:    equ     %10000000 ; Standby Power status
(1)       0 :
(1)       0 :                    ;;; Timer Control and Status Register
(1)       0 : =1                 TCSR_OLVL_bm:   equ     %00000001 ; Output Level
(1)       0 : =2                 TCSR_IEDG_bm:   equ     %00000010 ; Input Edge. 0=negative/1=positive
(1)       0 : =4                 TCSR_ETOI_bm:   equ     %00000100 ; Enable Timer Overflow Interrupt for IRQ2
(1)       0 : =8                 TCSR_EOCI_bm:   equ     %00001000 ; Enable Output Compare Interrupt for IRQ2
(1)       0 : =10                TCSR_EICI_bm:   equ     %00010000 ; Enable Input Capture Interrupt for IRQ2
(1)       0 : =20                TCSR_TOF_bm:    equ     %00100000 ; Timer Overflow Flag
(1)       0 : =40                TCSR_OCF_bm:    equ     %01000000 ; Output Compare Flag
(1)       0 : =80                TCSR_ICF_bm:    equ     %10000000 ; Input Capture Flag
(1)       0 :
(1)       0 :                    ;;; Serial Communication Interface
(1)       0 :                    ;;; Rate and Mode Control Registers
(1)       0 :                            ;; Speed Select
(1)       0 : =3                 SS_gm:          equ     %00000011 ; Group mask
(1)       0 : =0                 SS_DIV16_gc:    equ     %00000000 ; E/16
(1)       0 : =1                 SS_DIV128_gc:   equ     %00000001 ; E/128
(1)       0 : =2                 SS_DIV1024_gc:  equ     %00000010 ; E/1024
(1)       0 : =3                 SS_DIV4096_gc:  equ     %00000011 ; E/4096
(1)       0 :                            ;; Clock Control and Format Select
(1)       0 : =C                 CCFS_gm:        equ     %00001100 ; Group mask
(1)       0 : =0                 CCFS_BIPH_gc:   equ     %00000000 ; Bi-Phase
(1)       0 : =4                 CCFS_NRZ_gc:    equ     %00000100 ; NRZ
(1)       0 : =8                 CCFS_NRZO_gc:   equ     %00001000 ; NRZ P22=Clock Output
(1)       0 : =C                 CCFS_NRZI_gc:   equ     %00001100 ; NRZ P22=Clock Input
(1)       0 :                    ;;; Transmit/Receive Control and Status Register
(1)       0 : =1                 TRCSR_WU_bm:    equ     %00000001 ; Wake-up on idle line
(1)       0 : =2                 TRCSR_TE_bm:    equ     %00000010 ; Transmit Enable; if set, P24 is output
(1)       0 : =4                 TRCSR_TIE_bm:   equ     %00000100 ; Transmit Interrupt Enable for IRQ2
(1)       0 : =8                 TRCSR_RE_bm:    equ     %00001000 ; Receiver Enable; if set, P23 is input
(1)       0 : =10                TRCSR_RIE_bm:   equ     %00010000 ; Receiver Interrupt Enable for IRQ2
(1)       0 : =20                TRCSR_TDRE_bm:  equ     %00100000 ; Transmit Data Register Empty
(1)       0 : =40                TRCSR_ORFE_bm:  equ     %01000000 ; Overrun Framing Error
(1)       0 : =80                TRCSR_RDRF_bm:  equ     %10000000 ; Receive Data Register Full
(1)       0 :
(1)       0 :                    ;;; Vector
(1)       0 : =FFF0              VEC_SCI:        equ     $FFF0  ; $FFF0: SCI Interrupt (TDRE+RDRF+ORFE)
(1)       0 : =FFF2              VEC_TOF:        equ     $FFF2  ; $FFF2: Timer Overflow Interrupt
(1)       0 : =FFF4              VEC_OCF:        equ     $FFF4  ; $FFF4: Output Compare Interrupt
(1)       0 : =FFF6              VEC_ICF:        equ     $FFF6  ; $FFF6: Input Capture Interrupt
(1)       0 : =FFF8              VEC_IRQ1:       equ     $FFF8  ; $FFF8: Maskable Interrupt Request 1
(1)       0 : =FFFA              VEC_SWI:        equ     $FFFA  ; $FFFA: Software Interrupt
(1)       0 : =FFFC              VEC_NMI:        equ     $FFFC  ; $FFFC: Non Maskable Interrupt
(1)       0 : =FFFE              VEC_RESET:      equ     $FFFE  ; $FFFE: Reset
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =DF00              ACIA:   equ     $DF00
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 :
(1)       0 :                    ;;; Control register
(1)       0 : =DF00              ACIA_control:   equ     ACIA+0
(1)       0 :                            ;; Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     %11    ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     %00000000 ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     %00000001 ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     %00000010 ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     %00000011 ; Master Reset
(1)       0 :                            ;; Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     %00011100 ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     %00000000 ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     %00000100 ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     %00001000 ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     %00001100 ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     %00010000 ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     %00010100 ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     %00011000 ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     %00011100 ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     %01100000 ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     %00000000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     %00100000 ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     %01000000 ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     %01100000 ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     %10000000 ; Receive Interrupt Enable Bit mask
(1)       0 :
(1)       0 :                    ;;; Status register
(1)       0 : =DF00              ACIA_status:    equ     ACIA+0
(1)       0 : =1                 RDRF_bm:        equ     %00000001 ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     %00000010 ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     %00000100 ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     %00001000 ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     %00010000 ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     %00100000 ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     %01000000 ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     %10000000 ; Interrupt Request Flag
(1)       0 :
(1)       0 :                    ;;; Data register
(1)       0 : =DF01              ACIA_data:      equ     ACIA+1          ; Data register
          0 :
         40 :                            org     $40
         40 :                    R0:
         40 :                    R0H:    rmb     1
         41 :                    R0L:    rmb     1
         42 :                    R1:
         42 :                    R1H:    rmb     1
         43 :                    R1L:    rmb     1
         44 :                    R2:
         44 :                    R2H:    rmb     1
         45 :                    R2L:    rmb     1
         46 :                    sign:   rmb     1
         47 :                    exprop: rmb     1
         48 :                    vA:     rmb     2
         4A :                    vB:     rmb     2
         4C :
       1000 :                            org     $1000
       1000 : =FFF               stack:  equ     *-1             ; MC6800's SP is post-decrement/pre-increment
       1000 :
       FFF6 :                            org     $FFF6           ; MC68HC11 SWI
       FFF6 : FF F6                      fdb     $FFF6
       FFF8 :
       FFFA :                            org     VEC_SWI
       FFFA : FF FA                      fdb     VEC_SWI         ; for halt to system
       FFFC :
       FFFE :                            org     VEC_RESET
       FFFE : 01 00                      fdb     initialize
      10000 :
        100 :                            org     $0100
        100 :                    initialize:
        100 : 8E 0F FF                   lds     #stack
        103 : 86 03                      ldaa    #CDS_RESET_gc   ; Master reset
        105 : B7 DF 00                   staa    ACIA_control
        108 : 86 14                      ldaa    #WSB_8N1_gc     ; 8 bits + No Parity + 1 Stop Bits
        10A :                                                    ; Transmit, Receive interrupts disabled
        10A : B7 DF 00                   staa    ACIA_control
        10D :
        10D : BD 01 74                   jsr     arith
        110 : 3F                         swi
        111 :
        111 :                    ;;; Print out char
        111 :                    ;;; @param A char
        111 :                    putspace:
        111 : 86 20                      ldaa    #' '
        113 : 20 06                      bra     putchar
        115 :                    newline:
        115 : 86 0D                      ldaa    #$0D
        117 : 8D 02                      bsr     putchar
        119 : 86 0A                      ldaa    #$0A
        11B :                    putchar:
        11B : 37                         pshb
        11C : F6 DF 00                   ldab    ACIA_status
        11F : C5 02                      bitb    #TDRE_bm
        121 : 33                         pulb
        122 : 27 F7                      beq     putchar
        124 : B7 DF 01                   staa    ACIA_data
        127 : 39                         rts
        128 :
        128 :                    ;;; Print "v1 op v2"
        128 :                    ;;; @param D v1
        128 :                    ;;; @param X v2
        128 :                    ;;; @param exprop op
        128 :                    ;;; @return D v1
        128 :                    ;;; @return X v2
        128 :                    ;;; @clobber R0 R1 R2
        128 :                    expr:
        128 : DD 48                      std     vA
        12A : DF 4A                      stx     vB
        12C : BD 02 E7                   jsr     print_int16     ; print v1
        12F : 8D E0                      bsr     putspace
        131 : 96 47                      ldaa    exprop
        133 : 8D E6                      bsr     putchar         ; print op
        135 : 8D DA                      bsr     putspace
        137 : DC 4A                      ldd     vB
        139 : BD 02 E7                   jsr     print_int16     ; print v2
        13C : DC 48                      ldd     vA
        13E : DE 4A                      ldx     vB
        140 : 39                         rts
        141 :
        141 :                    ;;; Print " = v\n"
        141 :                    ;;; @param D v
        141 :                    ;;; @clobber R0 R1 R2
        141 :                    answer:
        141 : 36                         psha
        142 : 8D CD                      bsr     putspace
        144 : 86 3D                      ldaa    #'='
        146 : 8D D3                      bsr     putchar
        148 : 8D C7                      bsr     putspace
        14A : 32                         pula
        14B : BD 02 E7                   jsr     print_int16     ; print v
        14E : 20 C5                      bra     newline
        150 :
        150 :                    ;;; Print "v1 rel v2"
        150 :                    ;;; @param D v1
        150 :                    ;;; @param X v2
        150 :                    ;;; @clobber R0 R1 R2
        150 :                    comp:
        150 : DD 48                      std     vA
        152 : DF 4A                      stx     vB
        154 : 93 4A                      subd    vB
        156 : 27 0C                      beq     comp_eq
        158 : 2D 0E                      blt     comp_lt
        15A : 2E 04                      bgt     comp_gt
        15C : 86 3F                      ldaa    #'?'
        15E : 20 0A                      bra     comp_out
        160 :                    comp_gt:
        160 : 86 3E                      ldaa    #'>'
        162 : 20 06                      bra     comp_out
        164 :                    comp_eq:
        164 : 86 3D                      ldaa    #'='
        166 : 20 02                      bra     comp_out
        168 :                    comp_lt:
        168 : 86 3C                      ldaa    #'<'
        16A :                    comp_out:
        16A : 97 47                      staa    exprop
        16C : DC 48                      ldd     vA
        16E : DE 4A                      ldx     vB
        170 : 8D B6                      bsr     expr
        172 : 20 A1                      bra     newline
        174 :
        174 :                    arith:
        174 : 86 2B                      ldaa    #'+'
        176 : 97 47                      staa    exprop
        178 : CC 46 50                   ldd     #18000
        17B : CE 6D 60                   ldx     #28000
        17E : BD 01 28                   jsr     expr
        181 : D3 4A                      addd    vB
        183 : BD 01 41                   jsr     answer          ; -19536
        186 :
        186 : CC 46 50                   ldd     #18000
        189 : CE B9 B0                   ldx     #-18000
        18C : BD 01 28                   jsr     expr
        18F : D3 4A                      addd    vB
        191 : BD 01 41                   jsr     answer          ; 0
        194 :
        194 : CC B9 B0                   ldd     #-18000
        197 : CE B9 B0                   ldx     #-18000
        19A : BD 01 28                   jsr     expr
        19D : D3 4A                      addd    vB
        19F : BD 01 41                   jsr     answer          ; 29536
        1A2 :
        1A2 : 86 2D                      ldaa    #'-'
        1A4 : 97 47                      staa    exprop
        1A6 : CC B9 B0                   ldd     #-18000
        1A9 : CE 92 A0                   ldx     #-28000
        1AC : BD 01 28                   jsr     expr
        1AF : 93 4A                      subd    vB
        1B1 : BD 01 41                   jsr     answer          ; -19536
        1B4 :
        1B4 : CC 46 50                   ldd     #18000
        1B7 : CE B9 B0                   ldx     #-18000
        1BA : BD 01 28                   jsr     expr
        1BD : 93 4A                      subd    vB
        1BF : BD 01 41                   jsr     answer          ; 29536
        1C2 :
        1C2 : CC 92 A0                   ldd     #-28000
        1C5 : CE B9 B0                   ldx     #-18000
        1C8 : BD 01 28                   jsr     expr
        1CB : 93 4A                      subd    vB
        1CD : BD 01 41                   jsr     answer          ; -10000
        1D0 :
        1D0 : 86 2A                      ldaa    #'*'
        1D2 : 97 47                      staa    exprop
        1D4 : CC 00 64                   ldd     #100
        1D7 : CE 01 2C                   ldx     #300
        1DA : BD 01 28                   jsr     expr
        1DD : BD 03 31                   jsr     mul16
        1E0 : BD 01 41                   jsr     answer          ; 30000
        1E3 :
        1E3 : CC 00 C8                   ldd     #200
        1E6 : CE 00 64                   ldx     #100
        1E9 : BD 01 28                   jsr     expr
        1EC : BD 03 31                   jsr     mul16
        1EF : BD 01 41                   jsr     answer          ; 20000
        1F2 :
        1F2 : CC 01 2C                   ldd     #300
        1F5 : CE FF 38                   ldx     #-200
        1F8 : BD 01 28                   jsr     expr
        1FB : BD 03 31                   jsr     mul16
        1FE : BD 01 41                   jsr     answer          ; 5536
        201 :
        201 : CC 00 64                   ldd     #100
        204 : CE FE D4                   ldx     #-300
        207 : BD 01 28                   jsr     expr
        20A : BD 03 31                   jsr     mul16
        20D : BD 01 41                   jsr     answer          ; -30000
        210 :
        210 : CC FF 38                   ldd     #-200
        213 : CE FF 9C                   ldx     #-100
        216 : BD 01 28                   jsr     expr
        219 : BD 03 31                   jsr     mul16
        21C : BD 01 41                   jsr     answer          ; 20000
        21F :
        21F : 86 2F                      ldaa    #'/'
        221 : 97 47                      staa    exprop
        223 : CC 75 30                   ldd     #30000
        226 : CE 00 64                   ldx     #100
        229 : BD 01 28                   jsr     expr
        22C : BD 03 95                   jsr     div16
        22F : BD 01 41                   jsr     answer          ; 30
        232 :
        232 : CC FF 38                   ldd     #-200
        235 : CE 00 64                   ldx     #100
        238 : BD 01 28                   jsr     expr
        23B : BD 03 95                   jsr     div16
        23E : BD 01 41                   jsr     answer          ; -2
        241 :
        241 : CC 8A D0                   ldd     #-30000
        244 : CE FF 38                   ldx     #-200
        247 : BD 01 28                   jsr     expr
        24A : BD 03 95                   jsr     div16
        24D : BD 01 41                   jsr     answer          ; 150
        250 :
        250 : CC 8A D0                   ldd     #-30000
        253 : CE 00 4E                   ldx     #78
        256 : BD 01 28                   jsr     expr
        259 : BD 03 95                   jsr     div16
        25C : BD 01 41                   jsr     answer          ; -384
        25F :
        25F : CC 13 88                   ldd     #5000
        262 : CE 0F A0                   ldx     #4000
        265 : BD 01 50                   jsr     comp
        268 :
        268 : CC 13 88                   ldd     #5000
        26B : CE 13 88                   ldx     #5000
        26E : BD 01 50                   jsr     comp
        271 :
        271 : CC 0F A0                   ldd     #4000
        274 : CE 13 88                   ldx     #5000
        277 : BD 01 50                   jsr     comp
        27A :
        27A : CC EC 78                   ldd     #-5000
        27D : CE F0 60                   ldx     #-4000
        280 : BD 01 50                   jsr     comp
        283 :
        283 : CC EC 78                   ldd     #-5000
        286 : CE EC 78                   ldx     #-5000
        289 : BD 01 50                   jsr     comp
        28C :
        28C : CC F0 60                   ldd     #-4000
        28F : CE EC 78                   ldx     #-5000
        292 : BD 01 50                   jsr     comp
        295 :
        295 : CC 7F BC                   ldd     #32700
        298 : CE 7F 58                   ldx     #32600
        29B : BD 01 50                   jsr     comp
        29E :
        29E : CC 7F BC                   ldd     #32700
        2A1 : CE 7F BC                   ldx     #32700
        2A4 : BD 01 50                   jsr     comp
        2A7 :
        2A7 : CC 7F 58                   ldd     #32600
        2AA : CE 7F BC                   ldx     #32700
        2AD : BD 01 50                   jsr     comp
        2B0 :
        2B0 : CC 80 44                   ldd     #-32700
        2B3 : CE 80 A8                   ldx     #-32600
        2B6 : BD 01 50                   jsr     comp
        2B9 :
        2B9 : CC 80 44                   ldd     #-32700
        2BC : CE 80 44                   ldx     #-32700
        2BF : BD 01 50                   jsr     comp
        2C2 :
        2C2 : CC 80 A8                   ldd     #-32600
        2C5 : CE 80 44                   ldx     #-32700
        2C8 : BD 01 50                   jsr     comp
        2CB :
        2CB : CC 46 50                   ldd     #18000
        2CE : CE 92 A0                   ldx     #-28000
        2D1 : BD 01 50                   jsr     comp
        2D4 :
        2D4 : CC 92 A0                   ldd     #-28000
        2D7 : CE 92 A0                   ldx     #-28000
        2DA : BD 01 50                   jsr     comp
        2DD :
        2DD : CC 92 A0                   ldd     #-28000
        2E0 : CE 46 50                   ldx     #18000
        2E3 : BD 01 50                   jsr     comp
        2E6 : 39                         rts
        2E7 :
        2E7 :                            include "arith.inc"
(1)     2E7 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     2E7 :                            cpu     6801
(1)     2E7 :
(1)     2E7 :                    ;;; Print signed 16-bit integer as decimal
(1)     2E7 :                    ;;; @param D value
(1)     2E7 :                    ;;; @clobber D X R0 R1 R2
(1)     2E7 :                    print_int16:
(1)     2E7 : DD 40                      std     R0
(1)     2E9 : 2A 0E                      bpl     print_uint16
(1)     2EB : 36                         psha
(1)     2EC : 86 2D                      ldaa    #'-'
(1)     2EE : BD 01 1B                   jsr     putchar
(1)     2F1 : 32                         pula
(1)     2F2 : 43                         coma
(1)     2F3 : 53                         comb
(1)     2F4 : C3 00 01                   addd    #1        ; negate value
(1)     2F7 : DD 40                      std     R0
(1)     2F9 :                    ;;; Print unsigned 16-bit integer as decimal
(1)     2F9 :                    ;;; @param R0 value
(1)     2F9 :                    ;;; @clobber D X
(1)     2F9 :                    print_uint16:
(1)     2F9 : DC 40                      ldd     R0
(1)     2FB : 27 14                      beq     print_uint16_zero
(1)     2FD :                    print_uint16_loop:
(1)     2FD : DD 42                      std     R1
(1)     2FF : 27 15                      beq     print_uint16_end ; branch if value == 0
(1)     301 : CE 00 0A                   ldx     #10
(1)     304 : DF 44                      stx     R2
(1)     306 : BD 03 5E                   jsr     udiv16          ; R0=value/10
(1)     309 : D6 43                      ldab    R1L
(1)     30B : 37                         pshb                    ; push remainder
(1)     30C : DC 40                      ldd     R0
(1)     30E : 8D ED                      bsr     print_uint16_loop
(1)     310 : 32                         pula
(1)     311 :                    print_uint16_zero:
(1)     311 : 8A 30                      oraa    #'0'
(1)     313 : 7E 01 1B                   jmp     putchar
(1)     316 :                    print_uint16_end:
(1)     316 : 39                         rts
(1)     317 :
(1)     317 :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)     317 :                    ;;; @param R1 multiplicand
(1)     317 :                    ;;; @param R2 multiplier
(1)     317 :                    ;;; @return R0 result
(1)     317 :                    ;;; @clobber R0 R1 R2
(1)     317 :                    umul16:
(1)     317 : 96 43                      ldaa    R1L
(1)     319 : D6 45                      ldab    R2L
(1)     31B : 3D                         mul                     ; low(multiplicand)*low(multiplier)
(1)     31C : DD 40                      std     R0
(1)     31E : 96 43                      ldaa    R1L
(1)     320 : D6 44                      ldab    R2H
(1)     322 : 3D                         mul                     ; low(multiplicand)*high(multiplier)
(1)     323 : DB 40                      addb    R0H
(1)     325 : D7 40                      stab    R0H
(1)     327 : 96 42                      ldaa    R1H
(1)     329 : D6 45                      ldab    R2L
(1)     32B : 3D                         mul                     ; high(multiplicand)*low(multiplier)
(1)     32C : DB 40                      addb    R0H
(1)     32E : D7 40                      stab    R0H
(1)     330 : 39                         rts
(1)     331 :
(1)     331 :                    ;;; Multiply; result = multiplicand * multiplier
(1)     331 :                    ;;; @param D multiplicand
(1)     331 :                    ;;; @param X multiplier
(1)     331 :                    ;;; @return D result
(1)     331 :                    ;;; @clobber R0 R1 R2
(1)     331 :                    mul16:
(1)     331 : DD 42                      std     R1
(1)     333 : DF 44                      stx     R2
(1)     335 : 98 44                      eora    R2H
(1)     337 : 97 46                      staa    sign            ; save hi(multiplicand^multiplier)
(1)     339 : DC 44                      ldd     R2
(1)     33B : 2A 07                      bpl     mul16_multiplicand
(1)     33D : 43                         coma
(1)     33E : 53                         comb
(1)     33F : C3 00 01                   addd    #1              ; negate multiplier
(1)     342 : DD 44                      std     R2
(1)     344 :                    mul16_multiplicand:
(1)     344 : DC 42                      ldd     R1
(1)     346 : 2A 07                      bpl     mul16_multiply
(1)     348 : 43                         coma
(1)     349 : 53                         comb
(1)     34A : C3 00 01                   addd    #1              ; negate multiplicand
(1)     34D : DD 42                      std     R1
(1)     34F :                    mul16_multiply:
(1)     34F : 8D C6                      bsr     umul16          ; R0=result
(1)     351 : DC 40                      ldd     R0
(1)     353 : 7D 00 46                   tst     sign            ; A=(multiplicand^multiplier)
(1)     356 : 2A 05                      bpl     mul16_end
(1)     358 : 43                         coma
(1)     359 : 53                         comb
(1)     35A : C3 00 01                   addd    #1              ; negate result
(1)     35D :                    mul16_end:
(1)     35D : 39                         rts
(1)     35E :
(1)     35E :                    ;;; Unsigned division: dividend / divisor = quotient ... remainder
(1)     35E :                    ;;; @praram R1 dividend
(1)     35E :                    ;;; @praram R2 divisor
(1)     35E :                    ;;; @return R0 quotient
(1)     35E :                    ;;; @return R1 remainder
(1)     35E :                    ;;; @clobber R2
(1)     35E :                    udiv16:
(1)     35E : DC 44                      ldd     R2              ; D=divisor
(1)     360 : 27 30                      beq     udiv16_end      ; branch if divisor==0
(1)     362 : CE 00 01                   ldx     #1              ; X=bits
(1)     365 : 20 02                      bra     udiv16_prep
(1)     367 :                    udiv16_prep_loop:
(1)     367 : 05                         lsld                    ; divisor <<= 1
(1)     368 : 08                         inx                     ; ++bits
(1)     369 :                    udiv16_prep:
(1)     369 : 4D                         tsta
(1)     36A : 2A FB                      bpl     udiv16_prep_loop ; while msb(divisor) == 0
(1)     36C : DD 44                      std     R2               ; update divisor
(1)     36E : DC 42                      ldd     R1               ; D=dividend
(1)     370 : 7F 00 40                   clr     R0H
(1)     373 : 7F 00 41                   clr     R0L             ; quotient=0
(1)     376 : 20 0C                      bra     udiv16_enter_loop
(1)     378 :                    udiv16_loop:
(1)     378 : 74 00 44                   lsr     R2H
(1)     37B : 76 00 45                   ror     R2L             ; divisor >>= 1
(1)     37E : 78 00 41                   lsl     R0L
(1)     381 : 79 00 40                   rol     R0H             ; quotient <<= 1
(1)     384 :                    udiv16_enter_loop:
(1)     384 : 93 44                      subd    R2              ; dividend -= divisor
(1)     386 : 25 05                      bcs     udiv16_readd
(1)     388 : 7C 00 41                   inc     R0L             ; quotient |= 1
(1)     38B : 20 02                      bra     udiv16_next
(1)     38D :                    udiv16_readd:
(1)     38D : D3 44                      addd    R2              ; dividend += divisor
(1)     38F :                    udiv16_next:
(1)     38F : 09                         dex                     ; --bits
(1)     390 : 26 E6                      bne     udiv16_loop     ; while bits != 0
(1)     392 :                    udiv16_end:
(1)     392 : DD 42                      std     R1              ; R1=remainder
(1)     394 : 39                         rts
(1)     395 :
(1)     395 :                    ;;; Division; dividend / divisor = quotient ... remainder
(1)     395 :                    ;;; @param D dividend
(1)     395 :                    ;;; @param X divisor
(1)     395 :                    ;;; @return D quotient
(1)     395 :                    ;;; @return X remainder
(1)     395 :                    ;;; @clobber R0 R1 R2
(1)     395 :                    div16:
(1)     395 : DD 42                      std     R1
(1)     397 : DF 44                      stx     R2
(1)     399 : 98 44                      eora    R2H
(1)     39B : 97 46                      staa    sign            ; save hi(dividend^divisor)
(1)     39D : DC 44                      ldd     R2
(1)     39F : 2A 07                      bpl     div16_dividend
(1)     3A1 : 43                         coma
(1)     3A2 : 53                         comb
(1)     3A3 : C3 00 01                   addd    #1              ; negate divisor
(1)     3A6 : DD 44                      std     R2
(1)     3A8 :                    div16_dividend:
(1)     3A8 : DC 42                      ldd     R1
(1)     3AA : 2A 07                      bpl     div16_divide
(1)     3AC : 43                         coma
(1)     3AD : 53                         comb
(1)     3AE : C3 00 01                   addd    #1              ; negate dividend
(1)     3B1 : DD 42                      std     R1
(1)     3B3 :                    div16_divide:
(1)     3B3 : 8D A9                      bsr     udiv16          ; R0=quotient
(1)     3B5 : DC 40                      ldd     R0
(1)     3B7 : DE 42                      ldx     R1
(1)     3B9 : 7D 00 46                   tst     sign            ; A=(dividend^divisor)
(1)     3BC : 2A 05                      bpl     div16_end
(1)     3BE : 43                         coma
(1)     3BF : 53                         comb
(1)     3C0 : C3 00 01                   addd    #1              ; negate result
(1)     3C3 :                    div16_end:
(1)     3C3 : 39                         rts
