          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     8085
          0 :                            include "i8085.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            include "i8080.inc"
(2)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :                    ;;; i8080
(2)       0 :                    ;;; FLAGS Register
(2)       0 : =80                F_SIGN:         equ     10000000B ; set to 1 if negative
(2)       0 : =40                F_ZERO:         equ     01000000B ; set to 1 if zero
(2)       0 : =10                F_HALF_CARRY:   equ     00010000B ; set to 1 if carry from bit-3
(2)       0 : =4                 F_PARITY:       equ     00000100B ; set to 1 if even parity
(2)       0 : =1                 F_CARRY:        equ     00000001B ; set to 1 if carry
(2)       0 :                    ;;; Interrupt origin
(2)       0 : =0                 ORG_RESET:      equ     0000H   ; RESET
(2)       0 : =0                 ORG_RST0:       equ     0000H   ; RST 0
(2)       0 : =8                 ORG_RST1:       equ     0008H   ; RST 1
(2)       0 : =10                ORG_RST2:       equ     0010H   ; RST 2
(2)       0 : =18                ORG_RST3:       equ     0018H   ; RST 3
(2)       0 : =20                ORG_RST4:       equ     0020H   ; RST 4
(2)       0 : =28                ORG_RST5:       equ     0028H   ; RST 5
(2)       0 : =30                ORG_RST6:       equ     0030H   ; RST 6
(2)       0 : =38                ORG_RST7:       equ     0038H   ; RST 3
(1)       0 :                    ;;; i8085
(1)       0 :                    ;;; Set Innterrupt Maske
(1)       0 : =80                SIM_SOD:        equ     10000000B ; Serial Output Data
(1)       0 : =40                SIM_SDE:        equ     01000000B ; Serial Data Enable
(1)       0 : =10                SIM_R75:        equ     00010000B ; Reset RST 7.5 latch
(1)       0 : =8                 SIM_MSE:        equ     00001000B ; Mask Set Enable
(1)       0 : =4                 SIM_M75:        equ     00000100B ; RST 7.5 Mask
(1)       0 : =2                 SIM_M65:        equ     00000010B ; RST 6.5 Mask
(1)       0 : =1                 SIM_M55:        equ     00000001B ; RST 5.5 Mask
(1)       0 :                    ;;; Read Interrupt Mask
(1)       0 : =80                RIM_SID:        equ     10000000B ; Serial Input Data
(1)       0 : =40                RIM_I75:        equ     01000000B ; RST 7.5 Pending
(1)       0 : =20                RIM_I65:        equ     00100000B ; RST 6.5 Pending
(1)       0 : =10                RIM_I55:        equ     00010000B ; RST 5.5 Pending
(1)       0 : =8                 RIM_IE:         equ     00001000B ; Interrupt Enable
(1)       0 : =4                 RIM_M75:        equ     SIM_M75
(1)       0 : =2                 RIM_M65:        equ     SIM_M65
(1)       0 : =1                 RIM_M55:        equ     SIM_M55
(1)       0 :                    ;;; Interrupt origin
(1)       0 : =24                ORG_TRAP:       equ     0024H   ; TRAP
(1)       0 : =2C                ORG_RST55:      equ     002CH   ; RST 5.5
(1)       0 : =34                ORG_RST65:      equ     0034H   ; RST 6.5
(1)       0 : =3C                ORG_RST75:      equ     003CH   ; RST 7.5
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =0                 USART:          equ     00H
          0 : =0                 USARTD:         equ     USART+0 ; Receive/Transmit data
          0 : =1                 USARTS:         equ     USART+1 ; Srtatus register
          0 : =1                 USARTC:         equ     USART+1 ; Control register
          0 : =2                 USARTRV:        equ     USART+2 ; Receive interrupt vector (ORG_*)
          0 : =3                 USARTTV:        equ     USART+3 ; Transmit interrupt vector (ORG_*)
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     11000000B
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 << MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 << MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 << MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     00100000B
(1)       0 : =10                MODE_PARITY_bm: equ     00010000B
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     00001100B
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 << MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 << MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 << MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 << MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     00000011B
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 << MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ (2 << MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ (3 << MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     10000000B   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     01000000B   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     00100000B   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     00010000B   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     00001000B   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     00000100B   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     00000010B   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     00000001B   ; Transmit enable
(1)       0 :
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     10000000B   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     01000000B   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     00100000B   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     00010000B   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     00001000B   ; Parity Error
(1)       0 : =4                 ST_TxEMPTY_bm:  equ     00000100B   ; Transmitter empty
(1)       0 : =2                 ST_RxRDY_bm:    equ     00000010B   ; Receiver ready
(1)       0 : =1                 ST_TxRDY_bm:    equ     00000001B   ; Transmitter ready
          0 :                    ;;; Async 1stop 8data x16
          0 : =4E                ASYNC_MODE:     equ     MODE_STOP1_gc|MODE_LEN8_gc|MODE_BAUD_X16
          0 :                    ;;; RTS/DTR, error reset, Rx enable, Tx enable
          0 : =37                RX_EN_TX_EN:    equ     CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm|CMD_TxEN_bm
          0 : =36                RX_EN_TX_DIS:   equ     CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm
          0 :
       2000 :                            org     2000H
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       ds      rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       ds      tx_queue_size
       2100 :
       1000 :                            org     1000H
       1000 : =1000              stack:  equ     $
       1000 :
          0 :                            org     ORG_RESET
          0 : C3 00 01                   jmp     init
          3 :
         2C :                            org     ORG_RST55
         2C : C3 B1 13                   jmp     isr_intr_rx
         2F :
         34 :                            org     ORG_RST65
         34 : C3 C6 13                   jmp     isr_intr_tx
         37 :
        100 :                            org     0100H
        100 :                    init:
        100 : 31 00 10                   lxi     sp, stack
        103 : 21 00 20                   lxi     h, rx_queue
        106 : 06 80                      mvi     b, rx_queue_size
        108 : CD 4F 13                   call    queue_init
        10B : 21 80 20                   lxi     h, tx_queue
        10E : 06 80                      mvi     b, tx_queue_size
        110 : CD 4F 13                   call    queue_init
        113 :                    init_usart:
        113 : AF                         xra     a               ; clear A
        114 : D3 01                      out     USARTC
        116 : D3 01                      out     USARTC
        118 : D3 01                      out     USARTC          ; safest way to sync mode
        11A : 3E 40                      mvi     a, CMD_IR_bm
        11C : D3 01                      out     USARTC          ; reset
        11E : 00                         nop
        11F : 00                         nop
        120 : 3E 4E                      mvi     a, ASYNC_MODE
        122 : D3 01                      out     USARTC
        124 : 00                         nop
        125 : 00                         nop
        126 : 3E 36                      mvi     a, RX_EN_TX_DIS
        128 : D3 01                      out     USARTC
        12A : 3E 2C                      mvi     a, ORG_RST55
        12C : D3 02                      out     USARTRV         ; set RxRDY interrupt vector RST 5.5
        12E : 3E 34                      mvi     a, ORG_RST65
        130 : D3 03                      out     USARTTV         ; set TxRDY interrupt vector RST 6.5
        132 :
        132 : 20                         rim
        133 : E6 FC                      ani     ~(SIM_M55|SIM_M65) ; enable RST 5.5/RST 5.6
        135 : F6 18                      ori     SIM_MSE|SIM_R75
        137 : 30                         sim
        138 : FB                         ei
        139 :
        139 :                    loop:
        139 : CD 00 10                   call    mandelbrot
        13C : CD 61 01                   call    newline
        13F : F2 39 01                   jp      loop
        142 :
        142 :                    ;;; Get character
        142 :                    ;;; @return A
        142 :                    ;;; @return CC.C 0 if no character
        142 :                    getchar:
        142 : E5                         push    h
        143 : 21 00 20                   lxi     h, rx_queue
        146 : F3                         di
        147 : CD 8D 13                   call    queue_remove
        14A : FB                         ei
        14B : E1                         pop     h
        14C : C9                         ret
        14D :
        14D :                    ;;; Put character
        14D :                    ;;; @param A
        14D :                    putchar:
        14D : F5                         push    psw
        14E : E5                         push    h
        14F : 21 80 20                   lxi     h, tx_queue
        152 :                    putchar_retry:
        152 : F3                         di
        153 : CD 65 13                   call    queue_add
        156 : FB                         ei
        157 : D2 52 01                   jnc     putchar_retry   ; branch if queue is full
        15A : E1                         pop     h
        15B : 3E 37                      mvi     a, RX_EN_TX_EN  ; enable Tx
        15D : D3 01                      out     USARTC
        15F :                    putchar_exit:
        15F : F1                         pop     psw
        160 : C9                         ret
        161 :
        161 :                    ;;; Put newline
        161 :                    ;;; @clobber A
        161 :                    newline:
        161 : 3E 0D                      mvi     A, 0DH
        163 : CD 4D 01                   call    putchar
        166 : 3E 0A                      mvi     A, 0AH
        168 : C3 4D 01                   jmp     putchar
        16B :
        16B :                    ;;; Put newline
        16B :                    ;;; @clobber A
        16B :                    putspace:
        16B : 3E 20                      mvi     A, ' '
        16D : C3 4D 01                   jmp     putchar
        170 :
        170 :                            include "mandelbrot.inc"
(1)     170 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    1000 :                            org     1000H
(1)    1000 :                    mandelbrot:
(1)    1000 : 21 32 00                   lxi     H, 50
(1)    1003 : 22 BB 11                   shld    vF              ; F=50
(1)    1006 : 21 F4 FF                   lxi     H, -12
(1)    1009 : 22 CF 11                   shld    vY              ; Y=-12
(1)    100C :                    loop_y:
(1)    100C : 21 CF FF                   lxi     H, -49
(1)    100F : 22 D1 11                   shld    vX              ; X=-49
(1)    1012 :                    loop_x:
(1)    1012 : 2A D1 11                   lhld    vX
(1)    1015 : 22 BD 11                   shld    vC              ; C=X
(1)    1018 : 21 E5 00                   lxi     H, 229
(1)    101B : 22 CD 11                   shld    tmp
(1)    101E : 01 BD 11                   lxi     B, vC
(1)    1021 : 11 CD 11                   lxi     D, tmp
(1)    1024 : CD 8D 12                   call    mulsi2          ; C=X*229
(1)    1027 : 21 64 00                   lxi     H, 100
(1)    102A : 22 CD 11                   shld    tmp
(1)    102D : CD 0E 13                   call    divsi2          ; C=X*229/100
(1)    1030 : 2A CF 11                   lhld    vY
(1)    1033 : 22 BF 11                   shld    vD              ; D=Y
(1)    1036 : 21 A0 01                   lxi     H, 416
(1)    1039 : 22 CD 11                   shld    tmp
(1)    103C : 01 BF 11                   lxi     B, vD
(1)    103F : CD 8D 12                   call    mulsi2          ; D=Y*416
(1)    1042 : 21 64 00                   lxi     H, 100
(1)    1045 : 22 CD 11                   shld    tmp
(1)    1048 : CD 0E 13                   call    divsi2          ; D=Y*416/100
(1)    104B : 2A BD 11                   lhld    vC
(1)    104E : 22 C1 11                   shld    vA              ; A=C
(1)    1051 : 2A BF 11                   lhld    vD
(1)    1054 : 22 C3 11                   shld    vB              ; B=D
(1)    1057 : 21 00 00                   lxi     H, 0
(1)    105A : 22 D3 11                   shld    vI              ; I=0
(1)    105D :
(1)    105D :                            ;; mvi     A, 'Y'
(1)    105D :                            ;; lhld    vY
(1)    105D :                            ;; call    print
(1)    105D :                            ;; mvi     A, 'X'
(1)    105D :                            ;; lhld    vX
(1)    105D :                            ;; call    print
(1)    105D :                            ;; mvi     A, 'C'
(1)    105D :                            ;; lhld    vC
(1)    105D :                            ;; call    print
(1)    105D :                            ;; mvi     A, 'D'
(1)    105D :                            ;; lhld    vD
(1)    105D :                            ;; call    print
(1)    105D :                            ;; call    newline
(1)    105D :
(1)    105D :                    loop_i:
(1)    105D : 2A C3 11                   lhld    vB
(1)    1060 : 22 C7 11                   shld    vQ              ; Q=B
(1)    1063 : 01 C7 11                   lxi     B, vQ
(1)    1066 : 11 BB 11                   lxi     D, vF
(1)    1069 : CD 0E 13                   call    divsi2          ; Q=B/F
(1)    106C : 01 C9 11                   lxi     B, vS
(1)    106F : 11 C7 11                   lxi     D, vQ
(1)    1072 : CD 18 12                   call    negsi2          ; S=-Q
(1)    1075 : 11 BB 11                   lxi     D, vF
(1)    1078 : CD 8D 12                   call    mulsi2          ; S=-Q*F
(1)    107B : 11 C3 11                   lxi     D, vB
(1)    107E : CD 27 12                   call    addsi2          ; S=B-Q*F
(1)    1081 : 2A C3 11                   lhld    vB
(1)    1084 : 22 CD 11                   shld    tmp
(1)    1087 : 01 CD 11                   lxi     B, tmp
(1)    108A : CD 8D 12                   call    mulsi2          ; tmp=B*B
(1)    108D : 2A C1 11                   lhld    vA
(1)    1090 : 22 CB 11                   shld    vT
(1)    1093 : 01 CB 11                   lxi     B, vT
(1)    1096 : 11 C1 11                   lxi     D, vA
(1)    1099 : CD 8D 12                   call    mulsi2          ; T=A*A
(1)    109C : 11 CD 11                   lxi     D, tmp
(1)    109F : CD 38 12                   call    subsi2          ; T=A*A-B*B
(1)    10A2 : 11 BB 11                   lxi     D, vF
(1)    10A5 : CD 0E 13                   call    divsi2          ; T=(A*A-B*B)/F
(1)    10A8 : 11 BD 11                   lxi     D, vC
(1)    10AB : CD 27 12                   call    addsi2          ; T=(A*A-B*B)/F+C
(1)    10AE : 2A C1 11                   lhld    vA
(1)    10B1 : 22 CD 11                   shld    tmp
(1)    10B4 : 01 CD 11                   lxi     B, tmp
(1)    10B7 : 11 C9 11                   lxi     D, vS
(1)    10BA : CD 8D 12                   call    mulsi2          ; tmp=A*S
(1)    10BD : 11 BB 11                   lxi     D, vF
(1)    10C0 : CD 0E 13                   call    divsi2          ; tmp=A*S/F
(1)    10C3 : 2A C1 11                   lhld    vA
(1)    10C6 : 22 C3 11                   shld    vB              ; B=A
(1)    10C9 : 01 C3 11                   lxi     B, vB
(1)    10CC : 11 C7 11                   lxi     D, vQ
(1)    10CF : CD 8D 12                   call    mulsi2          ; B=A*Q
(1)    10D2 : 11 CD 11                   lxi     D, tmp
(1)    10D5 : CD 27 12                   call    addsi2          ; B=A*Q+A*S/F
(1)    10D8 : 11 C3 11                   lxi     D, vB
(1)    10DB : CD 27 12                   call    addsi2          ; B=2*(A*Q+A*S/F)
(1)    10DE : 11 BF 11                   lxi     D, vD
(1)    10E1 : CD 27 12                   call    addsi2          ; B=2*(A*Q+A*S/F)+D
(1)    10E4 : 2A CB 11                   lhld    vT
(1)    10E7 : 22 C1 11                   shld    vA              ; A=T
(1)    10EA : 22 C5 11                   shld    vP              ; P=A
(1)    10ED : 01 C5 11                   lxi     B, vP
(1)    10F0 : 11 BB 11                   lxi     D, vF
(1)    10F3 : CD 0E 13                   call    divsi2          ; P=A/F
(1)    10F6 : 2A C3 11                   lhld    vB
(1)    10F9 : 22 C7 11                   shld    vQ
(1)    10FC : 01 C7 11                   lxi     B, vQ
(1)    10FF : CD 0E 13                   call    divsi2          ; Q=B/F
(1)    1102 : 2A C7 11                   lhld    vQ
(1)    1105 : 22 CD 11                   shld    tmp
(1)    1108 : 01 CD 11                   lxi     B, tmp
(1)    110B : 11 C7 11                   lxi     D, vQ
(1)    110E : CD 8D 12                   call    mulsi2          ; tmp=Q*Q
(1)    1111 : 2A C5 11                   lhld    vP
(1)    1114 : 22 CB 11                   shld    vT
(1)    1117 : 01 CB 11                   lxi     B, vT
(1)    111A : 11 C5 11                   lxi     D, vP
(1)    111D : CD 8D 12                   call    mulsi2          ; T=P*P
(1)    1120 : 11 CD 11                   lxi     D, tmp
(1)    1123 : CD 27 12                   call    addsi2          ; T=P*P+Q*Q
(1)    1126 :
(1)    1126 :                            ;; call    putspace
(1)    1126 :                            ;; mvi     A, 'I'
(1)    1126 :                            ;; lhld    vI
(1)    1126 :                            ;; call    print
(1)    1126 :                            ;; mvi     A, 'A'
(1)    1126 :                            ;; lhld    vA
(1)    1126 :                            ;; call    print
(1)    1126 :                            ;; mvi     A, 'B'
(1)    1126 :                            ;; lhld    vB
(1)    1126 :                            ;; call    print
(1)    1126 :                            ;; mvi     A, 'P'
(1)    1126 :                            ;; lhld    vP
(1)    1126 :                            ;; call    print
(1)    1126 :                            ;; mvi     A, 'Q'
(1)    1126 :                            ;; lhld    vQ
(1)    1126 :                            ;; call    print
(1)    1126 :                            ;; call    newline
(1)    1126 :
(1)    1126 : 21 04 00                   lxi     H, 4
(1)    1129 : 22 CD 11                   shld    tmp
(1)    112C : 01 CD 11                   lxi     B, tmp
(1)    112F : 11 CB 11                   lxi     D, vT
(1)    1132 : CD 49 12                   call    cmpsi2          ; 4-T
(1)    1135 : FA 56 11                   jm      print_i         ; if 4<T
(1)    1138 : 2A D3 11                   lhld    vI
(1)    113B : 23                         inx     H
(1)    113C : 22 D3 11                   shld    vI              ; I+=1
(1)    113F : 21 10 00                   lxi     H, 16
(1)    1142 : 22 CD 11                   shld    tmp
(1)    1145 : 01 D3 11                   lxi     B, vI
(1)    1148 : 11 CD 11                   lxi     D, tmp
(1)    114B : CD 49 12                   call    cmpsi2
(1)    114E : FA 5D 10                   jm      loop_i          ; if I<16
(1)    1151 : 3E 20                      mvi     A, ' '
(1)    1153 : C3 62 11                   jmp     print_char
(1)    1156 :                    print_i:
(1)    1156 : 3A D3 11                   lda     vI
(1)    1159 : FE 0A                      cpi     10
(1)    115B : DA 60 11                   jc      print_i2        ; if I<10
(1)    115E : C6 07                      adi     'A'-'0'-10
(1)    1160 :                    print_i2:
(1)    1160 : C6 30                      adi     '0'
(1)    1162 :                    print_char:     
(1)    1162 : CD 4D 01                   call    putchar
(1)    1165 :
(1)    1165 :                            ;; push    PSW
(1)    1165 :                            ;; mvi     A, '@'
(1)    1165 :                            ;; call    putchar
(1)    1165 :                            ;; mvi     A, '='
(1)    1165 :                            ;; call    putchar
(1)    1165 :                            ;; pop     PSW
(1)    1165 :                            ;; call    putchar
(1)    1165 :                            ;; call    newline
(1)    1165 :
(1)    1165 : CD 42 01                   call    getchar
(1)    1168 : D2 70 11                   jnc     next_x
(1)    116B : B7                         ora     a
(1)    116C : C2 70 11                   jnz     next_x
(1)    116F : 76                         hlt                     ; halt to system
(1)    1170 :                    next_x:
(1)    1170 : 2A D1 11                   lhld    vX
(1)    1173 : 23                         inx     H
(1)    1174 : 22 D1 11                   shld    vX              ; X+=1
(1)    1177 : 21 1E 00                   lxi     H, 30
(1)    117A : 22 CD 11                   shld    tmp
(1)    117D : 01 D1 11                   lxi     B, vX
(1)    1180 : 11 CD 11                   lxi     D, tmp
(1)    1183 : CD 49 12                   call    cmpsi2
(1)    1186 : FA 12 10                   jm      loop_x          ; if X<30
(1)    1189 : 3E 0D                      mvi     A, 0DH
(1)    118B : CD 4D 01                   call    putchar
(1)    118E : 3E 0A                      mvi     A, 0AH
(1)    1190 : CD 4D 01                   call    putchar
(1)    1193 : 2A CF 11                   lhld    vY
(1)    1196 : 23                         inx     H
(1)    1197 : 22 CF 11                   shld    vY              ; Y+=1
(1)    119A : 21 0D 00                   lxi     H, 13
(1)    119D : 22 CD 11                   shld    tmp
(1)    11A0 : 01 CF 11                   lxi     B, vY
(1)    11A3 : 11 CD 11                   lxi     D, tmp
(1)    11A6 : CD 49 12                   call    cmpsi2
(1)    11A9 : FA 0C 10                   jm      loop_y          ; if X<13
(1)    11AC : C9                         ret
(1)    11AD :
(1)    11AD :                    ;;; Print variable
(1)    11AD :                    ;;; @param A variable name
(1)    11AD :                    ;;; @param HL variable value
(1)    11AD :                    print:  
(1)    11AD : CD 4D 01                   call    putchar
(1)    11B0 : 3E 3D                      mvi     A, '='
(1)    11B2 : CD 4D 01                   call    putchar
(1)    11B5 : CD 03 12                   call    print_int16
(1)    11B8 : C3 6B 01                   jmp     putspace
(1)    11BB :
(1)    11BB :                    vF:     ds      2
(1)    11BD :                    vC:     ds      2
(1)    11BF :                    vD:     ds      2
(1)    11C1 :                    vA:     ds      2
(1)    11C3 :                    vB:     ds      2
(1)    11C5 :                    vP:     ds      2
(1)    11C7 :                    vQ:     ds      2
(1)    11C9 :                    vS:     ds      2
(1)    11CB :                    vT:     ds      2
(1)    11CD :                    tmp:    ds      2
(1)    11CF :                    vY:     ds      2
(1)    11D1 :                    vX:     ds      2
(1)    11D3 :                    vI:     ds      2
       11D5 :                            include "arith.inc"
(1)    11D5 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    11D5 :                            cpu     8085
(1)    11D5 :
(1)    11D5 :                    ;;; Print unsigned 16-bit integer as decimal
(1)    11D5 :                    ;;; @param HL: value
(1)    11D5 :                    ;;; @clobber HL
(1)    11D5 :                    print_uint16:
(1)    11D5 : F5                         push    PSW
(1)    11D6 :                    print_uint16_inner:
(1)    11D6 : C5                         push    B
(1)    11D7 : D5                         push    D
(1)    11D8 : 44                         mov     B, H
(1)    11D9 : 4D                         mov     C, L
(1)    11DA : 78                         mov     A, B
(1)    11DB : B1                         ora     C
(1)    11DC : CA FA 11                   jz      print_uint16_zero
(1)    11DF : CD E6 11                   call    print_uint16_loop
(1)    11E2 : D1                         pop     D
(1)    11E3 : C1                         pop     B
(1)    11E4 : F1                         pop     PSW
(1)    11E5 : C9                         ret
(1)    11E6 :                    print_uint16_loop:
(1)    11E6 : 78                         mov     A, B
(1)    11E7 : B1                         ora     C
(1)    11E8 : C8                         rz
(1)    11E9 : 11 0A 00                   lxi     D, 10
(1)    11EC : CD CC 12                   call    udiv16
(1)    11EF : E5                         push    H               ; push reminder
(1)    11F0 : CD E6 11                   call    print_uint16_loop
(1)    11F3 : E1                         pop     H               ; pop reminder
(1)    11F4 : 7D                         mov     A, L
(1)    11F5 : C6 30                      adi     '0'
(1)    11F7 : C3 4D 01                   jmp     putchar
(1)    11FA :                    print_uint16_zero:
(1)    11FA : 3E 30                      mvi     A, '0'
(1)    11FC : CD 4D 01                   call    putchar
(1)    11FF : D1                         pop     D
(1)    1200 : C1                         pop     B
(1)    1201 : F1                         pop     PSW
(1)    1202 : C9                         ret
(1)    1203 :
(1)    1203 :                    ;;; Print signed 16-bit integer as decimal
(1)    1203 :                    ;;; @param HL: value
(1)    1203 :                    ;;; @clobber HL
(1)    1203 :                    print_int16:
(1)    1203 : F5                         push    PSW
(1)    1204 : 7C                         mov     A, H
(1)    1205 : B7                         ora     A
(1)    1206 : F2 D6 11                   jp      print_uint16_inner
(1)    1209 : 3E 2D                      mvi     A, '-'
(1)    120B : CD 4D 01                   call    putchar
(1)    120E : 7D                         mov     A, L
(1)    120F : 2F                         cma
(1)    1210 : 6F                         mov     L, A
(1)    1211 : 7C                         mov     A, H
(1)    1212 : 2F                         cma
(1)    1213 : 67                         mov     H, A
(1)    1214 : 23                         inx     H               ; HL=-value
(1)    1215 : C3 D6 11                   jmp     print_uint16_inner
(1)    1218 :
(1)    1218 :                    ;;; Negation; result = -value
(1)    1218 :                    ;;; @param @BC: result
(1)    1218 :                    ;;; @param @DE: value
(1)    1218 :                    ;;; @clobber A
(1)    1218 :                    negsi2:
(1)    1218 : 1A                         ldax    D
(1)    1219 : 2F                         cma
(1)    121A : C6 01                      adi     1
(1)    121C : 02                         stax    B
(1)    121D : 13                         inx     D
(1)    121E : 1A                         ldax    D
(1)    121F : 2F                         cma
(1)    1220 : CE 00                      aci     0
(1)    1222 : 03                         inx     B
(1)    1223 : 02                         stax    B
(1)    1224 : 1B                         dcx     D
(1)    1225 : 0B                         dcx     B
(1)    1226 : C9                         ret
(1)    1227 :
(1)    1227 :                    ;;; Signed addition: summand += addend
(1)    1227 :                    ;;; @param @BC: summand
(1)    1227 :                    ;;; @param @DE: addend
(1)    1227 :                    ;;; @clobber A
(1)    1227 :                    addsi2:
(1)    1227 : E5                         push    H
(1)    1228 : 1A                         ldax    D
(1)    1229 : 6F                         mov     L, A
(1)    122A : 13                         inx     D
(1)    122B : 1A                         ldax    D
(1)    122C : 67                         mov     H, A
(1)    122D : 1B                         dcx     D
(1)    122E : 0A                         ldax    B
(1)    122F : 85                         add     L
(1)    1230 : 02                         stax    B
(1)    1231 : 03                         inx     B
(1)    1232 : 0A                         ldax    B
(1)    1233 : 8C                         adc     H
(1)    1234 : 02                         stax    B
(1)    1235 : 0B                         dcx     B
(1)    1236 : E1                         pop     H
(1)    1237 : C9                         ret
(1)    1238 :
(1)    1238 :                    ;;; Singed subtraction: minuend -= subtrahend
(1)    1238 :                    ;;; @param @BC: minuend
(1)    1238 :                    ;;; @param @DE: subtrahend
(1)    1238 :                    ;;; @clobber A
(1)    1238 :                    subsi2:
(1)    1238 : E5                         push    H
(1)    1239 : 1A                         ldax    D
(1)    123A : 6F                         mov     L, A
(1)    123B : 13                         inx     D
(1)    123C : 1A                         ldax    D
(1)    123D : 1B                         dcx     D
(1)    123E : 67                         mov     H, A
(1)    123F : 0A                         ldax    B
(1)    1240 : 95                         sub     L
(1)    1241 : 02                         stax    B
(1)    1242 : 03                         inx     B
(1)    1243 : 0A                         ldax    B
(1)    1244 : 9C                         sbb     H
(1)    1245 : 02                         stax    B
(1)    1246 : 0B                         dcx     B
(1)    1247 : E1                         pop     H
(1)    1248 : C9                         ret
(1)    1249 :
(1)    1249 :                    ;;; Signed comparison: minuend - subtrahend
(1)    1249 :                    ;;; @param @BC: minuend
(1)    1249 :                    ;;; @param @DE: subtrahend
(1)    1249 :                    ;;; @return PSW.Z, PSW.S
(1)    1249 :                    ;;; @clobber A
(1)    1249 :                    cmpsi2:
(1)    1249 : C5                         push    B
(1)    124A : D5                         push    D
(1)    124B : E5                         push    H
(1)    124C : 1A                         ldax    D
(1)    124D : 6F                         mov     L, A
(1)    124E : 13                         inx     D
(1)    124F : 1A                         ldax    D
(1)    1250 : 57                         mov     D, A
(1)    1251 : 5D                         mov     E, L            ; DE=@DE
(1)    1252 : 0A                         ldax    B
(1)    1253 : 6F                         mov     L, A
(1)    1254 : 03                         inx     B
(1)    1255 : 0A                         ldax    B
(1)    1256 : 47                         mov     B, A
(1)    1257 : 4D                         mov     C, L            ; BC=@BC
(1)    1258 : 79                         mov     A, C
(1)    1259 : 93                         sub     E
(1)    125A : 6F                         mov     L, A
(1)    125B : 78                         mov     A, B
(1)    125C : 9A                         sbb     D
(1)    125D : 67                         mov     H, A            ; HL=@BC-@DE
(1)    125E : B5                         ora     L
(1)    125F : CA 6B 12                   jz      cmpsi2_return   ; PSW.Z=1
(1)    1262 : 7C                         mov     A, H            ; high(@BC-@DE)
(1)    1263 : A8                         xra     B               ; high((@BC-@DE)^@BC)
(1)    1264 : 6F                         mov     L, A
(1)    1265 : 78                         mov     A, B
(1)    1266 : AA                         xra     D               ; high(@BC^@DE)
(1)    1267 : A5                         ana     L               ; overflow
(1)    1268 : AC                         xra     H               ; PSW.S=overflow^sign
(1)    1269 : F6 01                      ori     1               ; clear PSW.Z
(1)    126B :                    cmpsi2_return:
(1)    126B : E1                         pop     H
(1)    126C : D1                         pop     D
(1)    126D : C1                         pop     B
(1)    126E : C9                         ret
(1)    126F :
(1)    126F :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)    126F :                    ;;; @param BC: multiplicand
(1)    126F :                    ;;; @param DE: multiplier
(1)    126F :                    ;;; @return HL: result
(1)    126F :                    ;;; @clobber BC DE HL A
(1)    126F :                    umul16:
(1)    126F : 21 00 00                   lxi     H, 0            ; result=0
(1)    1272 : C3 87 12                   jmp     umul16_check
(1)    1275 :                    umul16_loop:
(1)    1275 : B7                         ora     A               ; clear PSW.C
(1)    1276 : 7A                         mov     A, D            ; multiplier >>= 1
(1)    1277 : 1F                         rar
(1)    1278 : 57                         mov     D, A
(1)    1279 : 7B                         mov     A, E
(1)    127A : 1F                         rar
(1)    127B : 5F                         mov     E, A
(1)    127C : D2 80 12                   jnc     umul16_next     ; if lsb(multiplier) == 0
(1)    127F : 09                         dad     B               ; result += multiplicand
(1)    1280 :                    umul16_next:
(1)    1280 : B7                         ora     A               ; clear PSW.C
(1)    1281 : 79                         mov     A, C            ; multiplicand <<= 1
(1)    1282 : 17                         ral
(1)    1283 : 4F                         mov     C, A
(1)    1284 : 78                         mov     A, B
(1)    1285 : 17                         ral
(1)    1286 : 47                         mov     B, A
(1)    1287 :                    umul16_check:
(1)    1287 : 7A                         mov     A, D
(1)    1288 : B3                         ora     E
(1)    1289 : C2 75 12                   jnz     umul16_loop     ; while multiplier != 0
(1)    128C :                    umul16_end:
(1)    128C : C9                         ret
(1)    128D :
(1)    128D :                    ;;; Signed multiplication: multiplicand *= multiplier
(1)    128D :                    ;;; @param @BC: multiplicand
(1)    128D :                    ;;; @param @DE: multiplier
(1)    128D :                    ;;; @clobber HL A
(1)    128D :                    mulsi2:
(1)    128D : C5                         push    B
(1)    128E : D5                         push    D
(1)    128F : 0A                         ldax    B
(1)    1290 : 6F                         mov     L, A
(1)    1291 : 03                         inx     B
(1)    1292 : 0A                         ldax    B
(1)    1293 : 47                         mov     B, A
(1)    1294 : 4D                         mov     C, L            ; BC=multiplicand
(1)    1295 : 60                         mov     H, B            ; H=high(multiplicand)
(1)    1296 : B7                         ora     A
(1)    1297 : F2 A0 12                   jp      mulsi2_abs_muliplicand
(1)    129A : 2F                         cma
(1)    129B : 47                         mov     B, A
(1)    129C : 79                         mov     A, C
(1)    129D : 2F                         cma
(1)    129E : 4F                         mov     C, A
(1)    129F : 03                         inx     B               ; multiplicand = -multiplicand
(1)    12A0 :                    mulsi2_abs_muliplicand:
(1)    12A0 : 1A                         ldax    D
(1)    12A1 : 6F                         mov     L, A
(1)    12A2 : 13                         inx     D
(1)    12A3 : 1A                         ldax    D
(1)    12A4 : 57                         mov     D, A
(1)    12A5 : 5D                         mov     E, L            ; DE=multiplier
(1)    12A6 : AC                         xra     H               ; H=high(multiplicand^multiplier)
(1)    12A7 : F5                         push    PSW             ; save sign
(1)    12A8 : 7A                         mov     A, D
(1)    12A9 : B7                         ora     A
(1)    12AA : F2 B3 12                   jp      mulsi2_multiply
(1)    12AD : 2F                         cma
(1)    12AE : 57                         mov     D, A
(1)    12AF : 7B                         mov     A, E
(1)    12B0 : 2F                         cma
(1)    12B1 : 5F                         mov     E, A
(1)    12B2 : 13                         inx     D               ; multiplier = -multiplier
(1)    12B3 :                    mulsi2_multiply:
(1)    12B3 : CD 6F 12                   call    umul16          ; HL = multiplicand * multiplier
(1)    12B6 : C1                         pop     B               ; B=sign
(1)    12B7 : 78                         mov     A, B
(1)    12B8 : B7                         ora     A
(1)    12B9 : F2 C3 12                   jp      mulsi2_return
(1)    12BC : 7C                         mov     A, H
(1)    12BD : 2F                         cma
(1)    12BE : 67                         mov     H, A
(1)    12BF : 7D                         mov     A, L
(1)    12C0 : 2F                         cma
(1)    12C1 : 6F                         mov     L, A
(1)    12C2 : 23                         inx     H               ; result = -result
(1)    12C3 :                    mulsi2_return:
(1)    12C3 : D1                         pop     D
(1)    12C4 : C1                         pop     B
(1)    12C5 : 7D                         mov     A, L
(1)    12C6 : 02                         stax    B
(1)    12C7 : 03                         inx     B
(1)    12C8 : 7C                         mov     A, H
(1)    12C9 : 02                         stax    B
(1)    12CA : 0B                         dcx     B               ; @BC=result
(1)    12CB : C9                         ret
(1)    12CC :
(1)    12CC :                    ;;; Unsigned division: dividend / divisor = quotient ... reminder
(1)    12CC :                    ;;; @praram BC: dividend
(1)    12CC :                    ;;; @praram DE: divisor
(1)    12CC :                    ;;; @return HL: reminder
(1)    12CC :                    ;;; @return BC: quotient
(1)    12CC :                    ;;; @clobber BC DE HL A
(1)    12CC :                    udiv16:
(1)    12CC : 7B                         mov     A, E
(1)    12CD : B2                         ora     D
(1)    12CE : C8                         rz                      ; divide by zero
(1)    12CF : 2E 01                      mvi     L, 1            ; L=bits
(1)    12D1 : C3 DC 12                   jmp     udiv16_prep
(1)    12D4 :                    udiv16_prep_loop:
(1)    12D4 : B7                         ora     A               ; clear PSW.C
(1)    12D5 : 7B                         mov     A, E            ; divisor <<= 1
(1)    12D6 : 17                         ral
(1)    12D7 : 5F                         mov     E, A
(1)    12D8 : 7A                         mov     A, D
(1)    12D9 : 17                         ral
(1)    12DA : 57                         mov     D, A
(1)    12DB : 23                         inx     H               ; ++bits
(1)    12DC :                    udiv16_prep:                    ; while msb(divisor) == 0
(1)    12DC : 7A                         mov     A, D
(1)    12DD : B7                         ora     A
(1)    12DE : F2 D4 12                   jp      udiv16_prep_loop
(1)    12E1 : 7D                         mov     A, L
(1)    12E2 : F5                         push    PSW             ; push bits
(1)    12E3 : 60                         mov     H, B
(1)    12E4 : 69                         mov     L, C            ; HL=dividend
(1)    12E5 : AF                         xra     A
(1)    12E6 : 47                         mov     B, A
(1)    12E7 : 4F                         mov     C, A            ; BC=quotient
(1)    12E8 : C3 FA 12                   jmp     udiv16_enter_loop
(1)    12EB :                    udiv16_loop:
(1)    12EB : F5                         push    PSW             ; push bits
(1)    12EC : B7                         ora     A               ; clear PSW.C
(1)    12ED : 7A                         mov     A, D            ; divisor >>= 1
(1)    12EE : 1F                         rar
(1)    12EF : 57                         mov     D, A
(1)    12F0 : 7B                         mov     A, E
(1)    12F1 : 1F                         rar
(1)    12F2 : 5F                         mov     E, A
(1)    12F3 : B7                         ora     A               ; clear PSW.C
(1)    12F4 : 79                         mov     A, C            ; quotient <<= 1
(1)    12F5 : 17                         ral
(1)    12F6 : 4F                         mov     C, A
(1)    12F7 : 78                         mov     A, B
(1)    12F8 : 17                         ral
(1)    12F9 : 47                         mov     B, A
(1)    12FA :                    udiv16_enter_loop:
(1)    12FA : 7D                         mov     A, L
(1)    12FB : 93                         sub     E
(1)    12FC : 6F                         mov     L, A
(1)    12FD : 7C                         mov     A, H
(1)    12FE : 9A                         sbb     D
(1)    12FF : 67                         mov     H, A            ; dividend -= divisor
(1)    1300 : DA 07 13                   jc      udiv16_readd    ; if dividend < 0
(1)    1303 : 03                         inx     B               ; quotient |= 1
(1)    1304 : C3 08 13                   jmp     udiv16_next    ;
(1)    1307 :                    udiv16_readd:
(1)    1307 : 19                         dad     D               ; dividend += divisor
(1)    1308 :                    udiv16_next:
(1)    1308 : F1                         pop     PSW
(1)    1309 : 3D                         dcr     A               ; --bits
(1)    130A : C2 EB 12                   jnz     udiv16_loop     ; while bits != 0
(1)    130D : C9                         ret
(1)    130E :
(1)    130E :                    ;;; Signed division: dividend *= divisor
(1)    130E :                    ;;; @param @BC: dividend
(1)    130E :                    ;;; @param @DE: divisor
(1)    130E :                    ;;; @clobber HL A
(1)    130E :                    divsi2:
(1)    130E : C5                         push    B
(1)    130F : D5                         push    D
(1)    1310 : 0A                         ldax    B
(1)    1311 : 6F                         mov     L, A
(1)    1312 : 03                         inx     B
(1)    1313 : 0A                         ldax    B
(1)    1314 : 47                         mov     B, A
(1)    1315 : 4D                         mov     C, L            ; BC=dividend
(1)    1316 : 60                         mov     H, B            ; H=high(dividend)
(1)    1317 : B7                         ora     A
(1)    1318 : F2 21 13                   jp      divsi2_abs_dividend
(1)    131B : 2F                         cma
(1)    131C : 47                         mov     B, A
(1)    131D : 79                         mov     A, C
(1)    131E : 2F                         cma
(1)    131F : 4F                         mov     C, A
(1)    1320 : 03                         inx     B               ; dividend = -dividend
(1)    1321 :                    divsi2_abs_dividend:
(1)    1321 : 1A                         ldax    D
(1)    1322 : 6F                         mov     L, A
(1)    1323 : 13                         inx     D
(1)    1324 : 1A                         ldax    D
(1)    1325 : 57                         mov     D, A
(1)    1326 : 5D                         mov     E, L            ; DE=divisor
(1)    1327 : AC                         xra     H               ; H=high(dividend^divisor)
(1)    1328 : F5                         push    PSW             ; save sign
(1)    1329 : 7A                         mov     A, D
(1)    132A : B7                         ora     A
(1)    132B : F2 34 13                   jp      divsi2_divide
(1)    132E : 2F                         cma
(1)    132F : 57                         mov     D, A
(1)    1330 : 7B                         mov     A, E
(1)    1331 : 2F                         cma
(1)    1332 : 5F                         mov     E, A
(1)    1333 : 13                         inx     D               ; divisor = -divisor
(1)    1334 :                    divsi2_divide:
(1)    1334 : CD CC 12                   call    udiv16          ; BC = dividend / divisor
(1)    1337 : 60                         mov     H, B
(1)    1338 : 69                         mov     L, C            ; HL=quotient
(1)    1339 : C1                         pop     B               ; B=sign
(1)    133A : 78                         mov     A, B
(1)    133B : B7                         ora     A
(1)    133C : F2 46 13                   jp      divsi2_return
(1)    133F : 7C                         mov     A, H
(1)    1340 : 2F                         cma
(1)    1341 : 67                         mov     H, A
(1)    1342 : 7D                         mov     A, L
(1)    1343 : 2F                         cma
(1)    1344 : 6F                         mov     L, A
(1)    1345 : 23                         inx     H               ; quotient=-quotient
(1)    1346 :                    divsi2_return:
(1)    1346 : D1                         pop     D
(1)    1347 : C1                         pop     B
(1)    1348 : 7D                         mov     A, L
(1)    1349 : 02                         stax    B
(1)    134A : 03                         inx     B
(1)    134B : 7C                         mov     A, H
(1)    134C : 02                         stax    B
(1)    134D : 0B                         dcx     B               ; @BC=result
(1)    134E : C9                         ret
       134F :                            include "queue.inc"
(1)    134F :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    134F :                    ;;; [queue] queue structure
(1)    134F : =0                 queue_len:      equ     0       ; queue length
(1)    134F : =1                 queue_size:     equ     1       ; buffer size
(1)    134F : =2                 queue_put:      equ     2       ; queue put index
(1)    134F : =3                 queue_get:      equ     3       ; queue get index
(1)    134F : =4                 queue_buf:      equ     4       ; buffer start offset
(1)    134F :
(1)    134F :                    ;;; [queue] Initialize queue
(1)    134F :                    ;;; @param HL queue work space pointer
(1)    134F :                    ;;; @param B queue work space size
(1)    134F :                    ;;; @clobber B
(1)    134F :                    queue_init:
(1)    134F : F5                         push    psw
(1)    1350 : E5                         push    h
(1)    1351 : AF                         xra     a
(1)    1352 : 77                         mov     m, a            ; queue_len
(1)    1353 : 78                         mov     a, b
(1)    1354 : DE 04                      sbi     queue_buf
(1)    1356 : 23                         inx     h
(1)    1357 : 77                         mov     m, a            ; queue_size
(1)    1358 : C6 02                      adi     2               ; for queue_put and queue_get
(1)    135A : 47                         mov     b,a
(1)    135B : AF                         xra     a
(1)    135C :                    queue_init_loop:
(1)    135C : 23                         inx     h
(1)    135D : 77                         mov     m, a
(1)    135E : 05                         dcr     b
(1)    135F : C2 5C 13                   jnz     queue_init_loop
(1)    1362 : E1                         pop     h
(1)    1363 : F1                         pop     psw
(1)    1364 : C9                         ret
(1)    1365 :
(1)    1365 :                    ;;; [queue] Add an element to queue
(1)    1365 :                    ;;; @param HL queue work space pointer
(1)    1365 :                    ;;; @param A an element
(1)    1365 :                    ;;; @return F.C 0 if queue is full
(1)    1365 :                    queue_add:
(1)    1365 : D5                         push    d
(1)    1366 : 57                         mov     d, a            ; save an element
(1)    1367 : 7E                         mov     a, m            ; queue_len
(1)    1368 : 23                         inx     h
(1)    1369 : BE                         cmp     m               ; queue_size
(1)    136A : 2B                         dcx     h
(1)    136B : 7A                         mov     a, d            ; restore an element
(1)    136C : DA 71 13                   jc      queue_add_store ; queue_len < queue_size
(1)    136F : D1                         pop     d               ; cleared carry is ensured by |jc|
(1)    1370 : C9                         ret
(1)    1371 :                    queue_add_store:
(1)    1371 : E5                         push    h
(1)    1372 : 34                         inr     m               ; queue_len++
(1)    1373 : 23                         inx     h
(1)    1374 : 23                         inx     h
(1)    1375 : 5E                         mov     e, m            ; queue_put
(1)    1376 : 16 00                      mvi     d, 0
(1)    1378 : EB                         xchg                    ; DE points queue_put
(1)    1379 : 19                         dad     d
(1)    137A : 23                         inx     h
(1)    137B : 23                         inx     h               ; offset of queue_buf
(1)    137C : 77                         mov     m, a            ; store an element
(1)    137D : EB                         xchg                    ; DE points a stored element
(1)    137E : 7E                         mov     a, m            ; queue_put
(1)    137F : 3C                         inr     a               ; queue_put++
(1)    1380 : 2B                         dcx     h
(1)    1381 : BE                         cmp     m               ; queue_size
(1)    1382 : 23                         inx     h
(1)    1383 : DA 87 13                   jc      queue_add_update ; queue_put < queue_size
(1)    1386 : AF                         xra     a                ; wrap around
(1)    1387 :                    queue_add_update:
(1)    1387 : 77                         mov     m, a            ; queue_put
(1)    1388 : 1A                         ldax    d               ; restore an element
(1)    1389 : E1                         pop     h
(1)    138A : D1                         pop     d
(1)    138B : 37                         stc                     ; set carry
(1)    138C : C9                         ret
(1)    138D :
(1)    138D :                    ;;; [queue] Remove an element from queue
(1)    138D :                    ;;; @param HL queue work space pointer
(1)    138D :                    ;;; @return A an element
(1)    138D :                    ;;; @return F.C 0 if queue is empty
(1)    138D :                    queue_remove:
(1)    138D : 7E                         mov     a, m            ; queue_len
(1)    138E : B7                         ora     a               ; clear carry
(1)    138F : C2 93 13                   jnz     queue_remove_elem ; queue_len > 0
(1)    1392 : C9                         ret                     ; carry is cleared by |ora|
(1)    1393 :                    queue_remove_elem:
(1)    1393 : D5                         push    d
(1)    1394 : E5                         push    h
(1)    1395 : 35                         dcr     m               ; queue_len--
(1)    1396 : 23                         inx     h
(1)    1397 : 23                         inx     h
(1)    1398 : 23                         inx     h
(1)    1399 : 7E                         mov     a, m            ; queue_get
(1)    139A : 5F                         mov     e, a
(1)    139B : 16 00                      mvi     d, 0
(1)    139D : EB                         xchg                    ; DE points queue_get
(1)    139E : 19                         dad     d
(1)    139F : 23                         inx     h               ; offset of queue_buf
(1)    13A0 : EB                         xchg                    ; DE points an element to read
(1)    13A1 : 3C                         inr     a               ; queue_get++
(1)    13A2 : 2B                         dcx     h
(1)    13A3 : 2B                         dcx     h
(1)    13A4 : BE                         cmp     m               ; queue_size
(1)    13A5 : 23                         inx     h
(1)    13A6 : 23                         inx     h
(1)    13A7 : DA AB 13                   jc      queue_remove_update ; queue_get < queue_size
(1)    13AA : AF                         xra     a                   ; wrap around
(1)    13AB :                    queue_remove_update:
(1)    13AB : 77                         mov     m, a            ; queue_get
(1)    13AC : 1A                         ldax    d               ; read an element
(1)    13AD : E1                         pop     h
(1)    13AE : D1                         pop     d
(1)    13AF : 37                         stc                     ; set carry
(1)    13B0 : C9                         ret
       13B1 :
       13B1 :                    isr_intr_rx:
       13B1 : F5                         push    psw
       13B2 : DB 01                      in      USARTS
       13B4 : E6 02                      ani     ST_RxRDY_bm
       13B6 : CA C3 13                   jz      isr_intr_rx_exit
       13B9 : DB 00                      in      USARTD          ; receive character
       13BB : E5                         push    h
       13BC : 21 00 20                   lxi     h, rx_queue
       13BF : CD 65 13                   call    queue_add
       13C2 : E1                         pop     h
       13C3 :                    isr_intr_rx_exit:
       13C3 : F1                         pop     psw
       13C4 : FB                         ei
       13C5 : C9                         ret
       13C6 :
       13C6 :                    isr_intr_tx:
       13C6 : F5                         push    psw
       13C7 : DB 01                      in      USARTS
       13C9 : E6 01                      ani     ST_TxRDY_bm
       13CB : CA DB 13                   jz      isr_intr_tx_exit
       13CE : E5                         push    h
       13CF : 21 80 20                   lxi     h, tx_queue
       13D2 : CD 8D 13                   call    queue_remove
       13D5 : E1                         pop     h
       13D6 : D2 DE 13                   jnc     isr_intr_send_empty
       13D9 : D3 00                      out     USARTD          ; send character
       13DB :                    isr_intr_tx_exit:
       13DB : F1                         pop     psw
       13DC : FB                         ei
       13DD : C9                         ret
       13DE :                    isr_intr_send_empty:
       13DE : 3E 36                      mvi     a, RX_EN_TX_DIS
       13E0 : D3 01                      out     USARTC          ; disable Tx
       13E2 : F1                         pop     psw
       13E3 : FB                         ei
       13E4 : C9                         ret
       13E5 :
       13E5 :                            end
