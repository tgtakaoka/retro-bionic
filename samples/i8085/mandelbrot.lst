          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     8085
          0 :                            include "i8085.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            include "i8080.inc"
(2)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :                    ;;; i8080
(2)       0 :                    ;;; FLAGS Register
(2)       0 : =80                F_SIGN:         equ     10000000B ; set to 1 if negative
(2)       0 : =40                F_ZERO:         equ     01000000B ; set to 1 if zero
(2)       0 : =10                F_HALF_CARRY:   equ     00010000B ; set to 1 if carry from bit-3
(2)       0 : =4                 F_PARITY:       equ     00000100B ; set to 1 if even parity
(2)       0 : =1                 F_CARRY:        equ     00000001B ; set to 1 if carry
(2)       0 :                    ;;; Interrupt origin
(2)       0 : =0                 ORG_RESET:      equ     0000H   ; RESET
(2)       0 : =0                 ORG_RST0:       equ     0000H   ; RST 0
(2)       0 : =8                 ORG_RST1:       equ     0008H   ; RST 1
(2)       0 : =10                ORG_RST2:       equ     0010H   ; RST 2
(2)       0 : =18                ORG_RST3:       equ     0018H   ; RST 3
(2)       0 : =20                ORG_RST4:       equ     0020H   ; RST 4
(2)       0 : =28                ORG_RST5:       equ     0028H   ; RST 5
(2)       0 : =30                ORG_RST6:       equ     0030H   ; RST 6
(2)       0 : =38                ORG_RST7:       equ     0038H   ; RST 3
(1)       0 :                    ;;; i8085
(1)       0 :                    ;;; Set Innterrupt Maske
(1)       0 : =80                SIM_SOD:        equ     10000000B ; Serial Output Data
(1)       0 : =40                SIM_SDE:        equ     01000000B ; Serial Data Enable
(1)       0 : =10                SIM_R75:        equ     00010000B ; Reset RST 7.5 latch
(1)       0 : =8                 SIM_MSE:        equ     00001000B ; Mask Set Enable
(1)       0 : =4                 SIM_M75:        equ     00000100B ; RST 7.5 Mask
(1)       0 : =2                 SIM_M65:        equ     00000010B ; RST 6.5 Mask
(1)       0 : =1                 SIM_M55:        equ     00000001B ; RST 5.5 Mask
(1)       0 :                    ;;; Read Interrupt Mask
(1)       0 : =80                RIM_SID:        equ     10000000B ; Serial Input Data
(1)       0 : =40                RIM_I75:        equ     01000000B ; RST 7.5 Pending
(1)       0 : =20                RIM_I65:        equ     00100000B ; RST 6.5 Pending
(1)       0 : =10                RIM_I55:        equ     00010000B ; RST 5.5 Pending
(1)       0 : =8                 RIM_IE:         equ     00001000B ; Interrupt Enable
(1)       0 : =4                 RIM_M75:        equ     SIM_M75
(1)       0 : =2                 RIM_M65:        equ     SIM_M65
(1)       0 : =1                 RIM_M55:        equ     SIM_M55
(1)       0 :                    ;;; Interrupt origin
(1)       0 : =24                ORG_TRAP:       equ     0024H   ; TRAP
(1)       0 : =2C                ORG_RST55:      equ     002CH   ; RST 5.5
(1)       0 : =34                ORG_RST65:      equ     0034H   ; RST 6.5
(1)       0 : =3C                ORG_RST75:      equ     003CH   ; RST 7.5
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =0                 USART:          equ     00H
          0 : =0                 USARTD:         equ     USART+0 ; Receive/Transmit data
          0 : =1                 USARTS:         equ     USART+1 ; Srtatus register
          0 : =1                 USARTC:         equ     USART+1 ; Control register
          0 : =2                 USARTRV:        equ     USART+2 ; Receive interrupt vector (ORG_*)
          0 : =3                 USARTTV:        equ     USART+3 ; Transmit interrupt vector (ORG_*)
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     11000000B
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 << MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 << MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 << MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     00100000B
(1)       0 : =10                MODE_PARITY_bm: equ     00010000B
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     00001100B
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 << MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 << MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 << MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 << MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     00000011B
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 << MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ (2 << MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ (3 << MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     10000000B   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     01000000B   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     00100000B   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     00010000B   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     00001000B   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     00000100B   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     00000010B   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     00000001B   ; Transmit enable
(1)       0 :
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     10000000B   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     01000000B   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     00100000B   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     00010000B   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     00001000B   ; Parity Error
(1)       0 : =4                 ST_TxEMPTY_bm:  equ     00000100B   ; Transmitter empty
(1)       0 : =2                 ST_RxRDY_bm:    equ     00000010B   ; Receiver ready
(1)       0 : =1                 ST_TxRDY_bm:    equ     00000001B   ; Transmitter ready
          0 :                    ;;; Async 1stop 8data x16
          0 : =4E                ASYNC_MODE:     equ     MODE_STOP1_gc|MODE_LEN8_gc|MODE_BAUD_X16
          0 :                    ;;; RTS/DTR, error reset, Rx enable, Tx enable
          0 : =37                RX_EN_TX_EN:    equ     CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm|CMD_TxEN_bm
          0 : =36                RX_EN_TX_DIS:   equ     CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm
          0 :
       2000 :                            org     2000H
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       ds      rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       ds      tx_queue_size
       2100 :
       1000 :                            org     1000H
       1000 : =1000              stack:  equ     $
       1000 :
          0 :                            org     ORG_RESET
          0 : C3 00 01                   jmp     init
          3 :
         2C :                            org     ORG_RST55
         2C : C3 5A 04                   jmp     isr_intr_rx
         2F :
         34 :                            org     ORG_RST65
         34 : C3 6F 04                   jmp     isr_intr_tx
         37 :
        100 :                            org     0100H
        100 :                    init:
        100 : 31 00 10                   lxi     sp, stack
        103 : 21 00 20                   lxi     h, rx_queue
        106 : 06 80                      mvi     b, rx_queue_size
        108 : CD F9 03                   call    queue_init
        10B : 21 80 20                   lxi     h, tx_queue
        10E : 06 80                      mvi     b, tx_queue_size
        110 : CD F9 03                   call    queue_init
        113 :                    init_usart:
        113 : AF                         xra     a               ; clear A
        114 : D3 01                      out     USARTC
        116 : D3 01                      out     USARTC
        118 : D3 01                      out     USARTC          ; safest way to sync mode
        11A : 3E 40                      mvi     a, CMD_IR_bm
        11C : D3 01                      out     USARTC          ; reset
        11E : 00                         nop
        11F : 00                         nop
        120 : 3E 4E                      mvi     a, ASYNC_MODE
        122 : D3 01                      out     USARTC
        124 : 00                         nop
        125 : 00                         nop
        126 : 3E 36                      mvi     a, RX_EN_TX_DIS
        128 : D3 01                      out     USARTC
        12A : 3E 2C                      mvi     a, ORG_RST55
        12C : D3 02                      out     USARTRV         ; set RxRDY interrupt vector RST 5.5
        12E : 3E 34                      mvi     a, ORG_RST65
        130 : D3 03                      out     USARTTV         ; set TxRDY interrupt vector RST 6.5
        132 :
        132 : 20                         rim
        133 : E6 FC                      ani     ~(SIM_M55|SIM_M65) ; enable RST 5.5/RST 5.6
        135 : F6 18                      ori     SIM_MSE|SIM_R75
        137 : 30                         sim
        138 : FB                         ei
        139 :
        139 :                    loop:
        139 : CD 80 01                   call    mandelbrot
        13C : CD 61 01                   call    newline
        13F : F2 39 01                   jp      loop
        142 :
        142 :                    ;;; Get character
        142 :                    ;;; @return A
        142 :                    ;;; @return CC.C 0 if no character
        142 :                    getchar:
        142 : E5                         push    h
        143 : 21 00 20                   lxi     h, rx_queue
        146 : F3                         di
        147 : CD 36 04                   call    queue_remove
        14A : FB                         ei
        14B : E1                         pop     h
        14C : C9                         ret
        14D :
        14D :                    ;;; Put character
        14D :                    ;;; @param A
        14D :                    putchar:
        14D : F5                         push    psw
        14E : E5                         push    h
        14F : 21 80 20                   lxi     h, tx_queue
        152 :                    putchar_retry:
        152 : F3                         di
        153 : CD 0E 04                   call    queue_add
        156 : FB                         ei
        157 : D2 52 01                   jnc     putchar_retry   ; branch if queue is full
        15A : E1                         pop     h
        15B : 3E 37                      mvi     a, RX_EN_TX_EN  ; enable Tx
        15D : D3 01                      out     USARTC
        15F :                    putchar_exit:
        15F : F1                         pop     psw
        160 : C9                         ret
        161 :
        161 :                    ;;; Put newline
        161 :                    ;;; @clobber A
        161 :                    newline:
        161 : 3E 0D                      mvi     A, 0DH
        163 : CD 4D 01                   call    putchar
        166 : 3E 0A                      mvi     A, 0AH
        168 : C3 4D 01                   jmp     putchar
        16B :
        16B :                    ;;; Put newline
        16B :                    ;;; @clobber A
        16B :                    putspace:
        16B : 3E 20                      mvi     A, ' '
        16D : C3 4D 01                   jmp     putchar
        170 :
        170 :                            include "mandelbrot.inc"
(1)     170 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     170 :
(1)     170 :                    ;;; Sign extend A into BC
(1)     170 :                    ;;; @param A 8-bit value
(1)     170 :                    ;;; @return BC 16-bit value
(1)     170 :                    sex_BC:
(1)     170 : 06 00                      mvi     B, 0
(1)     172 : 4F                         mov     C, A
(1)     173 : B7                         ora     A
(1)     174 : F0                         rp
(1)     175 : 06 FF                      mvi     B, -1
(1)     177 : C9                         ret
(1)     178 :
(1)     178 :                    ;;; Sign extend A into HL
(1)     178 :                    ;;; @param A 8-bit value
(1)     178 :                    ;;; @return HL 16-bit value
(1)     178 :                    sex_HL:
(1)     178 : 26 00                      mvi     H, 0
(1)     17A : 6F                         mov     L, A
(1)     17B : B7                         ora     A
(1)     17C : F0                         rp
(1)     17D : 26 FF                      mvi     H, -1
(1)     17F : C9                         ret
(1)     180 :
(1)     180 : =32                Fv:     equ     50
(1)     180 :                    mandelbrot:
(1)     180 : 3E F4                      mvi     A, -12
(1)     182 : 32 E1 02                   sta     vY              ; Y=-12
(1)     185 :                    loop_y:
(1)     185 : 3E CF                      mvi     A, -49
(1)     187 : 32 E3 02                   sta     vX              ; X=-49
(1)     18A :                    loop_x:
(1)     18A : 3A E3 02                   lda     vX
(1)     18D : CD 70 01                   call    sex_BC          ; BC=X
(1)     190 : 11 E5 00                   lxi     D, 229
(1)     193 : CD 61 03                   call    mul16           ; X*229
(1)     196 : 44                         mov     B, H
(1)     197 : 4D                         mov     C, L
(1)     198 : 11 64 00                   lxi     D, 100
(1)     19B : CD D0 03                   call    div16           ; X*229/100
(1)     19E : 22 D1 02                   shld    vC              ; C=X*229/200
(1)     1A1 : 22 D5 02                   shld    vA              ; A=C
(1)     1A4 : 3A E1 02                   lda     vY
(1)     1A7 : CD 70 01                   call    sex_BC          ; BC=Y
(1)     1AA : 11 A0 01                   lxi     D, 416
(1)     1AD : CD 61 03                   call    mul16           ; Y*416
(1)     1B0 : 44                         mov     B, H
(1)     1B1 : 4D                         mov     C, L
(1)     1B2 : 11 64 00                   lxi     D, 100
(1)     1B5 : CD D0 03                   call    div16           ; Y*416/100
(1)     1B8 : 22 D3 02                   shld    vD              ; D=y*416/100
(1)     1BB : 22 D7 02                   shld    vB              ; B=D
(1)     1BE : AF                         xra     A
(1)     1BF : 32 E5 02                   sta     vI              ; I=0
(1)     1C2 :
(1)     1C2 :                            ;; lda     vY
(1)     1C2 :                            ;; call    sex_HL
(1)     1C2 :                            ;; mvi     A, 'Y'
(1)     1C2 :                            ;; call    print
(1)     1C2 :                            ;; lda     vX
(1)     1C2 :                            ;; call    sex_HL
(1)     1C2 :                            ;; mvi     A, 'X'
(1)     1C2 :                            ;; call    print
(1)     1C2 :                            ;; lhld    vC
(1)     1C2 :                            ;; mvi     A, 'C'
(1)     1C2 :                            ;; call    print
(1)     1C2 :                            ;; lhld    vD
(1)     1C2 :                            ;; mvi     A, 'D'
(1)     1C2 :                            ;; call    print
(1)     1C2 :                            ;; call    newline
(1)     1C2 :
(1)     1C2 :                    loop_i:
(1)     1C2 : 2A D7 02                   lhld    vB
(1)     1C5 : 44                         mov     B, H
(1)     1C6 : 4D                         mov     C, L
(1)     1C7 : 11 32 00                   lxi     D, Fv
(1)     1CA : CD D0 03                   call    div16           ; B/F
(1)     1CD : 22 DB 02                   shld    (vQ)            ; Q=B/F
(1)     1D0 : 44                         mov     B, H
(1)     1D1 : 4D                         mov     C, L
(1)     1D2 : 11 CE FF                   lxi     D, -Fv
(1)     1D5 : CD 61 03                   call    mul16           ; -Q*F
(1)     1D8 : 54                         mov     D, H
(1)     1D9 : 5D                         mov     E, L
(1)     1DA : 2A D7 02                   lhld    vB
(1)     1DD : 19                         dad     D               ; S=B-Q*F
(1)     1DE : 22 DD 02                   shld    vS
(1)     1E1 : 2A D7 02                   lhld    vB
(1)     1E4 : 44                         mov     B, H
(1)     1E5 : 4D                         mov     C, L
(1)     1E6 : 54                         mov     D, H
(1)     1E7 : 5D                         mov     E, L
(1)     1E8 : CD 61 03                   call    mul16           ; B*B
(1)     1EB : E5                         push    H               ; push B*B
(1)     1EC : 2A D5 02                   lhld    vA
(1)     1EF : 44                         mov     B, H
(1)     1F0 : 4D                         mov     C, L
(1)     1F1 : 54                         mov     D, H
(1)     1F2 : 5D                         mov     E, L
(1)     1F3 : CD 61 03                   call    mul16           ; A*A
(1)     1F6 : D1                         pop     D               ; pop B*B
(1)     1F7 : CD 3B 03                   call    neg_DE          ; -B*B
(1)     1FA : 19                         dad     D               ; A*A-B*B
(1)     1FB : 44                         mov     B, H
(1)     1FC : 4D                         mov     C, L
(1)     1FD : 11 32 00                   lxi     D, Fv
(1)     200 : CD D0 03                   call    div16           ; (A*A-B*B)/F
(1)     203 : 54                         mov     D, H
(1)     204 : 5D                         mov     E, L
(1)     205 : 2A D1 02                   lhld    vC
(1)     208 : 19                         dad     D               ; (A*A-B*B)/F+C
(1)     209 : E5                         push    H               ; push (A*A-B*B)/F+C
(1)     20A : 2A D5 02                   lhld    vA
(1)     20D : 44                         mov     B, H
(1)     20E : 4D                         mov     C, L
(1)     20F : 2A DD 02                   lhld    vS
(1)     212 : 54                         mov     D, H
(1)     213 : 5D                         mov     E, L
(1)     214 : CD 61 03                   call    mul16           ; A*S
(1)     217 : 44                         mov     B, H
(1)     218 : 4D                         mov     C, L
(1)     219 : 11 32 00                   lxi     D, Fv
(1)     21C : CD D0 03                   call    div16           ; A*S/F
(1)     21F : E5                         push    H               ; push A*S/F
(1)     220 : 2A D5 02                   lhld    vA
(1)     223 : 44                         mov     B, H
(1)     224 : 4D                         mov     C, L
(1)     225 : 2A DB 02                   lhld    vQ
(1)     228 : 54                         mov     D, H
(1)     229 : 5D                         mov     E, L
(1)     22A : CD 61 03                   call    mul16           ; A*Q
(1)     22D : D1                         pop     D               ; pop A*S/F
(1)     22E : 19                         dad     D               ; A*Q+A*S/F
(1)     22F : 29                         dad     H               ; 2*(A*Q+A*S/F)
(1)     230 : 54                         mov     D, H
(1)     231 : 5D                         mov     E, L
(1)     232 : 2A D3 02                   lhld    vD
(1)     235 : 19                         dad     D               ; 2*(A*Q+A*S/F)+D
(1)     236 : 22 D7 02                   shld    vB              ; B=2*(A*Q+A*S/F)+D
(1)     239 : E1                         pop     H               ; pop (A*A-B*B)/F+C
(1)     23A : 22 D5 02                   shld    vA              ; A=(A*A-B*B)/F+C
(1)     23D : 44                         mov     B, H
(1)     23E : 4D                         mov     C, L
(1)     23F : 11 32 00                   lxi     D, Fv
(1)     242 : CD D0 03                   call    div16           ; A/F
(1)     245 : 22 D9 02                   shld    vP              ; P=A/F
(1)     248 : 44                         mov     B, H
(1)     249 : 4D                         mov     C, L
(1)     24A : 54                         mov     D, H
(1)     24B : 5D                         mov     E, L
(1)     24C : CD 61 03                   call    mul16           ; P*P
(1)     24F : E5                         push    H               ; push P*P
(1)     250 : 2A D7 02                   lhld    vB
(1)     253 : 44                         mov     B, H
(1)     254 : 4D                         mov     C, L
(1)     255 : 11 32 00                   lxi     D, Fv
(1)     258 : CD D0 03                   call    div16           ; B/F
(1)     25B : 22 DB 02                   shld    vQ              ; Q=B/F
(1)     25E : 44                         mov     B, H
(1)     25F : 4D                         mov     C, L
(1)     260 : 54                         mov     D, H
(1)     261 : 5D                         mov     E, L
(1)     262 : CD 61 03                   call    mul16           ; Q*Q
(1)     265 : D1                         pop     D               ; pop P*P
(1)     266 : 19                         dad     D               ; P*P+Q*Q
(1)     267 : 22 DF 02                   shld    vT              ; T=P*P+Q*Q
(1)     26A :
(1)     26A :                            ;; call    putspace
(1)     26A :                            ;; lda     vI
(1)     26A :                            ;; call    sex_HL
(1)     26A :                            ;; mvi     A, 'I'
(1)     26A :                            ;; call    print
(1)     26A :                            ;; lhld    vA
(1)     26A :                            ;; mvi     A, 'A'
(1)     26A :                            ;; call    print
(1)     26A :                            ;; lhld    vB
(1)     26A :                            ;; mvi     A, 'B'
(1)     26A :                            ;; call    print
(1)     26A :                            ;; lhld    vP
(1)     26A :                            ;; mvi     A, 'P'
(1)     26A :                            ;; call    print
(1)     26A :                            ;; lhld    vQ
(1)     26A :                            ;; mvi     A, 'Q'
(1)     26A :                            ;; call    print
(1)     26A :                            ;; lhld    vT
(1)     26A :                            ;; mvi     A, 'T'
(1)     26A :                            ;; call    print
(1)     26A :                            ;; call    newline
(1)     26A :
(1)     26A : 3A E0 02                   lda     vT+1
(1)     26D : C2 89 02                   jnz     print_i         ; if T>=256
(1)     270 : 3A DF 02                   lda     vT
(1)     273 : FE 05                      cpi     4+1
(1)     275 : D2 89 02                   jnc     print_i         ; if 4<T
(1)     278 : 3A E5 02                   lda     vI
(1)     27B : 3C                         inr     A
(1)     27C : 32 E5 02                   sta     vI              ; I+=1
(1)     27F : FE 10                      cpi     16
(1)     281 : DA C2 01                   jc      loop_i          ; if I<16
(1)     284 : 3E 20                      mvi     A, ' '
(1)     286 : C3 95 02                   jmp     print_char
(1)     289 :                    print_i:
(1)     289 : 3A E5 02                   lda     vI
(1)     28C : FE 0A                      cpi     10
(1)     28E : DA 93 02                   jc      print_i2        ; if I<10
(1)     291 : C6 07                      adi     'A'-'0'-10
(1)     293 :                    print_i2:
(1)     293 : C6 30                      adi     '0'
(1)     295 :                    print_char:
(1)     295 : CD 4D 01                   call    putchar
(1)     298 :
(1)     298 :                            ;; push    PSW
(1)     298 :                            ;; mvi     A, '@'
(1)     298 :                            ;; call    putchar
(1)     298 :                            ;; mvi     A, '='
(1)     298 :                            ;; call    putchar
(1)     298 :                            ;; pop     PSW
(1)     298 :                            ;; call    putchar
(1)     298 :                            ;; call    newline
(1)     298 :
(1)     298 : CD 42 01                   call    getchar
(1)     29B : D2 A3 02                   jnc     next_x
(1)     29E : B7                         ora     a
(1)     29F : C2 A3 02                   jnz     next_x
(1)     2A2 : 76                         hlt                     ; halt to system
(1)     2A3 :                    next_x:
(1)     2A3 : 21 E3 02                   lxi     H, vX           ; X+=1
(1)     2A6 : 34                         inr     M
(1)     2A7 : 7E                         mov     A, M
(1)     2A8 : B7                         ora     A
(1)     2A9 : FA 8A 01                   jm      loop_x          ; if X<0
(1)     2AC : FE 1E                      cpi     30
(1)     2AE : DA 8A 01                   jc      loop_x          ; if X<30
(1)     2B1 : CD 61 01                   call    newline
(1)     2B4 : 21 E1 02                   lxi     H, vY
(1)     2B7 : 34                         inr     M               ; Y+=1
(1)     2B8 : 7E                         mov     A, M
(1)     2B9 : B7                         ora     A
(1)     2BA : FA 85 01                   jm      loop_y          ; if Y<0
(1)     2BD : FE 0D                      cpi     13
(1)     2BF : DA 85 01                   jc      loop_y          ; if X<13
(1)     2C2 : C9                         ret
(1)     2C3 :
(1)     2C3 :                    ;;; Print variable
(1)     2C3 :                    ;;; @param A variable name
(1)     2C3 :                    ;;; @param HL variable value
(1)     2C3 :                    print:
(1)     2C3 : CD 4D 01                   call    putchar
(1)     2C6 : 3E 3D                      mvi     A, '='
(1)     2C8 : CD 4D 01                   call    putchar
(1)     2CB : CD E7 02                   call    print_int16
(1)     2CE : C3 6B 01                   jmp     putspace
(1)     2D1 :
(1)     2D1 :                    ;;; workspace
(1)     2D1 :                    vC:     ds      2
(1)     2D3 :                    vD:     ds      2
(1)     2D5 :                    vA:     ds      2
(1)     2D7 :                    vB:     ds      2
(1)     2D9 :                    vP:     ds      2
(1)     2DB :                    vQ:     ds      2
(1)     2DD :                    vS:     ds      2
(1)     2DF :                    vT:     ds      2
(1)     2E1 :                    vY:     ds      2
(1)     2E3 :                    vX:     ds      2
(1)     2E5 :                    vI:     ds      2
        2E7 :                            include "arith.inc"
(1)     2E7 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     2E7 :                            cpu     8085
(1)     2E7 :
(1)     2E7 :                    ;;; Print signed 16-bit integer as decimal
(1)     2E7 :                    ;;; @param HL value
(1)     2E7 :                    ;;; @clobber A HL
(1)     2E7 :                    print_int16:
(1)     2E7 : 7C                         mov     A, H
(1)     2E8 : B5                         ora     L
(1)     2E9 : CA 1B 03                   jz      print_uint16_zero
(1)     2EC : 7C                         mov     A, H
(1)     2ED : B7                         ora     A
(1)     2EE : F2 FD 02                   jp      print_uint16
(1)     2F1 : 3E 2D                      mvi     A, '-'
(1)     2F3 : CD 4D 01                   call    putchar
(1)     2F6 : 7D                         mov     A, L
(1)     2F7 : 2F                         cma
(1)     2F8 : 6F                         mov     L, A
(1)     2F9 : 7C                         mov     A, H
(1)     2FA : 2F                         cma
(1)     2FB : 67                         mov     H, A
(1)     2FC : 23                         inx     H               ; HL=-value
(1)     2FD :                    print_uint16:
(1)     2FD : C5                         push    B
(1)     2FE : D5                         push    D
(1)     2FF : CD 05 03                   call    print_uint16_loop
(1)     302 : D1                         pop     D
(1)     303 : C1                         pop     B
(1)     304 : C9                         ret
(1)     305 :                    print_uint16_loop:
(1)     305 : 7C                         mov     A, H
(1)     306 : B5                         ora     L
(1)     307 : C8                         rz
(1)     308 : 44                         mov     B, H
(1)     309 : 4D                         mov     C, L
(1)     30A : 11 0A 00                   lxi     D, 10
(1)     30D : CD 8A 03                   call    udiv16          ; BC/DE = HL...BC
(1)     310 : C5                         push    B               ; push remainder
(1)     311 : CD 05 03                   call    print_uint16_loop
(1)     314 : E1                         pop     H               ; pop remainder
(1)     315 : 7D                         mov     A, L
(1)     316 : C6 30                      adi     '0'
(1)     318 : C3 4D 01                   jmp     putchar
(1)     31B :                    print_uint16_zero:
(1)     31B : 3E 30                      mvi     A, '0'
(1)     31D : C3 4D 01                   jmp     putchar
(1)     320 :
(1)     320 :                    ;;; Signed comparison; minuend - subtrahend
(1)     320 :                    ;;; @param BC minuend
(1)     320 :                    ;;; @param DE subtrahend
(1)     320 :                    ;;; @return PSW.Z, PSW.S
(1)     320 :                    ;;; @clobber A
(1)     320 :                    cmp16:
(1)     320 : C5                         push    B
(1)     321 : D5                         push    D
(1)     322 : E5                         push    H
(1)     323 : 1A                         ldax    D
(1)     324 : 79                         mov     A, C
(1)     325 : 93                         sub     E
(1)     326 : 6F                         mov     L, A
(1)     327 : 78                         mov     A, B
(1)     328 : 9A                         sbb     D
(1)     329 : 67                         mov     H, A            ; HL=minuend-subtrahend
(1)     32A : B5                         ora     L
(1)     32B : CA 37 03                   jz      cmp16_return    ; PSW.Z=1
(1)     32E : 7C                         mov     A, H            ; high(minuend-subtrahend)
(1)     32F : A8                         xra     B               ; high(minuend-subtrahend)^minuend
(1)     330 : 6F                         mov     L, A
(1)     331 : 78                         mov     A, B
(1)     332 : AA                         xra     D               ; high(minuend^subtrahend)
(1)     333 : A5                         ana     L               ; overflow
(1)     334 : AC                         xra     H               ; PSW.S=overflow^sign
(1)     335 : F6 01                      ori     1               ; clear PSW.Z
(1)     337 :                    cmp16_return:
(1)     337 : E1                         pop     H
(1)     338 : D1                         pop     D
(1)     339 : C1                         pop     B
(1)     33A : C9                         ret
(1)     33B :
(1)     33B :                    ;;; Negate; v
(1)     33B :                    ;;; @param DE v
(1)     33B :                    ;;; @return DE -v
(1)     33B :                    ;;; @clobber A
(1)     33B :                    neg_DE:
(1)     33B : 7A                         mov     A, D
(1)     33C : 2F                         cma
(1)     33D : 57                         mov     D, A
(1)     33E : 7B                         mov     A, E
(1)     33F : 2F                         cma
(1)     340 : 5F                         mov     E, A
(1)     341 : 13                         inx     D
(1)     342 : C9                         ret
(1)     343 :
(1)     343 :                    ;;; Unsigned multiplication; result = multiplicand * multiplier
(1)     343 :                    ;;; @param BC multiplicand
(1)     343 :                    ;;; @param DE multiplier
(1)     343 :                    ;;; @return HL result
(1)     343 :                    ;;; @clobber BC DE HL A
(1)     343 :                    umul16:
(1)     343 : 21 00 00                   lxi     H, 0            ; result=0
(1)     346 : C3 5B 03                   jmp     umul16_check
(1)     349 :                    umul16_loop:
(1)     349 : B7                         ora     A               ; clear PSW.C
(1)     34A : 7A                         mov     A, D            ; multiplier >>= 1
(1)     34B : 1F                         rar
(1)     34C : 57                         mov     D, A
(1)     34D : 7B                         mov     A, E
(1)     34E : 1F                         rar
(1)     34F : 5F                         mov     E, A
(1)     350 : D2 54 03                   jnc     umul16_next     ; if lsb(multiplier) == 0
(1)     353 : 09                         dad     B               ; result += multiplicand
(1)     354 :                    umul16_next:
(1)     354 : B7                         ora     A               ; clear PSW.C
(1)     355 : 79                         mov     A, C            ; multiplicand <<= 1
(1)     356 : 17                         ral
(1)     357 : 4F                         mov     C, A
(1)     358 : 78                         mov     A, B
(1)     359 : 17                         ral
(1)     35A : 47                         mov     B, A
(1)     35B :                    umul16_check:
(1)     35B : 7A                         mov     A, D
(1)     35C : B3                         ora     E
(1)     35D : C2 49 03                   jnz     umul16_loop     ; while multiplier != 0
(1)     360 :                    umul16_end:
(1)     360 : C9                         ret
(1)     361 :
(1)     361 :                    ;;; Signed multiplication; result =multiplicand * multiplier
(1)     361 :                    ;;; @param BC multiplicand
(1)     361 :                    ;;; @param DE multiplier
(1)     361 :                    ;;; @return HL result
(1)     361 :                    ;;; @clobber A BC DE
(1)     361 :                    mul16:
(1)     361 : 78                         mov     A, B
(1)     362 : AA                         xra     D
(1)     363 : F5                         push    PSW             ; save high(multiplicand^multiplier)
(1)     364 : 78                         mov     A, B
(1)     365 : B7                         ora     A
(1)     366 : F2 6F 03                   jp      mul16_abs_muliplicand
(1)     369 : 2F                         cma
(1)     36A : 47                         mov     B, A
(1)     36B : 79                         mov     A, C
(1)     36C : 2F                         cma
(1)     36D : 4F                         mov     C, A
(1)     36E : 03                         inx     B               ; multiplicand = -multiplicand
(1)     36F :                    mul16_abs_muliplicand:
(1)     36F : 7A                         mov     A, D
(1)     370 : B7                         ora     A
(1)     371 : F2 7A 03                   jp      mul16_multiply
(1)     374 : 2F                         cma
(1)     375 : 57                         mov     D, A
(1)     376 : 7B                         mov     A, E
(1)     377 : 2F                         cma
(1)     378 : 5F                         mov     E, A
(1)     379 : 13                         inx     D               ; multiplier = -multiplier
(1)     37A :                    mul16_multiply:
(1)     37A : CD 43 03                   call    umul16          ; HL = multiplicand * multiplier
(1)     37D : F1                         pop     PSW             ; save high(multiplicand^multiplier)
(1)     37E : B7                         ora     A
(1)     37F : F2 89 03                   jp      mul16_return
(1)     382 : 7C                         mov     A, H
(1)     383 : 2F                         cma
(1)     384 : 67                         mov     H, A
(1)     385 : 7D                         mov     A, L
(1)     386 : 2F                         cma
(1)     387 : 6F                         mov     L, A
(1)     388 : 23                         inx     H               ; result = -result
(1)     389 :                    mul16_return:
(1)     389 : C9                         ret
(1)     38A :
(1)     38A :                    ;;; Unsigned division; dividend / divisor = quotient ... remainder
(1)     38A :                    ;;; @praram BC dividend
(1)     38A :                    ;;; @praram DE divisor
(1)     38A :                    ;;; @return BC remainder
(1)     38A :                    ;;; @return HL quotient
(1)     38A :                    ;;; @clobber A DE
(1)     38A :                    udiv16:
(1)     38A : 7A                         mov     A, D
(1)     38B : B3                         ora     E
(1)     38C : C8                         rz                      ; divide by zero
(1)     38D : 2E 01                      mvi     L, 1            ; L=bits
(1)     38F : C3 9A 03                   jmp     udiv16_prep
(1)     392 :                    udiv16_prep_loop:
(1)     392 : B7                         ora     A               ; clear PSW.C
(1)     393 : 7B                         mov     A, E            ; divisor <<= 1
(1)     394 : 17                         ral
(1)     395 : 5F                         mov     E, A
(1)     396 : 7A                         mov     A, D
(1)     397 : 17                         ral
(1)     398 : 57                         mov     D, A
(1)     399 : 2C                         inr     L               ; ++bits
(1)     39A :                    udiv16_prep:                    ; while msb(divisor) == 0
(1)     39A : 7A                         mov     A, D
(1)     39B : B7                         ora     A
(1)     39C : F2 92 03                   jp      udiv16_prep_loop
(1)     39F : 7D                         mov     A, L
(1)     3A0 : F5                         push    PSW             ; push bits
(1)     3A1 : 60                         mov     H, B
(1)     3A2 : 69                         mov     L, C            ; HL=dividend
(1)     3A3 : AF                         xra     A
(1)     3A4 : 47                         mov     B, A
(1)     3A5 : 4F                         mov     C, A            ; BC=quotient
(1)     3A6 : C3 B8 03                   jmp     udiv16_enter_loop
(1)     3A9 :                    udiv16_loop:
(1)     3A9 : F5                         push    PSW             ; push bits
(1)     3AA : B7                         ora     A               ; clear PSW.C
(1)     3AB : 7A                         mov     A, D            ; divisor >>= 1
(1)     3AC : 1F                         rar
(1)     3AD : 57                         mov     D, A
(1)     3AE : 7B                         mov     A, E
(1)     3AF : 1F                         rar
(1)     3B0 : 5F                         mov     E, A
(1)     3B1 : B7                         ora     A               ; clear PSW.C
(1)     3B2 : 79                         mov     A, C            ; quotient <<= 1
(1)     3B3 : 17                         ral
(1)     3B4 : 4F                         mov     C, A
(1)     3B5 : 78                         mov     A, B
(1)     3B6 : 17                         ral
(1)     3B7 : 47                         mov     B, A
(1)     3B8 :                    udiv16_enter_loop:
(1)     3B8 : 7D                         mov     A, L
(1)     3B9 : 93                         sub     E
(1)     3BA : 6F                         mov     L, A
(1)     3BB : 7C                         mov     A, H
(1)     3BC : 9A                         sbb     D
(1)     3BD : 67                         mov     H, A            ; dividend -= divisor
(1)     3BE : DA C5 03                   jc      udiv16_readd    ; if dividend < 0
(1)     3C1 : 03                         inx     B               ; quotient |= 1
(1)     3C2 : C3 C6 03                   jmp     udiv16_next    ;
(1)     3C5 :                    udiv16_readd:
(1)     3C5 : 19                         dad     D               ; dividend += divisor
(1)     3C6 :                    udiv16_next:
(1)     3C6 : F1                         pop     PSW
(1)     3C7 : 3D                         dcr     A               ; --bits
(1)     3C8 : C2 A9 03                   jnz     udiv16_loop     ; while bits != 0
(1)     3CB : E5                         push    H               ; remainder
(1)     3CC : C5                         push    B               ; quotient
(1)     3CD : E1                         pop     H
(1)     3CE : C1                         pop     B
(1)     3CF : C9                         ret
(1)     3D0 :
(1)     3D0 :                    ;;; Signed division; dividend / divisor = quotient ... remainder
(1)     3D0 :                    ;;; @param BC dividend
(1)     3D0 :                    ;;; @param DE divisor
(1)     3D0 :                    ;;; @return BC remainder
(1)     3D0 :                    ;;; @return HL quotient
(1)     3D0 :                    ;;; @clobber A DE
(1)     3D0 :                    div16:
(1)     3D0 : 78                         mov     A, B
(1)     3D1 : AA                         xra     D
(1)     3D2 : F5                         push    PSW             ; save high(dividend^divisor)
(1)     3D3 : 78                         mov     A, B            ; H=high(dividend)
(1)     3D4 : B7                         ora     A
(1)     3D5 : F2 DE 03                   jp      div16_abs_dividend
(1)     3D8 : 2F                         cma
(1)     3D9 : 47                         mov     B, A
(1)     3DA : 79                         mov     A, C
(1)     3DB : 2F                         cma
(1)     3DC : 4F                         mov     C, A
(1)     3DD : 03                         inx     B               ; dividend = -dividend
(1)     3DE :                    div16_abs_dividend:
(1)     3DE : 7A                         mov     A, D
(1)     3DF : B7                         ora     A
(1)     3E0 : F2 E9 03                   jp      div16_divide
(1)     3E3 : 2F                         cma
(1)     3E4 : 57                         mov     D, A
(1)     3E5 : 7B                         mov     A, E
(1)     3E6 : 2F                         cma
(1)     3E7 : 5F                         mov     E, A
(1)     3E8 : 13                         inx     D               ; divisor = -divisor
(1)     3E9 :                    div16_divide:
(1)     3E9 : CD 8A 03                   call    udiv16          ; HL=quotient, BC=remainder
(1)     3EC : F1                         pop     PSW             ; A=high(dividend^divisor)
(1)     3ED : B7                         ora     A
(1)     3EE : F2 F8 03                   jp      div16_return
(1)     3F1 : 7C                         mov     A, H
(1)     3F2 : 2F                         cma
(1)     3F3 : 67                         mov     H, A
(1)     3F4 : 7D                         mov     A, L
(1)     3F5 : 2F                         cma
(1)     3F6 : 6F                         mov     L, A
(1)     3F7 : 23                         inx     H               ; quotient=-quotient
(1)     3F8 :                    div16_return:
(1)     3F8 : C9                         ret
        3F9 :                            include "queue.inc"
(1)     3F9 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     3F9 :                    ;;; [queue] queue structure
(1)     3F9 : =0                 queue_len:      equ     0       ; queue length
(1)     3F9 : =1                 queue_size:     equ     1       ; buffer size
(1)     3F9 : =2                 queue_put:      equ     2       ; queue put index
(1)     3F9 : =3                 queue_get:      equ     3       ; queue get index
(1)     3F9 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     3F9 :
(1)     3F9 :                    ;;; [queue] Initialize queue
(1)     3F9 :                    ;;; @param HL queue work space pointer
(1)     3F9 :                    ;;; @param B queue work space size
(1)     3F9 :                    ;;; @clobber B
(1)     3F9 :                    queue_init:
(1)     3F9 : F5                         push    psw
(1)     3FA : E5                         push    h
(1)     3FB : AF                         xra     a
(1)     3FC : 36 00                      mvi     m, 0            ; queue_len
(1)     3FE : DE 04                      sbi     queue_buf
(1)     400 : 23                         inx     h
(1)     401 : 77                         mov     m, a            ; queue_size
(1)     402 : C6 02                      adi     2               ; for queue_put and queue_get
(1)     404 :                    queue_init_loop:
(1)     404 : 23                         inx     h
(1)     405 : 36 00                      mvi     m, 0
(1)     407 : 05                         dcr     b
(1)     408 : C2 04 04                   jnz     queue_init_loop
(1)     40B : E1                         pop     h
(1)     40C : F1                         pop     psw
(1)     40D : C9                         ret
(1)     40E :
(1)     40E :                    ;;; [queue] Add an element to queue
(1)     40E :                    ;;; @param HL queue work space pointer
(1)     40E :                    ;;; @param A an element
(1)     40E :                    ;;; @return F.C 0 if queue is full
(1)     40E :                    queue_add:
(1)     40E : D5                         push    d
(1)     40F : 57                         mov     d, a            ; save an element
(1)     410 : 7E                         mov     a, m            ; queue_len
(1)     411 : 23                         inx     h
(1)     412 : BE                         cmp     m               ; queue_size
(1)     413 : 2B                         dcx     h
(1)     414 : 7A                         mov     a, d            ; restore an element
(1)     415 : DA 1A 04                   jc      queue_add_store ; queue_len < queue_size
(1)     418 : D1                         pop     d               ; cleared carry is ensured by |jc|
(1)     419 : C9                         ret
(1)     41A :                    queue_add_store:
(1)     41A : E5                         push    h
(1)     41B : 34                         inr     m               ; queue_len++
(1)     41C : 23                         inx     h
(1)     41D : 23                         inx     h
(1)     41E : 5E                         mov     e, m            ; queue_put
(1)     41F : 16 00                      mvi     d, 0
(1)     421 : EB                         xchg                    ; DE points queue_put
(1)     422 : 19                         dad     d
(1)     423 : 23                         inx     h
(1)     424 : 23                         inx     h               ; offset of queue_buf
(1)     425 : 77                         mov     m, a            ; store an element
(1)     426 : EB                         xchg                    ; DE points a stored element
(1)     427 : 7E                         mov     a, m            ; queue_put
(1)     428 : 3C                         inr     a               ; queue_put++
(1)     429 : 2B                         dcx     h
(1)     42A : BE                         cmp     m               ; queue_size
(1)     42B : 23                         inx     h
(1)     42C : DA 30 04                   jc      queue_add_update ; queue_put < queue_size
(1)     42F : AF                         xra     a                ; wrap around
(1)     430 :                    queue_add_update:
(1)     430 : 77                         mov     m, a            ; queue_put
(1)     431 : 1A                         ldax    d               ; restore an element
(1)     432 : E1                         pop     h
(1)     433 : D1                         pop     d
(1)     434 : 37                         stc                     ; set carry
(1)     435 : C9                         ret
(1)     436 :
(1)     436 :                    ;;; [queue] Remove an element from queue
(1)     436 :                    ;;; @param HL queue work space pointer
(1)     436 :                    ;;; @return A an element
(1)     436 :                    ;;; @return F.C 0 if queue is empty
(1)     436 :                    queue_remove:
(1)     436 : 7E                         mov     a, m            ; queue_len
(1)     437 : B7                         ora     a               ; clear carry
(1)     438 : C2 3C 04                   jnz     queue_remove_elem ; queue_len > 0
(1)     43B : C9                         ret                     ; carry is cleared by |ora|
(1)     43C :                    queue_remove_elem:
(1)     43C : D5                         push    d
(1)     43D : E5                         push    h
(1)     43E : 35                         dcr     m               ; queue_len--
(1)     43F : 23                         inx     h
(1)     440 : 23                         inx     h
(1)     441 : 23                         inx     h
(1)     442 : 7E                         mov     a, m            ; queue_get
(1)     443 : 5F                         mov     e, a
(1)     444 : 16 00                      mvi     d, 0
(1)     446 : EB                         xchg                    ; DE points queue_get
(1)     447 : 19                         dad     d
(1)     448 : 23                         inx     h               ; offset of queue_buf
(1)     449 : EB                         xchg                    ; DE points an element to read
(1)     44A : 3C                         inr     a               ; queue_get++
(1)     44B : 2B                         dcx     h
(1)     44C : 2B                         dcx     h
(1)     44D : BE                         cmp     m               ; queue_size
(1)     44E : 23                         inx     h
(1)     44F : 23                         inx     h
(1)     450 : DA 54 04                   jc      queue_remove_update ; queue_get < queue_size
(1)     453 : AF                         xra     a                   ; wrap around
(1)     454 :                    queue_remove_update:
(1)     454 : 77                         mov     m, a            ; queue_get
(1)     455 : 1A                         ldax    d               ; read an element
(1)     456 : E1                         pop     h
(1)     457 : D1                         pop     d
(1)     458 : 37                         stc                     ; set carry
(1)     459 : C9                         ret
        45A :
        45A :                    isr_intr_rx:
        45A : F5                         push    psw
        45B : DB 01                      in      USARTS
        45D : E6 02                      ani     ST_RxRDY_bm
        45F : CA 6C 04                   jz      isr_intr_rx_exit
        462 : DB 00                      in      USARTD          ; receive character
        464 : E5                         push    h
        465 : 21 00 20                   lxi     h, rx_queue
        468 : CD 0E 04                   call    queue_add
        46B : E1                         pop     h
        46C :                    isr_intr_rx_exit:
        46C : F1                         pop     psw
        46D : FB                         ei
        46E : C9                         ret
        46F :
        46F :                    isr_intr_tx:
        46F : F5                         push    psw
        470 : DB 01                      in      USARTS
        472 : E6 01                      ani     ST_TxRDY_bm
        474 : CA 84 04                   jz      isr_intr_tx_exit
        477 : E5                         push    h
        478 : 21 80 20                   lxi     h, tx_queue
        47B : CD 36 04                   call    queue_remove
        47E : E1                         pop     h
        47F : D2 87 04                   jnc     isr_intr_send_empty
        482 : D3 00                      out     USARTD          ; send character
        484 :                    isr_intr_tx_exit:
        484 : F1                         pop     psw
        485 : FB                         ei
        486 : C9                         ret
        487 :                    isr_intr_send_empty:
        487 : 3E 36                      mvi     a, RX_EN_TX_DIS
        489 : D3 01                      out     USARTC          ; disable Tx
        48B : F1                         pop     psw
        48C : FB                         ei
        48D : C9                         ret
        48E :
        48E :                            end
