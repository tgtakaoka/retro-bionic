          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     8085
          0 :                            include "i8085.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            include "i8080.inc"
(2)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :                    ;;; i8080
(2)       0 :                    ;;; FLAGS Register
(2)       0 : =80                F_SIGN:         equ     10000000B ; set to 1 if negative
(2)       0 : =40                F_ZERO:         equ     01000000B ; set to 1 if zero
(2)       0 : =10                F_HALF_CARRY:   equ     00010000B ; set to 1 if carry from bit-3
(2)       0 : =4                 F_PARITY:       equ     00000100B ; set to 1 if even parity
(2)       0 : =1                 F_CARRY:        equ     00000001B ; set to 1 if carry
(2)       0 :                    ;;; Interrupt origin
(2)       0 : =0                 ORG_RESET:      equ     0000H   ; RESET
(2)       0 : =0                 ORG_RST0:       equ     0000H   ; RST 0
(2)       0 : =8                 ORG_RST1:       equ     0008H   ; RST 1
(2)       0 : =10                ORG_RST2:       equ     0010H   ; RST 2
(2)       0 : =18                ORG_RST3:       equ     0018H   ; RST 3
(2)       0 : =20                ORG_RST4:       equ     0020H   ; RST 4
(2)       0 : =28                ORG_RST5:       equ     0028H   ; RST 5
(2)       0 : =30                ORG_RST6:       equ     0030H   ; RST 6
(2)       0 : =38                ORG_RST7:       equ     0038H   ; RST 3
(1)       0 :                    ;;; i8085
(1)       0 :                    ;;; Set Innterrupt Maske
(1)       0 : =80                SIM_SOD:        equ     10000000B ; Serial Output Data
(1)       0 : =40                SIM_SDE:        equ     01000000B ; Serial Data Enable
(1)       0 : =10                SIM_R75:        equ     00010000B ; Reset RST 7.5 latch
(1)       0 : =8                 SIM_MSE:        equ     00001000B ; Mask Set Enable
(1)       0 : =4                 SIM_M75:        equ     00000100B ; RST 7.5 Mask
(1)       0 : =2                 SIM_M65:        equ     00000010B ; RST 6.5 Mask
(1)       0 : =1                 SIM_M55:        equ     00000001B ; RST 5.5 Mask
(1)       0 :                    ;;; Read Interrupt Mask
(1)       0 : =80                RIM_SID:        equ     10000000B ; Serial Input Data
(1)       0 : =40                RIM_I75:        equ     01000000B ; RST 7.5 Pending
(1)       0 : =20                RIM_I65:        equ     00100000B ; RST 6.5 Pending
(1)       0 : =10                RIM_I55:        equ     00010000B ; RST 5.5 Pending
(1)       0 : =8                 RIM_IE:         equ     00001000B ; Interrupt Enable
(1)       0 : =4                 RIM_M75:        equ     SIM_M75
(1)       0 : =2                 RIM_M65:        equ     SIM_M65
(1)       0 : =1                 RIM_M55:        equ     SIM_M55
(1)       0 :                    ;;; Interrupt origin
(1)       0 : =24                ORG_TRAP:       equ     0024H   ; TRAP
(1)       0 : =2C                ORG_RST55:      equ     002CH   ; RST 5.5
(1)       0 : =34                ORG_RST65:      equ     0034H   ; RST 6.5
(1)       0 : =3C                ORG_RST75:      equ     003CH   ; RST 7.5
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =0                 USART:          equ     00H
          0 : =0                 USARTD:         equ     USART+0 ; Receive/Transmit data
          0 : =1                 USARTS:         equ     USART+1 ; Srtatus register
          0 : =1                 USARTC:         equ     USART+1 ; Control register
          0 : =2                 USARTRV:        equ     USART+2 ; Receive interrupt vector (ORG_*)
          0 : =3                 USARTTV:        equ     USART+3 ; Transmit interrupt vector (ORG_*)
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     11000000B
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 << MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 << MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 << MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     00100000B
(1)       0 : =10                MODE_PARITY_bm: equ     00010000B
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     00001100B
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 << MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 << MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 << MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 << MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     00000011B
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 << MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ (2 << MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ (3 << MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     10000000B   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     01000000B   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     00100000B   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     00010000B   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     00001000B   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     00000100B   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     00000010B   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     00000001B   ; Transmit enable
(1)       0 :
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     10000000B   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     01000000B   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     00100000B   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     00010000B   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     00001000B   ; Parity Error
(1)       0 : =4                 ST_TxEMPTY_bm:  equ     00000100B   ; Transmitter empty
(1)       0 : =2                 ST_RxRDY_bm:    equ     00000010B   ; Receiver ready
(1)       0 : =1                 ST_TxRDY_bm:    equ     00000001B   ; Transmitter ready
          0 :                    ;;; Async 1stop 8data x16
          0 : =4E                ASYNC_MODE:     equ     MODE_STOP1_gc|MODE_LEN8_gc|MODE_BAUD_X16
          0 :                    ;;; RTS/DTR, error reset, Rx enable, Tx enable
          0 : =37                RX_EN_TX_EN:    equ     CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm|CMD_TxEN_bm
          0 :
       2000 :                            org     2000H
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       ds      rx_queue_size
       2080 :
       1000 :                            org     1000H
       1000 : =1000              stack:  equ     $
       1000 :
          0 :                            org     ORG_RESET
          0 : C3 00 01                   jmp     init
          3 :
         38 :                            org     ORG_RST7
         38 : C3 B2 01                   jmp     isr_intr
         3B :
        100 :                            org     0100H
        100 :                    init:
        100 : 31 00 10                   lxi     sp, stack
        103 : 21 00 20                   lxi     h, rx_queue
        106 : 06 80                      mvi     b, rx_queue_size
        108 : CD 50 01                   call     queue_init
        10B :                    init_usart:
        10B : AF                         xra     a               ; clear A
        10C : D3 01                      out     USARTC
        10E : D3 01                      out     USARTC
        110 : D3 01                      out     USARTC          ; safest way to sync mode
        112 : 3E 40                      mvi     a, CMD_IR_bm
        114 : D3 01                      out     USARTC          ; reset
        116 : 00                         nop
        117 : 00                         nop
        118 : 3E 4E                      mvi     a, ASYNC_MODE
        11A : D3 01                      out     USARTC
        11C : 00                         nop
        11D : 00                         nop
        11E : 3E 37                      mvi     a, RX_EN_TX_EN
        120 : D3 01                      out     USARTC
        122 : 3E 38                      mvi     a, ORG_RST7
        124 : D3 02                      out     USARTRV         ; enable RxRDY interrupt using RST 7
        126 : 3E 00                      mvi     a, ORG_RESET
        128 : D3 03                      out     USARTTV         ; disable TxRDY interrupt
        12A :
        12A : FB                         ei
        12B :
        12B : 21 00 20                   lxi     h, rx_queue
        12E :                    receive_loop:
        12E : F3                         di                      ; Disable INTR
        12F : CD 8E 01                   call    queue_remove
        132 : FB                         ei                      ; Enable INTR
        133 : D2 2E 01                   jnc     receive_loop
        136 : 47                         mov     b, a            ; save character
        137 : B7                         ora     a
        138 : CA 4F 01                   jz      halt_to_system
        13B :                    transmit_loop:
        13B : DB 01                      in      USARTC
        13D : E6 01                      ani     ST_TxRDY_bm
        13F : CA 3B 01                   jz      transmit_loop
        142 :                    transmit_data:
        142 : 78                         mov     a, b
        143 : D3 00                      out     USARTD
        145 : FE 0D                      cpi     0DH
        147 : C2 2E 01                   jnz     receive_loop
        14A : 06 0A                      mvi     b, 0AH
        14C : C3 3B 01                   jmp     transmit_loop
        14F :                    halt_to_system:
        14F : 76                         hlt
        150 :
        150 :                            include "queue.inc"
(1)     150 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     150 :                    ;;; [queue] queue structure
(1)     150 : =0                 queue_len:      equ     0       ; queue length
(1)     150 : =1                 queue_size:     equ     1       ; buffer size
(1)     150 : =2                 queue_put:      equ     2       ; queue put index
(1)     150 : =3                 queue_get:      equ     3       ; queue get index
(1)     150 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     150 :
(1)     150 :                    ;;; [queue] Initialize queue
(1)     150 :                    ;;; @param HL queue work space pointer
(1)     150 :                    ;;; @param B queue work space size
(1)     150 :                    ;;; @clobber B
(1)     150 :                    queue_init:
(1)     150 : F5                         push    psw
(1)     151 : E5                         push    h
(1)     152 : AF                         xra     a
(1)     153 : 77                         mov     m, a            ; queue_len
(1)     154 : 78                         mov     a, b
(1)     155 : DE 04                      sbi     queue_buf
(1)     157 : 23                         inx     h
(1)     158 : 77                         mov     m, a            ; queue_size
(1)     159 : C6 02                      adi     2               ; for queue_put and queue_get
(1)     15B : 47                         mov     b,a
(1)     15C : AF                         xra     a
(1)     15D :                    queue_init_loop:
(1)     15D : 23                         inx     h
(1)     15E : 77                         mov     m, a
(1)     15F : 05                         dcr     b
(1)     160 : C2 5D 01                   jnz     queue_init_loop
(1)     163 : E1                         pop     h
(1)     164 : F1                         pop     psw
(1)     165 : C9                         ret
(1)     166 :
(1)     166 :                    ;;; [queue] Add an element to queue
(1)     166 :                    ;;; @param HL queue work space pointer
(1)     166 :                    ;;; @param A an element
(1)     166 :                    ;;; @return F.C 0 if queue is full
(1)     166 :                    queue_add:
(1)     166 : D5                         push    d
(1)     167 : 57                         mov     d, a            ; save an element
(1)     168 : 7E                         mov     a, m            ; queue_len
(1)     169 : 23                         inx     h
(1)     16A : BE                         cmp     m               ; queue_size
(1)     16B : 2B                         dcx     h
(1)     16C : 7A                         mov     a, d            ; restore an element
(1)     16D : DA 72 01                   jc      queue_add_store ; queue_len < queue_size
(1)     170 : D1                         pop     d               ; cleared carry is ensured by |jc|
(1)     171 : C9                         ret
(1)     172 :                    queue_add_store:
(1)     172 : E5                         push    h
(1)     173 : 34                         inr     m               ; queue_len++
(1)     174 : 23                         inx     h
(1)     175 : 23                         inx     h
(1)     176 : 5E                         mov     e, m            ; queue_put
(1)     177 : 16 00                      mvi     d, 0
(1)     179 : EB                         xchg                    ; DE points queue_put
(1)     17A : 19                         dad     d
(1)     17B : 23                         inx     h
(1)     17C : 23                         inx     h               ; offset of queue_buf
(1)     17D : 77                         mov     m, a            ; store an element
(1)     17E : EB                         xchg                    ; DE points a stored element
(1)     17F : 7E                         mov     a, m            ; queue_put
(1)     180 : 3C                         inr     a               ; queue_put++
(1)     181 : 2B                         dcx     h
(1)     182 : BE                         cmp     m               ; queue_size
(1)     183 : 23                         inx     h
(1)     184 : DA 88 01                   jc      queue_add_update ; queue_put < queue_size
(1)     187 : AF                         xra     a                ; wrap around
(1)     188 :                    queue_add_update:
(1)     188 : 77                         mov     m, a            ; queue_put
(1)     189 : 1A                         ldax    d               ; restore an element
(1)     18A : E1                         pop     h
(1)     18B : D1                         pop     d
(1)     18C : 37                         stc                     ; set carry
(1)     18D : C9                         ret
(1)     18E :
(1)     18E :                    ;;; [queue] Remove an element from queue
(1)     18E :                    ;;; @param HL queue work space pointer
(1)     18E :                    ;;; @return A an element
(1)     18E :                    ;;; @return F.C 0 if queue is empty
(1)     18E :                    queue_remove:
(1)     18E : 7E                         mov     a, m            ; queue_len
(1)     18F : B7                         ora     a               ; clear carry
(1)     190 : C2 94 01                   jnz     queue_remove_elem ; queue_len > 0
(1)     193 : C9                         ret                     ; carry is cleared by |ora|
(1)     194 :                    queue_remove_elem:
(1)     194 : D5                         push    d
(1)     195 : E5                         push    h
(1)     196 : 35                         dcr     m               ; queue_len--
(1)     197 : 23                         inx     h
(1)     198 : 23                         inx     h
(1)     199 : 23                         inx     h
(1)     19A : 7E                         mov     a, m            ; queue_get
(1)     19B : 5F                         mov     e, a
(1)     19C : 16 00                      mvi     d, 0
(1)     19E : EB                         xchg                    ; DE points queue_get
(1)     19F : 19                         dad     d
(1)     1A0 : 23                         inx     h               ; offset of queue_buf
(1)     1A1 : EB                         xchg                    ; DE points an element to read
(1)     1A2 : 3C                         inr     a               ; queue_get++
(1)     1A3 : 2B                         dcx     h
(1)     1A4 : 2B                         dcx     h
(1)     1A5 : BE                         cmp     m               ; queue_size
(1)     1A6 : 23                         inx     h
(1)     1A7 : 23                         inx     h
(1)     1A8 : DA AC 01                   jc      queue_remove_update ; queue_get < queue_size
(1)     1AB : AF                         xra     a                   ; wrap around
(1)     1AC :                    queue_remove_update:
(1)     1AC : 77                         mov     m, a            ; queue_get
(1)     1AD : 1A                         ldax    d               ; read an element
(1)     1AE : E1                         pop     h
(1)     1AF : D1                         pop     d
(1)     1B0 : 37                         stc                     ; set carry
(1)     1B1 : C9                         ret
        1B2 :
        1B2 :                    isr_intr:
        1B2 : F5                         push    psw
        1B3 : E5                         push    h
        1B4 : DB 01                      in      USARTS
        1B6 :                    isr_intr_receive:
        1B6 : E6 02                      ani     ST_RxRDY_bm
        1B8 : CA C3 01                   jz      isr_intr_recv_end
        1BB : DB 00                      in      USARTD
        1BD : 21 00 20                   lxi     h, rx_queue
        1C0 : CD 66 01                   call    queue_add
        1C3 :                    isr_intr_recv_end:
        1C3 : E1                         pop     h
        1C4 : F1                         pop     psw
        1C5 : FB                         ei
        1C6 : C9                         ret
