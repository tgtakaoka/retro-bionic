          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            include "i8085.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            include "i8080.inc"
(2)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :                    ;;; i8080
(2)       0 :                            cpu     8080
(2)       0 :                    ;;; FLAGS Register
(2)       0 : =80                F_SIGN:         equ     10000000B ; set to 1 if negative
(2)       0 : =40                F_ZERO:         equ     01000000B ; set to 1 if zero
(2)       0 : =10                F_HALF_CARRY:   equ     00010000B ; set to 1 if carry from bit-3
(2)       0 : =4                 F_PARITY:       equ     00000100B ; set to 1 if even parity
(2)       0 : =1                 F_CARRY:        equ     00000001B ; set to 1 if carry
(2)       0 :                    ;;; Interrupt origin
(2)       0 : =0                 ORG_RESET:      equ     0000H   ; RESET
(2)       0 : =0                 ORG_RST0:       equ     0000H   ; RST 0
(2)       0 : =8                 ORG_RST1:       equ     0008H   ; RST 1
(2)       0 : =10                ORG_RST2:       equ     0010H   ; RST 2
(2)       0 : =18                ORG_RST3:       equ     0018H   ; RST 3
(2)       0 : =20                ORG_RST4:       equ     0020H   ; RST 4
(2)       0 : =28                ORG_RST5:       equ     0028H   ; RST 5
(2)       0 : =30                ORG_RST6:       equ     0030H   ; RST 6
(2)       0 : =38                ORG_RST7:       equ     0038H   ; RST 3
(1)       0 :                            cpu     8085
(1)       0 :                    ;;; i8085
(1)       0 :                    ;;; Set Innterrupt Maske
(1)       0 : =80                SIM_SOD:        equ     10000000B ; Serial Output Data
(1)       0 : =40                SIM_SDE:        equ     01000000B ; Serial Data Enable
(1)       0 : =10                SIM_R75:        equ     00010000B ; Reset RST 7.5 latch
(1)       0 : =8                 SIM_MSE:        equ     00001000B ; Mask Set Enable
(1)       0 : =4                 SIM_M75:        equ     00000100B ; RST 7.5 Mask
(1)       0 : =2                 SIM_M65:        equ     00000010B ; RST 6.5 Mask
(1)       0 : =1                 SIM_M55:        equ     00000001B ; RST 5.5 Mask
(1)       0 :                    ;;; Read Interrupt Mask
(1)       0 : =80                RIM_SID:        equ     10000000B ; Serial Input Data
(1)       0 : =40                RIM_I75:        equ     01000000B ; RST 7.5 Pending
(1)       0 : =20                RIM_I65:        equ     00100000B ; RST 6.5 Pending
(1)       0 : =10                RIM_I55:        equ     00010000B ; RST 5.5 Pending
(1)       0 : =8                 RIM_IE:         equ     00001000B ; Interrupt Enable
(1)       0 : =4                 RIM_M75:        equ     SIM_M75
(1)       0 : =2                 RIM_M65:        equ     SIM_M65
(1)       0 : =1                 RIM_M55:        equ     SIM_M55
(1)       0 :                    ;;; Interrupt origin
(1)       0 : =24                ORG_TRAP:       equ     0024H   ; TRAP
(1)       0 : =2C                ORG_RST55:      equ     002CH   ; RST 5.5
(1)       0 : =34                ORG_RST65:      equ     0034H   ; RST 6.5
(1)       0 : =3C                ORG_RST75:      equ     003CH   ; RST 7.5
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =0                 USART:  equ     00H
          0 : =0                 USARTD: equ     USART+0         ; Data register
          0 : =1                 USARTS: equ     USART+1         ; Status register
          0 : =1                 USARTC: equ     USART+1         ; Control register
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     11000000B
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 << MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 << MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 << MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     00100000B
(1)       0 : =10                MODE_PARITY_bm: equ     00010000B
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     00001100B
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 << MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 << MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 << MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 << MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     00000011B
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 << MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ (2 << MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ (3 << MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     10000000B   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     01000000B   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     00100000B   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     00010000B   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     00001000B   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     00000100B   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     00000010B   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     00000001B   ; Transmit enable
(1)       0 :
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     10000000B   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     01000000B   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     00100000B   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     00010000B   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     00001000B   ; Parity Error
(1)       0 : =4                 ST_TxEMPTY_bm:  equ     00000100B   ; Transmitter empty
(1)       0 : =2                 ST_RxRDY_bm:    equ     00000010B   ; Receiver ready
(1)       0 : =1                 ST_TxRDY_bm:    equ     00000001B   ; Transmitter ready
          0 :                    ;;; Async 1stop 8data x16
          0 : =4E                ASYNC_MODE:     equ     MODE_STOP1_gc|MODE_LEN8_gc|MODE_BAUD_X16
          0 :                    ;;; RTS/DTR, error reset, Rx enable, Tx enable
          0 : =37                RX_EN_TX_EN:    equ     CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm|CMD_TxEN_bm
          0 :
       1000 :                            org     1000H
       1000 : =1000              stack:  equ     $
       1000 :
          0 :                            org     ORG_RESET
          0 : C3 00 01                   jmp     init_usart
          3 :
        100 :                            org     0100H
        100 :                    init_usart:
        100 : 31 00 10                   lxi     sp, stack
        103 : AF                         xra     A               ; clear A
        104 : D3 01                      out     USARTC
        106 : D3 01                      out     USARTC
        108 : D3 01                      out     USARTC          ; safest way to sync mode
        10A : 3E 40                      mvi     A, CMD_IR_bm
        10C : D3 01                      out     USARTC          ; reset
        10E : 00                         nop
        10F : 00                         nop
        110 : 3E 4E                      mvi     A, ASYNC_MODE
        112 : D3 01                      out     USARTC
        114 : 00                         nop
        115 : 00                         nop
        116 : 3E 37                      mvi     A, RX_EN_TX_EN
        118 : D3 01                      out     USARTC
        11A :
        11A : CD 00 10                   call    arith
        11D : 76                         hlt
        11E :
        11E :                    putchar:
        11E : F5                         push    PSW
        11F :                    putchar_loop:
        11F : DB 01                      in      USARTS
        121 : E6 01                      ani     ST_TxRDY_bm
        123 : CA 1F 01                   jz      putchar_loop
        126 : F1                         pop     PSW
        127 : D3 00                      out     USARTD
        129 : C9                         ret
        12A :
        12A :                    newline:
        12A : F5                         push    PSW
        12B : 3E 0D                      mvi     A, 0DH
        12D : CD 1E 01                   call    putchar
        130 : 3E 0A                      mvi     A, 0AH
        132 : CD 1E 01                   call    putchar
        135 : F1                         pop     PSW
        136 : C9                         ret
        137 :
        137 :                    putspace:
        137 : F5                         push    PSW
        138 : 3E 20                      mvi     A, ' '
        13A : CD 1E 01                   call    putchar
        13D : F1                         pop     PSW
        13E : C9                         ret
        13F :
        13F :                    ;;; Print "v1 op v2 = "
        13F :                    ;;; @param v1 BC
        13F :                    ;;; @param v2 DE
        13F :                    ;;; @param op A
        13F :                    ;;; @return v1 HL
        13F :                    ;;; @clobber A
        13F :                    expr:
        13F : F5                         push    PSW
        140 : 60                         mov     H, B
        141 : 69                         mov     L, C
        142 : CD 87 11                   call    print_int16
        145 : CD 37 01                   call    putspace
        148 : F1                         pop     PSW
        149 : CD 1E 01                   call    putchar
        14C : CD 37 01                   call    putspace
        14F : 62                         mov     H, D
        150 : 6B                         mov     L, E
        151 : CD 87 11                   call    print_int16
        154 : 60                         mov     H, B
        155 : 69                         mov     L, C
        156 : C9                         ret
        157 :
        157 :                    ;;; Print " v1\n"
        157 :                    ;;; @param v1 HL
        157 :                    ;;; @clobber A HL
        157 :                    answer:
        157 : CD 37 01                   call    putspace
        15A : 3E 3D                      mvi     A, '='
        15C : CD 1E 01                   call    putchar
        15F : CD 37 01                   call    putspace
        162 : CD 87 11                   call    print_int16
        165 : C3 2A 01                   jmp     newline
        168 :
        168 :                    ;;; Compare and print "v1 rel v2\n"
        168 :                    ;;; @param v1 BC
        168 :                    ;;; @param v2 DE
        168 :                    ;;; @clobber A HL
        168 :                    comp:
        168 : C5                         push    B
        169 : D5                         push    D
        16A : CD C0 11                   call    cmp16
        16D : CA 80 01                   jz      comp_eq
        170 : F2 7B 01                   jp      comp_gt
        173 : FA 85 01                   jm      comp_lt
        176 : 3E 3F                      mvi     A, '?'
        178 : C3 87 01                   jmp     comp_out
        17B :                    comp_gt:
        17B : 3E 3E                      mvi     A, '>'
        17D : C3 87 01                   jmp     comp_out
        180 :                    comp_eq:
        180 : 3E 3D                      mvi     A, '='
        182 : C3 87 01                   jmp     comp_out
        185 :                    comp_lt:
        185 : 3E 3C                      mvi     A, '<'
        187 :                    comp_out:
        187 : D1                         pop     D
        188 : C1                         pop     B
        189 : CD 3F 01                   call    expr
        18C : C3 2A 01                   jmp     newline
        18F :
        200 :                            org     0200H
        200 :
       1000 :                            org     1000H
       1000 :
       1000 :                    arith:
       1000 : 01 00 00                   lxi     B, 0
       1003 : 11 A0 92                   lxi     D, -28000
       1006 : 3E 2D                      mvi     A, '-'
       1008 : CD 3F 01                   call    expr
       100B : CD DB 11                   call    neg_DE
       100E : 62                         mov     H, D
       100F : 6B                         mov     L, E
       1010 : CD 57 01                   call    answer          ; 28000
       1013 :
       1013 : 01 00 00                   lxi     B, 0
       1016 : 11 60 6D                   lxi     D, 28000
       1019 : 3E 2D                      mvi     A, '-'
       101B : CD 3F 01                   call    expr
       101E : CD DB 11                   call    neg_DE
       1021 : 62                         mov     H, D
       1022 : 6B                         mov     L, E
       1023 : CD 57 01                   call    answer          ; -28000
       1026 :
       1026 : 01 50 46                   lxi     B, 18000
       1029 : 11 60 6D                   lxi     D, 28000
       102C : 3E 2B                      mvi     A, '+'
       102E : CD 3F 01                   call    expr
       1031 : 19                         dad     D
       1032 : CD 57 01                   call    answer          ; -19536
       1035 :
       1035 : 01 50 46                   lxi     B, 18000
       1038 : 11 B0 B9                   lxi     D, -18000
       103B : 3E 2B                      mvi     A, '+'
       103D : CD 3F 01                   call    expr
       1040 : 19                         dad     D
       1041 : CD 57 01                   call    answer          ; 0
       1044 :
       1044 : 01 B0 B9                   lxi     B, -18000
       1047 : 11 B0 B9                   lxi     D, -18000
       104A : 3E 2B                      mvi     A, '+'
       104C : CD 3F 01                   call    expr
       104F : 19                         dad     D
       1050 : CD 57 01                   call    answer          ; 29536
       1053 :
       1053 : 01 B0 B9                   lxi     B, -18000
       1056 : 11 A0 92                   lxi     D, -28000
       1059 : 3E 2D                      mvi     A, '-'
       105B : CD 3F 01                   call    expr
       105E : CD DB 11                   call    neg_DE
       1061 : 19                         dad     D
       1062 : CD 57 01                   call    answer          ; -10000
       1065 :
       1065 : 01 64 00                   lxi     B, 100
       1068 : 11 2C 01                   lxi     D, 300
       106B : 3E 2A                      mvi     A, '*'
       106D : CD 3F 01                   call    expr
       1070 : CD 01 12                   call    mul16
       1073 : CD 57 01                   call    answer          ; 30000
       1076 :
       1076 : 01 2C 01                   lxi     B, 300
       1079 : 11 38 FF                   lxi     D, -200
       107C : 3E 2A                      mvi     A, '*'
       107E : CD 3F 01                   call    expr
       1081 : CD 01 12                   call    mul16
       1084 : CD 57 01                   call    answer          ; 5536
       1087 :
       1087 : 01 64 00                   lxi     B, 100
       108A : 11 D4 FE                   lxi     D, -300
       108D : 3E 2A                      mvi     A, '*'
       108F : CD 3F 01                   call    expr
       1092 : CD 01 12                   call    mul16
       1095 : CD 57 01                   call    answer          ; -30000
       1098 :
       1098 : 01 38 FF                   lxi     B, -200
       109B : 11 9C FF                   lxi     D, -100
       109E : 3E 2A                      mvi     A, '*'
       10A0 : CD 3F 01                   call    expr
       10A3 : CD 01 12                   call    mul16
       10A6 : CD 57 01                   call    answer          ; 20000
       10A9 :
       10A9 : 01 30 75                   lxi     B, 30000
       10AC : 11 64 00                   lxi     D, 100
       10AF : 3E 2F                      mvi     A, '/'
       10B1 : CD 3F 01                   call    expr
       10B4 : CD 70 12                   call    div16
       10B7 : CD 57 01                   call    answer          ; 30
       10BA :
       10BA : 01 38 FF                   lxi     B, -200
       10BD : 11 64 00                   lxi     D, 100
       10C0 : 3E 2F                      mvi     A, '/'
       10C2 : CD 3F 01                   call    expr
       10C5 : CD 70 12                   call    div16
       10C8 : CD 57 01                   call    answer          ; -2
       10CB :
       10CB : 01 D0 8A                   lxi     B, -30000
       10CE : 11 38 FF                   lxi     D, -200
       10D1 : 3E 2F                      mvi     A, '/'
       10D3 : CD 3F 01                   call    expr
       10D6 : CD 70 12                   call    div16
       10D9 : CD 57 01                   call    answer          ; 150
       10DC :
       10DC : 01 D0 8A                   lxi     B, -30000
       10DF : 11 4E 00                   lxi     D, 78
       10E2 : 3E 2F                      mvi     A, '/'
       10E4 : CD 3F 01                   call    expr
       10E7 : CD 70 12                   call    div16
       10EA : CD 57 01                   call    answer          ; -384
       10ED :
       10ED : 01 D0 FF                   lxi     B, -48
       10F0 : 11 1E 00                   lxi     D, 30
       10F3 : CD 68 01                   call    comp
       10F6 :
       10F6 : 01 1E 00                   lxi     B, 30
       10F9 : 11 D0 FF                   lxi     D, -48
       10FC : CD 68 01                   call    comp
       10FF :
       10FF : 01 88 13                   lxi     B, 5000
       1102 : 11 A0 0F                   lxi     D, 4000
       1105 : CD 68 01                   call    comp
       1108 :
       1108 : 01 88 13                   lxi     B, 5000
       110B : 11 88 13                   lxi     D, 5000
       110E : CD 68 01                   call    comp
       1111 :
       1111 : 01 A0 0F                   lxi     B, 4000
       1114 : 11 88 13                   lxi     D, 5000
       1117 : CD 68 01                   call    comp
       111A :
       111A : 01 78 EC                   lxi     B, -5000
       111D : 11 60 F0                   lxi     D, -4000
       1120 : CD 68 01                   call    comp
       1123 :
       1123 : 01 78 EC                   lxi     B, -5000
       1126 : 11 78 EC                   lxi     D, -5000
       1129 : CD 68 01                   call    comp
       112C :
       112C : 01 60 F0                   lxi     B, -4000
       112F : 11 78 EC                   lxi     D, -5000
       1132 : CD 68 01                   call    comp
       1135 :
       1135 : 01 BC 7F                   lxi     B, 32700
       1138 : 11 58 7F                   lxi     D, 32600
       113B : CD 68 01                   call    comp
       113E :
       113E : 01 BC 7F                   lxi     B, 32700
       1141 : 11 BC 7F                   lxi     D, 32700
       1144 : CD 68 01                   call    comp
       1147 :
       1147 : 01 58 7F                   lxi     B, 32600
       114A : 11 BC 7F                   lxi     D, 32700
       114D : CD 68 01                   call    comp
       1150 :
       1150 : 01 44 80                   lxi     B, -32700
       1153 : 11 A8 80                   lxi     D, -32600
       1156 : CD 68 01                   call    comp
       1159 :
       1159 : 01 44 80                   lxi     B, -32700
       115C : 11 44 80                   lxi     D, -32700
       115F : CD 68 01                   call    comp
       1162 :
       1162 : 01 A8 80                   lxi     B, -32600
       1165 : 11 44 80                   lxi     D, -32700
       1168 : CD 68 01                   call    comp
       116B :
       116B : 01 50 46                   lxi     B, 18000
       116E : 11 A0 92                   lxi     D, -28000
       1171 : CD 68 01                   call    comp
       1174 :
       1174 : 01 50 46                   lxi     B, 18000
       1177 : 11 50 46                   lxi     D, 18000
       117A : CD 68 01                   call    comp
       117D :
       117D : 01 A0 92                   lxi     B, -28000
       1180 : 11 50 46                   lxi     D, 18000
       1183 : CD 68 01                   call    comp
       1186 :
       1186 : C9                         ret
       1187 :
       1187 :                            include "arith.inc"
(1)    1187 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    1187 :                            cpu     8085
(1)    1187 :
(1)    1187 :                    ;;; Print signed 16-bit integer as decimal
(1)    1187 :                    ;;; @param HL value
(1)    1187 :                    ;;; @clobber A HL
(1)    1187 :                    print_int16:
(1)    1187 : 7C                         mov     A, H
(1)    1188 : B5                         ora     L
(1)    1189 : CA BB 11                   jz      print_uint16_zero
(1)    118C : 7C                         mov     A, H
(1)    118D : B7                         ora     A
(1)    118E : F2 9D 11                   jp      print_uint16
(1)    1191 : 3E 2D                      mvi     A, '-'
(1)    1193 : CD 1E 01                   call    putchar
(1)    1196 : 7D                         mov     A, L
(1)    1197 : 2F                         cma
(1)    1198 : 6F                         mov     L, A
(1)    1199 : 7C                         mov     A, H
(1)    119A : 2F                         cma
(1)    119B : 67                         mov     H, A
(1)    119C : 23                         inx     H               ; HL=-value
(1)    119D :                    print_uint16:
(1)    119D : C5                         push    B
(1)    119E : D5                         push    D
(1)    119F : CD A5 11                   call    print_uint16_loop
(1)    11A2 : D1                         pop     D
(1)    11A3 : C1                         pop     B
(1)    11A4 : C9                         ret
(1)    11A5 :                    print_uint16_loop:
(1)    11A5 : 7C                         mov     A, H
(1)    11A6 : B5                         ora     L
(1)    11A7 : C8                         rz
(1)    11A8 : 44                         mov     B, H
(1)    11A9 : 4D                         mov     C, L
(1)    11AA : 11 0A 00                   lxi     D, 10
(1)    11AD : CD 2A 12                   call    udiv16          ; BC/DE = HL...BC
(1)    11B0 : C5                         push    B               ; push remainder
(1)    11B1 : CD A5 11                   call    print_uint16_loop
(1)    11B4 : E1                         pop     H               ; pop remainder
(1)    11B5 : 7D                         mov     A, L
(1)    11B6 : C6 30                      adi     '0'
(1)    11B8 : C3 1E 01                   jmp     putchar
(1)    11BB :                    print_uint16_zero:
(1)    11BB : 3E 30                      mvi     A, '0'
(1)    11BD : C3 1E 01                   jmp     putchar
(1)    11C0 :
(1)    11C0 :                    ;;; Signed comparison; minuend - subtrahend
(1)    11C0 :                    ;;; @param BC minuend
(1)    11C0 :                    ;;; @param DE subtrahend
(1)    11C0 :                    ;;; @return PSW.Z, PSW.S
(1)    11C0 :                    ;;; @clobber A
(1)    11C0 :                    cmp16:
(1)    11C0 : C5                         push    B
(1)    11C1 : D5                         push    D
(1)    11C2 : E5                         push    H
(1)    11C3 : 1A                         ldax    D
(1)    11C4 : 79                         mov     A, C
(1)    11C5 : 93                         sub     E
(1)    11C6 : 6F                         mov     L, A
(1)    11C7 : 78                         mov     A, B
(1)    11C8 : 9A                         sbb     D
(1)    11C9 : 67                         mov     H, A            ; HL=minuend-subtrahend
(1)    11CA : B5                         ora     L
(1)    11CB : CA D7 11                   jz      cmp16_return    ; PSW.Z=1
(1)    11CE : 7C                         mov     A, H            ; high(minuend-subtrahend)
(1)    11CF : A8                         xra     B               ; high(minuend-subtrahend)^minuend
(1)    11D0 : 6F                         mov     L, A
(1)    11D1 : 78                         mov     A, B
(1)    11D2 : AA                         xra     D               ; high(minuend^subtrahend)
(1)    11D3 : A5                         ana     L               ; overflow
(1)    11D4 : AC                         xra     H               ; PSW.S=overflow^sign
(1)    11D5 : F6 01                      ori     1               ; clear PSW.Z
(1)    11D7 :                    cmp16_return:
(1)    11D7 : E1                         pop     H
(1)    11D8 : D1                         pop     D
(1)    11D9 : C1                         pop     B
(1)    11DA : C9                         ret
(1)    11DB :
(1)    11DB :                    ;;; Negate; v
(1)    11DB :                    ;;; @param DE v
(1)    11DB :                    ;;; @return DE -v
(1)    11DB :                    ;;; @clobber A
(1)    11DB :                    neg_DE:
(1)    11DB : 7A                         mov     A, D
(1)    11DC : 2F                         cma
(1)    11DD : 57                         mov     D, A
(1)    11DE : 7B                         mov     A, E
(1)    11DF : 2F                         cma
(1)    11E0 : 5F                         mov     E, A
(1)    11E1 : 13                         inx     D
(1)    11E2 : C9                         ret
(1)    11E3 :
(1)    11E3 :                    ;;; Unsigned multiplication; result = multiplicand * multiplier
(1)    11E3 :                    ;;; @param BC multiplicand
(1)    11E3 :                    ;;; @param DE multiplier
(1)    11E3 :                    ;;; @return HL result
(1)    11E3 :                    ;;; @clobber BC DE HL A
(1)    11E3 :                    umul16:
(1)    11E3 : 21 00 00                   lxi     H, 0            ; result=0
(1)    11E6 : C3 FB 11                   jmp     umul16_check
(1)    11E9 :                    umul16_loop:
(1)    11E9 : B7                         ora     A               ; clear PSW.C
(1)    11EA : 7A                         mov     A, D            ; multiplier >>= 1
(1)    11EB : 1F                         rar
(1)    11EC : 57                         mov     D, A
(1)    11ED : 7B                         mov     A, E
(1)    11EE : 1F                         rar
(1)    11EF : 5F                         mov     E, A
(1)    11F0 : D2 F4 11                   jnc     umul16_next     ; if lsb(multiplier) == 0
(1)    11F3 : 09                         dad     B               ; result += multiplicand
(1)    11F4 :                    umul16_next:
(1)    11F4 : B7                         ora     A               ; clear PSW.C
(1)    11F5 : 79                         mov     A, C            ; multiplicand <<= 1
(1)    11F6 : 17                         ral
(1)    11F7 : 4F                         mov     C, A
(1)    11F8 : 78                         mov     A, B
(1)    11F9 : 17                         ral
(1)    11FA : 47                         mov     B, A
(1)    11FB :                    umul16_check:
(1)    11FB : 7A                         mov     A, D
(1)    11FC : B3                         ora     E
(1)    11FD : C2 E9 11                   jnz     umul16_loop     ; while multiplier != 0
(1)    1200 :                    umul16_end:
(1)    1200 : C9                         ret
(1)    1201 :
(1)    1201 :                    ;;; Signed multiplication; result =multiplicand * multiplier
(1)    1201 :                    ;;; @param BC multiplicand
(1)    1201 :                    ;;; @param DE multiplier
(1)    1201 :                    ;;; @return HL result
(1)    1201 :                    ;;; @clobber A BC DE
(1)    1201 :                    mul16:
(1)    1201 : 78                         mov     A, B
(1)    1202 : AA                         xra     D
(1)    1203 : F5                         push    PSW             ; save high(multiplicand^multiplier)
(1)    1204 : 78                         mov     A, B
(1)    1205 : B7                         ora     A
(1)    1206 : F2 0F 12                   jp      mul16_abs_muliplicand
(1)    1209 : 2F                         cma
(1)    120A : 47                         mov     B, A
(1)    120B : 79                         mov     A, C
(1)    120C : 2F                         cma
(1)    120D : 4F                         mov     C, A
(1)    120E : 03                         inx     B               ; multiplicand = -multiplicand
(1)    120F :                    mul16_abs_muliplicand:
(1)    120F : 7A                         mov     A, D
(1)    1210 : B7                         ora     A
(1)    1211 : F2 1A 12                   jp      mul16_multiply
(1)    1214 : 2F                         cma
(1)    1215 : 57                         mov     D, A
(1)    1216 : 7B                         mov     A, E
(1)    1217 : 2F                         cma
(1)    1218 : 5F                         mov     E, A
(1)    1219 : 13                         inx     D               ; multiplier = -multiplier
(1)    121A :                    mul16_multiply:
(1)    121A : CD E3 11                   call    umul16          ; HL = multiplicand * multiplier
(1)    121D : F1                         pop     PSW             ; save high(multiplicand^multiplier)
(1)    121E : B7                         ora     A
(1)    121F : F2 29 12                   jp      mul16_return
(1)    1222 : 7C                         mov     A, H
(1)    1223 : 2F                         cma
(1)    1224 : 67                         mov     H, A
(1)    1225 : 7D                         mov     A, L
(1)    1226 : 2F                         cma
(1)    1227 : 6F                         mov     L, A
(1)    1228 : 23                         inx     H               ; result = -result
(1)    1229 :                    mul16_return:
(1)    1229 : C9                         ret
(1)    122A :
(1)    122A :                    ;;; Unsigned division; dividend / divisor = quotient ... remainder
(1)    122A :                    ;;; @praram BC dividend
(1)    122A :                    ;;; @praram DE divisor
(1)    122A :                    ;;; @return BC remainder
(1)    122A :                    ;;; @return HL quotient
(1)    122A :                    ;;; @clobber A DE
(1)    122A :                    udiv16:
(1)    122A : 7A                         mov     A, D
(1)    122B : B3                         ora     E
(1)    122C : C8                         rz                      ; divide by zero
(1)    122D : 2E 01                      mvi     L, 1            ; L=bits
(1)    122F : C3 3A 12                   jmp     udiv16_prep
(1)    1232 :                    udiv16_prep_loop:
(1)    1232 : B7                         ora     A               ; clear PSW.C
(1)    1233 : 7B                         mov     A, E            ; divisor <<= 1
(1)    1234 : 17                         ral
(1)    1235 : 5F                         mov     E, A
(1)    1236 : 7A                         mov     A, D
(1)    1237 : 17                         ral
(1)    1238 : 57                         mov     D, A
(1)    1239 : 2C                         inr     L               ; ++bits
(1)    123A :                    udiv16_prep:                    ; while msb(divisor) == 0
(1)    123A : 7A                         mov     A, D
(1)    123B : B7                         ora     A
(1)    123C : F2 32 12                   jp      udiv16_prep_loop
(1)    123F : 7D                         mov     A, L
(1)    1240 : F5                         push    PSW             ; push bits
(1)    1241 : 60                         mov     H, B
(1)    1242 : 69                         mov     L, C            ; HL=dividend
(1)    1243 : AF                         xra     A
(1)    1244 : 47                         mov     B, A
(1)    1245 : 4F                         mov     C, A            ; BC=quotient
(1)    1246 : C3 58 12                   jmp     udiv16_enter_loop
(1)    1249 :                    udiv16_loop:
(1)    1249 : F5                         push    PSW             ; push bits
(1)    124A : B7                         ora     A               ; clear PSW.C
(1)    124B : 7A                         mov     A, D            ; divisor >>= 1
(1)    124C : 1F                         rar
(1)    124D : 57                         mov     D, A
(1)    124E : 7B                         mov     A, E
(1)    124F : 1F                         rar
(1)    1250 : 5F                         mov     E, A
(1)    1251 : B7                         ora     A               ; clear PSW.C
(1)    1252 : 79                         mov     A, C            ; quotient <<= 1
(1)    1253 : 17                         ral
(1)    1254 : 4F                         mov     C, A
(1)    1255 : 78                         mov     A, B
(1)    1256 : 17                         ral
(1)    1257 : 47                         mov     B, A
(1)    1258 :                    udiv16_enter_loop:
(1)    1258 : 7D                         mov     A, L
(1)    1259 : 93                         sub     E
(1)    125A : 6F                         mov     L, A
(1)    125B : 7C                         mov     A, H
(1)    125C : 9A                         sbb     D
(1)    125D : 67                         mov     H, A            ; dividend -= divisor
(1)    125E : DA 65 12                   jc      udiv16_readd    ; if dividend < 0
(1)    1261 : 03                         inx     B               ; quotient |= 1
(1)    1262 : C3 66 12                   jmp     udiv16_next    ;
(1)    1265 :                    udiv16_readd:
(1)    1265 : 19                         dad     D               ; dividend += divisor
(1)    1266 :                    udiv16_next:
(1)    1266 : F1                         pop     PSW
(1)    1267 : 3D                         dcr     A               ; --bits
(1)    1268 : C2 49 12                   jnz     udiv16_loop     ; while bits != 0
(1)    126B : E5                         push    H               ; remainder
(1)    126C : C5                         push    B               ; quotient
(1)    126D : E1                         pop     H
(1)    126E : C1                         pop     B
(1)    126F : C9                         ret
(1)    1270 :
(1)    1270 :                    ;;; Signed division; dividend / divisor = quotient ... remainder
(1)    1270 :                    ;;; @param BC dividend
(1)    1270 :                    ;;; @param DE divisor
(1)    1270 :                    ;;; @return BC remainder
(1)    1270 :                    ;;; @return HL quotient
(1)    1270 :                    ;;; @clobber A DE
(1)    1270 :                    div16:
(1)    1270 : 78                         mov     A, B
(1)    1271 : AA                         xra     D
(1)    1272 : F5                         push    PSW             ; save high(dividend^divisor)
(1)    1273 : 78                         mov     A, B            ; H=high(dividend)
(1)    1274 : B7                         ora     A
(1)    1275 : F2 7E 12                   jp      div16_abs_dividend
(1)    1278 : 2F                         cma
(1)    1279 : 47                         mov     B, A
(1)    127A : 79                         mov     A, C
(1)    127B : 2F                         cma
(1)    127C : 4F                         mov     C, A
(1)    127D : 03                         inx     B               ; dividend = -dividend
(1)    127E :                    div16_abs_dividend:
(1)    127E : 7A                         mov     A, D
(1)    127F : B7                         ora     A
(1)    1280 : F2 89 12                   jp      div16_divide
(1)    1283 : 2F                         cma
(1)    1284 : 57                         mov     D, A
(1)    1285 : 7B                         mov     A, E
(1)    1286 : 2F                         cma
(1)    1287 : 5F                         mov     E, A
(1)    1288 : 13                         inx     D               ; divisor = -divisor
(1)    1289 :                    div16_divide:
(1)    1289 : CD 2A 12                   call    udiv16          ; HL=quotient, BC=remainder
(1)    128C : F1                         pop     PSW             ; A=high(dividend^divisor)
(1)    128D : B7                         ora     A
(1)    128E : F2 98 12                   jp      div16_return
(1)    1291 : 7C                         mov     A, H
(1)    1292 : 2F                         cma
(1)    1293 : 67                         mov     H, A
(1)    1294 : 7D                         mov     A, L
(1)    1295 : 2F                         cma
(1)    1296 : 6F                         mov     L, A
(1)    1297 : 23                         inx     H               ; quotient=-quotient
(1)    1298 :                    div16_return:
(1)    1298 : C9                         ret
       1299 :
       1299 :                            end
