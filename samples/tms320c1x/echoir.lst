          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            .include "tms320c15.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; TMS320C15
(1)       0 :                            .include "tms3201x.inc"
(2)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :                    ;;; TMS3201X
(2)       0 :                    ;;; Origin
(2)       0 : =0                 ORG_RESET:      .equ    0000H   ; Reset
(2)       0 : =2                 ORG_INT:        .equ    0002H   ; INT
(2)       0 :                    ;;; Halt to system
(2)       0 : =A000              HALT:           .equ    0A000H  ; illegal instruction
(1)       0 :                            .cpu     32015
(1)       0 :                    ;;; Data memory
(1)       0 : =0                 PAGE0:  .equ    00H
(1)       0 : =80                PAGE1:  .equ    80H
          0 :
          0 :                            ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =4                 ACIA:   .equ    4
          0 :                            .include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 : =4                 ACIA_control:   .equ    ACIA+0
(1)       0 : =4                 ACIA_status:    .equ    ACIA+0
(1)       0 : =5                 ACIA_data:      .equ    ACIA+1
(1)       0 : =6                 ACIA_intr:      .equ    ACIA+2
(1)       0 :                    ;;;  Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         .equ    11B       ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    .equ    00000000B ; /1
(1)       0 : =1                 CDS_DIV16_gc:   .equ    00000001B ; /16
(1)       0 : =2                 CDS_DIV64_gc:   .equ    00000010B ; /64
(1)       0 : =3                 CDS_RESET_gc:   .equ    00000011B ; Master Reset
(1)       0 :                    ;;;  Word Select Bits
(1)       0 : =1C                WSB_gm:         .equ    00011100B ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     .equ    00000000B ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     .equ    00000100B ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     .equ    00001000B ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     .equ    00001100B ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     .equ    00010000B ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     .equ    00010100B ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     .equ    00011000B ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     .equ    00011100B ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                    ;;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         .equ    01100000B ; Group mask
(1)       0 : =0                 TCB_DI_gc:      .equ    00000000B ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      .equ    00100000B ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     .equ    01000000B ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   .equ    01100000B ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        .equ    10000000B ; Receive Interrupt Enable Bit mask
(1)       0 :                    ;;; Status register
(1)       0 : =1                 RDRF_bm:        .equ    00000001B ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        .equ    00000010B ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        .equ    00000100B ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        .equ    00001000B ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        .equ    00010000B ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        .equ    00100000B ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        .equ    01000000B ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        .equ    10000000B ; Interrupt Request Flag
          0 : =94                RX_INT_TX_NO:   .equ    WSB_8N1_gc|RIEB_bm
          0 :
          0 :                            .org    ORG_RESET
          0 : F900 0200                  b       initialize
          2 :                            .org    ORG_INT
          2 : F900 029C                  b       int_isr
          4 :
          4 :                    ;;; Data memory
          0 :                            .org    PAGE0
          0 :                    zero:   .bss    1               ; 0
          1 :                    one:    .bss    1               ; 1
          2 :                    minus:  .bss    1               ; -1
          3 :                    work:   .bss    1
          4 :                    char:   .bss    1
          5 :                    queue_ptr:      .bss    1       ; queue pointer
          6 :                    queue_work1:    .bss    1       ; queue work1
          7 :                    queue_work2:    .bss    1       ; queue work2
          8 :                    queue_char:     .bss    1       ; queue element
          9 :
         80 :                            .org    PAGE1
         80 :                    isr_st:         .bss    1       ; saving ST on interrupt
         81 :                    isr_accl:       .bss    1       ; saving ACC
         82 :                    isr_acch:       .bss    1
         83 :                    isr_work:       .bss    1       ; work
         84 :
        100 :                            .org    100H
        100 : =80                rx_queue_size:  .equ    80H
        100 :                    rx_queue:       .bss    rx_queue_size
        180 :
        200 :                            .org    200H
        200 :                    initialize:
        200 : 6E00                       ldpk    0
        201 : 7E01                       lack    1
        202 : 5001                       sacl    one
        203 : 7E00                       lack    0
        204 : 5000                       sacl    zero
        205 : 1001                       sub     one
        206 : 5002                       sacl    minus
        207 : 7E80                       lack    rx_queue_size
        208 : F800 0231                  call    queue_init
        20A : 0100                       .word   rx_queue
        20B :                    ;;; Initialize ACIA
        20B : 7E03                       lack    CDS_RESET_gc
        20C : 5003                       sacl    work
        20D : 4C03                       out     work,ACIA_control ; Master reset
        20E : 7E94                       lack    RX_INT_TX_NO
        20F : 5003                       sacl    work
        210 : 4C03                       out     work,ACIA_control ; 8 bits + No Parity + 1 Stop Bits
        211 :
        211 : F800 0220          loop:   call    getchar
        213 : 7A00                       or      zero
        214 : FF00 021F                  bz      halt_to_system
        216 : F800 0228          echo:   call    putchar
        218 : 7E0D                       lack    0DH             ; Carriage return
        219 : 1004                       sub     char
        21A : FE00 0211                  bnz     loop
        21C : 7E0A                       lack    0AH             ; Newline
        21D : F900 0216                  b       echo
        21F :                    halt_to_system:
        21F : A000                       .word   HALT
        220 :
        220 :                    getchar:
        220 : 7F81                       dint
        221 : F800 0277                  call    queue_remove
        223 : 0100                       .word   rx_queue
        224 : 7F82                       eint
        225 : FA00 0220                  blz     getchar
        227 : 7F8D                       ret
        228 :
        228 :                    putchar:
        228 : 5004                       sacl    char
        229 :                    putchar_loop:
        229 : 4403                       in      work,ACIA_status
        22A : 7E02                       lack    TDRE_bm
        22B : 7903                       and     work
        22C : FF00 0229                  bz      putchar_loop
        22E : 4D04                       out     char,ACIA_data
        22F : 6604                       zals    char
        230 : 7F8D                       ret
        231 :
        231 :                            .include "queue.inc"
(1)     231 :                    ;;; -*- mode: asm; mode: flying-spell; -*-
(1)     231 :                    ;;; [queue] queue structure
(1)     231 : =0                 queue_len:      equ     0       ; queue length
(1)     231 : =1                 queue_size:     equ     1       ; buffer size
(1)     231 : =2                 queue_put:      equ     2       ; queue put index
(1)     231 : =3                 queue_get:      equ     3       ; queue get index
(1)     231 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     231 :
(1)     231 :                    ;;; [queue] Initialize queue
(1)     231 :                    ;;; @param @SP queue work space pointer
(1)     231 :                    ;;; @param ACC queue work space size
(1)     231 :                    ;;; @clobber ACC AR0 ARP=0 DP=0
(1)     231 :                    queue_init:
(1)     231 : 6E00                       ldpk    0               ; page 0
(1)     232 : 5006                       sacl    queue_work1
(1)     233 : 7F9D                       pop                     ; pop return address
(1)     234 : 6705                       tblr    queue_ptr       ; read queue pointer
(1)     235 : 0001                       add     one
(1)     236 : 7F9C                       push                    ; restore return address
(1)     237 : 6605                       zals    queue_ptr
(1)     238 : 7D00                       tblw    zero            ; queue_len=0
(1)     239 : 0001                       add     one
(1)     23A : 5005                       sacl    queue_ptr       ; &queue_size
(1)     23B : 2006                       lac     queue_work1
(1)     23C : 1201                       sub     one,2           ; queue_size-4
(1)     23D : 5006                       sacl    queue_work1
(1)     23E : 3806                       lar     AR0,queue_work1 ; AR0=queue_size
(1)     23F : 6605                       zals    queue_ptr
(1)     240 : 7D06                       tblw    queue_work1     ; queue_size
(1)     241 : 0001                       add     one
(1)     242 : 7D00                       tblw    zero            ; queue_put=0
(1)     243 : 0001                       add     one
(1)     244 : 7D00                       tblw    zero            ; queue_get=0
(1)     245 : 6880                       larp    AR0             ; use AR0
(1)     246 : F900 024A                  b       queue_init_enter
(1)     248 :                    queue_init_loop:
(1)     248 : 0001                       add     one
(1)     249 : 7D00                       tblw    zero
(1)     24A :                    queue_init_enter:
(1)     24A : F400 0248                  banz    queue_init_loop
(1)     24C : 7F8D                       ret
(1)     24D :
(1)     24D :                    ;;; [queue] Add an element to queue
(1)     24D :                    ;;; @param @SP queue work space pointer
(1)     24D :                    ;;; @param ACC an element
(1)     24D :                    ;;; @return ACC<0 if queue is full
(1)     24D :                    ;;; @clobber DP=0
(1)     24D :                    queue_add:
(1)     24D : 6E00                       ldpk    0               ; page 0
(1)     24E : 5008                       sacl    queue_char      ; save element
(1)     24F : 7F9D                       pop                     ; pop return address
(1)     250 : 6705                       tblr    queue_ptr       ; read queue pointer
(1)     251 : 0001                       add     one
(1)     252 : 7F9C                       push                    ; restore return address
(1)     253 : 6605                       zals    queue_ptr
(1)     254 : 6706                       tblr    queue_work1     ; work1=queue_len
(1)     255 : 0001                       add     one
(1)     256 : 6707                       tblr    queue_work2     ; work2=queue_size
(1)     257 : 6606                       zals    queue_work1
(1)     258 : 1007                       sub     queue_work2     ; queue_len-queue_size
(1)     259 : FA00 025E                  blz     queue_add_elem  ; branch if queue_len<queue_size
(1)     25B : 6502                       zalh    minus           ; ACC<0
(1)     25C : 6108                       adds    queue_char      ; restore element
(1)     25D : 7F8D                       ret
(1)     25E :                    queue_add_elem:
(1)     25E : 6606                       zals    queue_work1
(1)     25F : 0001                       add     one
(1)     260 : 5006                       sacl    queue_work1
(1)     261 : 6605                       zals    queue_ptr
(1)     262 : 7D06                       tblw    queue_work1     ; queue_len++
(1)     263 : 7E02                       lack    queue_put
(1)     264 : 0005                       add     queue_ptr
(1)     265 : 6706                       tblr    queue_work1     ; work1=queue_put
(1)     266 : 7E04                       lack    queue_buf
(1)     267 : 0005                       add     queue_ptr
(1)     268 : 0006                       add     queue_work1
(1)     269 : 7D08                       tblw    queue_char      ; queue_buf[queue_put]=element
(1)     26A : 6606                       zals    queue_work1
(1)     26B : 0001                       add     one
(1)     26C : 5006                       sacl    queue_work1     ; queue_put++
(1)     26D : 1007                       sub     queue_work2     ; queue_put-queue_size
(1)     26E : FA00 0272                  blz     queue_add_exit  ; branch if queue_put<queue_size
(1)     270 : 7F89                       zac
(1)     271 : 5006                       sacl    queue_work1     ; queue_put=0
(1)     272 :                    queue_add_exit:
(1)     272 : 7E02                       lack    queue_put
(1)     273 : 0005                       add     queue_ptr       ; ACC points queue_put
(1)     274 : 7D06                       tblw    queue_work1     ; update queue_put
(1)     275 : 6608                       zals    queue_char      ; restore element
(1)     276 : 7F8D                       ret
(1)     277 :
(1)     277 :                    ;;; [queue] Remove an element from queue
(1)     277 :                    ;;; @param @SP queue work space pointer
(1)     277 :                    ;;; @return ACC an element
(1)     277 :                    ;;; @return ACC<0 if queue is empty
(1)     277 :                    ;;; @clobber DP=0
(1)     277 :                    queue_remove:
(1)     277 : 6E00                       ldpk    0               ; page 0
(1)     278 : 7F9D                       pop                     ; pop return address
(1)     279 : 6705                       tblr    queue_ptr       ; read queue pointer
(1)     27A : 0001                       add     one
(1)     27B : 7F9C                       push                    ; restore return address
(1)     27C : 6605                       zals    queue_ptr
(1)     27D : 6706                       tblr    queue_work1     ; work1=queue_len
(1)     27E : 6606                       zals    queue_work1
(1)     27F : FC00 0283                  bgz     queue_remove_elem ; branch if queue_len>0
(1)     281 : 6502                       zalh    minus           ; ACC<0
(1)     282 : 7F8D                       ret
(1)     283 :                    queue_remove_elem:
(1)     283 : 1001                       sub     one
(1)     284 : 5006                       sacl    queue_work1
(1)     285 : 6605                       zals    queue_ptr
(1)     286 : 7D06                       tblw    queue_work1     ; queue_len--
(1)     287 : 0001                       add     one
(1)     288 : 6707                       tblr    queue_work2     ; work2=queue_size
(1)     289 : 7E03                       lack    queue_get
(1)     28A : 0005                       add     queue_ptr
(1)     28B : 6706                       tblr    queue_work1     ; work1=queue_get
(1)     28C : 0001                       add     one             ; ACC=queue_buf
(1)     28D : 0006                       add     queue_work1
(1)     28E : 6708                       tblr    queue_char      ; load emement
(1)     28F : 6606                       zals    queue_work1
(1)     290 : 0001                       add     one
(1)     291 : 5006                       sacl    queue_work1       ; queue_get++
(1)     292 : 1007                       sub     queue_work2       ; queue_get-queue_size
(1)     293 : FA00 0297                  blz     queue_remove_exit ; branch if queue_get<queue_size
(1)     295 : 7F89                       zac
(1)     296 : 5006                       sacl    queue_work1     ; queue_get=0
(1)     297 :                    queue_remove_exit:
(1)     297 : 7E03                       lack    queue_get
(1)     298 : 0005                       add     queue_ptr
(1)     299 : 7D06                       tblw    queue_work1     ; update queue_get
(1)     29A : 6608                       zals    queue_char      ; restore emlemnt
(1)     29B : 7F8D                       ret
        29C :
        29C :                    int_isr:
        29C : 7C00                       sst     isr_st          ; save ST
        29D : 6E01                       ldpk    1               ; page 1
        29E : 5001                       sacl    isr_accl        ; save ACC
        29F : 5802                       sach    isr_acch
        2A0 : 7E01                       lack    RDRF_bm
        2A1 : 4403                       in      isr_work,ACIA_status
        2A2 : 7903                       and     isr_work
        2A3 : FF00 02AB                  bz      int_isr_exit
        2A5 : 4503                       in      isr_work,ACIA_data
        2A6 : 6603                       zals    isr_work
        2A7 : F800 024D                  call    queue_add
        2A9 : 0100                       .word   rx_queue
        2AA : 6E01                       ldpk    1               ; page 1
        2AB :                    int_isr_exit:
        2AB : 6502                       zalh    isr_acch        ; restore ACC
        2AC : 6101                       adds    isr_accl
        2AD : 7B00                       lst     isr_st          ; restore ST
        2AE : 7F82                       eint
        2AF : 7F8D                       ret
