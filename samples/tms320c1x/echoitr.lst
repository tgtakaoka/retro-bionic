          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            .include "tms320c15.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; TMS320C15
(1)       0 :                            .include "tms3201x.inc"
(2)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :                    ;;; TMS3201X
(2)       0 :                    ;;; Origin
(2)       0 : =0                 ORG_RESET:      .equ    0000H   ; Reset
(2)       0 : =2                 ORG_INT:        .equ    0002H   ; INT
(2)       0 :                    ;;; Halt to system
(2)       0 : =A000              HALT:           .equ    0A000H  ; illegal instruction
(1)       0 :                            .cpu     32015
(1)       0 :                    ;;; Data memory
(1)       0 : =0                 PAGE0:  .equ    00H
(1)       0 : =80                PAGE1:  .equ    80H
          0 :
          0 :                            ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =4                 ACIA:   .equ    4
          0 :                            .include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 : =4                 ACIA_control:   .equ    ACIA+0
(1)       0 : =4                 ACIA_status:    .equ    ACIA+0
(1)       0 : =5                 ACIA_data:      .equ    ACIA+1
(1)       0 : =6                 ACIA_intr:      .equ    ACIA+2
(1)       0 :                    ;;;  Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         .equ    11B       ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    .equ    00000000B ; /1
(1)       0 : =1                 CDS_DIV16_gc:   .equ    00000001B ; /16
(1)       0 : =2                 CDS_DIV64_gc:   .equ    00000010B ; /64
(1)       0 : =3                 CDS_RESET_gc:   .equ    00000011B ; Master Reset
(1)       0 :                    ;;;  Word Select Bits
(1)       0 : =1C                WSB_gm:         .equ    00011100B ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     .equ    00000000B ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     .equ    00000100B ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     .equ    00001000B ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     .equ    00001100B ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     .equ    00010000B ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     .equ    00010100B ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     .equ    00011000B ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     .equ    00011100B ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                    ;;; Transmit Control Bits
(1)       0 : =60                TCB_gm:         .equ    01100000B ; Group mask
(1)       0 : =0                 TCB_DI_gc:      .equ    00000000B ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      .equ    00100000B ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     .equ    01000000B ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   .equ    01100000B ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                      ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        .equ    10000000B ; Receive Interrupt Enable Bit mask
(1)       0 :                    ;;; Status register
(1)       0 : =1                 RDRF_bm:        .equ    00000001B ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        .equ    00000010B ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        .equ    00000100B ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        .equ    00001000B ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        .equ    00010000B ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        .equ    00100000B ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        .equ    01000000B ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        .equ    10000000B ; Interrupt Request Flag
          0 : =94                RX_INT_TX_NO:   .equ    WSB_8N1_gc|RIEB_bm
          0 : =B4                RX_INT_TX_INT:  .equ    WSB_8N1_gc|RIEB_bm|TCB_EI_gc
          0 :
          0 :                            .org    ORG_RESET
          0 : F900 0200                  b       initialize
          2 :                            .org    ORG_INT
          2 : F900 0305                  b       int_isr
          4 :
          4 :                    ;;; Data memory
          0 :                            .org    PAGE0
          0 :                    zero:           .bss    1       ; 0
          1 :                    one:            .bss    1       ; 1
          2 :                    minus:          .bss    1       ; -1
          3 :                    work:           .bss    1
          4 :                    char:           .bss    1
          5 :                    acia_tx_dis:    .bss    1
          6 :                    acia_tx_int:    .bss    1
          7 :                    queue_ptr:      .bss    1       ; queue pointer
          8 :                    queue_work1:    .bss    1       ; queue work1
          9 :                    queue_work2:    .bss    1       ; queue work2
          A :                    queue_char:     .bss    1       ; queue element
          B :                    getchar_ret:
          B :                    putchar_ret:    .bss    1
          C :                    putchar_work:   .bss    1
          D :                    putspace_ret:
          D :                    newline_ret:    .bss    1
          E :                    put_hex8_ret:
          E :                    put_bin8_ret:   .bss    1
          F :                    put_hex4_ret:   .bss    1
         10 :
         80 :                            .org    PAGE1
         80 :                    isr_st:         .bss    1       ; saving ST on interrupt
         81 :                    isr_accl:       .bss    1       ; saving ACC
         82 :                    isr_acch:       .bss    1
         83 :                    isr_ret:        .bss    1
         84 :                    isr_work:       .bss    1       ; work
         85 :
         85 :                    ;;; Program memory
        100 :                            .org    100H
        100 : =80                rx_queue_size:  .equ    80H
        100 :                    rx_queue:       .bss    rx_queue_size
        180 : =80                tx_queue_size:  .equ    80H
        180 :                    tx_queue:       .bss    tx_queue_size
        200 :
        200 :                            .org    200H
        200 :                    initialize:
        200 : 6E00                       ldpk    0
        201 : 7E01                       lack    1
        202 : 5001                       sacl    one
        203 : 7E00                       lack    0
        204 : 5000                       sacl    zero
        205 : 1001                       sub     one
        206 : 5002                       sacl    minus
        207 : 7E80                       lack    rx_queue_size
        208 : F800 029A                  call    queue_init
        20A : 0100                       .word   rx_queue
        20B : 7E80                       lack    tx_queue_size
        20C : F800 029A                  call    queue_init
        20E : 0180                       .word   tx_queue
        20F :                    ;;; Initialize ACIA
        20F : 7E03                       lack    CDS_RESET_gc
        210 : 5003                       sacl    work
        211 : 4C03                       out     work,ACIA_control ; Master reset
        212 : 7E94                       lack    RX_INT_TX_NO
        213 : 5005                       sacl    acia_tx_dis
        214 : 4C05                       out     acia_tx_dis,ACIA_control ; 8 bits + No Parity + 1 Stop Bits
        215 : 7EB4                       lack    RX_INT_TX_INT
        216 : 5006                       sacl    acia_tx_int
        217 :
        217 : F800 022B          loop:   call    getchar
        219 : 7A00                       or      zero
        21A : FF00 022A                  bz      halt_to_system
        21C : F800 0239                  call    putchar
        21E : F800 0247                  call    putspace
        220 : F800 025A                  call    put_hex8
        222 : F800 0247                  call    putspace
        224 : F800 027F                  call    put_bin8
        226 : F800 024F                  call    newline
        228 : F900 0217                  b       loop
        22A :                    halt_to_system:
        22A : A000                       .word   HALT
        22B :
        22B :                    ;;; get letter
        22B :                    ;;; @return ACC letter
        22B :                    ;;; @return char letter
        22B :                    getchar:
        22B : 7F9D                       pop
        22C : 500B                       sacl    getchar_ret
        22D :                    getchar_loop:
        22D : 7F81                       dint
        22E : F800 02E0                  call    queue_remove
        230 : 0100                       .word   rx_queue
        231 : 7F82                       eint
        232 : FA00 022D                  blz     getchar_loop
        234 : 5004                       sacl    char
        235 : 660B                       zals    getchar_ret
        236 : 7F9C                       push
        237 : 6604                       zals    char
        238 : 7F8D                       ret
        239 :
        239 :                    ;;; put letter
        239 :                    ;;; @param ACC letter
        239 :                    putchar:
        239 : 500C                       sacl    putchar_work
        23A : 7F9D                       pop                     ; return address
        23B : 500B                       sacl    putchar_ret
        23C : 7F81                       dint
        23D : 660C                       zals    putchar_work
        23E : F800 02B6                  call    queue_add
        240 : 0180                       .word   tx_queue
        241 : 4C06                       out     acia_tx_int,ACIA_control
        242 : 7F82                       eint
        243 : 660B                       zals    putchar_ret
        244 : 7F9C                       push                    ; return address
        245 : 660C                       zals    putchar_work
        246 : 7F8D                       ret
        247 :
        247 :                    putspace:
        247 : 7F9D                       pop                     ; return address
        248 : 500D                       sacl    putspace_ret
        249 : 7E20                       lack    ' '
        24A : F800 0239                  call    putchar
        24C : 660D                       zals    putspace_ret
        24D : 7F9C                       push                    ; return address
        24E : 7F8D                       ret
        24F :
        24F :                    newline:
        24F : 7F9D                       pop                     ; return address
        250 : 500D                       sacl    newline_ret
        251 : 7E0D                       lack    0DH
        252 : F800 0239                  call    putchar
        254 : 7E0A                       lack    0AH
        255 : F800 0239                  call    putchar
        257 : 660D                       zals    newline_ret
        258 : 7F9C                       push                    ; return address
        259 : 7F8D                       ret
        25A :
        25A :                    put_hex8:
        25A : 7F9D                       pop                     ; return address
        25B : 500E                       sacl    put_hex8_ret
        25C : 7E30                       lack    '0'
        25D : F800 0239                  call    putchar
        25F : 7E78                       lack    'x'
        260 : F800 0239                  call    putchar
        262 : 2C04                       lac     char,12         ; char<<12
        263 : 5803                       sach    work
        264 : 6603                       zals    work            ; char>>4
        265 : F800 026E                  call    put_hex4
        267 : 7E0F                       lack    0FH
        268 : 7904                       and     char
        269 : F800 026E                  call    put_hex4
        26B : 660E                       zals    put_hex8_ret
        26C : 7F9C                       push                    ; return address
        26D : 7F8D                       ret
        26E :
        26E :                    put_hex4:
        26E : 5003                       sacl    work
        26F : 7F9D                       pop                     ; return address
        270 : 500F                       sacl    put_hex4_ret
        271 : 7E0A                       lack    10
        272 : 1003                       sub     work            ; 10-work
        273 : FB00 0278                  blez    put_hex4_hex    ; branch if 10<=work
        275 : 7E30                       lack    '0'
        276 : F900 0279                  b       put_hex4_char
        278 :                    put_hex4_hex:
        278 : 7E37                       lack    'A'-10
        279 :                    put_hex4_char
        279 : 0003                       add     work
        27A : F800 0239                  call    putchar
        27C : 660F                       zals    put_hex4_ret
        27D : 7F9C                       push                    ; return address
        27E : 7F8D                       ret
        27F :
        27F :                    put_bin8:
        27F : 7F9D                       pop                     ; return address
        280 : 500E                       sacl    put_bin8_ret
        281 : 7E30                       lack    '0'
        282 : F800 0239                  call    putchar
        284 : 7E62                       lack    'b'
        285 : F800 0239                  call    putchar
        287 : 7007                       lark    AR0,8-1
        288 : 6880                       larp    AR0
        289 : 2804                       lac     char,8
        28A : 5004                       sacl    char            ; char<<=8
        28B :                    put_bin1:
        28B : 2104                       lac     char,1          ;
        28C : 5004                       sacl    char            ; work<<=1
        28D : 5803                       sach    work
        28E : 6603                       zals    work
        28F : 7901                       and     one
        290 : 5003                       sacl    work
        291 : 7E30                       lack    '0'
        292 : 0003                       add     work
        293 : F800 0239                  call    putchar
        295 : F400 028B                  banz    put_bin1
        297 : 660E                       zals    put_bin8_ret
        298 : 7F9C                       push                    ; return address
        299 : 7F8D                       ret
        29A :
        29A :                            .include "queue.inc"
(1)     29A :                    ;;; -*- mode: asm; mode: flying-spell; -*-
(1)     29A :                    ;;; [queue] queue structure
(1)     29A : =0                 queue_len:      equ     0       ; queue length
(1)     29A : =1                 queue_size:     equ     1       ; buffer size
(1)     29A : =2                 queue_put:      equ     2       ; queue put index
(1)     29A : =3                 queue_get:      equ     3       ; queue get index
(1)     29A : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     29A :
(1)     29A :                    ;;; [queue] Initialize queue
(1)     29A :                    ;;; @param @SP queue work space pointer
(1)     29A :                    ;;; @param ACC queue work space size
(1)     29A :                    ;;; @clobber ACC AR0 ARP=0 DP=0
(1)     29A :                    queue_init:
(1)     29A : 6E00                       ldpk    0               ; page 0
(1)     29B : 5008                       sacl    queue_work1
(1)     29C : 7F9D                       pop                     ; pop return address
(1)     29D : 6707                       tblr    queue_ptr       ; read queue pointer
(1)     29E : 0001                       add     one
(1)     29F : 7F9C                       push                    ; restore return address
(1)     2A0 : 6607                       zals    queue_ptr
(1)     2A1 : 7D00                       tblw    zero            ; queue_len=0
(1)     2A2 : 0001                       add     one
(1)     2A3 : 5007                       sacl    queue_ptr       ; &queue_size
(1)     2A4 : 2008                       lac     queue_work1
(1)     2A5 : 1201                       sub     one,2           ; queue_size-4
(1)     2A6 : 5008                       sacl    queue_work1
(1)     2A7 : 3808                       lar     AR0,queue_work1 ; AR0=queue_size
(1)     2A8 : 6607                       zals    queue_ptr
(1)     2A9 : 7D08                       tblw    queue_work1     ; queue_size
(1)     2AA : 0001                       add     one
(1)     2AB : 7D00                       tblw    zero            ; queue_put=0
(1)     2AC : 0001                       add     one
(1)     2AD : 7D00                       tblw    zero            ; queue_get=0
(1)     2AE : 6880                       larp    AR0             ; use AR0
(1)     2AF : F900 02B3                  b       queue_init_enter
(1)     2B1 :                    queue_init_loop:
(1)     2B1 : 0001                       add     one
(1)     2B2 : 7D00                       tblw    zero
(1)     2B3 :                    queue_init_enter:
(1)     2B3 : F400 02B1                  banz    queue_init_loop
(1)     2B5 : 7F8D                       ret
(1)     2B6 :
(1)     2B6 :                    ;;; [queue] Add an element to queue
(1)     2B6 :                    ;;; @param @SP queue work space pointer
(1)     2B6 :                    ;;; @param ACC an element
(1)     2B6 :                    ;;; @return ACC<0 if queue is full
(1)     2B6 :                    ;;; @clobber DP=0
(1)     2B6 :                    queue_add:
(1)     2B6 : 6E00                       ldpk    0               ; page 0
(1)     2B7 : 500A                       sacl    queue_char      ; save element
(1)     2B8 : 7F9D                       pop                     ; pop return address
(1)     2B9 : 6707                       tblr    queue_ptr       ; read queue pointer
(1)     2BA : 0001                       add     one
(1)     2BB : 7F9C                       push                    ; restore return address
(1)     2BC : 6607                       zals    queue_ptr
(1)     2BD : 6708                       tblr    queue_work1     ; work1=queue_len
(1)     2BE : 0001                       add     one
(1)     2BF : 6709                       tblr    queue_work2     ; work2=queue_size
(1)     2C0 : 6608                       zals    queue_work1
(1)     2C1 : 1009                       sub     queue_work2     ; queue_len-queue_size
(1)     2C2 : FA00 02C7                  blz     queue_add_elem  ; branch if queue_len<queue_size
(1)     2C4 : 6502                       zalh    minus           ; ACC<0
(1)     2C5 : 610A                       adds    queue_char      ; restore element
(1)     2C6 : 7F8D                       ret
(1)     2C7 :                    queue_add_elem:
(1)     2C7 : 6608                       zals    queue_work1
(1)     2C8 : 0001                       add     one
(1)     2C9 : 5008                       sacl    queue_work1
(1)     2CA : 6607                       zals    queue_ptr
(1)     2CB : 7D08                       tblw    queue_work1     ; queue_len++
(1)     2CC : 7E02                       lack    queue_put
(1)     2CD : 0007                       add     queue_ptr
(1)     2CE : 6708                       tblr    queue_work1     ; work1=queue_put
(1)     2CF : 7E04                       lack    queue_buf
(1)     2D0 : 0007                       add     queue_ptr
(1)     2D1 : 0008                       add     queue_work1
(1)     2D2 : 7D0A                       tblw    queue_char      ; queue_buf[queue_put]=element
(1)     2D3 : 6608                       zals    queue_work1
(1)     2D4 : 0001                       add     one
(1)     2D5 : 5008                       sacl    queue_work1     ; queue_put++
(1)     2D6 : 1009                       sub     queue_work2     ; queue_put-queue_size
(1)     2D7 : FA00 02DB                  blz     queue_add_exit  ; branch if queue_put<queue_size
(1)     2D9 : 7F89                       zac
(1)     2DA : 5008                       sacl    queue_work1     ; queue_put=0
(1)     2DB :                    queue_add_exit:
(1)     2DB : 7E02                       lack    queue_put
(1)     2DC : 0007                       add     queue_ptr       ; ACC points queue_put
(1)     2DD : 7D08                       tblw    queue_work1     ; update queue_put
(1)     2DE : 660A                       zals    queue_char      ; restore element
(1)     2DF : 7F8D                       ret
(1)     2E0 :
(1)     2E0 :                    ;;; [queue] Remove an element from queue
(1)     2E0 :                    ;;; @param @SP queue work space pointer
(1)     2E0 :                    ;;; @return ACC an element
(1)     2E0 :                    ;;; @return ACC<0 if queue is empty
(1)     2E0 :                    ;;; @clobber DP=0
(1)     2E0 :                    queue_remove:
(1)     2E0 : 6E00                       ldpk    0               ; page 0
(1)     2E1 : 7F9D                       pop                     ; pop return address
(1)     2E2 : 6707                       tblr    queue_ptr       ; read queue pointer
(1)     2E3 : 0001                       add     one
(1)     2E4 : 7F9C                       push                    ; restore return address
(1)     2E5 : 6607                       zals    queue_ptr
(1)     2E6 : 6708                       tblr    queue_work1     ; work1=queue_len
(1)     2E7 : 6608                       zals    queue_work1
(1)     2E8 : FC00 02EC                  bgz     queue_remove_elem ; branch if queue_len>0
(1)     2EA : 6502                       zalh    minus           ; ACC<0
(1)     2EB : 7F8D                       ret
(1)     2EC :                    queue_remove_elem:
(1)     2EC : 1001                       sub     one
(1)     2ED : 5008                       sacl    queue_work1
(1)     2EE : 6607                       zals    queue_ptr
(1)     2EF : 7D08                       tblw    queue_work1     ; queue_len--
(1)     2F0 : 0001                       add     one
(1)     2F1 : 6709                       tblr    queue_work2     ; work2=queue_size
(1)     2F2 : 7E03                       lack    queue_get
(1)     2F3 : 0007                       add     queue_ptr
(1)     2F4 : 6708                       tblr    queue_work1     ; work1=queue_get
(1)     2F5 : 0001                       add     one             ; ACC=queue_buf
(1)     2F6 : 0008                       add     queue_work1
(1)     2F7 : 670A                       tblr    queue_char      ; load emement
(1)     2F8 : 6608                       zals    queue_work1
(1)     2F9 : 0001                       add     one
(1)     2FA : 5008                       sacl    queue_work1       ; queue_get++
(1)     2FB : 1009                       sub     queue_work2       ; queue_get-queue_size
(1)     2FC : FA00 0300                  blz     queue_remove_exit ; branch if queue_get<queue_size
(1)     2FE : 7F89                       zac
(1)     2FF : 5008                       sacl    queue_work1     ; queue_get=0
(1)     300 :                    queue_remove_exit:
(1)     300 : 7E03                       lack    queue_get
(1)     301 : 0007                       add     queue_ptr
(1)     302 : 7D08                       tblw    queue_work1     ; update queue_get
(1)     303 : 660A                       zals    queue_char      ; restore emlemnt
(1)     304 : 7F8D                       ret
        305 :
        305 :                    int_isr:
        305 : 7C00                       sst     isr_st          ; save ST
        306 : 6E01                       ldpk    1               ; page 1
        307 : 5001                       sacl    isr_accl        ; save ACC
        308 : 5802                       sach    isr_acch
        309 : 7F9D                       pop                     ; return address
        30A : 5003                       sacl    isr_ret
        30B : 7E01                       lack    RDRF_bm
        30C : 4404                       in      isr_work,ACIA_status
        30D : 7904                       and     isr_work
        30E : FF00 0316                  bz      int_isr_send
        310 : 4504                       in      isr_work,ACIA_data
        311 : 6604                       zals    isr_work
        312 : F800 02B6                  call    queue_add
        314 : 0100                       .word   rx_queue
        315 : 6E01                       ldpk    1               ; page 1
        316 :                    int_isr_send:
        316 : 7E02                       lack    TDRE_bm
        317 : 4404                       in      isr_work,ACIA_status
        318 : 7904                       and     isr_work
        319 : FF00 0323                  bz      int_isr_exit
        31B : F800 02E0                  call    queue_remove
        31D : 0180                       .word   tx_queue
        31E : 6E01                       ldpk    1               ; page 1
        31F : FA00 032A                  blz     int_isr_send_empty
        321 : 5004                       sacl    isr_work
        322 : 4D04                       out     isr_work,ACIA_data
        323 :                    int_isr_exit:
        323 : 6603                       zals    isr_ret
        324 : 7F9C                       push                    ; return address
        325 : 6502                       zalh    isr_acch        ; restore ACC
        326 : 6101                       adds    isr_accl
        327 : 7B00                       lst     isr_st          ; restore ST
        328 : 7F82                       eint
        329 : 7F8D                       ret
        32A :                    int_isr_send_empty:
        32A : 4C05                       out     acia_tx_dis,ACIA_control
        32B : F900 0323                  b       int_isr_exit
