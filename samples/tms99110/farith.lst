          0 :                    *** -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            include "tms99110.inc"
(1)       0 :                    *** -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            *** TMS99110
(1)       0 :                            include "tms99105.inc"
(2)       0 :                    *** -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :                            *** TMS99105
(2)       0 :                            include "tms9900.inc"
(3)       0 :                    *** -*- mode: asm; mode: flyspell-prog; -*-
(3)       0 :                            *** TMS9900
(3)       0 :                            cpu     tms9900
(3)       0 :                            *** Status Register
(3)       0 : =8000              ST_LGT:         equ     ?1000000000000000 ; Logical Greater Than
(3)       0 : =4000              ST_AGT:         equ     ?0100000000000000 ; Arithmetic Greater Than
(3)       0 : =2000              ST_EQ:          equ     ?0010000000000000 ; Equal
(3)       0 : =1000              ST_C:           equ     ?0001000000000000 ; Carry
(3)       0 : =800               ST_OV:          equ     ?0000100000000000 ; Overflow
(3)       0 : =400               ST_OP:          equ     ?0000010000000000 ; Parity
(3)       0 : =200               ST_X:           equ     ?0000001000000000 ; XOP
(3)       0 : =F                 ST_INT_gm:      equ     ?0000000000001111 ; Interrupt mask
(3)       0 :                            *** Vector
(3)       0 : =0                 VEC_RESET:      equ     >0000   ; Reset
(3)       0 : =4                 VEC_INT1:       equ     >0004   ; INT1
(3)       0 : =10                VEC_INT4:       equ     >0010   ; INT4
(3)       0 : =40                VEC_XOP0:       equ     >0040   ; XOP 0
(3)       0 : =44                VEC_XOP1:       equ     >0044   ; XOP 1
(3)       0 : =48                VEC_XOP2:       equ     >0048   ; XOP 2
(3)       0 : =4C                VEC_XOP3:       equ     >004C   ; XOP 3
(3)       0 : =50                VEC_XOP4:       equ     >0050   ; XOP 4
(3)       0 : =54                VEC_XOP5:       equ     >0054   ; XOP 5
(3)       0 : =58                VEC_XOP6:       equ     >0058   ; XOP 6
(3)       0 : =5C                VEC_XOP7:       equ     >005C   ; XOP 7
(3)       0 : =60                VEC_XOP8:       equ     >0060   ; XOP 8
(3)       0 : =64                VEC_XOP9:       equ     >0064   ; XOP 9
(3)       0 : =68                VEC_XOP10       equ     >0068   ; XOP 10
(3)       0 : =6C                VEC_XOP11:      equ     >006C   ; XOP 11
(3)       0 : =70                VEC_XOP12:      equ     >0070   ; XOP 12
(3)       0 : =74                VEC_XOP13:      equ     >0074   ; XOP 13
(3)       0 : =78                VEC_XOP14:      equ     >0078   ; XOP 14
(3)       0 : =7C                VEC_XOP15:      equ     >007C   ; XOP 15
(2)       0 :                            cpu     tms99105
(2)       0 :                            *** Status Register
(2)       0 : =800               ST_AF:          equ     ST_OV             ; Arithmetic fault
(2)       0 : =100               ST_PRV:         equ     ?0000000100000000 ; Privileged mode
(2)       0 : =80                ST_MAP:         equ     ?0000000010000000 ; Map select
(2)       0 : =20                ST_AFIE:        equ     ?0000000000100000 ; Arithmetic fault interrupt enable
(2)       0 : =10                ST_EM:          equ     ?0000000000010000 ; XOP emulate enable
(2)       0 :                            *** Vector
(2)       0 : =8                 VEC_INT2:       equ     >0008   ; INT2
(2)       0 : =C                 VEC_INT3:       equ     >000C   ; INT3
(2)       0 : =14                VEC_INT5:       equ     >0014   ; INT5
(2)       0 : =18                VEC_INT6:       equ     >0018   ; INT6
(2)       0 : =1C                VEC_INT7:       equ     >001C   ; INT7
(2)       0 : =20                VEC_INT8:       equ     >0020   ; INT8
(2)       0 : =24                VEC_INT9:       equ     >0024   ; INT9
(2)       0 : =28                VEC_INT10:      equ     >0028   ; INT10
(2)       0 : =2C                VEC_INT11:      equ     >002C   ; INT11
(2)       0 : =30                VEC_INT12:      equ     >0030   ; INT12
(2)       0 : =34                VEC_INT13:      equ     >0034   ; INT13
(2)       0 : =38                VEC_INT14:      equ     >0038   ; INT14
(2)       0 : =3C                VEC_INT15:      equ     >003C   ; INT15
(1)       0 :                            cpu     tms99110
          0 :
          0 :                    *** MC6850 Asynchronous Communication Interface Adapter
          0 : =80                ACIA:   equ     >0080
          0 :                            include "mc6850.inc"
(1)       0 :                    *** -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            *** MC6850
(1)       0 :                            *** Asynchronous Communication Interface Adapter
(1)       0 : =80                ACIA_control:   equ     ACIA+0
(1)       0 : =80                ACIA_status:    equ     ACIA+0
(1)       0 : =82                ACIA_data:      equ     ACIA+2
(1)       0 : =84                ACIA_intr:      equ     ACIA+4
(1)       0 :                            **  Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     ?11             Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     ?00000000       /1
(1)       0 : =0                 CDS_DIV16_gc:   equ     ?00000001       /16
(1)       0 : =0                 CDS_DIV64_gc:   equ     ?00000010       /64
(1)       0 : =3                 CDS_RESET_gc:   equ     ?00000011       Master Reset
(1)       0 :                            **  Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     ?00011100       Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     ?00000000       7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     ?00000100       7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     ?00001000       7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     ?00001100       7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     ?00010000       8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     ?00010100       8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     ?00011000       8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     ?00011100       8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            **  Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     ?01100000       Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     ?00000000       RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     ?00100000       RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     ?01000000       RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     ?01100000       RTS=Low,  Tx Interrupt Disabled
(1)       0 :                            *                               Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     ?10000000       Receive Interrupt Enable Bit mask
(1)       0 :                            *** Status register
(1)       0 : =1                 RDRF_bm:        equ     ?00000001       Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     ?00000010       Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     ?00000100       Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     ?00001000       Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     ?00010000       Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     ?00100000       Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     ?01000000       Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     ?10000000       Interrupt Request Flag
          0 :
          0 :                            org     VEC_RESET
          0 : 0100                       data    workspace
          2 : 0200                       data    initialize
          4 :
          8 :                            org     VEC_INT2
          8 : 0120                       data    workspace_illop
          A : 0140                       data    illop
          C :
         7C :                            org     VEC_XOP15
         7C : 007C                       data    VEC_XOP15       for halt to system
         7E : 007C                       data    VEC_XOP15
         80 :
        100 :                            org     >0100
        100 :                    workspace:
        100 :                            bss     2*16
        120 :                    workspace_illop:
        120 :                            bss     2*16
        140 :
        140 :                    illop:
        140 : 2FCF                       xop     R15,15          halt to system
        142 :
       2000 :                            org     >2000
       2000 : =2000              stack:          equ     $
       2000 :
       2000 :                    hibyte: function v,(v)*256      Hi byte constant
       2000 :
        200 :                            org     >0200
        200 :                    initialize:
        200 : 020A 2000                  li      R10, stack
        204 :                            * Initialize ACIA
        204 : 0200 0300                  li      R0, hibyte(CDS_RESET_gc)        Master reset
        208 : D800 0080                  movb    R0, @ACIA_control
        20C : 0200 1400                  li      R0, hibyte(WSB_8N1_gc)          8 bits + No Parity + 1 Stop Bits
        210 : D800 0080                  movb    R0, @ACIA_control
        214 : 00BA 02CA                  blsk    R10, arith
        218 : 2FCF                       xop     R15,15          halt to system
        21A :
        21A :                    newline:
        21A : 0200 0D00                  li      R0, hibyte(>0D)
        21E : 00BA 0230                  blsk    R10, putchar
        222 : 0200 0A00                  li      R0, hibyte(>0A)
        226 : 00BA 0230                  blsk    R10, putchar
        22A : 017A                       bind    *R10+
        22C :
        22C :                    putspace:
        22C : 0200 2000                  li      R0, hibyte(' ')
        230 :                    putchar:
        230 : 064A                       dect    R10
        232 : C681                       mov     R1, *R10                Push R1
        234 :                    putchar_loop:
        234 : D060 0080                  movb    @ACIA_status, R1
        238 : 0241 0200                  andi    R1, hibyte(TDRE_bm)
        23C : 13FB                       jeq     putchar_loop
        23E : D800 0082                  movb    R0, @ACIA_data
        242 : C07A                       mov     *R10+, R1               Pop R1
        244 : 017A                       bind    *R10+
        246 :
        246 :                    *** Print "A op B"
        246 :                    *** @param R0 op letter
        246 :                    *** @param R1 signed 16-bit integer A
        246 :                    *** @param R2 signed 16-bit integer B
        246 :                    *** @return R0:R1 single 32-bit float A
        246 :                    *** @return R2:R3 single 32-bit float B
        246 :                    expr:
        246 : 064A                       dect    R10
        248 : C680                       mov     R0, *R10        Push R0
        24A : C001                       mov     R1, R0
        24C : 00BA 04D4                  blsk    R10, print_int16
        250 : 00BA 022C                  blsk    R10, putspace
        254 : C03A                       mov     *R10+, R0       Pop R0
        256 : 00BA 0230                  blsk    R10, putchar    Print op
        25A : 00BA 022C                  blsk    R10, putspace
        25E : C002                       mov     R2, R0
        260 : 00BA 04D4                  blsk    R10, print_int16
        264 : 064A                       dect    R10
        266 : C681                       mov     R1, *R10        Push R1
        268 : 0C82                       cir     R2              convert R2 into R0:R1
        26A : 0DC2                       str     R2              move R1:R2 to R2:F3
        26C : C07A                       mov     *R10+, R1       Pop R1
        26E : 0C81                       cir     R1              convert R1 into R0:R1
        270 : 017A                       bind    *R10+
        272 :
        272 :                    *** Print " = V\n"
        272 :                    *** @param R0:R1 single 32-bit float V
        272 :                    *** @clobber R0:R1
        272 :                    answer:
        272 : 064A                       dect    R10
        274 : C680                       mov     R0, *R10        Push R0
        276 : 00BA 022C                  blsk    R10, putspace
        27A : 0200 3D00                  li      R0, hibyte('=')
        27E : 00BA 0230                  blsk    R10, putchar
        282 : 00BA 022C                  blsk    R10, putspace
        286 : C03A                       mov     *R10+, R0       Pop R0
        288 : 0C00                       cri                     convert R0:R1 to R0
        28A : 00BA 04D4                  blsk    R10, print_int16
        28E : 00BA 021A                  blsk    R10, newline
        292 : 017A                       bind    *R10+
        294 :
        294 :                    *** Print "A rel B"
        294 :                    *** @param R1 signed 16-bit integer A
        294 :                    *** @param R2 signed 16-bit integer B
        294 :                    *** @clobber R0 R1 R2 R2
        294 :                    comp:
        294 : 064A                       dect    R10
        296 : C682                       mov     R2, *R10        Push R2
        298 : 064A                       dect    R10
        29A : C681                       mov     R1, *R10        Push R1
        29C : 0C82                       cir     R2              convert R2 into R0:R1
        29E : 0DC2                       str     R2              move R0:R1 to R2:R3
        2A0 : C05A                       mov     *R10, R1        Restore R1
        2A2 : 0C81                       cir     R1              convert R1 into R0:R1
        2A4 : 0301 0080                  cr      R0, R2          compare single float
        2A8 : 1304                       jeq     comp_eq
        2AA : 1506                       jgt     comp_gt
        2AC :                    comp_lt:
        2AC : 0200 3C00                  li      R0, hibyte('<')
        2B0 : 1005                       jmp     comp_out
        2B2 :                    comp_eq:
        2B2 : 0200 3D00                  li      R0, hibyte('=')
        2B6 : 1002                       jmp     comp_out
        2B8 :                    comp_gt:
        2B8 : 0200 3E00                  li      R0, hibyte('>')
        2BC :                    comp_out:
        2BC : C07A                       mov     *R10+, R1       Pop R1
        2BE : C0BA                       mov     *R10+, R2       Pop R2
        2C0 : 00BA 0246                  blsk    R10, expr
        2C4 : 00BA 021A                  blsk    R10, newline
        2C8 : 017A                       bind    *R10+
        2CA :
        2CA :                    arith:
        2CA : 0201 4650                  li      R1, 18000
        2CE : 0202 6D60                  li      R2, 28000
        2D2 : 0200 2B00                  li      R0, hibyte('+')
        2D6 : 00BA 0246                  blsk    R10, expr
        2DA : 0C42                       ar      R2              R0:R1+=R2:R3
        2DC : 00BA 0272                  blsk    R10, answer     ; -19536
        2E0 :
        2E0 : 0201 4650                  li      R1, 18000
        2E4 : 0202 B9B0                  li      R2, -18000
        2E8 : 0200 2B00                  li      R0, hibyte('+')
        2EC : 00BA 0246                  blsk    R10, expr
        2F0 : 0C42                       ar      R2              R0:R1+=R2:R3
        2F2 : 00BA 0272                  blsk    R10, answer     ; 0
        2F6 :
        2F6 : 0201 B9B0                  li      R1, -18000
        2FA : 0202 B9B0                  li      R2, -18000
        2FE : 0200 2B00                  li      R0, hibyte('+')
        302 : 00BA 0246                  blsk    R10, expr
        306 : 0C42                       ar      R2              R0:R1+=R2:R3
        308 : 00BA 0272                  blsk    R10, answer     ; 29536
        30C :
        30C : 0201 B9B0                  li      R1, -18000
        310 : 0202 92A0                  li      R2, -28000
        314 : 0200 2D00                  li      R0, hibyte('-')
        318 : 00BA 0246                  blsk    R10, expr
        31C : 0CC2                       sr      R2              R0:R1-=R2:R3
        31E : 00BA 0272                  blsk    R10, answer     ; 10000
        322 :
        322 : 0201 4650                  li      R1, 18000
        326 : 0202 B9B0                  li      R2, -18000
        32A : 0200 2D00                  li      R0, hibyte('-')
        32E : 00BA 0246                  blsk    R10, expr
        332 : 0CC2                       sr      R2              R0:R1-=R2:R3
        334 : 00BA 0272                  blsk    R10, answer     ; -29536
        338 :
        338 : 0201 92A0                  li      R1, -28000
        33C : 0202 B9B0                  li      R2, -18000
        340 : 0200 2D00                  li      R0, hibyte('-')
        344 : 00BA 0246                  blsk    R10, expr
        348 : 0CC2                       sr      R2              R0:R1-=R2:R3
        34A : 00BA 0272                  blsk    R10, answer     ; -10000
        34E :
        34E : 0201 0064                  li      R1, 100
        352 : 0202 012C                  li      R2, 300
        356 : 0200 2A00                  li      R0, hibyte('*')
        35A : 00BA 0246                  blsk    R10, expr
        35E : C002                       mov     R2, R0
        360 : 0D02                       mr      R2              R0:R1*=R2:R3
        362 : 00BA 0272                  blsk    R10, answer     ; 30000
        366 :
        366 : 0201 00C8                  li      R1, 200
        36A : 0202 0064                  li      R2, 100
        36E : 0200 2A00                  li      R0, hibyte('*')
        372 : 00BA 0246                  blsk    R10, expr
        376 : C002                       mov     R2, R0
        378 : 0D02                       mr      R2              R0:R1*=R2:R3
        37A : 00BA 0272                  blsk    R10, answer     ; 20000
        37E :
        37E : 0201 012C                  li      R1, 300
        382 : 0202 FF38                  li      R2, -200
        386 : 0200 2A00                  li      R0, hibyte('*')
        38A : 00BA 0246                  blsk    R10, expr
        38E : C002                       mov     R2, R0
        390 : 0D02                       mr      R2              R0:R1*=R2:R3
        392 : 00BA 0272                  blsk    R10, answer     ; 5536
        396 :
        396 : 0201 0064                  li      R1, 100
        39A : 0202 FED4                  li      R2, -300
        39E : 0200 2A00                  li      R0, hibyte('*')
        3A2 : 00BA 0246                  blsk    R10, expr
        3A6 : C002                       mov     R2, R0
        3A8 : 0D02                       mr      R2              R0:R1*=R2:R3
        3AA : 00BA 0272                  blsk    R10, answer     ; -30000
        3AE :
        3AE : 0201 FF38                  li      R1, -200
        3B2 : 0202 FF9C                  li      R2, -100
        3B6 : 0200 2A00                  li      R0, hibyte('*')
        3BA : 00BA 0246                  blsk    R10, expr
        3BE : C002                       mov     R2, R0
        3C0 : 0D02                       mr      R2              R0:R1*=R2:R3
        3C2 : 00BA 0272                  blsk    R10, answer     ; 20000
        3C6 :
        3C6 : 0201 7530                  li      R1, 30000
        3CA : 0202 0064                  li      R2, 100
        3CE : 0200 2F00                  li      R0, hibyte('/')
        3D2 : 00BA 0246                  blsk    R10, expr
        3D6 : 0D42                       dr      R2              R0:R1/=R2:R3
        3D8 : 00BA 0272                  blsk    R10, answer     ; 300
        3DC :
        3DC : 0201 FF38                  li      R1, -200
        3E0 : 0202 0064                  li      R2, 100
        3E4 : 0200 2F00                  li      R0, hibyte('/')
        3E8 : 00BA 0246                  blsk    R10, expr
        3EC : 0D42                       dr      R2              R0:R1/=R2:R3
        3EE : 00BA 0272                  blsk    R10, answer     ; -2
        3F2 :
        3F2 : 0201 8AD0                  li      R1, -30000
        3F6 : 0202 FF38                  li      R2, -200
        3FA : 0200 2F00                  li      R0, hibyte('/')
        3FE : 00BA 0246                  blsk    R10, expr
        402 : 0D42                       dr      R2              R0:R1/=R2:R3
        404 : 00BA 0272                  blsk    R10, answer     ; 150
        408 :
        408 : 0201 8AD0                  li      R1, -30000
        40C : 0202 004E                  li      R2, 78
        410 : 0200 2F00                  li      R0, hibyte('/')
        414 : 00BA 0246                  blsk    R10, expr
        418 : 0D42                       dr      R2              R0:R1/=R2:R3
        41A : 00BA 0272                  blsk    R10, answer     ; -384
        41E :
        41E : 0201 1388                  li      R1, 5000
        422 : 0202 0FA0                  li      R2, 4000
        426 : 00BA 0294                  blsk    R10, comp
        42A :
        42A : 0201 1388                  li      R1, 5000
        42E : 0202 1388                  li      R2, 5000
        432 : 00BA 0294                  blsk    R10, comp
        436 :
        436 : 0201 0FA0                  li      R1, 4000
        43A : 0202 1388                  li      R2, 5000
        43E : 00BA 0294                  blsk    R10, comp
        442 :
        442 : 0201 EC78                  li      R1, -5000
        446 : 0202 F060                  li      R2, -4000
        44A : 00BA 0294                  blsk    R10, comp
        44E :
        44E : 0201 EC78                  li      R1, -5000
        452 : 0202 EC78                  li      R2, -5000
        456 : 00BA 0294                  blsk    R10, comp
        45A :
        45A : 0201 F060                  li      R1, -4000
        45E : 0202 EC78                  li      R2, -5000
        462 : 00BA 0294                  blsk    R10, comp
        466 :
        466 : 0201 7FBC                  li      R1, 32700
        46A : 0202 7F58                  li      R2, 32600
        46E : 00BA 0294                  blsk    R10, comp
        472 :
        472 : 0201 7FBC                  li      R1, 32700
        476 : 0202 7FBC                  li      R2, 32700
        47A : 00BA 0294                  blsk    R10, comp
        47E :
        47E : 0201 7F58                  li      R1, 32600
        482 : 0202 7FBC                  li      R2, 32700
        486 : 00BA 0294                  blsk    R10, comp
        48A :
        48A : 0201 8044                  li      R1, -32700
        48E : 0202 80A8                  li      R2, -32600
        492 : 00BA 0294                  blsk    R10, comp
        496 :
        496 : 0201 8044                  li      R1, -32700
        49A : 0202 8044                  li      R2, -32700
        49E : 00BA 0294                  blsk    R10, comp
        4A2 :
        4A2 : 0201 80A8                  li      R1, -32600
        4A6 : 0202 8044                  li      R2, -32700
        4AA : 00BA 0294                  blsk    R10, comp
        4AE :
        4AE : 0201 4650                  li      R1, 18000
        4B2 : 0202 92A0                  li      R2, -28000
        4B6 : 00BA 0294                  blsk    R10, comp
        4BA :
        4BA : 0201 92A0                  li      R1, -28000
        4BE : 0202 92A0                  li      R2, -28000
        4C2 : 00BA 0294                  blsk    R10, comp
        4C6 :
        4C6 : 0201 92A0                  li      R1, -28000
        4CA : 0202 4650                  li      R2, 18000
        4CE : 00BA 0294                  blsk    R10, comp
        4D2 :
        4D2 : 017A                       bind    *R10+
        4D4 :
        4D4 :                            include "arith.inc"
(1)     4D4 :                    *** -*- mode: asm; mode: flyspell-prog* -*-
(1)     4D4 :                            *** Print signed 16-bit integer as decimal
(1)     4D4 :                            *** @param R0 value
(1)     4D4 :                    print_int16:
(1)     4D4 : 064A                       dect    R10
(1)     4D6 : C680                       mov     R0, *R10        Push R0
(1)     4D8 : 1313                       jeq     print_int16_zero
(1)     4DA : 1506                       jgt     print_uint16
(1)     4DC : 0200 2D00                  li      R0, hibyte('-')
(1)     4E0 : 00BA 0230                  blsk    R10, putchar
(1)     4E4 : C01A                       mov     *R10, R0        Restore R0
(1)     4E6 : 0500                       neg     R0
(1)     4E8 :                    print_uint16:
(1)     4E8 : 064A                       dect    R10
(1)     4EA : C681                       mov     R1, *R10        Push R1
(1)     4EC : 064A                       dect    R10
(1)     4EE : C682                       mov     R2, *R10        Push R2
(1)     4F0 : 0202 000A                  li      R2, 10
(1)     4F4 : 00BA 050A                  blsk    R10, print_uint16_loop
(1)     4F8 : C0BA                       mov     *R10+, R2       Pop R2
(1)     4FA : C07A                       mov     *R10+, R1       Pop R1
(1)     4FC :                    print_int16_return:
(1)     4FC : C03A                       mov     *R10+, R0       Pop R0
(1)     4FE : 017A                       bind    *R10+
(1)     500 :                    print_int16_zero:
(1)     500 : 0200 3000                  li      R0, hibyte('0')
(1)     504 : 00BA 0230                  blsk    R10, putchar
(1)     508 : 10F9                       jmp     print_int16_return
(1)     50A :
(1)     50A :                    print_uint16_loop:
(1)     50A : C040                       mov     R0, R1
(1)     50C : 130C                       jeq     print_uint16_return
(1)     50E : 04C0                       clr     R0
(1)     510 : 3C02                       div     R2, R0          R0:R1/R2 ; R0=quotient R1=reminder
(1)     512 : 064A                       dect    R10
(1)     514 : C681                       mov     R1, *R10        Push reminder
(1)     516 : 00BA 050A                  blsk    R10, print_uint16_loop
(1)     51A : C03A                       mov     *R10+, R0       Pop reminder
(1)     51C : 06C0                       swpb    R0
(1)     51E : 0220 3000                  ai      R0, hibyte('0')
(1)     522 : 00BA 0230                  blsk    R10, putchar
(1)     526 :                    print_uint16_return:
(1)     526 : 017A                       bind    *R10+           Pop return address
(1)     528 :
(1)     528 :                            *** Unsigned Divide
(1)     528 :                            *** R1 / |R2| = R1
(1)     528 :                            *** @clobber R2
(1)     528 :                    udiv16:
(1)     528 : 0281 0000                  ci      R1, 0
(1)     52C : 1104                       jlt     udiv16_negative R1 < 0
(1)     52E : 04C0                       clr     R0              Sign extend
(1)     530 : 3C02                       div     R2, R0          R0:R1/R2=R0..R1
(1)     532 : C040                       mov     R0, R1
(1)     534 : 045B                       rt
(1)     536 :                    udiv16_negative:
(1)     536 : 0700                       seto    R0              Sign extend
(1)     538 : 0182                       divs    R2              R0:R1/R2=R0...R1
(1)     53A : C040                       mov     R0, R1
(1)     53C : 045B                       rt
