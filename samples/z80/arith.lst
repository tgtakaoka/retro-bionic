          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     z80
          0 :                            include "z80.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; z80
(1)       0 :                    ;;; FLAGS Register
(1)       0 : =80                F_SIGN:         equ     10000000B ; set to 1 if negative
(1)       0 : =40                F_ZERO:         equ     01000000B ; set to 1 if zero
(1)       0 : =10                F_HALF_CARRY:   equ     00010000B ; set to 1 if carry from bit-3
(1)       0 : =4                 F_PARITY:       equ     00000100B ; set to 1 if even parity
(1)       0 : =4                 F_OVERFLOW:     equ     00000100B ; set to 1 if overflow
(1)       0 : =2                 F_NBCD:         equ     00000010B ; set to 1 if subtraction
(1)       0 : =1                 F_CARRY:        equ     00000001B ; set to 1 if carry
(1)       0 :                    ;;; Interrupt origin
(1)       0 : =0                 ORG_RESET:      equ     0000H   ; RESET
(1)       0 : =0                 ORG_RST00:      equ     0000H   ; RST 00H
(1)       0 : =8                 ORG_RST08:      equ     0008H   ; RST 08H
(1)       0 : =10                ORG_RST10:      equ     0010H   ; RST 10H
(1)       0 : =18                ORG_RST18:      equ     0018H   ; RST 18H
(1)       0 : =20                ORG_RST20:      equ     0020H   ; RST 20H
(1)       0 : =28                ORG_RST28:      equ     0028H   ; RST 28H
(1)       0 : =30                ORG_RST30:      equ     0030H   ; RST 30H
(1)       0 : =38                ORG_RST38:      equ     0038H   ; RST 38H
(1)       0 : =38                ORG_INT:        equ     0038H   ; Mode 1 INT
(1)       0 : =66                ORG_NMI:        equ     0066H   ; NMI
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =0                 USART:  equ     00H
          0 : =0                 USARTD: equ     USART+0         ; Data register
          0 : =1                 USARTS: equ     USART+1         ; Status register
          0 : =1                 USARTC: equ     USART+1         ; Control register
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     11000000B
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 << MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 << MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 << MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     00100000B
(1)       0 : =10                MODE_PARITY_bm: equ     00010000B
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     00001100B
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 << MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 << MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 << MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 << MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     00000011B
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 << MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ (2 << MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ (3 << MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     10000000B   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     01000000B   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     00100000B   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     00010000B   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     00001000B   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     00000100B   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     00000010B   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     00000001B   ; Transmit enable
(1)       0 :
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     10000000B   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     01000000B   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     00100000B   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     00010000B   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     00001000B   ; Parity Error
(1)       0 : =2                 ST_TxEMPTY_bp:  equ     2           ; Transmitter empty
(1)       0 : =1                 ST_RxRDY_bp:    equ     1           ; Receiver ready
(1)       0 : =0                 ST_TxRDY_bp:    equ     0           ; Transmitter ready
          0 :                    ;;; Async 1stop 8data x16
          0 : =4E                ASYNC_MODE:     equ     MODE_STOP1_gc|MODE_LEN8_gc|MODE_BAUD_X16
          0 :                    ;;; RTS/DTR, error reset, Rx enable, Tx enable
          0 : =37                RX_EN_TX_EN:    equ     CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm|CMD_TxEN_bm
          0 :
       1000 :                            org     1000H
       1000 : =1000              stack:  equ     $
       1000 :
          0 :                            org     ORG_RESET
          0 : C3 00 01                   jp      init_usart
          3 :
        100 :                            org     0100H
        100 :                    init_usart:
        100 : 31 00 10                   ld      sp, stack
        103 : AF                         xor     A               ; clear A
        104 : D3 01                      out     (USARTC), A
        106 : D3 01                      out     (USARTC), A
        108 : D3 01                      out     (USARTC), A          ; safest way to sync mode
        10A : 3E 40                      ld      A, CMD_IR_bm
        10C : D3 01                      out     (USARTC), A          ; reset
        10E : 00                         nop
        10F : 00                         nop
        110 : 3E 4E                      ld      A, ASYNC_MODE
        112 : D3 01                      out     (USARTC), A
        114 : 00                         nop
        115 : 00                         nop
        116 : 3E 37                      ld      A, RX_EN_TX_EN
        118 : D3 01                      out     (USARTC), A
        11A :
        11A : CD 00 10                   call    arith
        11D : 76                         halt
        11E :
        11E :                    putchar:
        11E : F5                         push    AF
        11F :                    putchar_loop:
        11F : DB 01                      in      A, (USARTS)
        121 : CB 47                      bit     ST_TxRDY_bp, A
        123 : 28 FA                      jr      Z, putchar_loop
        125 : F1                         pop     AF
        126 : D3 00                      out     (USARTD), A
        128 : C9                         ret
        129 :
        129 :                    newline:
        129 : F5                         push    AF
        12A : 3E 0D                      ld      A, 0DH
        12C : CD 1E 01                   call    putchar
        12F : 3E 0A                      ld      A, 0AH
        131 : CD 1E 01                   call    putchar
        134 : F1                         pop     AF
        135 : C9                         ret
        136 :
        136 :                    putspace:
        136 : F5                         push    AF
        137 : 3E 20                      ld      A, ' '
        139 : CD 1E 01                   call    putchar
        13C : F1                         pop     AF
        13D : C9                         ret
        13E :
        13E :                    ;;; Print "v1 op v2 = "
        13E :                    ;;; @param v1 BC
        13E :                    ;;; @param v2 DE
        13E :                    ;;; @param op A
        13E :                    ;;; @return v1 HL
        13E :                    ;;; @clobber A
        13E :                    expr:
        13E : F5                         push    AF
        13F : 60                         ld      H, B
        140 : 69                         ld      L, C
        141 : CD 87 11                   call    print_int16
        144 : CD 36 01                   call    putspace
        147 : F1                         pop     AF
        148 : CD 1E 01                   call    putchar
        14B : CD 36 01                   call    putspace
        14E : 62                         ld      H, D
        14F : 6B                         ld      L, E
        150 : CD 87 11                   call    print_int16
        153 : 60                         ld      H, B
        154 : 69                         ld      L, C
        155 : C9                         ret
        156 :
        156 :                    ;;; Print " v1\n"
        156 :                    ;;; @param v1 HL
        156 :                    ;;; @clobber A HL
        156 :                    answer:
        156 : CD 36 01                   call    putspace
        159 : 3E 3D                      ld      A, '='
        15B : CD 1E 01                   call    putchar
        15E : CD 36 01                   call    putspace
        161 : CD 87 11                   call    print_int16
        164 : 18 C3                      jr      newline
        166 :
        166 :                    ;;; Compare and print "v1 rel v2\n"
        166 :                    ;;; @param v1 BC
        166 :                    ;;; @param v2 DE
        166 :                    ;;; @clobber A HL
        166 :                    comp:
        166 : C5                         push    BC
        167 : D5                         push    DE
        168 : CD BE 11                   call    cmp16
        16B : 28 0E                      jr      Z, comp_eq
        16D : F2 77 01                   jp      P, comp_gt
        170 : FA 7F 01                   jp      M, comp_lt
        173 : 3E 3F                      ld      A, '?'
        175 : 18 0A                      jr      comp_out
        177 :                    comp_gt:
        177 : 3E 3E                      ld      A, '>'
        179 : 18 06                      jr      comp_out
        17B :                    comp_eq:
        17B : 3E 3D                      ld      A, '='
        17D : 18 02                      jr      comp_out
        17F :                    comp_lt:
        17F : 3E 3C                      ld      A, '<'
        181 :                    comp_out:
        181 : D1                         pop     DE
        182 : C1                         pop     BC
        183 : CD 3E 01                   call    expr
        186 : 18 A1                      jr      newline
        188 :
       1000 :                            org     1000H
       1000 :
       1000 :                    arith:
       1000 : 01 00 00                   ld      BC, 0
       1003 : 11 A0 92                   ld      DE, -28000
       1006 : 3E 2D                      ld      A, '-'
       1008 : CD 3E 01                   call    expr
       100B : CD D7 11                   call    neg_DE
       100E : 62                         ld      H, D
       100F : 6B                         ld      L, E
       1010 : CD 56 01                   call    answer          ; 28000
       1013 :
       1013 : 21 00 00                   ld      HL, 0
       1016 : 11 60 6D                   ld      DE, 28000
       1019 : 3E 2D                      ld      A, '-'
       101B : CD 3E 01                   call    expr
       101E : CD D7 11                   call    neg_DE
       1021 : 62                         ld      H, D
       1022 : 6B                         ld      L, E
       1023 : CD 56 01                   call    answer          ; -28000
       1026 :
       1026 : 01 50 46                   ld      BC, 18000
       1029 : 11 60 6D                   ld      DE, 28000
       102C : 3E 2B                      ld      A, '+'
       102E : CD 3E 01                   call    expr
       1031 : 19                         add     HL, DE
       1032 : CD 56 01                   call    answer          ; -19536
       1035 :
       1035 : 01 50 46                   ld      BC, 18000
       1038 : 11 B0 B9                   ld      DE, -18000
       103B : 3E 2B                      ld      A, '+'
       103D : CD 3E 01                   call    expr
       1040 : 19                         add     HL, DE
       1041 : CD 56 01                   call    answer          ; 0
       1044 :
       1044 : 01 B0 B9                   ld      BC, -18000
       1047 : 11 B0 B9                   ld      DE, -18000
       104A : 3E 2B                      ld      A, '+'
       104C : CD 3E 01                   call    expr
       104F : 19                         add     HL, DE
       1050 : CD 56 01                   call    answer          ; 29536
       1053 :
       1053 : 01 B0 B9                   ld      BC, -18000
       1056 : 11 A0 92                   ld      DE, -28000
       1059 : 3E 2D                      ld      A, '-'
       105B : CD 3E 01                   call    expr
       105E : CD D7 11                   call    neg_DE
       1061 : 19                         add     HL, DE
       1062 : CD 56 01                   call    answer          ; -10000
       1065 :
       1065 : 01 64 00                   ld      BC, 100
       1068 : 11 2C 01                   ld      DE, 300
       106B : 3E 2A                      ld      A, '*'
       106D : CD 3E 01                   call    expr
       1070 : CD FA 11                   call    mul16
       1073 : CD 56 01                   call    answer          ; 30000
       1076 :
       1076 : 01 2C 01                   ld      BC, 300
       1079 : 11 38 FF                   ld      DE, -200
       107C : 3E 2A                      ld      A, '*'
       107E : CD 3E 01                   call    expr
       1081 : CD FA 11                   call    mul16
       1084 : CD 56 01                   call    answer          ; 5536
       1087 :
       1087 : 01 64 00                   ld      BC, 100
       108A : 11 D4 FE                   ld      DE, -300
       108D : 3E 2A                      ld      A, '*'
       108F : CD 3E 01                   call    expr
       1092 : CD FA 11                   call    mul16
       1095 : CD 56 01                   call    answer          ; -30000
       1098 :
       1098 : 01 38 FF                   ld      BC, -200
       109B : 11 9C FF                   ld      DE, -100
       109E : 3E 2A                      ld      A, '*'
       10A0 : CD 3E 01                   call    expr
       10A3 : CD FA 11                   call    mul16
       10A6 : CD 56 01                   call    answer          ; 20000
       10A9 :
       10A9 : 01 30 75                   ld      BC, 30000
       10AC : 11 64 00                   ld      DE, 100
       10AF : 3E 2F                      ld      A, '/'
       10B1 : CD 3E 01                   call    expr
       10B4 : CD 63 12                   call    div16
       10B7 : CD 56 01                   call    answer          ; 30
       10BA :
       10BA : 01 38 FF                   ld      BC, -200
       10BD : 11 64 00                   ld      DE, 100
       10C0 : 3E 2F                      ld      A, '/'
       10C2 : CD 3E 01                   call    expr
       10C5 : CD 63 12                   call    div16
       10C8 : CD 56 01                   call    answer          ; -2
       10CB :
       10CB : 01 D0 8A                   ld      BC, -30000
       10CE : 11 38 FF                   ld      DE, -200
       10D1 : 3E 2F                      ld      A, '/'
       10D3 : CD 3E 01                   call    expr
       10D6 : CD 63 12                   call    div16
       10D9 : CD 56 01                   call    answer          ; 150
       10DC :
       10DC : 01 D0 8A                   ld      BC, -30000
       10DF : 11 4E 00                   ld      DE, 78
       10E2 : 3E 2F                      ld      A, '/'
       10E4 : CD 3E 01                   call    expr
       10E7 : CD 63 12                   call    div16
       10EA : CD 56 01                   call    answer          ; -384
       10ED :
       10ED : 01 D0 FF                   ld      BC, -48
       10F0 : 11 1E 00                   ld      DE, 30
       10F3 : CD 66 01                   call    comp
       10F6 :
       10F6 : 01 1E 00                   ld      BC, 30
       10F9 : 11 D0 FF                   ld      DE, -48
       10FC : CD 66 01                   call    comp
       10FF :
       10FF : 01 88 13                   ld      BC, 5000
       1102 : 11 A0 0F                   ld      DE, 4000
       1105 : CD 66 01                   call    comp
       1108 :
       1108 : 01 88 13                   ld      BC, 5000
       110B : 11 88 13                   ld      DE, 5000
       110E : CD 66 01                   call    comp
       1111 :
       1111 : 01 A0 0F                   ld      BC, 4000
       1114 : 11 88 13                   ld      DE, 5000
       1117 : CD 66 01                   call    comp
       111A :
       111A : 01 78 EC                   ld      BC, -5000
       111D : 11 60 F0                   ld      DE, -4000
       1120 : CD 66 01                   call    comp
       1123 :
       1123 : 01 78 EC                   ld      BC, -5000
       1126 : 11 78 EC                   ld      DE, -5000
       1129 : CD 66 01                   call    comp
       112C :
       112C : 01 60 F0                   ld      BC, -4000
       112F : 11 78 EC                   ld      DE, -5000
       1132 : CD 66 01                   call    comp
       1135 :
       1135 : 01 BC 7F                   ld      BC, 32700
       1138 : 11 58 7F                   ld      DE, 32600
       113B : CD 66 01                   call    comp
       113E :
       113E : 01 BC 7F                   ld      BC, 32700
       1141 : 11 BC 7F                   ld      DE, 32700
       1144 : CD 66 01                   call    comp
       1147 :
       1147 : 01 58 7F                   ld      BC, 32600
       114A : 11 BC 7F                   ld      DE, 32700
       114D : CD 66 01                   call    comp
       1150 :
       1150 : 01 44 80                   ld      BC, -32700
       1153 : 11 A8 80                   ld      DE, -32600
       1156 : CD 66 01                   call    comp
       1159 :
       1159 : 01 44 80                   ld      BC, -32700
       115C : 11 44 80                   ld      DE, -32700
       115F : CD 66 01                   call    comp
       1162 :
       1162 : 01 A8 80                   ld      BC, -32600
       1165 : 11 44 80                   ld      DE, -32700
       1168 : CD 66 01                   call    comp
       116B :
       116B : 01 50 46                   ld      BC, 18000
       116E : 11 A0 92                   ld      DE, -28000
       1171 : CD 66 01                   call    comp
       1174 :
       1174 : 01 50 46                   ld      BC, 18000
       1177 : 11 50 46                   ld      DE, 18000
       117A : CD 66 01                   call    comp
       117D :
       117D : 01 A0 92                   ld      BC, -28000
       1180 : 11 50 46                   ld      DE, 18000
       1183 : CD 66 01                   call    comp
       1186 :
       1186 : C9                         ret
       1187 :
       1187 :                            include "arith.inc"
(1)    1187 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    1187 :                            cpu     z80
(1)    1187 :
(1)    1187 :                    ;;; Print signed 16-bit integer as decimal
(1)    1187 :                    ;;; @param HL value
(1)    1187 :                    ;;; @clobber A HL
(1)    1187 :                    print_int16:
(1)    1187 : 7C                         ld      A, H
(1)    1188 : B5                         or      A, L
(1)    1189 : 28 2E                      jr      Z, print_uint16_zero
(1)    118B : CB 7C                      bit     7, H
(1)    118D : 28 0C                      jr      Z, print_uint16
(1)    118F : 3E 2D                      ld      A, '-'
(1)    1191 : CD 1E 01                   call    putchar
(1)    1194 : 7D                         ld      A, L
(1)    1195 : 2F                         cpl
(1)    1196 : 6F                         ld      L, A
(1)    1197 : 7C                         ld      A, H
(1)    1198 : 2F                         cpl
(1)    1199 : 67                         ld      H, A
(1)    119A : 23                         inc     HL              ; HL=-value
(1)    119B :                    print_uint16:
(1)    119B : C5                         push    BC
(1)    119C : D5                         push    DE
(1)    119D : CD A3 11                   call    print_uint16_loop
(1)    11A0 : D1                         pop     DE
(1)    11A1 : C1                         pop     BC
(1)    11A2 : C9                         ret
(1)    11A3 :                    print_uint16_loop:
(1)    11A3 : 7C                         ld      A, H
(1)    11A4 : B5                         or      A, L
(1)    11A5 : C8                         ret     Z
(1)    11A6 : 44                         ld      B, H
(1)    11A7 : 4D                         ld      C, L
(1)    11A8 : 11 0A 00                   ld      DE, 10
(1)    11AB : CD 23 12                   call    udiv16          ; BC/DE = HL...BC
(1)    11AE : C5                         push    BC              ; push remainder
(1)    11AF : CD A3 11                   call    print_uint16_loop
(1)    11B2 : E1                         pop     HL              ; pop remainder
(1)    11B3 : 7D                         ld      A, L
(1)    11B4 : C6 30                      add     A, '0'
(1)    11B6 : C3 1E 01                   jp      putchar
(1)    11B9 :                    print_uint16_zero:
(1)    11B9 : 3E 30                      ld      A, '0'
(1)    11BB : C3 1E 01                   jp      putchar
(1)    11BE :
(1)    11BE :                    ;;; Signed comparison; minuend - subtrahend
(1)    11BE :                    ;;; @param BC minuend
(1)    11BE :                    ;;; @param DE subtrahend
(1)    11BE :                    ;;; @return AF.Z, AF.S
(1)    11BE :                    ;;; @clobber A
(1)    11BE :                    cmp16:
(1)    11BE : C5                         push    BC
(1)    11BF : D5                         push    DE
(1)    11C0 : E5                         push    HL
(1)    11C1 : 79                         ld      A, C
(1)    11C2 : 93                         sub     A, E
(1)    11C3 : 6F                         ld      L, A
(1)    11C4 : 78                         ld      A, B
(1)    11C5 : 9A                         sbc     A, D
(1)    11C6 : 67                         ld      H, A            ; HL=minuend-subtrahend
(1)    11C7 : B5                         or      L
(1)    11C8 : 28 09                      jr      Z, cmp16_return   ; AF.Z=1
(1)    11CA : 7C                         ld      A, H            ; high(minuend-subtrahend)
(1)    11CB : A8                         xor     B               ; high(minuend-subtrahend)^minuend)
(1)    11CC : 6F                         ld      L, A
(1)    11CD : 78                         ld      A, B
(1)    11CE : AA                         xor     D               ; high(minuend^subtrahend)
(1)    11CF : A5                         and     L               ; overflow
(1)    11D0 : AC                         xor     H               ; AF.S=overflow^sign
(1)    11D1 : F6 01                      or      1               ; clear AF.Z
(1)    11D3 :                    cmp16_return:
(1)    11D3 : E1                         pop     HL
(1)    11D4 : D1                         pop     DE
(1)    11D5 : C1                         pop     BC
(1)    11D6 : C9                         ret
(1)    11D7 :
(1)    11D7 :                    ;;; Negate; v
(1)    11D7 :                    ;;; @param DE v
(1)    11D7 :                    ;;; @return DE -v
(1)    11D7 :                    ;;; @clobber A
(1)    11D7 :                    neg_DE:
(1)    11D7 : 7A                         ld      A, D
(1)    11D8 : 2F                         cpl
(1)    11D9 : 57                         ld      D, A
(1)    11DA : 7B                         ld      A, E
(1)    11DB : 2F                         cpl
(1)    11DC : 5F                         ld      E, A
(1)    11DD : 13                         inc     DE
(1)    11DE : C9                         ret
(1)    11DF :
(1)    11DF :                    ;;; Unsigned multiplication; result = multiplicand * multiplier
(1)    11DF :                    ;;; @param BC multiplicand
(1)    11DF :                    ;;; @param DE multiplier
(1)    11DF :                    ;;; @return HL result
(1)    11DF :                    ;;; @clobber BC DE HL A
(1)    11DF :                    umul16:
(1)    11DF : 21 00 00                   ld      HL, 0           ; result=0
(1)    11E2 : 18 11                      jr      umul16_check
(1)    11E4 :                    umul16_loop:
(1)    11E4 : B7                         or      A, A            ; clear AF.C
(1)    11E5 : 7A                         ld      A, D            ; multiplier >>= 1
(1)    11E6 : 1F                         rra
(1)    11E7 : 57                         ld      D, A
(1)    11E8 : 7B                         ld      A, E
(1)    11E9 : 1F                         rra
(1)    11EA : 5F                         ld      E, A
(1)    11EB : 30 01                      jr      NC, umul16_next ; if lsb(multiplier) == 0
(1)    11ED : 09                         add     HL, BC          ; result += multiplicand
(1)    11EE :                    umul16_next:
(1)    11EE : B7                         or      A, A            ; clear AF.C
(1)    11EF : 79                         ld      A, C            ; multiplicand <<= 1
(1)    11F0 : 17                         rla
(1)    11F1 : 4F                         ld      C, A
(1)    11F2 : 78                         ld      A, B
(1)    11F3 : 17                         rla
(1)    11F4 : 47                         ld      B, A
(1)    11F5 :                    umul16_check:
(1)    11F5 : 7A                         ld      A, D
(1)    11F6 : B3                         or      E
(1)    11F7 : 20 EB                      jr      NZ, umul16_loop ; while multiplier != 0
(1)    11F9 :                    umul16_end:
(1)    11F9 : C9                         ret
(1)    11FA :
(1)    11FA :                    ;;; Signed multiplication; result = multiplicand * multiplier
(1)    11FA :                    ;;; @param BC multiplicand
(1)    11FA :                    ;;; @param DE multiplier
(1)    11FA :                    ;;; @return HL result
(1)    11FA :                    ;;; @clobber A BC DE
(1)    11FA :                    mul16:
(1)    11FA : 78                         ld      A, B
(1)    11FB : AA                         xor     A, D
(1)    11FC : F5                         push    AF              ; save high(multiplicand^multiplier)
(1)    11FD : CB 78                      bit     7, B
(1)    11FF : 28 07                      jr      Z, mul16_abs_muliplicand
(1)    1201 : 78                         ld      A, B
(1)    1202 : 2F                         cpl
(1)    1203 : 47                         ld      B, A
(1)    1204 : 79                         ld      A, C
(1)    1205 : 2F                         cpl
(1)    1206 : 4F                         ld      C, A
(1)    1207 : 03                         inc     BC              ; multiplicand = -multiplicand
(1)    1208 :                    mul16_abs_muliplicand:
(1)    1208 : CB 7A                      bit     7, D
(1)    120A : 28 07                      jr      Z,  mul16_multiply
(1)    120C : 7A                         ld      A, D
(1)    120D : 2F                         cpl
(1)    120E : 57                         ld      D, A
(1)    120F : 7B                         ld      A, E
(1)    1210 : 2F                         cpl
(1)    1211 : 5F                         ld      E, A
(1)    1212 : 13                         inc     DE              ; multiplier = -multiplier
(1)    1213 :                    mul16_multiply:
(1)    1213 : CD DF 11                   call    umul16          ; HL = multiplicand * multiplier
(1)    1216 : F1                         pop     AF              ; A=high(multiplicand^multiplier)
(1)    1217 : CB 7F                      bit     7, A
(1)    1219 : 28 07                      jr      Z, mul16_return
(1)    121B : 7C                         ld      A, H
(1)    121C : 2F                         cpl
(1)    121D : 67                         ld      H, A
(1)    121E : 7D                         ld      A, L
(1)    121F : 2F                         cpl
(1)    1220 : 6F                         ld      L, A
(1)    1221 : 23                         inc     HL              ; result = -result
(1)    1222 :                    mul16_return:
(1)    1222 : C9                         ret
(1)    1223 :
(1)    1223 :                    ;;; Unsigned division; dividend / divisor = quotient ... remainder
(1)    1223 :                    ;;; @praram BC dividend
(1)    1223 :                    ;;; @praram DE divisor
(1)    1223 :                    ;;; @return BC remainder
(1)    1223 :                    ;;; @return HL quotient
(1)    1223 :                    ;;; @clobber A DE
(1)    1223 :                    udiv16:
(1)    1223 : 7A                         ld      A, D
(1)    1224 : B3                         or      A, E
(1)    1225 : C8                         ret     Z               ; divide by zero
(1)    1226 : 2E 01                      ld      L, 1            ; L=bits
(1)    1228 : 18 08                      jr      udiv16_prep
(1)    122A :                    udiv16_prep_loop:
(1)    122A : B7                         or      A, A            ; clear AF.C
(1)    122B : 7B                         ld      A, E            ; divisor <<= 1
(1)    122C : 17                         rla
(1)    122D : 5F                         ld      E, A
(1)    122E : 7A                         ld      A, D
(1)    122F : 17                         rla
(1)    1230 : 57                         ld      D, A
(1)    1231 : 2C                         inc     L               ; ++bits
(1)    1232 :                    udiv16_prep:                    ; while msb(divisor) == 0
(1)    1232 : CB 7A                      bit     7, D
(1)    1234 : 28 F4                      jr      Z, udiv16_prep_loop
(1)    1236 : 7D                         ld      A, L
(1)    1237 : F5                         push    AF              ; push bits
(1)    1238 : 60                         ld      H, B
(1)    1239 : 69                         ld      L, C            ; HL=dividend
(1)    123A : AF                         xor     A, A
(1)    123B : 47                         ld      B, A
(1)    123C : 4F                         ld      C, A            ; BC=quotient
(1)    123D : 18 0F                      jr      udiv16_enter_loop
(1)    123F :                    udiv16_loop:
(1)    123F : F5                         push    AF              ; push bits
(1)    1240 : B7                         or      A, A            ; clear AF.C
(1)    1241 : 7A                         ld      A, D            ; divisor >>= 1
(1)    1242 : 1F                         rra
(1)    1243 : 57                         ld      D, A
(1)    1244 : 7B                         ld      A, E
(1)    1245 : 1F                         rra
(1)    1246 : 5F                         ld      E, A
(1)    1247 : B7                         or      A, A            ; clear AF.C
(1)    1248 : 79                         ld      A, C            ; quotient <<= 1
(1)    1249 : 17                         rla
(1)    124A : 4F                         ld      C, A
(1)    124B : 78                         ld      A, B
(1)    124C : 17                         rla
(1)    124D : 47                         ld      B, A
(1)    124E :                    udiv16_enter_loop:
(1)    124E : 7D                         ld      A, L
(1)    124F : 93                         sub     A, E
(1)    1250 : 6F                         ld      L, A
(1)    1251 : 7C                         ld      A, H
(1)    1252 : 9A                         sbc     A, D
(1)    1253 : 67                         ld      H, A            ; dividend -= divisor
(1)    1254 : 38 03                      jr      C, udiv16_readd ; if dividend < 0
(1)    1256 : 03                         inc     BC              ; quotient |= 1
(1)    1257 : 18 01                      jr      udiv16_next
(1)    1259 :                    udiv16_readd:
(1)    1259 : 19                         add     HL, DE          ; dividend += divisor
(1)    125A :                    udiv16_next:
(1)    125A : F1                         pop     AF
(1)    125B : 3D                         dec     A               ; --bits
(1)    125C : 20 E1                      jr      NZ, udiv16_loop ; while bits != 0
(1)    125E : E5                         push    HL              ; remainder
(1)    125F : C5                         push    BC              ; quotient
(1)    1260 : E1                         pop     HL
(1)    1261 : C1                         pop     BC
(1)    1262 : C9                         ret
(1)    1263 :
(1)    1263 :                    ;;; Signed division; dividend / divisor = quotient ... remainder
(1)    1263 :                    ;;; @param BC dividend
(1)    1263 :                    ;;; @param DE divisor
(1)    1263 :                    ;;; @return BC remainder
(1)    1263 :                    ;;; @return HL quotient
(1)    1263 :                    ;;; @clobber A DE
(1)    1263 :                    div16:
(1)    1263 : 78                         ld      A, B
(1)    1264 : AA                         xor     A, D
(1)    1265 : F5                         push    AF              ; save high(dividend^divisor)
(1)    1266 : CB 78                      bit     7, B
(1)    1268 : 28 07                      jr      Z, div16_abs_dividend
(1)    126A : 78                         ld      A, B
(1)    126B : 2F                         cpl
(1)    126C : 47                         ld      B, A
(1)    126D : 79                         ld      A, C
(1)    126E : 2F                         cpl
(1)    126F : 4F                         ld      C, A
(1)    1270 : 03                         inc     BC              ; dividend = -dividend
(1)    1271 :                    div16_abs_dividend:
(1)    1271 : CB 7A                      bit     7, D
(1)    1273 : 28 07                      jr      Z, div16_divide
(1)    1275 : 7A                         ld      A, D
(1)    1276 : 2F                         cpl
(1)    1277 : 57                         ld      D, A
(1)    1278 : 7B                         ld      A, E
(1)    1279 : 2F                         cpl
(1)    127A : 5F                         ld      E, A
(1)    127B : 13                         inc     DE              ; divisor = -divisor
(1)    127C :                    div16_divide:
(1)    127C : CD 23 12                   call    udiv16          ; HL=quotient, BC=remainder
(1)    127F : F1                         pop     AF              ; A=high(dividend^divisor)
(1)    1280 : CB 7F                      bit     7, A
(1)    1282 : 28 07                      jr      Z, div16_return
(1)    1284 : 7C                         ld      A, H
(1)    1285 : 2F                         cpl
(1)    1286 : 67                         ld      H, A
(1)    1287 : 7D                         ld      A, L
(1)    1288 : 2F                         cpl
(1)    1289 : 6F                         ld      L, A
(1)    128A : 23                         inc     HL              ; quotient=-quotient
(1)    128B :                    div16_return:
(1)    128B : C9                         ret
       128C :
       128C :                            end
