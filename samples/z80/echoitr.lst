          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     z80
          0 :                            include "z80.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; z80
(1)       0 :                    ;;; FLAGS Register
(1)       0 : =80                F_SIGN:         equ     10000000B ; set to 1 if negative
(1)       0 : =40                F_ZERO:         equ     01000000B ; set to 1 if zero
(1)       0 : =10                F_HALF_CARRY:   equ     00010000B ; set to 1 if carry from bit-3
(1)       0 : =4                 F_PARITY:       equ     00000100B ; set to 1 if even parity
(1)       0 : =4                 F_OVERFLOW:     equ     00000100B ; set to 1 if overflow
(1)       0 : =2                 F_NBCD:         equ     00000010B ; set to 1 if subtraction
(1)       0 : =1                 F_CARRY:        equ     00000001B ; set to 1 if carry
(1)       0 :                    ;;; Interrupt origin
(1)       0 : =0                 ORG_RESET:      equ     0000H   ; RESET
(1)       0 : =0                 ORG_RST00:      equ     0000H   ; RST 00H
(1)       0 : =8                 ORG_RST08:      equ     0008H   ; RST 08H
(1)       0 : =10                ORG_RST10:      equ     0010H   ; RST 10H
(1)       0 : =18                ORG_RST18:      equ     0018H   ; RST 18H
(1)       0 : =20                ORG_RST20:      equ     0020H   ; RST 20H
(1)       0 : =28                ORG_RST28:      equ     0028H   ; RST 28H
(1)       0 : =30                ORG_RST30:      equ     0030H   ; RST 30H
(1)       0 : =38                ORG_RST38:      equ     0038H   ; RST 38H
(1)       0 : =38                ORG_INT:        equ     0038H   ; Mode 1 INT
(1)       0 : =66                ORG_NMI:        equ     0066H   ; NMI
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =0                 USART:          equ     00H
          0 : =0                 USARTD:         equ     USART+0 ; Receive/Transmit data
          0 : =1                 USARTS:         equ     USART+1 ; Srtatus register
          0 : =1                 USARTC:         equ     USART+1 ; Control register
          0 : =2                 USARTRV:        equ     USART+2 ; Receive interrupt vector (ORG_*)
          0 : =3                 USARTTV:        equ     USART+3 ; Transmit interrupt vector (ORG_*)
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     11000000B
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 << MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 << MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 << MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     00100000B
(1)       0 : =10                MODE_PARITY_bm: equ     00010000B
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     00001100B
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 << MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 << MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 << MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 << MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     00000011B
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 << MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ (2 << MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ (3 << MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     10000000B   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     01000000B   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     00100000B   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     00010000B   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     00001000B   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     00000100B   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     00000010B   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     00000001B   ; Transmit enable
(1)       0 :
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     10000000B   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     01000000B   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     00100000B   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     00010000B   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     00001000B   ; Parity Error
(1)       0 : =2                 ST_TxEMPTY_bp:  equ     2           ; Transmitter empty
(1)       0 : =1                 ST_RxRDY_bp:    equ     1           ; Receiver ready
(1)       0 : =0                 ST_TxRDY_bp:    equ     0           ; Transmitter ready
          0 :                    ;;; Async 1stop 8data x16
          0 : =4E                ASYNC_MODE:     equ     MODE_STOP1_gc|MODE_LEN8_gc|MODE_BAUD_X16
          0 :                    ;;; RTS/DTR, error reset, Rx enable, Tx enable
          0 : =37                RX_EN_TX_EN:    equ     CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm|CMD_TxEN_bm
          0 : =36                RX_EN_TX_DIS:   equ     CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm
          0 :
       2000 :                            org     2000H
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       ds      rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       ds      tx_queue_size
       2100 :
       1000 :                            org     1000H
       1000 : =1000              stack:  equ     $
       1000 :
          0 :                            org     ORG_RESET
          0 : C3 00 01                   jp      init
          3 :
         28 :                            org     ORG_RST28
         28 : C3 2D 02                   jp      isr_intr_rx
         2B :
         30 :                            org     ORG_RST30
         30 : C3 42 02                   jp      isr_intr_tx
         33 :
        100 :                            org     0100H
        100 :                    init:
        100 : 31 00 10                   ld      SP, stack
        103 : 21 00 20                   ld      HL, rx_queue
        106 : 06 80                      ld      B, rx_queue_size
        108 : CD C2 01                   call    queue_init
        10B : 21 80 20                   ld      HL, tx_queue
        10E : 06 80                      ld      B, tx_queue_size
        110 : CD C2 01                   call    queue_init
        113 :                    init_usart:
        113 : AF                         xor     a               ; clear A
        114 : D3 01                      out     (USARTC), A
        116 : D3 01                      out     (USARTC), A
        118 : D3 01                      out     (USARTC), A     ; safest way to sync mode
        11A : 3E 40                      ld      A, CMD_IR_bm
        11C : D3 01                      out     (USARTC), A     ; reset
        11E : 00                         nop
        11F : 00                         nop
        120 : 3E 4E                      ld      A, ASYNC_MODE
        122 : D3 01                      out     (USARTC), A
        124 : 00                         nop
        125 : 00                         nop
        126 : 3E 36                      ld      A, RX_EN_TX_DIS
        128 : D3 01                      out     (USARTC), A
        12A : 3E                         db      3EH             ; LD A, n
        12B : EF                         rst     28H
        12C : D3 02                      out     (USARTRV), A    ; set RxRDY interrupt vector RST 28H
        12E : 3E                         db      3EH             ; LD A, n
        12F : F7                         rst     30H
        130 : D3 03                      out     (USARTTV), A    ; set TxRDY interrupt vector RST 30H
        132 :
        132 : ED 46                      im      0
        134 : FB                         ei
        135 :
        135 :                    receive_loop:
        135 : CD 9D 01                   call    getchar
        138 : 30 FB                      jr      NC, receive_loop
        13A : B7                         or      A
        13B : 28 19                      jr      Z, halt_to_system
        13D :                    echo_back:
        13D : 47                         ld      B, A
        13E : CD AF 01                   call    putchar         ; echo
        141 : 3E 20                      ld      A, ' '          ; space
        143 : CD AF 01                   call    putchar
        146 : CD 57 01                   call    put_hex8        ; print in hex
        149 : 3E 20                      ld      A, ' '          ; space
        14B : CD AF 01                   call    putchar
        14E : CD 78 01                   call    put_bin8        ; print in binary
        151 : CD A8 01                   call    newline
        154 : 18 DF                      jr      receive_loop
        156 :                    halt_to_system:
        156 : 76                         halt
        157 :
        157 :                    ;;; Print uint8_t in hex
        157 :                    ;;; @param B uint8_t value to be printed in hex.
        157 :                    ;;; @clobber A
        157 :                    put_hex8:
        157 : 3E 30                      ld      A, '0'
        159 : CD AF 01                   call    putchar
        15C : 3E 78                      ld      A, 'x'
        15E : CD AF 01                   call    putchar
        161 : 78                         ld      A, b
        162 : CB 3F                      srl     A
        164 : CB 3F                      srl     A
        166 : CB 3F                      srl     A
        168 : CB 3F                      srl     A
        16A : CD 6E 01                   call    put_hex4
        16D : 78                         ld      A, B
        16E :                    put_hex4:
        16E : E6 0F                      and     0FH
        170 : C6 90                      add     A, 90H
        172 : 27                         daa
        173 : CE 40                      adc     A, 40H
        175 : 27                         daa
        176 : 18 37                      jr      putchar
        178 :
        178 :                    ;;; Print uint8_t in binary
        178 :                    ;;; @param B uint8_t value to be printed in binary.
        178 :                    ;;; @clobber A
        178 :                    put_bin8:
        178 : C5                         push    BC
        179 : 3E 30                      ld      A, '0'
        17B : CD AF 01                   call    putchar
        17E : 3E 62                      ld      A, 'b'
        180 : CD AF 01                   call    putchar
        183 : 78                         ld      A, B
        184 : CD 8C 01                   call    put_bin4
        187 : CD 8C 01                   call    put_bin4
        18A : C1                         pop     BC
        18B : C9                         ret
        18C :                    put_bin4:
        18C : CD 8F 01                   call    put_bin2
        18F :                    put_bin2:
        18F : CD 92 01                   call    put_bin1
        192 :                    put_bin1:
        192 : 78                         ld      A, B
        193 : CB 27                      sla     A               ; F.C=MSB
        195 : 47                         ld      B, A
        196 : 3E 30                      ld      A, '0'
        198 : 30 15                      jr      NC, putchar     ; F.0=1
        19A : 3C                         inc     A               ; F.C=1
        19B : 18 12                      jr      putchar
        19D :
        19D :                    ;;; Get character
        19D :                    ;;; @return A
        19D :                    ;;; @return CC.C 0 if no character
        19D :                    getchar:
        19D : E5                         push    HL
        19E : 21 00 20                   ld      HL, rx_queue
        1A1 : F3                         di
        1A2 : CD 07 02                   call    queue_remove
        1A5 : FB                         ei
        1A6 : E1                         pop     HL
        1A7 : C9                         ret
        1A8 :
        1A8 :                    ;;; Put newline
        1A8 :                    ;;; @clobber A
        1A8 :                    newline:
        1A8 : 3E 0D                      ld      A, 0DH
        1AA : CD AF 01                   call    putchar
        1AD : 3E 0A                      ld      A, 0AH
        1AF :
        1AF :                    ;;; Put character
        1AF :                    ;;; @param A
        1AF :                    putchar:
        1AF : F5                         push    AF
        1B0 : E5                         push    HL
        1B1 : 21 80 20                   ld      HL, tx_queue
        1B4 :                    putchar_retry:
        1B4 : F3                         di
        1B5 : CD D6 01                   call    queue_add
        1B8 : FB                         ei
        1B9 : 30 F9                      jr      NC, putchar_retry ; branch if queue is full
        1BB : E1                         pop     HL
        1BC : 3E 37                      ld      A, RX_EN_TX_EN  ; enable Tx
        1BE : D3 01                      out     (USARTC), A
        1C0 : F1                         pop     AF
        1C1 : C9                         ret
        1C2 :
        1C2 :                            include "queue.inc"
(1)     1C2 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     1C2 :                    ;;; [queue] queue structure
(1)     1C2 : =0                 queue_len:      equ     0       ; queue length
(1)     1C2 : =1                 queue_size:     equ     1       ; buffer size
(1)     1C2 : =2                 queue_put:      equ     2       ; queue put index
(1)     1C2 : =3                 queue_get:      equ     3       ; queue get index
(1)     1C2 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     1C2 :
(1)     1C2 :                    ;;; [queue] Initialize queue
(1)     1C2 :                    ;;; @param HL queue work space pointer
(1)     1C2 :                    ;;; @param B queue work space size
(1)     1C2 :                    ;;; @clobber B
(1)     1C2 :                    queue_init:
(1)     1C2 : F5                         push    AF
(1)     1C3 : E5                         push    HL
(1)     1C4 : 36 00                      ld      (HL), 0         ; queue_len
(1)     1C6 : 78                         ld      A, B
(1)     1C7 : D6 04                      sub     queue_buf
(1)     1C9 : 23                         inc     HL
(1)     1CA : 77                         ld      (HL), A         ; queue_size
(1)     1CB : C6 02                      add     A, 2            ; for queue_put and queue_get
(1)     1CD :                    queue_init_loop:
(1)     1CD : 23                         inc     HL
(1)     1CE : 36 00                      ld      (HL), 0
(1)     1D0 : 3D                         dec     A
(1)     1D1 : 20 FA                      jr      NZ, queue_init_loop
(1)     1D3 : E1                         pop     HL
(1)     1D4 : F1                         pop     AF
(1)     1D5 : C9                         ret
(1)     1D6 :
(1)     1D6 :                    ;;; [queue] Add an element to queue
(1)     1D6 :                    ;;; @param HL queue work space pointer
(1)     1D6 :                    ;;; @param A an element
(1)     1D6 :                    ;;; @return F.C 0 if queue is full
(1)     1D6 :                    queue_add:
(1)     1D6 : D5                         push    DE
(1)     1D7 : E5                         push    HL
(1)     1D8 : DD E3                      ex      (SP), IX        ; IX points queue structure
(1)     1DA : 57                         ld      D, A            ; save an element
(1)     1DB : DD 7E 00                   ld      A, (IX+queue_len)
(1)     1DE : DD BE 01                   cp      (IX+queue_size)
(1)     1E1 : 7A                         ld      A, D               ; restore an element
(1)     1E2 : 38 05                      jr      C, queue_add_store ; queue_len < queue_size
(1)     1E4 : DD E3                      ex      (SP), IX           ; F.C=1
(1)     1E6 : E1                         pop     HL
(1)     1E7 : D1                         pop     DE
(1)     1E8 : C9                         ret
(1)     1E9 :                    queue_add_store:
(1)     1E9 : DD 34 00                   inc     (IX+queue_len)
(1)     1EC : 11 04 00                   ld      DE, queue_buf
(1)     1EF : 19                         add     HL, DE
(1)     1F0 : DD 5E 02                   ld      E, (IX+queue_put)
(1)     1F3 : 19                         add     HL, DE          ; HL=&queue_buf[queue_put]
(1)     1F4 : 77                         ld      (HL), A         ; store an element
(1)     1F5 : 7B                         ld      A, E
(1)     1F6 : 3C                         inc     A               ; queue_put++
(1)     1F7 : DD BE 01                   cp      (IX+queue_size)
(1)     1FA : 38 01                      jr      C, queue_add_update ; queue_put < queue_size
(1)     1FC : AF                         xor     A                   ; wrap around
(1)     1FD :                    queue_add_update:
(1)     1FD : DD 77 02                   ld      (IX+queue_put), A
(1)     200 : 7E                         ld      A, (HL)         ; restore an element
(1)     201 : DD E3                      ex      (SP), IX
(1)     203 : E1                         pop     HL
(1)     204 : D1                         pop     DE
(1)     205 : 37                         scf                     ; set carry
(1)     206 : C9                         ret
(1)     207 :
(1)     207 :                    ;;; [queue] Remove an element from queue
(1)     207 :                    ;;; @param HL queue work space pointer
(1)     207 :                    ;;; @return A an element
(1)     207 :                    ;;; @return F.C 0 if queue is empty
(1)     207 :                    queue_remove:
(1)     207 : 7E                         ld      A, (HL)               ; queue_len
(1)     208 : B7                         or      A                     ; clear carry
(1)     209 : 20 01                      jr      NZ, queue_remove_elem ; queue_len > 0
(1)     20B : C9                         ret
(1)     20C :                    queue_remove_elem:
(1)     20C : D5                         push    DE
(1)     20D : E5                         push    HL
(1)     20E : DD E3                      ex      (SP), IX        ; IX points queue structure
(1)     210 : DD 35 00                   dec     (IX+queue_len)
(1)     213 : 11 04 00                   ld      DE, queue_buf
(1)     216 : 19                         add     HL, DE
(1)     217 : DD 5E 03                   ld      E, (IX+queue_get)
(1)     21A : 19                         add     HL, DE          ; HL=&queue_buf[queue_get]
(1)     21B : 7B                         ld      A, E
(1)     21C : 3C                         inc     A               ; queue_get++
(1)     21D : DD BE 01                   cp      (IX+queue_size)
(1)     220 : 38 01                      jr      C, queue_remove_update ; queue_get < queue_size
(1)     222 : AF                         xor     A                      ; wrap around
(1)     223 :                    queue_remove_update:
(1)     223 : DD 77 03                   ld      (IX+queue_get), A
(1)     226 : 7E                         ld      A, (HL)         ; read an element
(1)     227 : DD E3                      ex      (SP), IX
(1)     229 : E1                         pop     HL
(1)     22A : D1                         pop     DE
(1)     22B : 37                         scf                     ; set carry
(1)     22C : C9                         ret
        22D :
        22D :                    isr_intr_rx:
        22D : F5                         push    AF
        22E :                    isr_intr_receive:
        22E : DB 01                      in      A, (USARTS)
        230 : CB 4F                      bit     ST_RxRDY_bp, A
        232 : 28 0A                      jr      Z, isr_intr_rx_exit
        234 : DB 00                      in      A, (USARTD)     ; receive character
        236 : E5                         push    HL
        237 : 21 00 20                   ld      HL, rx_queue
        23A : CD D6 01                   call    queue_add
        23D : E1                         pop     HL
        23E :                    isr_intr_rx_exit:
        23E : F1                         pop     AF
        23F : FB                         ei
        240 : ED 4D                      reti
        242 :
        242 :                    isr_intr_tx:
        242 : F5                         push    AF
        243 : DB 01                      in      A, (USARTS)
        245 : CB 47                      bit     ST_TxRDY_bp, A
        247 : 28 0C                      jr      Z, isr_intr_tx_exit
        249 : E5                         push    HL
        24A : 21 80 20                   ld      HL, tx_queue
        24D : CD 07 02                   call    queue_remove
        250 : E1                         pop     HL
        251 : 30 06                      jr      NC, isr_intr_send_empty
        253 : D3 00                      out     (USARTD), A     ; send character
        255 :                    isr_intr_tx_exit:
        255 : F1                         pop     AF
        256 : FB                         ei
        257 : ED 4D                      reti
        259 :                    isr_intr_send_empty:
        259 : 3E 36                      ld      A, RX_EN_TX_DIS
        25B : D3 01                      out     (USARTC), A     ; disable Tx
        25D : F1                         pop     AF
        25E : FB                         ei
        25F : ED 4D                      reti
        261 :
        261 :                            end
