          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     z80
          0 :                            include "z80.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; z80
(1)       0 :                    ;;; FLAGS Register
(1)       0 : =80                F_SIGN:         equ     10000000B ; set to 1 if negative
(1)       0 : =40                F_ZERO:         equ     01000000B ; set to 1 if zero
(1)       0 : =10                F_HALF_CARRY:   equ     00010000B ; set to 1 if carry from bit-3
(1)       0 : =4                 F_PARITY:       equ     00000100B ; set to 1 if even parity
(1)       0 : =4                 F_OVERFLOW:     equ     00000100B ; set to 1 if overflow
(1)       0 : =2                 F_NBCD:         equ     00000010B ; set to 1 if subtraction
(1)       0 : =1                 F_CARRY:        equ     00000001B ; set to 1 if carry
(1)       0 :                    ;;; Interrupt origin
(1)       0 : =0                 ORG_RESET:      equ     0000H   ; RESET
(1)       0 : =0                 ORG_RST00:      equ     0000H   ; RST 00H
(1)       0 : =8                 ORG_RST08:      equ     0008H   ; RST 08H
(1)       0 : =10                ORG_RST10:      equ     0010H   ; RST 10H
(1)       0 : =18                ORG_RST18:      equ     0018H   ; RST 18H
(1)       0 : =20                ORG_RST20:      equ     0020H   ; RST 20H
(1)       0 : =28                ORG_RST28:      equ     0028H   ; RST 28H
(1)       0 : =30                ORG_RST30:      equ     0030H   ; RST 30H
(1)       0 : =38                ORG_RST38:      equ     0038H   ; RST 38H
(1)       0 : =38                ORG_INT:        equ     0038H   ; Mode 1 INT
(1)       0 : =66                ORG_NMI:        equ     0066H   ; NMI
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =0                 USART:          equ     00H
          0 : =0                 USARTD:         equ     USART+0 ; Receive/Transmit data
          0 : =1                 USARTS:         equ     USART+1 ; Srtatus register
          0 : =1                 USARTC:         equ     USART+1 ; Control register
          0 : =2                 USARTRV:        equ     USART+2 ; Receive interrupt vector (ORG_*)
          0 : =3                 USARTTV:        equ     USART+3 ; Transmit interrupt vector (ORG_*)
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     11000000B
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 << MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 << MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 << MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     00100000B
(1)       0 : =10                MODE_PARITY_bm: equ     00010000B
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     00001100B
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 << MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 << MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 << MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 << MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     00000011B
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 << MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ (2 << MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ (3 << MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     10000000B   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     01000000B   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     00100000B   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     00010000B   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     00001000B   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     00000100B   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     00000010B   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     00000001B   ; Transmit enable
(1)       0 :
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     10000000B   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     01000000B   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     00100000B   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     00010000B   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     00001000B   ; Parity Error
(1)       0 : =2                 ST_TxEMPTY_bp:  equ     2           ; Transmitter empty
(1)       0 : =1                 ST_RxRDY_bp:    equ     1           ; Receiver ready
(1)       0 : =0                 ST_TxRDY_bp:    equ     0           ; Transmitter ready
          0 :                    ;;; Async 1stop 8data x16
          0 : =4E                ASYNC_MODE:     equ     MODE_STOP1_gc|MODE_LEN8_gc|MODE_BAUD_X16
          0 :                    ;;; RTS/DTR, error reset, Rx enable, Tx enable
          0 : =37                RX_EN_TX_EN:    equ     CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm|CMD_TxEN_bm
          0 : =36                RX_EN_TX_DIS:   equ     CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm
          0 :
       2000 :                            org     2000H
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       ds      rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       ds      tx_queue_size
       2100 :
       1000 :                            org     1000H
       1000 : =1000              stack:          equ     $
       1000 :
       1000 : =1000              vec_base:       equ     $
       1012 :                            org     vec_base+12H
       1012 : 3E 04              vec_rx: dw      isr_intr_rx
       108A :                            org     vec_base+8AH
       108A : 53 04              vec_tx: dw      isr_intr_tx
       108C :
          0 :                            org     ORG_RESET
          0 : C3 00 01                   jp      init
          3 :
         28 :                            org     ORG_RST28
         28 : C3 3E 04                   jp      isr_intr_rx
         2B :
         30 :                            org     ORG_RST30
         30 : C3 53 04                   jp      isr_intr_tx
         33 :
        100 :                            org     0100H
        100 :                    init:
        100 : 31 00 10                   ld      SP, stack
        103 : 21 00 20                   ld      HL, rx_queue
        106 : 06 80                      ld      B, rx_queue_size
        108 : CD D3 03                   call    queue_init
        10B : 21 80 20                   ld      HL, tx_queue
        10E : 06 80                      ld      B, tx_queue_size
        110 : CD D3 03                   call    queue_init
        113 :                    init_usart:
        113 : AF                         xor     A               ; clear A
        114 : D3 01                      out     (USARTC), A
        116 : D3 01                      out     (USARTC), A
        118 : D3 01                      out     (USARTC), A     ; safest way to sync mode
        11A : 3E 40                      ld      A, CMD_IR_bm
        11C : D3 01                      out     (USARTC), A     ; reset
        11E : 00                         nop
        11F : 00                         nop
        120 : 3E 4E                      ld      A, ASYNC_MODE
        122 : D3 01                      out     (USARTC), A
        124 : 00                         nop
        125 : 00                         nop
        126 : 3E 36                      ld      A, RX_EN_TX_DIS
        128 : D3 01                      out     (USARTC), A
        12A :
        12A : 3E                         db      3EH             ; LD A, n
        12B : EF                         rst     28H
        12C : D3 02                      out     (USARTRV), A    ; set RxRDY interrupt vector RST 28H
        12E : 3E                         db      3EH             ; LD A, n
        12F : F7                         rst     30H
        130 : D3 03                      out     (USARTTV), A    ; set TxRDY interrupt vector RST 30H
        132 : ED 46                      im      0
        134 :
        134 :                            ;; ld      A, HIGH vec_base
        134 :                            ;; ld      I, A
        134 :                            ;; ld      A, LOW vec_rx
        134 :                            ;; out     (USARTRV), A    ; set RxRDY interrupt vec_rx
        134 :                            ;; ld      A, LOW vec_tx
        134 :                            ;; out     (USARTTV), A    ; set TxRDY interrupt vec_tx
        134 :                            ;; im      2
        134 :
        134 : FB                         ei
        135 :
        135 :                    loop:
        135 : CD 78 01                   call    mandelbrot
        138 : CD 48 01                   call    newline
        13B : 18 F8                      jr      loop
        13D :
        13D :                    ;;; Get character
        13D :                    ;;; @return A
        13D :                    ;;; @return CC.C 0 if no character
        13D :                    getchar:
        13D : E5                         push    HL
        13E : 21 00 20                   ld      HL, rx_queue
        141 : F3                         di
        142 : CD 18 04                   call    queue_remove
        145 : FB                         ei
        146 : E1                         pop     HL
        147 : C9                         ret
        148 :
        148 :                    ;;; Put newline
        148 :                    ;;; @clobber A
        148 :                    newline:
        148 : 3E 0D                      ld      A, 0DH
        14A : CD 4F 01                   call    putchar
        14D : 3E 0A                      ld      A, 0AH
        14F :
        14F :                    ;;; Put character
        14F :                    ;;; @param A
        14F :                    putchar:
        14F : F5                         push    AF
        150 : E5                         push    HL
        151 : 21 80 20                   ld      HL, tx_queue
        154 :                    putchar_retry:
        154 : F3                         di
        155 : CD E7 03                   call    queue_add
        158 : FB                         ei
        159 : 30 F9                      jr      NC, putchar_retry ; branch if queue is full
        15B : E1                         pop     HL
        15C : 3E 37                      ld      a, RX_EN_TX_EN  ; enable Tx
        15E : D3 01                      out     (USARTC), A
        160 :                    putchar_exit:
        160 : F1                         pop     AF
        161 : C9                         ret
        162 :
        162 :                    ;;; Put newline
        162 :                    ;;; @clobber A
        162 :                    putspace:
        162 : 3E 20                      ld      A, ' '
        164 : 18 E9                      jr      putchar
        166 :
        166 :                            include "mandelbrot.inc"
(1)     166 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     166 :
(1)     166 :                    ;;; Sign extend A into BC
(1)     166 :                    ;;; @param A 8-bit value
(1)     166 :                    ;;; @return BC 16-bit value
(1)     166 :                    sex_BC:
(1)     166 : 06 00                      ld      B, 0
(1)     168 : 4F                         ld      C, A
(1)     169 : CB 79                      bit     7, C
(1)     16B : C8                         ret     Z
(1)     16C : 06 FF                      ld      B, -1
(1)     16E : C9                         ret
(1)     16F :
(1)     16F :                    ;;; Sign extend A into HL
(1)     16F :                    ;;; @param A 8-bit value
(1)     16F :                    ;;; @return HL 16-bit value
(1)     16F :                    sex_HL:
(1)     16F : 26 00                      ld      H, 0
(1)     171 : 6F                         ld      L, A
(1)     172 : CB 7D                      bit     7, L
(1)     174 : C8                         ret     Z
(1)     175 : 26 FF                      ld      H, -1
(1)     177 : C9                         ret
(1)     178 :
(1)     178 : =32                Fv:     equ     50
(1)     178 :                    mandelbrot:
(1)     178 : 3E F4                      ld      A, -12
(1)     17A : 32 CB 02                   ld      (vY), A         ; Y=-12
(1)     17D :                    loop_y:
(1)     17D : 3E CF                      ld      A, -49
(1)     17F : 32 CC 02                   ld      (vX), A         ; X=-49
(1)     182 :                    loop_x:
(1)     182 : 3A CC 02                   ld      A, (vX)
(1)     185 : CD 66 01                   call    sex_BC          ; BC=X
(1)     188 : 11 E5 00                   ld      DE, 229
(1)     18B : CD 41 03                   call    mul16           ; X*229
(1)     18E : 44                         ld      B, H
(1)     18F : 4D                         ld      C, L
(1)     190 : 11 64 00                   ld      DE, 100
(1)     193 : CD AA 03                   call    div16           ; X*229/100
(1)     196 : 22 BB 02                   ld      (vC), HL        ; C=X*229/100
(1)     199 : 22 BF 02                   ld      (vA), HL        ; A=C
(1)     19C : 3A CB 02                   ld      A, (vY)
(1)     19F : CD 66 01                   call    sex_BC          ; BC=Y
(1)     1A2 : 11 A0 01                   ld      DE, 416
(1)     1A5 : CD 41 03                   call    mul16           ; Y*416
(1)     1A8 : 44                         ld      B, H
(1)     1A9 : 4D                         ld      C, L
(1)     1AA : 11 64 00                   ld      DE, 100
(1)     1AD : CD AA 03                   call    div16           ; Y*416/100
(1)     1B0 : 22 BD 02                   ld      (vD), HL        ; D=Y*416/100
(1)     1B3 : 22 C1 02                   ld      (vB), HL        ; B=D
(1)     1B6 : 3E 00                      ld      A, 0
(1)     1B8 : 32 CD 02                   ld      (vI), A         ; I=0
(1)     1BB :
(1)     1BB :                            ;; ld      A, (vY)
(1)     1BB :                            ;; call    sex_HL
(1)     1BB :                            ;; ld      A, 'Y'
(1)     1BB :                            ;; call    print
(1)     1BB :                            ;; ld      A, (vX)
(1)     1BB :                            ;; call    sex_HL
(1)     1BB :                            ;; ld      A, 'X'
(1)     1BB :                            ;; call    print
(1)     1BB :                            ;; ld      HL, (vC)
(1)     1BB :                            ;; ld      A, 'C'
(1)     1BB :                            ;; call    print
(1)     1BB :                            ;; ld      HL, (vD)
(1)     1BB :                            ;; ld      A, 'D'
(1)     1BB :                            ;; call    print
(1)     1BB :                            ;; call    newline
(1)     1BB :
(1)     1BB :                    loop_i:
(1)     1BB : ED 4B C1 02                ld      BC, (vB)
(1)     1BF : 11 32 00                   ld      DE, Fv
(1)     1C2 : CD AA 03                   call    div16           ; B/F
(1)     1C5 : 22 C5 02                   ld      (vQ), HL        ; Q=B/F
(1)     1C8 : 44                         ld      B, H
(1)     1C9 : 4D                         ld      C, L
(1)     1CA : 11 CE FF                   ld      DE, -Fv
(1)     1CD : CD 41 03                   call    mul16           ; -Q*F
(1)     1D0 : ED 5B C1 02                ld      DE, (vB)
(1)     1D4 : 19                         add     HL, DE          ; B-Q*F
(1)     1D5 : 22 C7 02                   ld      (vS), HL        ; S=B-Q*F
(1)     1D8 : ED 4B C1 02                ld      BC, (vB)
(1)     1DC : ED 5B C1 02                ld      DE, (vB)
(1)     1E0 : CD 41 03                   call    mul16           ; B*B
(1)     1E3 : E5                         push    HL              ; push B*B
(1)     1E4 : ED 4B BF 02                ld      BC, (vA)
(1)     1E8 : ED 5B BF 02                ld      DE, (vA)
(1)     1EC : CD 41 03                   call    mul16           ; A*A
(1)     1EF : D1                         pop     DE              ; pop B*B
(1)     1F0 : CD 1E 03                   call    neg_DE          ; -B*B
(1)     1F3 : 19                         add     HL, DE          ; A*A-B*B
(1)     1F4 : 44                         ld      B, H
(1)     1F5 : 4D                         ld      C, L
(1)     1F6 : 11 32 00                   ld      DE, Fv
(1)     1F9 : CD AA 03                   call    div16           ; (A*A-B*B)/F
(1)     1FC : ED 5B BB 02                ld      DE, (vC)
(1)     200 : 19                         add     HL, DE          ; (A*A-B*B)/F+C
(1)     201 : E5                         push    HL              ; push (A*A-B*B)/F+C
(1)     202 : ED 4B BF 02                ld      BC, (vA)
(1)     206 : ED 5B C7 02                ld      DE, (vS)
(1)     20A : CD 41 03                   call    mul16           ; A*S
(1)     20D : 44                         ld      B, H
(1)     20E : 4D                         ld      C, L
(1)     20F : 11 32 00                   ld      DE, Fv
(1)     212 : CD AA 03                   call    div16           ; A*S/F
(1)     215 : E5                         push    HL              ; push A*S/F
(1)     216 : ED 4B BF 02                ld      BC, (vA)
(1)     21A : ED 5B C5 02                ld      DE, (vQ)
(1)     21E : CD 41 03                   call    mul16           ; A*Q
(1)     221 : D1                         pop     DE              ; pop A*S/F
(1)     222 : 19                         add     HL, DE          ; A*Q+A*S/F
(1)     223 : 29                         add     HL, HL          ; 2*(A*Q+A*S/F)
(1)     224 : ED 5B BD 02                ld      DE, (vD)
(1)     228 : 19                         add     HL, DE          ; 2*(A*Q+A*S/F)+D
(1)     229 : 22 C1 02                   ld      (vB), HL        ; B=2*(A*Q+A*S/F)+D
(1)     22C : C1                         pop     BC              ; pop (A*A-B*B)/F+C
(1)     22D : ED 43 BF 02                ld      (vA), BC        ; A=(A*A-B*B)/F+C
(1)     231 : 11 32 00                   ld      DE, Fv
(1)     234 : CD AA 03                   call    div16           ; A/F
(1)     237 : 22 C3 02                   ld      (vP), HL        ; P=A/F
(1)     23A : 44                         ld      B, H
(1)     23B : 4D                         ld      C, L
(1)     23C : 54                         ld      D, H
(1)     23D : 5D                         ld      E, L
(1)     23E : CD 41 03                   call    mul16           ; P*P
(1)     241 : E5                         push    HL              ; push P*P
(1)     242 : ED 4B C1 02                ld      BC, (vB)
(1)     246 : 11 32 00                   ld      DE, Fv
(1)     249 : CD AA 03                   call    div16           ; B/F
(1)     24C : 22 C5 02                   ld      (vQ), HL        ; Q=B/F
(1)     24F : 44                         ld      B, H
(1)     250 : 4D                         ld      C, L
(1)     251 : 54                         ld      D, H
(1)     252 : 5D                         ld      E, L
(1)     253 : CD 41 03                   call    mul16           ; Q*Q
(1)     256 : D1                         pop     DE              ; pop P*P
(1)     257 : 19                         add     HL, DE          ; P*P+Q*Q
(1)     258 : 22 C9 02                   ld      (vT), HL        ; T=P*P+Q*Q
(1)     25B :
(1)     25B :                            ;; call    putspace
(1)     25B :                            ;; ld      A, (vI)
(1)     25B :                            ;; call    sex_HL
(1)     25B :                            ;; ld      A, 'I'
(1)     25B :                            ;; call    print
(1)     25B :                            ;; ld      HL, (vA)
(1)     25B :                            ;; ld      A, 'A'
(1)     25B :                            ;; call    print
(1)     25B :                            ;; ld      HL, (vB)
(1)     25B :                            ;; ld      A, 'B'
(1)     25B :                            ;; call    print
(1)     25B :                            ;; ld      HL, (vP)
(1)     25B :                            ;; ld      A, 'P'
(1)     25B :                            ;; call    print
(1)     25B :                            ;; ld      HL, (vQ)
(1)     25B :                            ;; ld      A, 'Q'
(1)     25B :                            ;; call    print
(1)     25B :                            ;; ld      HL, (vT)
(1)     25B :                            ;; ld      A, 'T'
(1)     25B :                            ;; call    print
(1)     25B :                            ;; call    newline
(1)     25B :
(1)     25B : 3A CA 02                   ld      A, (vT+1)
(1)     25E : 20 17                      jr      NZ, print_i     ; if T>=256
(1)     260 : 3A C9 02                   ld      A, (vT)
(1)     263 : FE 05                      cp      A, 4+1
(1)     265 : 30 10                      jr      NC, print_i     ; if 4<T
(1)     267 : 3A CD 02                   ld      A, (vI)
(1)     26A : 3C                         inc     A
(1)     26B : 32 CD 02                   ld      (vI), A
(1)     26E : FE 10                      cp      A, 16
(1)     270 : DA BB 01                   jp      C, loop_i       ; if I<16
(1)     273 : 3E 20                      ld      A, ' '
(1)     275 : 18 08                      jr      print_char
(1)     277 :                    print_i:
(1)     277 : 3A CD 02                   ld      A, (vI)
(1)     27A : FE 0A                      cp      10              ; $00-$09(C=1), $0A-$0F(C=0)
(1)     27C : DE 69                      sbc     a, 69H          ; $96-$9F, $A1-$A6
(1)     27E : 27                         daa                     ; $30-$39, $41-$46
(1)     27F :                    print_char:
(1)     27F : CD 4F 01                   call    putchar
(1)     282 :
(1)     282 :                            ;; push    AF
(1)     282 :                            ;; ld      A, '@'
(1)     282 :                            ;; call    putchar
(1)     282 :                            ;; ld      A, '='
(1)     282 :                            ;; call    putchar
(1)     282 :                            ;; pop     AF
(1)     282 :                            ;; call    putchar
(1)     282 :                            ;; call    newline
(1)     282 :
(1)     282 : CD 3D 01                   call    getchar
(1)     285 : 30 04                      jr      NC, next_x
(1)     287 : B7                         or      A
(1)     288 : 20 01                      jr      NZ, next_x
(1)     28A : 76                         halt                    ; halt to system
(1)     28B :                    next_x:
(1)     28B : 21 CC 02                   ld      HL, vX
(1)     28E : 34                         inc     (HL)            ; X+=1
(1)     28F : 7E                         ld      A, (HL)
(1)     290 : CB 7F                      bit     7, A
(1)     292 : C2 82 01                   jp      NZ, loop_x      ; if X<0
(1)     295 : FE 1E                      cp      A, 30
(1)     297 : DA 82 01                   jp      C, loop_x       ; if X<30
(1)     29A : CD 48 01                   call    newline
(1)     29D : 21 CB 02                   ld      HL, vY
(1)     2A0 : 34                         inc     (HL)            ; Y+=1
(1)     2A1 : 7E                         ld      A, (HL)
(1)     2A2 : CB 7F                      bit     7, A
(1)     2A4 : C2 7D 01                   jp      NZ, loop_y      ; if Y<0
(1)     2A7 : FE 0D                      cp      A, 13
(1)     2A9 : DA 7D 01                   jp      C, loop_y       ; if Y<13
(1)     2AC : C9                         ret
(1)     2AD :
(1)     2AD :                    ;;; Print variable
(1)     2AD :                    ;;; @param A variable name
(1)     2AD :                    ;;; @param HL variable value
(1)     2AD :                    print:
(1)     2AD : CD 4F 01                   call    putchar
(1)     2B0 : 3E 3D                      ld      A, '='
(1)     2B2 : CD 4F 01                   call    putchar
(1)     2B5 : CD CE 02                   call    print_int16
(1)     2B8 : C3 62 01                   jp      putspace
(1)     2BB :
(1)     2BB :                    ;;; workspace
(1)     2BB :                    vC:     ds      2
(1)     2BD :                    vD:     ds      2
(1)     2BF :                    vA:     ds      2
(1)     2C1 :                    vB:     ds      2
(1)     2C3 :                    vP:     ds      2
(1)     2C5 :                    vQ:     ds      2
(1)     2C7 :                    vS:     ds      2
(1)     2C9 :                    vT:     ds      2
(1)     2CB :                    vY:     ds      1
(1)     2CC :                    vX:     ds      1
(1)     2CD :                    vI:     ds      1
(1)     2CE :
        2CE :                            include "arith.inc"
(1)     2CE :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     2CE :                            cpu     z80
(1)     2CE :
(1)     2CE :                    ;;; Print signed 16-bit integer as decimal
(1)     2CE :                    ;;; @param HL value
(1)     2CE :                    ;;; @clobber A HL
(1)     2CE :                    print_int16:
(1)     2CE : 7C                         ld      A, H
(1)     2CF : B5                         or      A, L
(1)     2D0 : 28 2E                      jr      Z, print_uint16_zero
(1)     2D2 : CB 7C                      bit     7, H
(1)     2D4 : 28 0C                      jr      Z, print_uint16
(1)     2D6 : 3E 2D                      ld      A, '-'
(1)     2D8 : CD 4F 01                   call    putchar
(1)     2DB : 7D                         ld      A, L
(1)     2DC : 2F                         cpl
(1)     2DD : 6F                         ld      L, A
(1)     2DE : 7C                         ld      A, H
(1)     2DF : 2F                         cpl
(1)     2E0 : 67                         ld      H, A
(1)     2E1 : 23                         inc     HL              ; HL=-value
(1)     2E2 :                    print_uint16:
(1)     2E2 : C5                         push    BC
(1)     2E3 : D5                         push    DE
(1)     2E4 : CD EA 02                   call    print_uint16_loop
(1)     2E7 : D1                         pop     DE
(1)     2E8 : C1                         pop     BC
(1)     2E9 : C9                         ret
(1)     2EA :                    print_uint16_loop:
(1)     2EA : 7C                         ld      A, H
(1)     2EB : B5                         or      A, L
(1)     2EC : C8                         ret     Z
(1)     2ED : 44                         ld      B, H
(1)     2EE : 4D                         ld      C, L
(1)     2EF : 11 0A 00                   ld      DE, 10
(1)     2F2 : CD 6A 03                   call    udiv16          ; BC/DE = HL...BC
(1)     2F5 : C5                         push    BC              ; push remainder
(1)     2F6 : CD EA 02                   call    print_uint16_loop
(1)     2F9 : E1                         pop     HL              ; pop remainder
(1)     2FA : 7D                         ld      A, L
(1)     2FB : C6 30                      add     A, '0'
(1)     2FD : C3 4F 01                   jp      putchar
(1)     300 :                    print_uint16_zero:
(1)     300 : 3E 30                      ld      A, '0'
(1)     302 : C3 4F 01                   jp      putchar
(1)     305 :
(1)     305 :                    ;;; Signed comparison; minuend - subtrahend
(1)     305 :                    ;;; @param BC minuend
(1)     305 :                    ;;; @param DE subtrahend
(1)     305 :                    ;;; @return AF.Z, AF.S
(1)     305 :                    ;;; @clobber A
(1)     305 :                    cmp16:
(1)     305 : C5                         push    BC
(1)     306 : D5                         push    DE
(1)     307 : E5                         push    HL
(1)     308 : 79                         ld      A, C
(1)     309 : 93                         sub     A, E
(1)     30A : 6F                         ld      L, A
(1)     30B : 78                         ld      A, B
(1)     30C : 9A                         sbc     A, D
(1)     30D : 67                         ld      H, A            ; HL=minuend-subtrahend
(1)     30E : B5                         or      L
(1)     30F : 28 09                      jr      Z, cmp16_return   ; AF.Z=1
(1)     311 : 7C                         ld      A, H            ; high(minuend-subtrahend)
(1)     312 : A8                         xor     B               ; high(minuend-subtrahend)^minuend)
(1)     313 : 6F                         ld      L, A
(1)     314 : 78                         ld      A, B
(1)     315 : AA                         xor     D               ; high(minuend^subtrahend)
(1)     316 : A5                         and     L               ; overflow
(1)     317 : AC                         xor     H               ; AF.S=overflow^sign
(1)     318 : F6 01                      or      1               ; clear AF.Z
(1)     31A :                    cmp16_return:
(1)     31A : E1                         pop     HL
(1)     31B : D1                         pop     DE
(1)     31C : C1                         pop     BC
(1)     31D : C9                         ret
(1)     31E :
(1)     31E :                    ;;; Negate; v
(1)     31E :                    ;;; @param DE v
(1)     31E :                    ;;; @return DE -v
(1)     31E :                    ;;; @clobber A
(1)     31E :                    neg_DE:
(1)     31E : 7A                         ld      A, D
(1)     31F : 2F                         cpl
(1)     320 : 57                         ld      D, A
(1)     321 : 7B                         ld      A, E
(1)     322 : 2F                         cpl
(1)     323 : 5F                         ld      E, A
(1)     324 : 13                         inc     DE
(1)     325 : C9                         ret
(1)     326 :
(1)     326 :                    ;;; Unsigned multiplication; result = multiplicand * multiplier
(1)     326 :                    ;;; @param BC multiplicand
(1)     326 :                    ;;; @param DE multiplier
(1)     326 :                    ;;; @return HL result
(1)     326 :                    ;;; @clobber BC DE HL A
(1)     326 :                    umul16:
(1)     326 : 21 00 00                   ld      HL, 0           ; result=0
(1)     329 : 18 11                      jr      umul16_check
(1)     32B :                    umul16_loop:
(1)     32B : B7                         or      A, A            ; clear AF.C
(1)     32C : 7A                         ld      A, D            ; multiplier >>= 1
(1)     32D : 1F                         rra
(1)     32E : 57                         ld      D, A
(1)     32F : 7B                         ld      A, E
(1)     330 : 1F                         rra
(1)     331 : 5F                         ld      E, A
(1)     332 : 30 01                      jr      NC, umul16_next ; if lsb(multiplier) == 0
(1)     334 : 09                         add     HL, BC          ; result += multiplicand
(1)     335 :                    umul16_next:
(1)     335 : B7                         or      A, A            ; clear AF.C
(1)     336 : 79                         ld      A, C            ; multiplicand <<= 1
(1)     337 : 17                         rla
(1)     338 : 4F                         ld      C, A
(1)     339 : 78                         ld      A, B
(1)     33A : 17                         rla
(1)     33B : 47                         ld      B, A
(1)     33C :                    umul16_check:
(1)     33C : 7A                         ld      A, D
(1)     33D : B3                         or      E
(1)     33E : 20 EB                      jr      NZ, umul16_loop ; while multiplier != 0
(1)     340 :                    umul16_end:
(1)     340 : C9                         ret
(1)     341 :
(1)     341 :                    ;;; Signed multiplication; result = multiplicand * multiplier
(1)     341 :                    ;;; @param BC multiplicand
(1)     341 :                    ;;; @param DE multiplier
(1)     341 :                    ;;; @return HL result
(1)     341 :                    ;;; @clobber A BC DE
(1)     341 :                    mul16:
(1)     341 : 78                         ld      A, B
(1)     342 : AA                         xor     A, D
(1)     343 : F5                         push    AF              ; save high(multiplicand^multiplier)
(1)     344 : CB 78                      bit     7, B
(1)     346 : 28 07                      jr      Z, mul16_abs_muliplicand
(1)     348 : 78                         ld      A, B
(1)     349 : 2F                         cpl
(1)     34A : 47                         ld      B, A
(1)     34B : 79                         ld      A, C
(1)     34C : 2F                         cpl
(1)     34D : 4F                         ld      C, A
(1)     34E : 03                         inc     BC              ; multiplicand = -multiplicand
(1)     34F :                    mul16_abs_muliplicand:
(1)     34F : CB 7A                      bit     7, D
(1)     351 : 28 07                      jr      Z,  mul16_multiply
(1)     353 : 7A                         ld      A, D
(1)     354 : 2F                         cpl
(1)     355 : 57                         ld      D, A
(1)     356 : 7B                         ld      A, E
(1)     357 : 2F                         cpl
(1)     358 : 5F                         ld      E, A
(1)     359 : 13                         inc     DE              ; multiplier = -multiplier
(1)     35A :                    mul16_multiply:
(1)     35A : CD 26 03                   call    umul16          ; HL = multiplicand * multiplier
(1)     35D : F1                         pop     AF              ; A=high(multiplicand^multiplier)
(1)     35E : CB 7F                      bit     7, A
(1)     360 : 28 07                      jr      Z, mul16_return
(1)     362 : 7C                         ld      A, H
(1)     363 : 2F                         cpl
(1)     364 : 67                         ld      H, A
(1)     365 : 7D                         ld      A, L
(1)     366 : 2F                         cpl
(1)     367 : 6F                         ld      L, A
(1)     368 : 23                         inc     HL              ; result = -result
(1)     369 :                    mul16_return:
(1)     369 : C9                         ret
(1)     36A :
(1)     36A :                    ;;; Unsigned division; dividend / divisor = quotient ... remainder
(1)     36A :                    ;;; @praram BC dividend
(1)     36A :                    ;;; @praram DE divisor
(1)     36A :                    ;;; @return BC remainder
(1)     36A :                    ;;; @return HL quotient
(1)     36A :                    ;;; @clobber A DE
(1)     36A :                    udiv16:
(1)     36A : 7A                         ld      A, D
(1)     36B : B3                         or      A, E
(1)     36C : C8                         ret     Z               ; divide by zero
(1)     36D : 2E 01                      ld      L, 1            ; L=bits
(1)     36F : 18 08                      jr      udiv16_prep
(1)     371 :                    udiv16_prep_loop:
(1)     371 : B7                         or      A, A            ; clear AF.C
(1)     372 : 7B                         ld      A, E            ; divisor <<= 1
(1)     373 : 17                         rla
(1)     374 : 5F                         ld      E, A
(1)     375 : 7A                         ld      A, D
(1)     376 : 17                         rla
(1)     377 : 57                         ld      D, A
(1)     378 : 2C                         inc     L               ; ++bits
(1)     379 :                    udiv16_prep:                    ; while msb(divisor) == 0
(1)     379 : CB 7A                      bit     7, D
(1)     37B : 28 F4                      jr      Z, udiv16_prep_loop
(1)     37D : 7D                         ld      A, L
(1)     37E : F5                         push    AF              ; push bits
(1)     37F : 60                         ld      H, B
(1)     380 : 69                         ld      L, C            ; HL=dividend
(1)     381 : AF                         xor     A, A
(1)     382 : 47                         ld      B, A
(1)     383 : 4F                         ld      C, A            ; BC=quotient
(1)     384 : 18 0F                      jr      udiv16_enter_loop
(1)     386 :                    udiv16_loop:
(1)     386 : F5                         push    AF              ; push bits
(1)     387 : B7                         or      A, A            ; clear AF.C
(1)     388 : 7A                         ld      A, D            ; divisor >>= 1
(1)     389 : 1F                         rra
(1)     38A : 57                         ld      D, A
(1)     38B : 7B                         ld      A, E
(1)     38C : 1F                         rra
(1)     38D : 5F                         ld      E, A
(1)     38E : B7                         or      A, A            ; clear AF.C
(1)     38F : 79                         ld      A, C            ; quotient <<= 1
(1)     390 : 17                         rla
(1)     391 : 4F                         ld      C, A
(1)     392 : 78                         ld      A, B
(1)     393 : 17                         rla
(1)     394 : 47                         ld      B, A
(1)     395 :                    udiv16_enter_loop:
(1)     395 : 7D                         ld      A, L
(1)     396 : 93                         sub     A, E
(1)     397 : 6F                         ld      L, A
(1)     398 : 7C                         ld      A, H
(1)     399 : 9A                         sbc     A, D
(1)     39A : 67                         ld      H, A            ; dividend -= divisor
(1)     39B : 38 03                      jr      C, udiv16_readd ; if dividend < 0
(1)     39D : 03                         inc     BC              ; quotient |= 1
(1)     39E : 18 01                      jr      udiv16_next
(1)     3A0 :                    udiv16_readd:
(1)     3A0 : 19                         add     HL, DE          ; dividend += divisor
(1)     3A1 :                    udiv16_next:
(1)     3A1 : F1                         pop     AF
(1)     3A2 : 3D                         dec     A               ; --bits
(1)     3A3 : 20 E1                      jr      NZ, udiv16_loop ; while bits != 0
(1)     3A5 : E5                         push    HL              ; remainder
(1)     3A6 : C5                         push    BC              ; quotient
(1)     3A7 : E1                         pop     HL
(1)     3A8 : C1                         pop     BC
(1)     3A9 : C9                         ret
(1)     3AA :
(1)     3AA :                    ;;; Signed division; dividend / divisor = quotient ... remainder
(1)     3AA :                    ;;; @param BC dividend
(1)     3AA :                    ;;; @param DE divisor
(1)     3AA :                    ;;; @return BC remainder
(1)     3AA :                    ;;; @return HL quotient
(1)     3AA :                    ;;; @clobber A DE
(1)     3AA :                    div16:
(1)     3AA : 78                         ld      A, B
(1)     3AB : AA                         xor     A, D
(1)     3AC : F5                         push    AF              ; save high(dividend^divisor)
(1)     3AD : CB 78                      bit     7, B
(1)     3AF : 28 07                      jr      Z, div16_abs_dividend
(1)     3B1 : 78                         ld      A, B
(1)     3B2 : 2F                         cpl
(1)     3B3 : 47                         ld      B, A
(1)     3B4 : 79                         ld      A, C
(1)     3B5 : 2F                         cpl
(1)     3B6 : 4F                         ld      C, A
(1)     3B7 : 03                         inc     BC              ; dividend = -dividend
(1)     3B8 :                    div16_abs_dividend:
(1)     3B8 : CB 7A                      bit     7, D
(1)     3BA : 28 07                      jr      Z, div16_divide
(1)     3BC : 7A                         ld      A, D
(1)     3BD : 2F                         cpl
(1)     3BE : 57                         ld      D, A
(1)     3BF : 7B                         ld      A, E
(1)     3C0 : 2F                         cpl
(1)     3C1 : 5F                         ld      E, A
(1)     3C2 : 13                         inc     DE              ; divisor = -divisor
(1)     3C3 :                    div16_divide:
(1)     3C3 : CD 6A 03                   call    udiv16          ; HL=quotient, BC=remainder
(1)     3C6 : F1                         pop     AF              ; A=high(dividend^divisor)
(1)     3C7 : CB 7F                      bit     7, A
(1)     3C9 : 28 07                      jr      Z, div16_return
(1)     3CB : 7C                         ld      A, H
(1)     3CC : 2F                         cpl
(1)     3CD : 67                         ld      H, A
(1)     3CE : 7D                         ld      A, L
(1)     3CF : 2F                         cpl
(1)     3D0 : 6F                         ld      L, A
(1)     3D1 : 23                         inc     HL              ; quotient=-quotient
(1)     3D2 :                    div16_return:
(1)     3D2 : C9                         ret
        3D3 :                            include "queue.inc"
(1)     3D3 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     3D3 :                    ;;; [queue] queue structure
(1)     3D3 : =0                 queue_len:      equ     0       ; queue length
(1)     3D3 : =1                 queue_size:     equ     1       ; buffer size
(1)     3D3 : =2                 queue_put:      equ     2       ; queue put index
(1)     3D3 : =3                 queue_get:      equ     3       ; queue get index
(1)     3D3 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     3D3 :
(1)     3D3 :                    ;;; [queue] Initialize queue
(1)     3D3 :                    ;;; @param HL queue work space pointer
(1)     3D3 :                    ;;; @param B queue work space size
(1)     3D3 :                    ;;; @clobber B
(1)     3D3 :                    queue_init:
(1)     3D3 : F5                         push    AF
(1)     3D4 : E5                         push    HL
(1)     3D5 : 36 00                      ld      (HL), 0         ; queue_len
(1)     3D7 : 78                         ld      A, B
(1)     3D8 : D6 04                      sub     queue_buf
(1)     3DA : 23                         inc     HL
(1)     3DB : 77                         ld      (HL), A         ; queue_size
(1)     3DC : C6 02                      add     A, 2            ; for queue_put and queue_get
(1)     3DE :                    queue_init_loop:
(1)     3DE : 23                         inc     HL
(1)     3DF : 36 00                      ld      (HL), 0
(1)     3E1 : 3D                         dec     A
(1)     3E2 : 20 FA                      jr      NZ, queue_init_loop
(1)     3E4 : E1                         pop     HL
(1)     3E5 : F1                         pop     AF
(1)     3E6 : C9                         ret
(1)     3E7 :
(1)     3E7 :                    ;;; [queue] Add an element to queue
(1)     3E7 :                    ;;; @param HL queue work space pointer
(1)     3E7 :                    ;;; @param A an element
(1)     3E7 :                    ;;; @return F.C 0 if queue is full
(1)     3E7 :                    queue_add:
(1)     3E7 : D5                         push    DE
(1)     3E8 : E5                         push    HL
(1)     3E9 : DD E3                      ex      (SP), IX        ; IX points queue structure
(1)     3EB : 57                         ld      D, A            ; save an element
(1)     3EC : DD 7E 00                   ld      A, (IX+queue_len)
(1)     3EF : DD BE 01                   cp      (IX+queue_size)
(1)     3F2 : 7A                         ld      A, D               ; restore an element
(1)     3F3 : 38 05                      jr      C, queue_add_store ; queue_len < queue_size
(1)     3F5 : DD E3                      ex      (SP), IX           ; F.C=1
(1)     3F7 : E1                         pop     HL
(1)     3F8 : D1                         pop     DE
(1)     3F9 : C9                         ret
(1)     3FA :                    queue_add_store:
(1)     3FA : DD 34 00                   inc     (IX+queue_len)
(1)     3FD : 11 04 00                   ld      DE, queue_buf
(1)     400 : 19                         add     HL, DE
(1)     401 : DD 5E 02                   ld      E, (IX+queue_put)
(1)     404 : 19                         add     HL, DE          ; HL=&queue_buf[queue_put]
(1)     405 : 77                         ld      (HL), A         ; store an element
(1)     406 : 7B                         ld      A, E
(1)     407 : 3C                         inc     A               ; queue_put++
(1)     408 : DD BE 01                   cp      (IX+queue_size)
(1)     40B : 38 01                      jr      C, queue_add_update ; queue_put < queue_size
(1)     40D : AF                         xor     A                   ; wrap around
(1)     40E :                    queue_add_update:
(1)     40E : DD 77 02                   ld      (IX+queue_put), A
(1)     411 : 7E                         ld      A, (HL)         ; restore an element
(1)     412 : DD E3                      ex      (SP), IX
(1)     414 : E1                         pop     HL
(1)     415 : D1                         pop     DE
(1)     416 : 37                         scf                     ; set carry
(1)     417 : C9                         ret
(1)     418 :
(1)     418 :                    ;;; [queue] Remove an element from queue
(1)     418 :                    ;;; @param HL queue work space pointer
(1)     418 :                    ;;; @return A an element
(1)     418 :                    ;;; @return F.C 0 if queue is empty
(1)     418 :                    queue_remove:
(1)     418 : 7E                         ld      A, (HL)               ; queue_len
(1)     419 : B7                         or      A                     ; clear carry
(1)     41A : 20 01                      jr      NZ, queue_remove_elem ; queue_len > 0
(1)     41C : C9                         ret
(1)     41D :                    queue_remove_elem:
(1)     41D : D5                         push    DE
(1)     41E : E5                         push    HL
(1)     41F : DD E3                      ex      (SP), IX        ; IX points queue structure
(1)     421 : DD 35 00                   dec     (IX+queue_len)
(1)     424 : 11 04 00                   ld      DE, queue_buf
(1)     427 : 19                         add     HL, DE
(1)     428 : DD 5E 03                   ld      E, (IX+queue_get)
(1)     42B : 19                         add     HL, DE          ; HL=&queue_buf[queue_get]
(1)     42C : 7B                         ld      A, E
(1)     42D : 3C                         inc     A               ; queue_get++
(1)     42E : DD BE 01                   cp      (IX+queue_size)
(1)     431 : 38 01                      jr      C, queue_remove_update ; queue_get < queue_size
(1)     433 : AF                         xor     A                      ; wrap around
(1)     434 :                    queue_remove_update:
(1)     434 : DD 77 03                   ld      (IX+queue_get), A
(1)     437 : 7E                         ld      A, (HL)         ; read an element
(1)     438 : DD E3                      ex      (SP), IX
(1)     43A : E1                         pop     HL
(1)     43B : D1                         pop     DE
(1)     43C : 37                         scf                     ; set carry
(1)     43D : C9                         ret
        43E :
        43E :                    isr_intr_rx:
        43E : F5                         push    AF
        43F : DB 01                      in      A, (USARTS)
        441 : CB 4F                      bit     ST_RxRDY_bp, A
        443 : 28 0A                      jr      Z, isr_intr_rx_exit
        445 : DB 00                      in      A, (USARTD)     ; receive character
        447 : E5                         push    HL
        448 : 21 00 20                   ld      HL, rx_queue
        44B : CD E7 03                   call    queue_add
        44E : E1                         pop     HL
        44F :                    isr_intr_rx_exit:
        44F : F1                         pop     AF
        450 : FB                         ei
        451 : ED 4D                      reti
        453 :
        453 :                    isr_intr_tx:
        453 : F5                         push    AF
        454 : DB 01                      in      A, (USARTS)
        456 : CB 47                      bit     ST_TxRDY_bp, A
        458 : 28 0C                      jr      Z, isr_intr_tx_exit
        45A : E5                         push    HL
        45B : 21 80 20                   ld      HL, tx_queue
        45E : CD 18 04                   call    queue_remove
        461 : E1                         pop     HL
        462 : 30 06                      jr      NC,isr_intr_send_empty
        464 : D3 00                      out     (USARTD), A     ; send character
        466 :                    isr_intr_tx_exit:
        466 : F1                         pop     AF
        467 : FB                         ei
        468 : ED 4D                      reti
        46A :                    isr_intr_send_empty:
        46A : 3E 36                      ld      a, RX_EN_TX_DIS
        46C : D3 01                      out     (USARTC), A     ; disable Tx
        46E : F1                         pop     AF
        46F : FB                         ei
        470 : ED 4D                      reti
        472 :
        472 :                            end
