          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     z80
          0 :                            include "z80.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; z80
(1)       0 :                    ;;; FLAGS Register
(1)       0 : =80                F_SIGN:         equ     10000000B ; set to 1 if negative
(1)       0 : =40                F_ZERO:         equ     01000000B ; set to 1 if zero
(1)       0 : =10                F_HALF_CARRY:   equ     00010000B ; set to 1 if carry from bit-3
(1)       0 : =4                 F_PARITY:       equ     00000100B ; set to 1 if even parity
(1)       0 : =4                 F_OVERFLOW:     equ     00000100B ; set to 1 if overflow
(1)       0 : =2                 F_NBCD:         equ     00000010B ; set to 1 if subtraction
(1)       0 : =1                 F_CARRY:        equ     00000001B ; set to 1 if carry
(1)       0 :                    ;;; Interrupt origin
(1)       0 : =0                 ORG_RESET:      equ     0000H   ; RESET
(1)       0 : =0                 ORG_RST00:      equ     0000H   ; RST 00H
(1)       0 : =8                 ORG_RST08:      equ     0008H   ; RST 08H
(1)       0 : =10                ORG_RST10:      equ     0010H   ; RST 10H
(1)       0 : =18                ORG_RST18:      equ     0018H   ; RST 18H
(1)       0 : =20                ORG_RST20:      equ     0020H   ; RST 20H
(1)       0 : =28                ORG_RST28:      equ     0028H   ; RST 28H
(1)       0 : =30                ORG_RST30:      equ     0030H   ; RST 30H
(1)       0 : =38                ORG_RST38:      equ     0038H   ; RST 38H
(1)       0 : =38                ORG_INT:        equ     0038H   ; Mode 1 INT
(1)       0 : =66                ORG_NMI:        equ     0066H   ; NMI
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =0                 USART:          equ     00H
          0 : =0                 USARTD:         equ     USART+0 ; Receive/Transmit data
          0 : =1                 USARTS:         equ     USART+1 ; Srtatus register
          0 : =1                 USARTC:         equ     USART+1 ; Control register
          0 : =2                 USARTRV:        equ     USART+2 ; Receive interrupt vector (ORG_*)
          0 : =3                 USARTTV:        equ     USART+3 ; Transmit interrupt vector (ORG_*)
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     11000000B
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 << MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 << MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 << MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     00100000B
(1)       0 : =10                MODE_PARITY_bm: equ     00010000B
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     00001100B
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 << MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 << MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 << MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 << MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     00000011B
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 << MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ (2 << MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ (3 << MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     10000000B   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     01000000B   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     00100000B   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     00010000B   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     00001000B   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     00000100B   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     00000010B   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     00000001B   ; Transmit enable
(1)       0 :
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     10000000B   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     01000000B   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     00100000B   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     00010000B   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     00001000B   ; Parity Error
(1)       0 : =2                 ST_TxEMPTY_bp:  equ     2           ; Transmitter empty
(1)       0 : =1                 ST_RxRDY_bp:    equ     1           ; Receiver ready
(1)       0 : =0                 ST_TxRDY_bp:    equ     0           ; Transmitter ready
          0 :                    ;;; Async 1stop 8data x16
          0 : =4E                ASYNC_MODE:     equ     MODE_STOP1_gc|MODE_LEN8_gc|MODE_BAUD_X16
          0 :                    ;;; RTS/DTR, error reset, Rx enable, Tx enable
          0 : =37                RX_EN_TX_EN:    equ     CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm|CMD_TxEN_bm
          0 : =36                RX_EN_TX_DIS:   equ     CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm
          0 :
       2000 :                            org     2000H
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       ds      rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       ds      tx_queue_size
       2100 :
       1000 :                            org     1000H
       1000 : =1000              stack:          equ     $
       1000 :
       1000 : =1000              vec_base:       equ     $
       1012 :                            org     vec_base+12H
       1012 : 28 04              vec_rx: dw      isr_intr_rx
       108A :                            org     vec_base+8AH
       108A : 3D 04              vec_tx: dw      isr_intr_tx
       108C :
          0 :                            org     ORG_RESET
          0 : C3 00 01                   jp      init
          3 :
         28 :                            org     ORG_RST28
         28 : C3 28 04                   jp      isr_intr_rx
         2B :
         30 :                            org     ORG_RST30
         30 : C3 3D 04                   jp      isr_intr_tx
         33 :
        100 :                            org     0100H
        100 :                    init:
        100 : 31 00 10                   ld      SP, stack
        103 : 21 00 20                   ld      HL, rx_queue
        106 : 06 80                      ld      B, rx_queue_size
        108 : CD BD 03                   call    queue_init
        10B : 21 80 20                   ld      HL, tx_queue
        10E : 06 80                      ld      B, tx_queue_size
        110 : CD BD 03                   call    queue_init
        113 :                    init_usart:
        113 : AF                         xor     A               ; clear A
        114 : D3 01                      out     (USARTC), A
        116 : D3 01                      out     (USARTC), A
        118 : D3 01                      out     (USARTC), A     ; safest way to sync mode
        11A : 3E 40                      ld      A, CMD_IR_bm
        11C : D3 01                      out     (USARTC), A     ; reset
        11E : 00                         nop
        11F : 00                         nop
        120 : 3E 4E                      ld      A, ASYNC_MODE
        122 : D3 01                      out     (USARTC), A
        124 : 00                         nop
        125 : 00                         nop
        126 : 3E 36                      ld      A, RX_EN_TX_DIS
        128 : D3 01                      out     (USARTC), A
        12A :
        12A : 3E                         db      3EH             ; LD A, n
        12B : EF                         rst     28H
        12C : D3 02                      out     (USARTRV), A    ; set RxRDY interrupt vector RST 28H
        12E : 3E                         db      3EH             ; LD A, n
        12F : F7                         rst     30H
        130 : D3 03                      out     (USARTTV), A    ; set TxRDY interrupt vector RST 30H
        132 : ED 46                      im      0
        134 :
        134 :                            ;; ld      A, HIGH vec_base
        134 :                            ;; ld      I, A
        134 :                            ;; ld      A, LOW vec_rx
        134 :                            ;; out     (USARTRV), A    ; set RxRDY interrupt vec_rx
        134 :                            ;; ld      A, LOW vec_tx
        134 :                            ;; out     (USARTTV), A    ; set TxRDY interrupt vec_tx
        134 :                            ;; im      2
        134 :
        134 : FB                         ei
        135 :
        135 :                    loop:
        135 : CD 70 01                   call    mandelbrot
        138 : CD 48 01                   call    newline
        13B : 18 F8                      jr      loop
        13D :
        13D :                    ;;; Get character
        13D :                    ;;; @return A
        13D :                    ;;; @return CC.C 0 if no character
        13D :                    getchar:
        13D : E5                         push    HL
        13E : 21 00 20                   ld      HL, rx_queue
        141 : F3                         di
        142 : CD 02 04                   call    queue_remove
        145 : FB                         ei
        146 : E1                         pop     HL
        147 : C9                         ret
        148 :
        148 :                    ;;; Put newline
        148 :                    ;;; @clobber A
        148 :                    newline:
        148 : 3E 0D                      ld      A, 0DH
        14A : CD 4F 01                   call    putchar
        14D : 3E 0A                      ld      A, 0AH
        14F :
        14F :                    ;;; Put character
        14F :                    ;;; @param A
        14F :                    putchar:
        14F : F5                         push    AF
        150 : E5                         push    HL
        151 : 21 80 20                   ld      HL, tx_queue
        154 :                    putchar_retry:
        154 : F3                         di
        155 : CD D1 03                   call    queue_add
        158 : FB                         ei
        159 : 30 F9                      jr      NC, putchar_retry ; branch if queue is full
        15B : E1                         pop     HL
        15C : 3E 37                      ld      a, RX_EN_TX_EN  ; enable Tx
        15E : D3 01                      out     (USARTC), A
        160 :                    putchar_exit:
        160 : F1                         pop     AF
        161 : C9                         ret
        162 :
        162 :                    ;;; Put newline
        162 :                    ;;; @clobber A
        162 :                    putspace:
        162 : 3E 20                      ld      A, ' '
        164 : 18 E9                      jr      putchar
        166 :
        166 :                            include "mandelbrot.inc"
(1)     166 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     166 :
(1)     166 :                    ;;; Sign extend A into BC
(1)     166 :                    ;;; @param A 8-bit value
(1)     166 :                    ;;; @return BC 16-bit value
(1)     166 :                    sex_BC:
(1)     166 : 4F                         ld      C, A
(1)     167 : 87                         add     A, A            ; AF.C=sign(A)
(1)     168 : 9F                         sbc     A, A            ; A=A-A-C
(1)     169 : 47                         ld      B, A
(1)     16A : C9                         ret
(1)     16B :
(1)     16B :                    ;;; Sign extend A into HL
(1)     16B :                    ;;; @param A 8-bit value
(1)     16B :                    ;;; @return HL 16-bit value
(1)     16B :                    sex_HL:
(1)     16B : 6F                         ld      L, A
(1)     16C : 87                         add     A, A            ; AF.C=sign(A)
(1)     16D : 9F                         sbc     A, A            ; A=A-A-C
(1)     16E : 67                         ld      H, A
(1)     16F : C9                         ret
(1)     170 :
(1)     170 : =32                Fv:     equ     50
(1)     170 :                    mandelbrot:
(1)     170 : 3E F4                      ld      A, -12
(1)     172 : 32 C4 02                   ld      (vY), A         ; Y=-12
(1)     175 :                    loop_y:
(1)     175 : 3E CF                      ld      A, -49
(1)     177 : 32 C5 02                   ld      (vX), A         ; X=-49
(1)     17A :                    loop_x:
(1)     17A : 3A C5 02                   ld      A, (vX)
(1)     17D : CD 66 01                   call    sex_BC          ; BC=X
(1)     180 : 11 E5 00                   ld      DE, 229
(1)     183 : CD 2D 03                   call    mul16           ; X*229
(1)     186 : 44                         ld      B, H
(1)     187 : 4D                         ld      C, L
(1)     188 : 11 64 00                   ld      DE, 100
(1)     18B : CD 94 03                   call    div16           ; X*229/100
(1)     18E : 22 B4 02                   ld      (vC), HL        ; C=X*229/100
(1)     191 : 22 B8 02                   ld      (vA), HL        ; A=C
(1)     194 : 3A C4 02                   ld      A, (vY)
(1)     197 : CD 66 01                   call    sex_BC          ; BC=Y
(1)     19A : 11 A0 01                   ld      DE, 416
(1)     19D : CD 2D 03                   call    mul16           ; Y*416
(1)     1A0 : 44                         ld      B, H
(1)     1A1 : 4D                         ld      C, L
(1)     1A2 : 11 64 00                   ld      DE, 100
(1)     1A5 : CD 94 03                   call    div16           ; Y*416/100
(1)     1A8 : 22 B6 02                   ld      (vD), HL        ; D=Y*416/100
(1)     1AB : 22 BA 02                   ld      (vB), HL        ; B=D
(1)     1AE : 3E 00                      ld      A, 0
(1)     1B0 : 32 C6 02                   ld      (vI), A         ; I=0
(1)     1B3 :
(1)     1B3 :                            ;; ld      A, (vY)
(1)     1B3 :                            ;; call    sex_HL
(1)     1B3 :                            ;; ld      A, 'Y'
(1)     1B3 :                            ;; call    print
(1)     1B3 :                            ;; ld      A, (vX)
(1)     1B3 :                            ;; call    sex_HL
(1)     1B3 :                            ;; ld      A, 'X'
(1)     1B3 :                            ;; call    print
(1)     1B3 :                            ;; ld      HL, (vC)
(1)     1B3 :                            ;; ld      A, 'C'
(1)     1B3 :                            ;; call    print
(1)     1B3 :                            ;; ld      HL, (vD)
(1)     1B3 :                            ;; ld      A, 'D'
(1)     1B3 :                            ;; call    print
(1)     1B3 :                            ;; call    newline
(1)     1B3 :
(1)     1B3 :                    loop_i:
(1)     1B3 : ED 4B BA 02                ld      BC, (vB)
(1)     1B7 : 11 32 00                   ld      DE, Fv
(1)     1BA : CD 94 03                   call    div16           ; B/F
(1)     1BD : 22 BE 02                   ld      (vQ), HL        ; Q=B/F
(1)     1C0 : 44                         ld      B, H
(1)     1C1 : 4D                         ld      C, L
(1)     1C2 : 11 CE FF                   ld      DE, -Fv
(1)     1C5 : CD 2D 03                   call    mul16           ; -Q*F
(1)     1C8 : ED 5B BA 02                ld      DE, (vB)
(1)     1CC : 19                         add     HL, DE          ; B-Q*F
(1)     1CD : 22 C0 02                   ld      (vS), HL        ; S=B-Q*F
(1)     1D0 : ED 4B BA 02                ld      BC, (vB)
(1)     1D4 : ED 5B BA 02                ld      DE, (vB)
(1)     1D8 : CD 2D 03                   call    mul16           ; B*B
(1)     1DB : E5                         push    HL              ; push B*B
(1)     1DC : ED 4B B8 02                ld      BC, (vA)
(1)     1E0 : ED 5B B8 02                ld      DE, (vA)
(1)     1E4 : CD 2D 03                   call    mul16           ; A*A
(1)     1E7 : D1                         pop     DE              ; pop B*B
(1)     1E8 : 37                         scf
(1)     1E9 : 3F                         ccf
(1)     1EA : ED 52                      sbc     HL, DE          ; A*A-B*B
(1)     1EC : 44                         ld      B, H
(1)     1ED : 4D                         ld      C, L
(1)     1EE : 11 32 00                   ld      DE, Fv
(1)     1F1 : CD 94 03                   call    div16           ; (A*A-B*B)/F
(1)     1F4 : ED 5B B4 02                ld      DE, (vC)
(1)     1F8 : 19                         add     HL, DE          ; (A*A-B*B)/F+C
(1)     1F9 : E5                         push    HL              ; push (A*A-B*B)/F+C
(1)     1FA : ED 4B B8 02                ld      BC, (vA)
(1)     1FE : ED 5B C0 02                ld      DE, (vS)
(1)     202 : CD 2D 03                   call    mul16           ; A*S
(1)     205 : 44                         ld      B, H
(1)     206 : 4D                         ld      C, L
(1)     207 : 11 32 00                   ld      DE, Fv
(1)     20A : CD 94 03                   call    div16           ; A*S/F
(1)     20D : E5                         push    HL              ; push A*S/F
(1)     20E : ED 4B B8 02                ld      BC, (vA)
(1)     212 : ED 5B BE 02                ld      DE, (vQ)
(1)     216 : CD 2D 03                   call    mul16           ; A*Q
(1)     219 : D1                         pop     DE              ; pop A*S/F
(1)     21A : 19                         add     HL, DE          ; A*Q+A*S/F
(1)     21B : 29                         add     HL, HL          ; 2*(A*Q+A*S/F)
(1)     21C : ED 5B B6 02                ld      DE, (vD)
(1)     220 : 19                         add     HL, DE          ; 2*(A*Q+A*S/F)+D
(1)     221 : 22 BA 02                   ld      (vB), HL        ; B=2*(A*Q+A*S/F)+D
(1)     224 : C1                         pop     BC              ; pop (A*A-B*B)/F+C
(1)     225 : ED 43 B8 02                ld      (vA), BC        ; A=(A*A-B*B)/F+C
(1)     229 : 11 32 00                   ld      DE, Fv
(1)     22C : CD 94 03                   call    div16           ; A/F
(1)     22F : 22 BC 02                   ld      (vP), HL        ; P=A/F
(1)     232 : 44                         ld      B, H
(1)     233 : 4D                         ld      C, L
(1)     234 : 54                         ld      D, H
(1)     235 : 5D                         ld      E, L
(1)     236 : CD 2D 03                   call    mul16           ; P*P
(1)     239 : E5                         push    HL              ; push P*P
(1)     23A : ED 4B BA 02                ld      BC, (vB)
(1)     23E : 11 32 00                   ld      DE, Fv
(1)     241 : CD 94 03                   call    div16           ; B/F
(1)     244 : 22 BE 02                   ld      (vQ), HL        ; Q=B/F
(1)     247 : 44                         ld      B, H
(1)     248 : 4D                         ld      C, L
(1)     249 : 54                         ld      D, H
(1)     24A : 5D                         ld      E, L
(1)     24B : CD 2D 03                   call    mul16           ; Q*Q
(1)     24E : D1                         pop     DE              ; pop P*P
(1)     24F : 19                         add     HL, DE          ; P*P+Q*Q
(1)     250 : 22 C2 02                   ld      (vT), HL        ; T=P*P+Q*Q
(1)     253 :
(1)     253 :                            ;; call    putspace
(1)     253 :                            ;; ld      A, (vI)
(1)     253 :                            ;; call    sex_HL
(1)     253 :                            ;; ld      A, 'I'
(1)     253 :                            ;; call    print
(1)     253 :                            ;; ld      HL, (vA)
(1)     253 :                            ;; ld      A, 'A'
(1)     253 :                            ;; call    print
(1)     253 :                            ;; ld      HL, (vB)
(1)     253 :                            ;; ld      A, 'B'
(1)     253 :                            ;; call    print
(1)     253 :                            ;; ld      HL, (vP)
(1)     253 :                            ;; ld      A, 'P'
(1)     253 :                            ;; call    print
(1)     253 :                            ;; ld      HL, (vQ)
(1)     253 :                            ;; ld      A, 'Q'
(1)     253 :                            ;; call    print
(1)     253 :                            ;; ld      HL, (vT)
(1)     253 :                            ;; ld      A, 'T'
(1)     253 :                            ;; call    print
(1)     253 :                            ;; call    newline
(1)     253 :
(1)     253 : 3A C3 02                   ld      A, (vT+1)
(1)     256 : 20 17                      jr      NZ, print_i     ; if T>=256
(1)     258 : 3A C2 02                   ld      A, (vT)
(1)     25B : FE 05                      cp      A, 4+1
(1)     25D : 30 10                      jr      NC, print_i     ; if 4<T
(1)     25F : 3A C6 02                   ld      A, (vI)
(1)     262 : 3C                         inc     A
(1)     263 : 32 C6 02                   ld      (vI), A
(1)     266 : FE 10                      cp      A, 16
(1)     268 : DA B3 01                   jp      C, loop_i       ; if I<16
(1)     26B : 3E 20                      ld      A, ' '
(1)     26D : 18 09                      jr      print_char
(1)     26F :                    print_i:
(1)     26F : 3A C6 02                   ld      A, (vI)
(1)     272 : C6 90                      add     A, 90H
(1)     274 : 27                         daa
(1)     275 : CE 40                      adc     A, 40H
(1)     277 : 27                         daa
(1)     278 :                    print_char:
(1)     278 : CD 4F 01                   call    putchar
(1)     27B :
(1)     27B :                            ;; push    AF
(1)     27B :                            ;; ld      A, '@'
(1)     27B :                            ;; call    putchar
(1)     27B :                            ;; ld      A, '='
(1)     27B :                            ;; call    putchar
(1)     27B :                            ;; pop     AF
(1)     27B :                            ;; call    putchar
(1)     27B :                            ;; call    newline
(1)     27B :
(1)     27B : CD 3D 01                   call    getchar
(1)     27E : 30 04                      jr      NC, next_x
(1)     280 : B7                         or      A
(1)     281 : 20 01                      jr      NZ, next_x
(1)     283 : 76                         halt                    ; halt to system
(1)     284 :                    next_x:
(1)     284 : 21 C5 02                   ld      HL, vX
(1)     287 : 34                         inc     (HL)            ; X+=1
(1)     288 : 7E                         ld      A, (HL)
(1)     289 : CB 7F                      bit     7, A
(1)     28B : C2 7A 01                   jp      NZ, loop_x      ; if X<0
(1)     28E : FE 1E                      cp      A, 30
(1)     290 : DA 7A 01                   jp      C, loop_x       ; if X<30
(1)     293 : CD 48 01                   call    newline
(1)     296 : 21 C4 02                   ld      HL, vY
(1)     299 : 34                         inc     (HL)            ; Y+=1
(1)     29A : 7E                         ld      A, (HL)
(1)     29B : CB 7F                      bit     7, A
(1)     29D : C2 75 01                   jp      NZ, loop_y      ; if Y<0
(1)     2A0 : FE 0D                      cp      A, 13
(1)     2A2 : DA 75 01                   jp      C, loop_y       ; if Y<13
(1)     2A5 : C9                         ret
(1)     2A6 :
(1)     2A6 :                    ;;; Print variable
(1)     2A6 :                    ;;; @param A variable name
(1)     2A6 :                    ;;; @param HL variable value
(1)     2A6 :                    print:
(1)     2A6 : CD 4F 01                   call    putchar
(1)     2A9 : 3E 3D                      ld      A, '='
(1)     2AB : CD 4F 01                   call    putchar
(1)     2AE : CD C7 02                   call    print_int16
(1)     2B1 : C3 62 01                   jp      putspace
(1)     2B4 :
(1)     2B4 :                    ;;; workspace
(1)     2B4 :                    vC:     ds      2
(1)     2B6 :                    vD:     ds      2
(1)     2B8 :                    vA:     ds      2
(1)     2BA :                    vB:     ds      2
(1)     2BC :                    vP:     ds      2
(1)     2BE :                    vQ:     ds      2
(1)     2C0 :                    vS:     ds      2
(1)     2C2 :                    vT:     ds      2
(1)     2C4 :                    vY:     ds      1
(1)     2C5 :                    vX:     ds      1
(1)     2C6 :                    vI:     ds      1
(1)     2C7 :
        2C7 :                            include "arith.inc"
(1)     2C7 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     2C7 :                            cpu     z80
(1)     2C7 :
(1)     2C7 :                    ;;; Print signed 16-bit integer as decimal
(1)     2C7 :                    ;;; @param HL value
(1)     2C7 :                    ;;; @clobber A HL
(1)     2C7 :                    print_int16:
(1)     2C7 : 7C                         ld      A, H
(1)     2C8 : B5                         or      A, L
(1)     2C9 : 28 2E                      jr      Z, print_uint16_zero
(1)     2CB : CB 7C                      bit     7, H
(1)     2CD : 28 0C                      jr      Z, print_uint16
(1)     2CF : 3E 2D                      ld      A, '-'
(1)     2D1 : CD 4F 01                   call    putchar
(1)     2D4 : 7D                         ld      A, L
(1)     2D5 : 2F                         cpl
(1)     2D6 : 6F                         ld      L, A
(1)     2D7 : 7C                         ld      A, H
(1)     2D8 : 2F                         cpl
(1)     2D9 : 67                         ld      H, A
(1)     2DA : 23                         inc     HL              ; HL=-value
(1)     2DB :                    print_uint16:
(1)     2DB : C5                         push    BC
(1)     2DC : D5                         push    DE
(1)     2DD : CD E3 02                   call    print_uint16_loop
(1)     2E0 : D1                         pop     DE
(1)     2E1 : C1                         pop     BC
(1)     2E2 : C9                         ret
(1)     2E3 :                    print_uint16_loop:
(1)     2E3 : 7C                         ld      A, H
(1)     2E4 : B5                         or      A, L
(1)     2E5 : C8                         ret     Z
(1)     2E6 : 44                         ld      B, H
(1)     2E7 : 4D                         ld      C, L
(1)     2E8 : 11 0A 00                   ld      DE, 10
(1)     2EB : CD 56 03                   call    udiv16          ; BC/DE = HL...BC
(1)     2EE : C5                         push    BC              ; push remainder
(1)     2EF : CD E3 02                   call    print_uint16_loop
(1)     2F2 : E1                         pop     HL              ; pop remainder
(1)     2F3 : 7D                         ld      A, L
(1)     2F4 : C6 30                      add     A, '0'
(1)     2F6 : C3 4F 01                   jp      putchar
(1)     2F9 :                    print_uint16_zero:
(1)     2F9 : 3E 30                      ld      A, '0'
(1)     2FB : C3 4F 01                   jp      putchar
(1)     2FE :
(1)     2FE :                    ;;; Signed comparison; minuend - subtrahend
(1)     2FE :                    ;;; @param BC minuend
(1)     2FE :                    ;;; @param DE subtrahend
(1)     2FE :                    ;;; @return AF.Z, AF.S
(1)     2FE :                    ;;; @clobber A
(1)     2FE :                    cmp16:
(1)     2FE : E5                         push    HL
(1)     2FF : 60                         ld      H, B
(1)     300 : 69                         ld      L, C
(1)     301 : 37                         scf
(1)     302 : 3F                         ccf
(1)     303 : ED 52                      sbc     HL, DE
(1)     305 : 28 09                      jr      Z, cmp16_return ; AF.Z=1
(1)     307 : 7C                         ld      A, H            ; high(minuend-subtrahend)
(1)     308 : A8                         xor     B               ; high(minuend-subtrahend)^minuend
(1)     309 : 6F                         ld      L, A
(1)     30A : 78                         ld      A, B
(1)     30B : AA                         xor     D               ; high(minuend^subtrahend)
(1)     30C : A5                         and     L               ; overflow
(1)     30D : AC                         xor     H               ; AF.S=overflow^sign
(1)     30E : F6 01                      or      1               ; clear AF.Z
(1)     310 :                    cmp16_return:
(1)     310 : E1                         pop     HL
(1)     311 : C9                         ret
(1)     312 :
(1)     312 :                    ;;; Unsigned multiplication; result = multiplicand * multiplier
(1)     312 :                    ;;; @param BC multiplicand
(1)     312 :                    ;;; @param DE multiplier
(1)     312 :                    ;;; @return HL result
(1)     312 :                    ;;; @clobber BC DE HL A
(1)     312 :                    umul16:
(1)     312 : 21 00 00                   ld      HL, 0           ; result=0
(1)     315 : 18 11                      jr      umul16_check
(1)     317 :                    umul16_loop:
(1)     317 : B7                         or      A, A            ; clear AF.C
(1)     318 : 7A                         ld      A, D            ; multiplier >>= 1
(1)     319 : 1F                         rra
(1)     31A : 57                         ld      D, A
(1)     31B : 7B                         ld      A, E
(1)     31C : 1F                         rra
(1)     31D : 5F                         ld      E, A
(1)     31E : 30 01                      jr      NC, umul16_next ; if lsb(multiplier) == 0
(1)     320 : 09                         add     HL, BC          ; result += multiplicand
(1)     321 :                    umul16_next:
(1)     321 : B7                         or      A, A            ; clear AF.C
(1)     322 : 79                         ld      A, C            ; multiplicand <<= 1
(1)     323 : 17                         rla
(1)     324 : 4F                         ld      C, A
(1)     325 : 78                         ld      A, B
(1)     326 : 17                         rla
(1)     327 : 47                         ld      B, A
(1)     328 :                    umul16_check:
(1)     328 : 7A                         ld      A, D
(1)     329 : B3                         or      E
(1)     32A : 20 EB                      jr      NZ, umul16_loop ; while multiplier != 0
(1)     32C :                    umul16_end:
(1)     32C : C9                         ret
(1)     32D :
(1)     32D :                    ;;; Signed multiplication; result = multiplicand * multiplier
(1)     32D :                    ;;; @param BC multiplicand
(1)     32D :                    ;;; @param DE multiplier
(1)     32D :                    ;;; @return HL result
(1)     32D :                    ;;; @clobber A BC DE
(1)     32D :                    mul16:
(1)     32D : 78                         ld      A, B
(1)     32E : AA                         xor     A, D
(1)     32F : F5                         push    AF              ; save high(multiplicand^multiplier)
(1)     330 : CB 78                      bit     7, B
(1)     332 : 28 07                      jr      Z, mul16_abs_muliplicand
(1)     334 : AF                         xor     A               ; AF.C=0
(1)     335 : 67                         ld      H, A
(1)     336 : 6F                         ld      L, A
(1)     337 : ED 42                      sbc     HL, BC
(1)     339 : 44                         ld      B, H
(1)     33A : 4D                         ld      C, L            ; multiplicand = -multiplicand
(1)     33B :                    mul16_abs_muliplicand:
(1)     33B : CB 7A                      bit     7, D
(1)     33D : 28 07                      jr      Z,  mul16_multiply
(1)     33F : AF                         xor     A               ; AF.C=0
(1)     340 : 67                         ld      H, A
(1)     341 : 6F                         ld      L, A
(1)     342 : ED 52                      sbc     HL, DE
(1)     344 : 54                         ld      D, H
(1)     345 : 5D                         ld      E, L            ; multiplier = -multiplier
(1)     346 :                    mul16_multiply:
(1)     346 : CD 12 03                   call    umul16          ; HL = multiplicand * multiplier
(1)     349 : F1                         pop     AF              ; A=high(multiplicand^multiplier)
(1)     34A : CB 7F                      bit     7, A
(1)     34C : 28 07                      jr      Z, mul16_return
(1)     34E : 7C                         ld      A, H
(1)     34F : 2F                         cpl
(1)     350 : 67                         ld      H, A
(1)     351 : 7D                         ld      A, L
(1)     352 : 2F                         cpl
(1)     353 : 6F                         ld      L, A
(1)     354 : 23                         inc     HL              ; result = -result
(1)     355 :                    mul16_return:
(1)     355 : C9                         ret
(1)     356 :
(1)     356 :                    ;;; Unsigned division; dividend / divisor = quotient ... remainder
(1)     356 :                    ;;; @praram BC dividend
(1)     356 :                    ;;; @praram DE divisor
(1)     356 :                    ;;; @return BC remainder
(1)     356 :                    ;;; @return HL quotient
(1)     356 :                    ;;; @clobber A DE
(1)     356 :                    udiv16:
(1)     356 : 7A                         ld      A, D
(1)     357 : B3                         or      A, E
(1)     358 : C8                         ret     Z               ; divide by zero
(1)     359 : 2E 01                      ld      L, 1            ; L=bits
(1)     35B : 18 08                      jr      udiv16_prep
(1)     35D :                    udiv16_prep_loop:
(1)     35D : B7                         or      A, A            ; clear AF.C
(1)     35E : 7B                         ld      A, E            ; divisor <<= 1
(1)     35F : 17                         rla
(1)     360 : 5F                         ld      E, A
(1)     361 : 7A                         ld      A, D
(1)     362 : 17                         rla
(1)     363 : 57                         ld      D, A
(1)     364 : 2C                         inc     L               ; ++bits
(1)     365 :                    udiv16_prep:                    ; while msb(divisor) == 0
(1)     365 : CB 7A                      bit     7, D
(1)     367 : 28 F4                      jr      Z, udiv16_prep_loop
(1)     369 : 7D                         ld      A, L
(1)     36A : F5                         push    AF              ; push bits
(1)     36B : 60                         ld      H, B
(1)     36C : 69                         ld      L, C            ; HL=dividend
(1)     36D : AF                         xor     A, A
(1)     36E : 47                         ld      B, A
(1)     36F : 4F                         ld      C, A            ; BC=quotient
(1)     370 : 18 0F                      jr      udiv16_enter_loop
(1)     372 :                    udiv16_loop:
(1)     372 : F5                         push    AF              ; push bits
(1)     373 : B7                         or      A, A            ; clear AF.C
(1)     374 : 7A                         ld      A, D            ; divisor >>= 1
(1)     375 : 1F                         rra
(1)     376 : 57                         ld      D, A
(1)     377 : 7B                         ld      A, E
(1)     378 : 1F                         rra
(1)     379 : 5F                         ld      E, A
(1)     37A : B7                         or      A, A            ; clear AF.C
(1)     37B : 79                         ld      A, C            ; quotient <<= 1
(1)     37C : 17                         rla
(1)     37D : 4F                         ld      C, A
(1)     37E : 78                         ld      A, B
(1)     37F : 17                         rla
(1)     380 : 47                         ld      B, A
(1)     381 :                    udiv16_enter_loop:
(1)     381 : 37                         scf
(1)     382 : 3F                         ccf
(1)     383 : ED 52                      sbc     HL, DE          ; dividend -= divisor
(1)     385 : 38 03                      jr      C, udiv16_readd ; if dividend < 0
(1)     387 : 03                         inc     BC              ; quotient |= 1
(1)     388 : 18 01                      jr      udiv16_next
(1)     38A :                    udiv16_readd:
(1)     38A : 19                         add     HL, DE          ; dividend += divisor
(1)     38B :                    udiv16_next:
(1)     38B : F1                         pop     AF
(1)     38C : 3D                         dec     A               ; --bits
(1)     38D : 20 E3                      jr      NZ, udiv16_loop ; while bits != 0
(1)     38F : E5                         push    HL              ; remainder
(1)     390 : C5                         push    BC              ; quotient
(1)     391 : E1                         pop     HL
(1)     392 : C1                         pop     BC
(1)     393 : C9                         ret
(1)     394 :
(1)     394 :                    ;;; Signed division; dividend / divisor = quotient ... remainder
(1)     394 :                    ;;; @param BC dividend
(1)     394 :                    ;;; @param DE divisor
(1)     394 :                    ;;; @return BC remainder
(1)     394 :                    ;;; @return HL quotient
(1)     394 :                    ;;; @clobber A DE
(1)     394 :                    div16:
(1)     394 : 78                         ld      A, B
(1)     395 : AA                         xor     A, D
(1)     396 : F5                         push    AF              ; save high(dividend^divisor)
(1)     397 : CB 78                      bit     7, B
(1)     399 : 28 07                      jr      Z, div16_abs_dividend
(1)     39B : AF                         xor     A               ; AF.C=0
(1)     39C : 67                         ld      H, A
(1)     39D : 6F                         ld      L, A
(1)     39E : ED 42                      sbc     HL, BC
(1)     3A0 : 44                         ld      B, H
(1)     3A1 : 4D                         ld      C, L            ; dividend = -dividend
(1)     3A2 :                    div16_abs_dividend:
(1)     3A2 : CB 7A                      bit     7, D
(1)     3A4 : 28 07                      jr      Z, div16_divide
(1)     3A6 : AF                         xor     A               ; AF.C=0
(1)     3A7 : 67                         ld      H, A
(1)     3A8 : 6F                         ld      L, A
(1)     3A9 : ED 52                      sbc     HL, DE
(1)     3AB : 54                         ld      D, H
(1)     3AC : 5D                         ld      E, L            ; divisor = -divisor
(1)     3AD :                    div16_divide:
(1)     3AD : CD 56 03                   call    udiv16          ; HL=quotient, BC=remainder
(1)     3B0 : F1                         pop     AF              ; A=high(dividend^divisor)
(1)     3B1 : CB 7F                      bit     7, A
(1)     3B3 : 28 07                      jr      Z, div16_return
(1)     3B5 : 7C                         ld      A, H
(1)     3B6 : 2F                         cpl
(1)     3B7 : 67                         ld      H, A
(1)     3B8 : 7D                         ld      A, L
(1)     3B9 : 2F                         cpl
(1)     3BA : 6F                         ld      L, A
(1)     3BB : 23                         inc     HL              ; quotient=-quotient
(1)     3BC :                    div16_return:
(1)     3BC : C9                         ret
        3BD :                            include "queue.inc"
(1)     3BD :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     3BD :                    ;;; [queue] queue structure
(1)     3BD : =0                 queue_len:      equ     0       ; queue length
(1)     3BD : =1                 queue_size:     equ     1       ; buffer size
(1)     3BD : =2                 queue_put:      equ     2       ; queue put index
(1)     3BD : =3                 queue_get:      equ     3       ; queue get index
(1)     3BD : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     3BD :
(1)     3BD :                    ;;; [queue] Initialize queue
(1)     3BD :                    ;;; @param HL queue work space pointer
(1)     3BD :                    ;;; @param B queue work space size
(1)     3BD :                    ;;; @clobber B
(1)     3BD :                    queue_init:
(1)     3BD : F5                         push    AF
(1)     3BE : E5                         push    HL
(1)     3BF : 36 00                      ld      (HL), 0         ; queue_len
(1)     3C1 : 78                         ld      A, B
(1)     3C2 : D6 04                      sub     queue_buf
(1)     3C4 : 23                         inc     HL
(1)     3C5 : 77                         ld      (HL), A         ; queue_size
(1)     3C6 : C6 02                      add     A, 2            ; for queue_put and queue_get
(1)     3C8 :                    queue_init_loop:
(1)     3C8 : 23                         inc     HL
(1)     3C9 : 36 00                      ld      (HL), 0
(1)     3CB : 3D                         dec     A
(1)     3CC : 20 FA                      jr      NZ, queue_init_loop
(1)     3CE : E1                         pop     HL
(1)     3CF : F1                         pop     AF
(1)     3D0 : C9                         ret
(1)     3D1 :
(1)     3D1 :                    ;;; [queue] Add an element to queue
(1)     3D1 :                    ;;; @param HL queue work space pointer
(1)     3D1 :                    ;;; @param A an element
(1)     3D1 :                    ;;; @return F.C 0 if queue is full
(1)     3D1 :                    queue_add:
(1)     3D1 : D5                         push    DE
(1)     3D2 : E5                         push    HL
(1)     3D3 : DD E3                      ex      (SP), IX        ; IX points queue structure
(1)     3D5 : 57                         ld      D, A            ; save an element
(1)     3D6 : DD 7E 00                   ld      A, (IX+queue_len)
(1)     3D9 : DD BE 01                   cp      (IX+queue_size)
(1)     3DC : 7A                         ld      A, D               ; restore an element
(1)     3DD : 38 05                      jr      C, queue_add_store ; queue_len < queue_size
(1)     3DF : DD E3                      ex      (SP), IX           ; F.C=1
(1)     3E1 : E1                         pop     HL
(1)     3E2 : D1                         pop     DE
(1)     3E3 : C9                         ret
(1)     3E4 :                    queue_add_store:
(1)     3E4 : DD 34 00                   inc     (IX+queue_len)
(1)     3E7 : 11 04 00                   ld      DE, queue_buf
(1)     3EA : 19                         add     HL, DE
(1)     3EB : DD 5E 02                   ld      E, (IX+queue_put)
(1)     3EE : 19                         add     HL, DE          ; HL=&queue_buf[queue_put]
(1)     3EF : 77                         ld      (HL), A         ; store an element
(1)     3F0 : 7B                         ld      A, E
(1)     3F1 : 3C                         inc     A               ; queue_put++
(1)     3F2 : DD BE 01                   cp      (IX+queue_size)
(1)     3F5 : 38 01                      jr      C, queue_add_update ; queue_put < queue_size
(1)     3F7 : AF                         xor     A                   ; wrap around
(1)     3F8 :                    queue_add_update:
(1)     3F8 : DD 77 02                   ld      (IX+queue_put), A
(1)     3FB : 7E                         ld      A, (HL)         ; restore an element
(1)     3FC : DD E3                      ex      (SP), IX
(1)     3FE : E1                         pop     HL
(1)     3FF : D1                         pop     DE
(1)     400 : 37                         scf                     ; set carry
(1)     401 : C9                         ret
(1)     402 :
(1)     402 :                    ;;; [queue] Remove an element from queue
(1)     402 :                    ;;; @param HL queue work space pointer
(1)     402 :                    ;;; @return A an element
(1)     402 :                    ;;; @return F.C 0 if queue is empty
(1)     402 :                    queue_remove:
(1)     402 : 7E                         ld      A, (HL)               ; queue_len
(1)     403 : B7                         or      A                     ; clear carry
(1)     404 : 20 01                      jr      NZ, queue_remove_elem ; queue_len > 0
(1)     406 : C9                         ret
(1)     407 :                    queue_remove_elem:
(1)     407 : D5                         push    DE
(1)     408 : E5                         push    HL
(1)     409 : DD E3                      ex      (SP), IX        ; IX points queue structure
(1)     40B : DD 35 00                   dec     (IX+queue_len)
(1)     40E : 11 04 00                   ld      DE, queue_buf
(1)     411 : 19                         add     HL, DE
(1)     412 : DD 5E 03                   ld      E, (IX+queue_get)
(1)     415 : 19                         add     HL, DE          ; HL=&queue_buf[queue_get]
(1)     416 : 7B                         ld      A, E
(1)     417 : 3C                         inc     A               ; queue_get++
(1)     418 : DD BE 01                   cp      (IX+queue_size)
(1)     41B : 38 01                      jr      C, queue_remove_update ; queue_get < queue_size
(1)     41D : AF                         xor     A                      ; wrap around
(1)     41E :                    queue_remove_update:
(1)     41E : DD 77 03                   ld      (IX+queue_get), A
(1)     421 : 7E                         ld      A, (HL)         ; read an element
(1)     422 : DD E3                      ex      (SP), IX
(1)     424 : E1                         pop     HL
(1)     425 : D1                         pop     DE
(1)     426 : 37                         scf                     ; set carry
(1)     427 : C9                         ret
        428 :
        428 :                    isr_intr_rx:
        428 : F5                         push    AF
        429 : DB 01                      in      A, (USARTS)
        42B : CB 4F                      bit     ST_RxRDY_bp, A
        42D : 28 0A                      jr      Z, isr_intr_rx_exit
        42F : DB 00                      in      A, (USARTD)     ; receive character
        431 : E5                         push    HL
        432 : 21 00 20                   ld      HL, rx_queue
        435 : CD D1 03                   call    queue_add
        438 : E1                         pop     HL
        439 :                    isr_intr_rx_exit:
        439 : F1                         pop     AF
        43A : FB                         ei
        43B : ED 4D                      reti
        43D :
        43D :                    isr_intr_tx:
        43D : F5                         push    AF
        43E : DB 01                      in      A, (USARTS)
        440 : CB 47                      bit     ST_TxRDY_bp, A
        442 : 28 0C                      jr      Z, isr_intr_tx_exit
        444 : E5                         push    HL
        445 : 21 80 20                   ld      HL, tx_queue
        448 : CD 02 04                   call    queue_remove
        44B : E1                         pop     HL
        44C : 30 06                      jr      NC,isr_intr_send_empty
        44E : D3 00                      out     (USARTD), A     ; send character
        450 :                    isr_intr_tx_exit:
        450 : F1                         pop     AF
        451 : FB                         ei
        452 : ED 4D                      reti
        454 :                    isr_intr_send_empty:
        454 : 3E 36                      ld      a, RX_EN_TX_DIS
        456 : D3 01                      out     (USARTC), A     ; disable Tx
        458 : F1                         pop     AF
        459 : FB                         ei
        45A : ED 4D                      reti
        45C :
        45C :                            end
