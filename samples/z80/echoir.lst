          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     z80
          0 :                            include "z80.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; z80
(1)       0 :                    ;;; FLAGS Register
(1)       0 : =80                F_SIGN:         equ     10000000B ; set to 1 if negative
(1)       0 : =40                F_ZERO:         equ     01000000B ; set to 1 if zero
(1)       0 : =10                F_HALF_CARRY:   equ     00010000B ; set to 1 if carry from bit-3
(1)       0 : =4                 F_PARITY:       equ     00000100B ; set to 1 if even parity
(1)       0 : =4                 F_OVERFLOW:     equ     00000100B ; set to 1 if overflow
(1)       0 : =2                 F_NBCD:         equ     00000010B ; set to 1 if subtraction
(1)       0 : =1                 F_CARRY:        equ     00000001B ; set to 1 if carry
(1)       0 :                    ;;; Interrupt origin
(1)       0 : =0                 ORG_RESET:      equ     0000H   ; RESET
(1)       0 : =0                 ORG_RST00:      equ     0000H   ; RST 00H
(1)       0 : =8                 ORG_RST08:      equ     0008H   ; RST 08H
(1)       0 : =10                ORG_RST10:      equ     0010H   ; RST 10H
(1)       0 : =18                ORG_RST18:      equ     0018H   ; RST 18H
(1)       0 : =20                ORG_RST20:      equ     0020H   ; RST 20H
(1)       0 : =28                ORG_RST28:      equ     0028H   ; RST 28H
(1)       0 : =30                ORG_RST30:      equ     0030H   ; RST 30H
(1)       0 : =38                ORG_RST38:      equ     0038H   ; RST 38H
(1)       0 : =38                ORG_INT:        equ     0038H   ; Mode 1 INT
(1)       0 : =66                ORG_NMI:        equ     0066H   ; NMI
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =0                 USART:          equ     00H
          0 : =0                 USARTD:         equ     USART+0 ; Receive/Transmit data
          0 : =1                 USARTS:         equ     USART+1 ; Srtatus register
          0 : =1                 USARTC:         equ     USART+1 ; Control register
          0 : =2                 USARTRV:        equ     USART+2 ; Receive interrupt vector (ORG_*)
          0 : =3                 USARTTV:        equ     USART+3 ; Transmit interrupt vector (ORG_*)
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     11000000B
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 << MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 << MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 << MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     00100000B
(1)       0 : =10                MODE_PARITY_bm: equ     00010000B
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     00001100B
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 << MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 << MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 << MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 << MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     00000011B
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 << MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ (2 << MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ (3 << MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     10000000B   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     01000000B   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     00100000B   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     00010000B   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     00001000B   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     00000100B   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     00000010B   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     00000001B   ; Transmit enable
(1)       0 :
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     10000000B   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     01000000B   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     00100000B   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     00010000B   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     00001000B   ; Parity Error
(1)       0 : =2                 ST_TxEMPTY_bp:  equ     2           ; Transmitter empty
(1)       0 : =1                 ST_RxRDY_bp:    equ     1           ; Receiver ready
(1)       0 : =0                 ST_TxRDY_bp:    equ     0           ; Transmitter ready
          0 :                    ;;; Async 1stop 8data x16
          0 : =4E                ASYNC_MODE:     equ     MODE_STOP1_gc|MODE_LEN8_gc|MODE_BAUD_X16
          0 :                    ;;; RTS/DTR, error reset, Rx enable, Tx enable
          0 : =37                RX_EN_TX_EN:    equ     CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm|CMD_TxEN_bm
          0 :
       2000 :                            org     2000H
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       ds      rx_queue_size
       2080 :
       1000 :                            org     1000H
       1000 : =1000              stack:  equ     $
       1000 :
          0 :                            org     ORG_RESET
          0 : C3 00 01                   jp      init
          3 :
         38 :                            org     ORG_INT         ; mode 1
         38 : C3 B8 01                   jp      isr_intr
         3B :
        100 :                            org     0100H
        100 :                    init:
        100 : 31 00 10                   ld      SP, stack
        103 : 21 00 20                   ld      HL, rx_queue
        106 : 06 80                      ld      B, rx_queue_size
        108 : CD 4D 01                   call     queue_init
        10B :                    init_usart:
        10B : AF                         xor     A               ; clear A
        10C : D3 01                      out     (USARTC), A
        10E : D3 01                      out     (USARTC), A
        110 : D3 01                      out     (USARTC), A     ; safest way to sync mode
        112 : 3E 40                      ld      A, CMD_IR_bm
        114 : D3 01                      out     (USARTC), A     ; reset
        116 : 00                         nop
        117 : 00                         nop
        118 : 3E 4E                      ld      A, ASYNC_MODE
        11A : D3 01                      out     (USARTC), A
        11C : 00                         nop
        11D : 00                         nop
        11E : 3E 37                      ld      A, RX_EN_TX_EN
        120 : D3 01                      out     (USARTC), A
        122 : 3E 38                      ld      A, ORG_INT
        124 : D3 02                      out     (USARTRV), A    ; enable RxRDY interrupt using RST 7
        126 : 3E 00                      ld      A, ORG_RESET
        128 : D3 03                      out     (USARTTV), A    ; disable TxRDY interrupt
        12A :
        12A : ED 56                      im      1
        12C : FB                         ei
        12D :
        12D : 21 00 20                   ld      HL, rx_queue
        130 :                    receive_loop:
        130 : F3                         di                      ; Disable INTR
        131 : CD 92 01                   call    queue_remove
        134 : FB                         ei                      ; Enable INTR
        135 : 30 F9                      jr      NC, receive_loop
        137 : 47                         ld      B, A            ; save character
        138 : B7                         or      A
        139 : 28 11                      jr      Z, halt_to_system
        13B :                    transmit_loop:
        13B : DB 01                      in      A, (USARTS)
        13D : CB 47                      bit     ST_TxRDY_bp, A
        13F : 28 FA                      jr      Z, transmit_loop
        141 :                    transmit_data:
        141 : 78                         ld      A, B
        142 : D3 00                      out     (USARTD), A
        144 : FE 0D                      cp      0DH
        146 : 20 E8                      jr      NZ, receive_loop
        148 : 06 0A                      ld      B, 0AH
        14A : 18 EF                      jr      transmit_loop
        14C :                    halt_to_system:
        14C : 76                         halt
        14D :
        14D :                            include "queue.inc"
(1)     14D :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     14D :                    ;;; [queue] queue structure
(1)     14D : =0                 queue_len:      equ     0       ; queue length
(1)     14D : =1                 queue_size:     equ     1       ; buffer size
(1)     14D : =2                 queue_put:      equ     2       ; queue put index
(1)     14D : =3                 queue_get:      equ     3       ; queue get index
(1)     14D : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     14D :
(1)     14D :                    ;;; [queue] Initialize queue
(1)     14D :                    ;;; @param HL queue work space pointer
(1)     14D :                    ;;; @param B queue work space size
(1)     14D :                    ;;; @clobber B
(1)     14D :                    queue_init:
(1)     14D : F5                         push    AF
(1)     14E : E5                         push    HL
(1)     14F : 36 00                      ld      (HL), 0         ; queue_len
(1)     151 : 78                         ld      A, B
(1)     152 : D6 04                      sub     queue_buf
(1)     154 : 23                         inc     HL
(1)     155 : 77                         ld      (HL), A         ; queue_size
(1)     156 : C6 02                      add     A, 2            ; for queue_put and queue_get
(1)     158 :                    queue_init_loop:
(1)     158 : 23                         inc     HL
(1)     159 : 36 00                      ld      (HL), 0
(1)     15B : 3D                         dec     A
(1)     15C : 20 FA                      jr      NZ, queue_init_loop
(1)     15E : E1                         pop     HL
(1)     15F : F1                         pop     AF
(1)     160 : C9                         ret
(1)     161 :
(1)     161 :                    ;;; [queue] Add an element to queue
(1)     161 :                    ;;; @param HL queue work space pointer
(1)     161 :                    ;;; @param A an element
(1)     161 :                    ;;; @return F.C 0 if queue is full
(1)     161 :                    queue_add:
(1)     161 : D5                         push    DE
(1)     162 : E5                         push    HL
(1)     163 : DD E3                      ex      (SP), IX        ; IX points queue structure
(1)     165 : 57                         ld      D, A            ; save an element
(1)     166 : DD 7E 00                   ld      A, (IX+queue_len)
(1)     169 : DD BE 01                   cp      (IX+queue_size)
(1)     16C : 7A                         ld      A, D               ; restore an element
(1)     16D : 38 05                      jr      C, queue_add_store ; queue_len < queue_size
(1)     16F : DD E3                      ex      (SP), IX           ; F.C=1
(1)     171 : E1                         pop     HL
(1)     172 : D1                         pop     DE
(1)     173 : C9                         ret
(1)     174 :                    queue_add_store:
(1)     174 : DD 34 00                   inc     (IX+queue_len)
(1)     177 : 11 04 00                   ld      DE, queue_buf
(1)     17A : 19                         add     HL, DE
(1)     17B : DD 5E 02                   ld      E, (IX+queue_put)
(1)     17E : 19                         add     HL, DE          ; HL=&queue_buf[queue_put]
(1)     17F : 77                         ld      (HL), A         ; store an element
(1)     180 : 7B                         ld      A, E
(1)     181 : 3C                         inc     A               ; queue_put++
(1)     182 : DD BE 01                   cp      (IX+queue_size)
(1)     185 : 38 01                      jr      C, queue_add_update ; queue_put < queue_size
(1)     187 : AF                         xor     A                   ; wrap around
(1)     188 :                    queue_add_update:
(1)     188 : DD 77 02                   ld      (IX+queue_put), A
(1)     18B : 7E                         ld      A, (HL)         ; restore an element
(1)     18C : DD E3                      ex      (SP), IX
(1)     18E : E1                         pop     HL
(1)     18F : D1                         pop     DE
(1)     190 : 37                         scf                     ; set carry
(1)     191 : C9                         ret
(1)     192 :
(1)     192 :                    ;;; [queue] Remove an element from queue
(1)     192 :                    ;;; @param HL queue work space pointer
(1)     192 :                    ;;; @return A an element
(1)     192 :                    ;;; @return F.C 0 if queue is empty
(1)     192 :                    queue_remove:
(1)     192 : 7E                         ld      A, (HL)               ; queue_len
(1)     193 : B7                         or      A                     ; clear carry
(1)     194 : 20 01                      jr      NZ, queue_remove_elem ; queue_len > 0
(1)     196 : C9                         ret
(1)     197 :                    queue_remove_elem:
(1)     197 : D5                         push    DE
(1)     198 : E5                         push    HL
(1)     199 : DD E3                      ex      (SP), IX        ; IX points queue structure
(1)     19B : DD 35 00                   dec     (IX+queue_len)
(1)     19E : 11 04 00                   ld      DE, queue_buf
(1)     1A1 : 19                         add     HL, DE
(1)     1A2 : DD 5E 03                   ld      E, (IX+queue_get)
(1)     1A5 : 19                         add     HL, DE          ; HL=&queue_buf[queue_get]
(1)     1A6 : 7B                         ld      A, E
(1)     1A7 : 3C                         inc     A               ; queue_get++
(1)     1A8 : DD BE 01                   cp      (IX+queue_size)
(1)     1AB : 38 01                      jr      C, queue_remove_update ; queue_get < queue_size
(1)     1AD : AF                         xor     A                      ; wrap around
(1)     1AE :                    queue_remove_update:
(1)     1AE : DD 77 03                   ld      (IX+queue_get), A
(1)     1B1 : 7E                         ld      A, (HL)         ; read an element
(1)     1B2 : DD E3                      ex      (SP), IX
(1)     1B4 : E1                         pop     HL
(1)     1B5 : D1                         pop     DE
(1)     1B6 : 37                         scf                     ; set carry
(1)     1B7 : C9                         ret
        1B8 :
        1B8 :                    isr_intr:
        1B8 : F5                         push    AF
        1B9 : E5                         push    HL
        1BA : DB 01                      in      A, (USARTS)
        1BC :                    isr_intr_receive:
        1BC : CB 4F                      bit     ST_RxRDY_bp, A
        1BE : 28 08                      jr      Z, isr_intr_recv_end
        1C0 : DB 00                      in      A, (USARTD)
        1C2 : 21 00 20                   ld      HL, rx_queue
        1C5 : CD 61 01                   call    queue_add
        1C8 :                    isr_intr_recv_end:
        1C8 : E1                         pop     HL
        1C9 : F1                         pop     AF
        1CA : FB                         ei
        1CB : ED 4D                      reti
