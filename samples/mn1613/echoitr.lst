          0 :                    *** -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            include "mn1613.inc"
(1)       0 :                    *** -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    *** MN1613
(1)       0 :                            cpu     mn1613
(1)       0 :                    *** Status Register
(1)       0 : =0                 STR_E:          equ     0       Extension
(1)       0 : =2                 STR_OV:         equ     2       Overflow
(1)       0 : =5                 STR_IRQ0:       equ     5       IRQ0 Mask
(1)       0 : =6                 STR_IRQ1:       equ     6       IRQ1 Mask
(1)       0 : =7                 STR_IRQ2:       equ     7       IRQ2 Mask
(1)       0 :                    *** Interrupt vector and save area
(1)       0 : =0                 OPSW0:          equ     X'0000' IRQ0 old STR:IC
(1)       0 : =2                 OPSW1:          equ     X'0002' IRQ1 old STR:IC
(1)       0 : =4                 OPSW2:          equ     X'0004' IRQ2 old STR:IC
(1)       0 : =6                 OPSW3:          equ     X'0006'
(1)       0 : =100               NPSW0:          equ     X'0100' IRQ0 vector STR:IC
(1)       0 : =102               NPSW1:          equ     X'0102' IRQ1 vector STR:IC
(1)       0 : =104               NPSW2:          equ     X'0104' IRQ2 vector STR:IC
(1)       0 : =106               NPSW3:          equ     X'0106'
(1)       0 :                    *** Reset PSW (see debugger RegsMn1613::reset)
(1)       0 : =108               RESET_PSW:      equ     X'0108'
(1)       0 :                    *** Zero page
(1)       0 : =8                 ZERO_PAGE:      equ     X'0008'
(1)       0 :
(1)       0 :                    hi:     function        v, (v >> 8)
(1)       0 :                    lo:     function        v, (v & X'FF')
          0 :                    *** i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =80                USART:          equ     X'80'
          0 : =80                USARTD:         equ     USART+0 Data register
          0 : =81                USARTS:         equ     USART+1 Status register
          0 : =81                USARTC:         equ     USART+1 Control register
          0 : =82                USARTRV:        equ     USART+2 Receive interrupt vector (NPSWx)
          0 : =83                USARTTV:        equ     USART+3 Transmit interrupt vector (NPSWx)
          0 :                            include "i8251.inc"
(1)       0 :                    *** -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    *** i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     11000000B
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 << MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 << MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 << MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     00100000B
(1)       0 : =10                MODE_PARITY_bm: equ     00010000B
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     00001100B
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 << MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 << MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 << MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 << MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     00000011B
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 << MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ     (2 << MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ     (3 << MODE_BAUD_gp)
(1)       0 :                    *** Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     10000000B   Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     01000000B   Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     00100000B   Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     00010000B   Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     00001000B   Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     00000100B   Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     00000010B   Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     00000001B   Transmit enable
(1)       0 :                    *** Bit definition of status register
(1)       0 : =8                 ST_DSR_bp:      equ     8       Data Set Ready
(1)       0 : =9                 ST_BRK_bp:      equ     9       BREAK detected
(1)       0 : =A                 ST_FE_bp:       equ     10      Framing Error
(1)       0 : =B                 ST_OE_bp:       equ     11      Overrun Error
(1)       0 : =C                 ST_PE_bp:       equ     12      Parity Error
(1)       0 : =D                 ST_TxEMPTY_bp:  equ     13      Transmitter empty
(1)       0 : =E                 ST_RxRDY_bp:    equ     14      Receiver ready
(1)       0 : =F                 ST_TxRDY_bp:    equ     15      Transmitter ready
          0 :                    * Async 1stop 8data x16
          0 : =4E                ASYNC_MODE:     equ     MODE_STOP1_gc|MODE_LEN8_gc|MODE_BAUD_X16
          0 :                    * RTS/DTR, error reset, Rx enable, Tx enable
          0 : =37                RX_EN_TX_EN:    equ     CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm|CMD_TxEN_bm
          0 : =36                RX_EN_TX_DIS:   equ     CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm
          0 :
        108 :                            loc     RESET_PSW
        108 : 0000                       dc      X'0000'         STR: Disable interrupt
        109 : 0200                       dc      initialize      IC
        10A :
        102 :                            loc     NPSW1
        102 : 0000                       dc      X'0000'
        103 : 029E                       dc      irq1_isr
        104 :
        104 :                            loc     NPSW2
        104 : 0000                       dc      X'0000'
        105 : 02AA                       dc      irq2_isr
        106 :
       2000 :                            loc     X'2000'
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:
       2000 :                            ds      rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:
       2080 :                            ds      tx_queue_size
       2100 :
        200 :                            loc     X'0200'
        200 : =1FF               stack:  equ     *-1
        200 :                    initialize:
        200 : 7D0F 01FF                  mvwi    SP, stack
        202 : 780F 0080                  mvwi    R0, rx_queue_size
        204 : 7B0F 2000                  mvwi    X0, rx_queue
        206 : 8F62                       bal     queue_init
        207 : 780F 0080                  mvwi    R0, tx_queue_size
        209 : 7B0F 2080                  mvwi    X0, tx_queue
        20B : 8F5D                       bal     queue_init
        20C : 8F02                       bal     init_usart
        20D : CF14                       b       loop
        20E :
        20E :                    init_usart:
        20E :                            * Initialize USART
        20E : 6000                       eor     R0, R0          R0=0
        20F : 1081                       wt      R0, USARTC
        210 : 1081                       wt      R0, USARTC
        211 : 1081                       wt      R0, USARTC      Safest way to sync mode
        212 : 0840                       mvi     R0, CMD_IR_bm
        213 : 1081                       wt      R0, USARTC      Reset
        214 : 7808                       mv      R0, R0          delay
        215 : 7808                       mv      R0, R0          delay
        216 : 084E                       mvi     R0, ASYNC_MODE
        217 : 1081                       wt      R0, USARTC
        218 : 7808                       mv      R0, R0          delay
        219 : 7808                       mv      R0, R0          delay
        21A : 0836                       mvi     R0, RX_EN_TX_DIS
        21B : 1081                       wt      R0, USARTC      Enable Rx, Disable Tx
        21C : 0803                       mvi     R0, OPSW1+1     Use IRQ1 for Rx interrupt
        21D : 1082                       wt      R0, USARTRV
        21E : 0805                       mvi     R0, OPSW2+1     Use IRQ2 for Tx interrupt
        21F : 1083                       wt      R0, USARTTV
        220 : 2003                       ret
        221 :
        221 : 8F0D               loop:   bal     getchar
        222 : 6058                       or      R0, R0, nz      Skip if R0!=0
        223 : 2000                       h                       Halt to system
        224 : 7908                       mv      R1, R0
        225 : 8F36                       bal     putchar
        226 : 0820                       mvi     R0, ' '
        227 : 8F34                       bal     putchar
        228 : 8F0F                       bal     put_hex8
        229 : 0820                       mvi     R0, ' '
        22A : 8F31                       bal     putchar
        22B : 8F21                       bal     put_bin8
        22C : 8F2C                       bal     newline
        22D : CFF4                       b       loop
        22E :
        22E :                    getchar:
        22E : 2301                       push    X0
        22F : 7B0F 2000                  mvwi    X0, rx_queue
        231 :                    getchar_wait:
        231 : 3606                       rbit    STR, STR_IRQ1           Disable IRQ1
        232 : 8F57                       bal     queue_remove
        233 : 3E96                       sbit    STR, STR_IRQ1, enz      Enable IRQ1, skip if E=1
        234 : CFFD                       b       getchar_wait
        235 : 2302                       pop     X0
        236 : 2003                       ret
        237 :
        237 :                    put_hex8:
        237 : 0830                       mvi     R0, '0'
        238 : 8F23                       bal     putchar
        239 : 0878                       mvi     R0, 'x'
        23A : 8F21                       bal     putchar
        23B : 7001                       dswp    R0, R1
        23C : 7008                       bswp    R0, R0
        23D : 8F02                       bal     put_hex4
        23E : 7809                       mv      R0, R1
        23F :                    put_hex4:
        23F : 2101                       push    R1
        240 : 680F 000F                  andi    R0, X'0F'
        242 : 50E7 000A                  cbi     R0, 10, lpz     skip if R0>=10
        244 : CF04                       b       put_hex4_dec
        245 : 400A                       si      R0, 10
        246 : 581F 0041                  awi     R0, 'A', skp
        248 :                    put_hex4_dec:
        248 : 580F 0030                  awi     R0, '0'
        24A : 2102                       pop     R1
        24B : CF10                       b       putchar
        24C :
        24C :                    put_bin8:
        24C : 0830                       mvi     R0, '0'
        24D : 8F0E                       bal     putchar
        24E : 0862                       mvi     R0, 'b'
        24F : 8F0C                       bal     putchar
        250 : 8F01                       bal     put_bin4
        251 :                    put_bin4:
        251 : 8F01                       bal     put_bin2
        252 :                    put_bin2:
        252 : 8F01                       bal     put_bin1
        253 :                    put_bin1:
        253 : 210D                       sl      R1, re          R1<<=1
        254 : 0830                       mvi     R0, '0'
        255 : 2947                       tbit    R1, 7, z        skip if lsb(hi(R1))=0
        256 : 0831                       mvi     R0, '1'
        257 : CF04                       b       putchar
        258 :
        258 :                    newline:
        258 : 080D                       mvi     R0, X'0D'
        259 : 8F02                       bal     putchar
        25A : 080A                       mvi     R0, X'0A'
        25B :                    putchar:
        25B : 2001                       push    R0
        25C : 2301                       push    X0
        25D : 7B0F 2080                  mvwi    X0, tx_queue
        25F :                    putchar_retry:
        25F : 3607                       rbit    STR, STR_IRQ2           Disable IRQ2
        260 : 8F15                       bal     queue_add
        261 : 3E97                       sbit    STR, STR_IRQ2, enz      Enable IRQ2, skip if E=1
        262 : CFFD                       b       putchar_retry
        263 : 0837                       mvi     R0, RX_EN_TX_EN
        264 : 1081                       wt      R0, USARTC              Enable Rx/Tx
        265 : 2302                       pop     X0
        266 : 2002                       pop     R0
        267 : 2003                       ret
        268 :
        268 :                            include "queue.inc"
(1)     268 :                    *** -*- mode: asm; mode: flying-spell; -*-
(1)     268 :                    *** [queue] queue structure
(1)     268 : =0                 queue_len:      equ     0       ; queue length
(1)     268 : =1                 queue_size:     equ     1       ; buffer size
(1)     268 : =2                 queue_put:      equ     2       ; queue put index
(1)     268 : =3                 queue_get:      equ     3       ; queue get index
(1)     268 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     268 :
(1)     268 :                    *** [queue] Initialize queue
(1)     268 :                    *** @param X0 queue work space pointer
(1)     268 :                    *** @param R0 queue work space size
(1)     268 :                    *** @clobber R0 X0
(1)     268 :                    queue_init:
(1)     268 : 2101                       push    R1
(1)     269 : 6101                       eor     R1, R1          clear R1
(1)     26A : A100                       st      R1, queue_len(X0)       clear queue_len
(1)     26B : 4004                       si      R0, queue_buf
(1)     26C : A001                       st      R0, queue_size(X0)      set queue_size
(1)     26D : A102                       st      R1, queue_put(X0)       clear queue_put
(1)     26E : A103                       st      R1, queue_get(X0)       clear queue_put
(1)     26F : 4B04                       ai      X0, queue_buf
(1)     270 :                    queue_init_loop:
(1)     270 : 21C6                       str     R1, (X0)+
(1)     271 : 4041                       si      R0, 1, z
(1)     272 : CFFE                       b       queue_init_loop
(1)     273 : 2102                       pop     R1
(1)     274 : 2003                       ret
(1)     275 :
(1)     275 :                    *** [queue] Add an element to queue
(1)     275 :                    *** @param X0 queue work space pointer
(1)     275 :                    *** @param R0 an element
(1)     275 :                    *** @return ST.E 0 if queue is full
(1)     275 :                    queue_add:
(1)     275 : 2101                       push    R1
(1)     276 : 2201                       push    R2
(1)     277 : E100                       l       R1, queue_len(X0)
(1)     278 : E201                       l       R2, queue_size(X0)      R2=queue_size
(1)     279 : 51FA                       c       R1, R2, lm              skip if queue_len < queue_size
(1)     27A : CF0B                       b       queue_add_return
(1)     27B : E102                       l       R1, queue_put(X0)
(1)     27C : 5B09                       a       X0, R1                  X0=&queu_buf[queue_put]
(1)     27D : A004                       st      R0, queue_buf(X0)       store element
(1)     27E : 5B01                       s       X0, R1                  restore X0
(1)     27F : 4901                       ai      R1, 1                   queue_put+=1
(1)     280 : 51FA                       c       R1, R2, lm              skip if queue_len < queue_size
(1)     281 : 6101                       eor     R1, R1                  R1=0
(1)     282 : A102                       st      R1, queue_put(X0)       update queue_len
(1)     283 : E600                       ims     queue_len(X0)           queue_len+=1
(1)     284 : 3E10                       sbit    STR, STR_E, skp         ST.E=1, then skip
(1)     285 :                    queue_add_return:
(1)     285 : 3600                       rbit    STR, STR_E              ST_E=0
(1)     286 : 2202                       pop     R2
(1)     287 : 2102                       pop     R1
(1)     288 : 2003                       ret
(1)     289 :
(1)     289 :                    *** [queue] Remove an element from queue
(1)     289 :                    *** @param X0 queue work space pointer
(1)     289 :                    *** @return R0 an element
(1)     289 :                    *** @return ST.E 0 if queue is empty
(1)     289 :                    queue_remove:
(1)     289 : 2101                       push    R1
(1)     28A : E100                       l       R1, queue_len(X0)
(1)     28B : 6159                       or      R1, R1, nz              skip if queue_len != 0
(1)     28C : CF0F                       b       queue_remove_return
(1)     28D : E103                       l       R1, queue_get(X0)
(1)     28E : 5B09                       a       X0, R1                  X0=&queue_buf[queue_get]
(1)     28F : E004                       l       R0, queue_buf(X0)       remove element
(1)     290 : 5B01                       s       X0, R1                  restore X0
(1)     291 : 4901                       ai      R1, 1                   queue_get+=1
(1)     292 : 2201                       push    R2
(1)     293 : E201                       l       R2, queue_size(X0)      R2=queue_size
(1)     294 : 51FA                       c       R1, R2, lm              skip if queue_get
(1)     295 : 6101                       eor     R1, R1                  R1=0
(1)     296 : A103                       st      R1, queue_get(X0)       update queue_get
(1)     297 : 2202                       pop     R2
(1)     298 : A600                       dms     queue_len(X0)           queue_len-=1
(1)     299 : 7808                       mv      R0, R0                  nop
(1)     29A : 3E10                       sbit    STR, STR_E, skp         ST.E=1, then skip
(1)     29B :                    queue_remove_return:
(1)     29B : 3600                       rbit    STR, STR_E              ST.E=0
(1)     29C : 2102                       pop     R1
(1)     29D : 2003                       ret
        29E :
        29E :                    irq1_isr:
        29E : 2001                       push    R0
        29F : 2301                       push    X0
        2A0 : 1881                       rd      R0, USARTS
        2A1 : 285E                       tbit    R0, ST_RxRDY_bp, nz     Skip if RxRDY=1
        2A2 : CF05                       b       irq1_isr_exit
        2A3 : 1880                       rd      R0, USARTD              Receive character
        2A4 : 7B0F 2000                  mvwi    X0, rx_queue
        2A6 : 8FCF                       bal     queue_add               Add to Rx queue
        2A7 :                    irq1_isr_exit:
        2A7 : 2302                       pop     X0
        2A8 : 2002                       pop     R0
        2A9 : 2005                       lpsw    1               Return from interrupt
        2AA :
        2AA :                    irq2_isr:
        2AA : 2001                       push    R0
        2AB : 2301                       push    X0
        2AC : 1881                       rd      R0, USARTS
        2AD : 285F                       tbit    R0, ST_TxRDY_bp, nz     Skip if TxRDY=1
        2AE : CF07                       b       irq2_isr_exit
        2AF : 7B0F 2080                  mvwi    X0, tx_queue
        2B1 : 8FD8                       bal     queue_remove    Remove from Tx queue
        2B2 : 7898                       mv      R0, R0, enz     Skip if ST.E=1
        2B3 : CF05                       b       irq2_isr_empty
        2B4 : 1080                       wt      R0, USARTD      Transmit charater
        2B5 :                    irq2_isr_exit:
        2B5 : 2302                       pop     X0
        2B6 : 2002                       pop     R0
        2B7 : 2006                       lpsw    2               Return from interrupt
        2B8 :                    irq2_isr_empty:
        2B8 : 0836                       mvi     R0, RX_EN_TX_DIS
        2B9 : 1081                       wt      R0, USARTC      Disable Tx
        2BA : CFFB                       b       irq2_isr_exit
