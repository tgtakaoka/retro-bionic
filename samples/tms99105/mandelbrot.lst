          0 :                    *** -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            include "tms99105.inc"
(1)       0 :                    *** -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            *** TMS99105
(1)       0 :                            include "tms9900.inc"
(2)       0 :                    *** -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :                            *** TMS9900
(2)       0 :                            cpu     tms9900
(2)       0 :                            *** Status Register
(2)       0 : =8000              ST_LGT:         equ     ?1000000000000000 ; Logical Greater Than
(2)       0 : =4000              ST_AGT:         equ     ?0100000000000000 ; Arithmetic Greater Than
(2)       0 : =2000              ST_EQ:          equ     ?0010000000000000 ; Equal
(2)       0 : =1000              ST_C:           equ     ?0001000000000000 ; Carry
(2)       0 : =800               ST_OV:          equ     ?0000100000000000 ; Overflow
(2)       0 : =400               ST_OP:          equ     ?0000010000000000 ; Parity
(2)       0 : =200               ST_X:           equ     ?0000001000000000 ; XOP
(2)       0 : =F                 ST_INT_gm:      equ     ?0000000000001111 ; Interrupt mask
(2)       0 :                            *** Vector
(2)       0 : =0                 VEC_RESET:      equ     >0000   ; Reset
(2)       0 : =4                 VEC_INT1:       equ     >0004   ; INT1
(2)       0 : =10                VEC_INT4:       equ     >0010   ; INT4
(2)       0 : =40                VEC_XOP0:       equ     >0040   ; XOP 0
(2)       0 : =44                VEC_XOP1:       equ     >0044   ; XOP 1
(2)       0 : =48                VEC_XOP2:       equ     >0048   ; XOP 2
(2)       0 : =4C                VEC_XOP3:       equ     >004C   ; XOP 3
(2)       0 : =50                VEC_XOP4:       equ     >0050   ; XOP 4
(2)       0 : =54                VEC_XOP5:       equ     >0054   ; XOP 5
(2)       0 : =58                VEC_XOP6:       equ     >0058   ; XOP 6
(2)       0 : =5C                VEC_XOP7:       equ     >005C   ; XOP 7
(2)       0 : =60                VEC_XOP8:       equ     >0060   ; XOP 8
(2)       0 : =64                VEC_XOP9:       equ     >0064   ; XOP 9
(2)       0 : =68                VEC_XOP10       equ     >0068   ; XOP 10
(2)       0 : =6C                VEC_XOP11:      equ     >006C   ; XOP 11
(2)       0 : =70                VEC_XOP12:      equ     >0070   ; XOP 12
(2)       0 : =74                VEC_XOP13:      equ     >0074   ; XOP 13
(2)       0 : =78                VEC_XOP14:      equ     >0078   ; XOP 14
(2)       0 : =7C                VEC_XOP15:      equ     >007C   ; XOP 15
(1)       0 :                            cpu     tms99105
(1)       0 :                            *** Status Register
(1)       0 : =800               ST_AF:          equ     ST_OV             ; Arithmetic fault
(1)       0 : =100               ST_PRV:         equ     ?0000000100000000 ; Privileged mode
(1)       0 : =80                ST_MAP:         equ     ?0000000010000000 ; Map select
(1)       0 : =20                ST_AFIE:        equ     ?0000000000100000 ; Arithmetic fault interrupt enable
(1)       0 : =10                ST_EM:          equ     ?0000000000010000 ; XOP emulate enable
(1)       0 :                            *** Vector
(1)       0 : =8                 VEC_INT2:       equ     >0008   ; INT2
(1)       0 : =C                 VEC_INT3:       equ     >000C   ; INT3
(1)       0 : =14                VEC_INT5:       equ     >0014   ; INT5
(1)       0 : =18                VEC_INT6:       equ     >0018   ; INT6
(1)       0 : =1C                VEC_INT7:       equ     >001C   ; INT7
(1)       0 : =20                VEC_INT8:       equ     >0020   ; INT8
(1)       0 : =24                VEC_INT9:       equ     >0024   ; INT9
(1)       0 : =28                VEC_INT10:      equ     >0028   ; INT10
(1)       0 : =2C                VEC_INT11:      equ     >002C   ; INT11
(1)       0 : =30                VEC_INT12:      equ     >0030   ; INT12
(1)       0 : =34                VEC_INT13:      equ     >0034   ; INT13
(1)       0 : =38                VEC_INT14:      equ     >0038   ; INT14
(1)       0 : =3C                VEC_INT15:      equ     >003C   ; INT15
          0 :
          0 :                            *** MC6850 Asynchronous Communication Interface Adapter
          0 : =80                ACIA:   equ     >0080
          0 :                            include "mc6850.inc"
(1)       0 :                    *** -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            *** MC6850
(1)       0 :                            *** Asynchronous Communication Interface Adapter
(1)       0 : =80                ACIA_control:   equ     ACIA+0
(1)       0 : =80                ACIA_status:    equ     ACIA+0
(1)       0 : =82                ACIA_data:      equ     ACIA+2
(1)       0 : =84                ACIA_intr:      equ     ACIA+4
(1)       0 :                            **  Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     ?11             Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     ?00000000       /1
(1)       0 : =0                 CDS_DIV16_gc:   equ     ?00000001       /16
(1)       0 : =0                 CDS_DIV64_gc:   equ     ?00000010       /64
(1)       0 : =3                 CDS_RESET_gc:   equ     ?00000011       Master Reset
(1)       0 :                            **  Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     ?00011100       Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     ?00000000       7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     ?00000100       7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     ?00001000       7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     ?00001100       7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     ?00010000       8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     ?00010100       8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     ?00011000       8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     ?00011100       8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            **  Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     ?01100000       Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     ?00000000       RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     ?00100000       RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     ?01000000       RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     ?01100000       RTS=Low,  Tx Interrupt Disabled
(1)       0 :                            *                               Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     ?10000000       Receive Interrupt Enable Bit mask
(1)       0 :                            *** Status register
(1)       0 : =1                 RDRF_bm:        equ     ?00000001       Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     ?00000010       Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     ?00000100       Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     ?00001000       Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     ?00010000       Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     ?00100000       Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     ?01000000       Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     ?10000000       Interrupt Request Flag
          0 :
          0 :                            org     VEC_RESET
          0 : 0100                       data    workspace
          2 : 0200                       data    initialize
          4 :
         3C :                            org     VEC_INT15
         3C : 0120                       data    workspace_int15
         3E : 04FC                       data    int15_isr
         40 :
         7C :                            org     VEC_XOP15
         7C : 007C                       data    VEC_XOP15       for halt to system
         7E : 007C                       data    VEC_XOP15
         80 :
         80 :                    hibyte: function v,(v)*256      Hi byte constant
         80 :
        100 :                            org     >0100
        100 :                    workspace:
        100 :                            bss     2*16            R0-R15
        120 :                    workspace_int15:
        120 :                            bss     2*16            R0-R15
        140 :
       2000 :                            org     >2000
       2000 : =2000              stack:          equ     $
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:       bss     rx_queue_size
       2080 : =80                tx_queue_size:  equ     128
       2080 :                    tx_queue:       bss     tx_queue_size
       2100 :
        200 :                            org     >0200
        200 :                    initialize:
        200 : 020A 2000                  li      R10, stack
        204 : 0209 2000                  li      R9, rx_queue
        208 : 0200 0080                  li      R0, rx_queue_size
        20C : 06A0 048E                  bl      @queue_init
        210 : 0209 2080                  li      R9, tx_queue
        214 : 0200 0080                  li      R0, tx_queue_size
        218 : 06A0 048E                  bl      @queue_init
        21C :                            * Initialize ACIA
        21C : 0200 0300                  li      R0, hibyte(CDS_RESET_gc)
        220 : D800 0080                  movb    R0, @ACIA_control       Master reset
        224 : 0200 9400                  li      R0, hibyte(WSB_8N1_gc++RIEB_bm)
        228 : D800 0080                  movb    R0, @ACIA_control       8 bits + No Parity + 1 Stop Bits
        22C : 0200 3C00                  li      R0, hibyte(VEC_INT15)
        230 : D800 0084                  movb    R0, @ACIA_intr          set INT15 name for MC6805 emulator
        234 :
        234 :                    loop:
        234 : 00BA 02BA                  blsk    R10, mandelbrot
        238 : 00BA 0256                  blsk    R10, newline
        23C : 10FB                       jmp     loop
        23E :
        23E :                            *** Get character
        23E :                            *** @return R0
        23E :                            *** @return ST.C 0 if no character
        23E :                    getchar:
        23E : 064A                       dect    R10
        240 : C681                       mov     R1, *R10        Push R1
        242 : 0300 0000                  limi    0               Disable interrupt
        246 : 0209 2000                  li      R9, rx_queue
        24A : 06A0 04D2                  bl      @queue_remove
        24E : 0300 000F                  limi    15              Enable interrupt
        252 : C07A                       mov     *R10+, R1       Pop R1
        254 : 017A                       bind    *R10+           Pop return address
        256 :
        256 :                    newline:
        256 : 0200 0D00                  li      R0, hibyte(>0D)
        25A : 00BA 026C                  blsk    R10, putchar
        25E : 0200 0A00                  li      R0, hibyte(>0A)
        262 : 00BA 026C                  blsk    R10, putchar
        266 : 017A                       bind    *R10+           Pop return address
        268 :
        268 :                    putspace:
        268 : 0200 2000                  li      R0, hibyte(' ')
        26C :                    putchar:
        26C : 064A                       dect    R10
        26E : C681                       mov     R1, *R10        Push R1
        270 : 0300 0000                  limi    0               Disable interrupt
        274 : 0209 2080                  li      R9, tx_queue
        278 : 06A0 04A4                  bl      @queue_add
        27C : 0300 000F                  limi    15              Enable interrupt
        280 : 0201 2000                  li      R1, hibyte(TCB_EI_gc)
        284 : F801 0080                  socb    R1, @ACIA_control       Enable Tx interrupt
        288 : C07A                       mov     *R10+, R1       Pop R1
        28A : 017A                       bind    *R10+           Pop return address
        28C :
        28C :                            include "mandelbrot.inc"
(1)     28C :                    *** -*- mode: asm; mode: flyspell-prog* -*-
(1)     28C :
(1)     28C :                            *** Print variable: "name=variable "
(1)     28C :                            *** @param R1 variable
(1)     28C :                            *** @param R0 variable name
(1)     28C :                            *** @clobber R0 R1
(1)     28C :                    print:
(1)     28C : 00BA 026C                  blsk    R10, putchar        Print name
(1)     290 : 0200 3D00                  li      R0, hibyte('=')
(1)     294 : 00BA 026C                  blsk    R10, putchar
(1)     298 : C001                       mov     R1, R0
(1)     29A : 00BA 0410                  blsk    R10, print_int16
(1)     29E : 00BA 0268                  blsk    R10, putspace
(1)     2A2 : 017A                       bind    *R10+           Pop return address
(1)     2A4 :
(1)     2A4 : =32                F:      equ     50
(1)     2A4 :                    vC:     bss     2
(1)     2A6 :                    vD:     bss     2
(1)     2A8 :                    vA:     bss     2
(1)     2AA :                    vB:     bss     2
(1)     2AC :                    vS:     bss     2
(1)     2AE :                    vP:     bss     2
(1)     2B0 :                    vQ:     bss     2
(1)     2B2 :                    vT:     bss     2
(1)     2B4 :                    vY:     bss     2
(1)     2B6 :                    vX:     bss     2
(1)     2B8 :                    vI:     bss     2
(1)     2BA :
(1)     2BA :                    mandelbrot:
(1)     2BA : 0200 FFF4                  li      R0, -12
(1)     2BE : C800 02B4                  mov     R0, @vY         Y=-12
(1)     2C2 :                    loop_y:
(1)     2C2 : 0200 FFCF                  li      R0, -49
(1)     2C6 : C800 02B6                  mov     R0, @vX         X=-49
(1)     2CA :                    loop_x:
(1)     2CA : C060 02B6                  mov     @vX, R1
(1)     2CE : 0200 00E5                  li      R0, 229
(1)     2D2 : 01C1                       mpys    R1              R1=X*229
(1)     2D4 : 0202 0064                  li      R2, 100
(1)     2D8 : 06A0 0464                  bl      @udiv16         R1=X*229/100
(1)     2DC : C801 02A4                  mov     R1, @vC         C=X*229/100
(1)     2E0 : C801 02A8                  mov     R1, @vA         A=C
(1)     2E4 : C060 02B4                  mov     @vY, R1
(1)     2E8 : 0200 01A0                  li      R0, 416
(1)     2EC : 01C1                       mpys    R1              R1=Y*416
(1)     2EE : 0202 0064                  li      R2, 100
(1)     2F2 : 06A0 0464                  bl      @udiv16         R1=Y*416/100
(1)     2F6 : C801 02A6                  mov     R1, @vD         D=Y*416/100
(1)     2FA : C801 02AA                  mov     R1, @vB         B=D
(1)     2FE : 04E0 02B8                  clr     @vI             I=0
(1)     302 :
(1)     302 :                            * mov     @vY, R1
(1)     302 :                            * li      R0, hibyte('Y')
(1)     302 :                            * blsk    R10, print
(1)     302 :                            * mov     @vX, R1
(1)     302 :                            * li      R0, hibyte('X')
(1)     302 :                            * blsk    R10, print
(1)     302 :                            * mov     @vC, R1
(1)     302 :                            * li      R0, hibyte('C')
(1)     302 :                            * blsk    R10, print
(1)     302 :                            * mov     @vD, R1
(1)     302 :                            * li      R0, hibyte('D')
(1)     302 :                            * blsk    R10, print
(1)     302 :                            * blsk    R10, newline
(1)     302 :
(1)     302 :                    loop_i:
(1)     302 : C060 02AA                  mov     @vB, R1
(1)     306 : 0202 0032                  li      R2, F
(1)     30A : 06A0 0464                  bl      @udiv16         R1=B/F
(1)     30E : C801 02B0                  mov     R1, @vQ         Q=B/F
(1)     312 : 0200 FFCE                  li      R0, -F
(1)     316 : 01C1                       mpys    R1              R1=-Q*F
(1)     318 : A060 02AA                  a       @vB, R1         R1=B-Q*F
(1)     31C : C801 02AC                  mov     R1, @vS         S=B-Q*F
(1)     320 : C060 02AA                  mov     @vB, R1
(1)     324 : C001                       mov     R1, R0
(1)     326 : 01C1                       mpys    R1              R1=B*B
(1)     328 : C0C1                       mov     R1, R3          R3=B*B
(1)     32A : C060 02A8                  mov     @vA, R1
(1)     32E : C001                       mov     R1, R0
(1)     330 : 01C1                       mpys    R1              R1=A*A
(1)     332 : 6043                       s       R3, R1          R1=A*A-B*B
(1)     334 : 0202 0032                  li      R2, F
(1)     338 : 06A0 0464                  bl      @udiv16         R1=(A*A-B*B)/F
(1)     33C : A060 02A4                  a       @vC, R1         R1=(A*A-B*B)/F+C
(1)     340 : C0C1                       mov     R1, R3          R3=(A*A-B*B)/F+C
(1)     342 : C060 02A8                  mov     @vA, R1
(1)     346 : C020 02B0                  mov     @vQ, R0
(1)     34A : 01C1                       mpys    R1              R1=A*Q
(1)     34C : C101                       mov     R1, R4          R4=A*Q
(1)     34E : C060 02A8                  mov     @vA, R1
(1)     352 : C020 02AC                  mov     @vS, R0
(1)     356 : 01C1                       mpys    R1              R1=A*S
(1)     358 : 0202 0032                  li      R2, F
(1)     35C : 06A0 0464                  bl      @udiv16         R1=A*S/F
(1)     360 : A044                       a       R4, R1          R1=A*Q+A*S/F
(1)     362 : A041                       a       R1, R1          R1=2*(A*Q+A*S/F)
(1)     364 : A060 02A6                  a       @vD, R1         R1=2*(A*Q+A*S/F)+D
(1)     368 : C801 02AA                  mov     R1, @vB         B=2*(A*Q+A*S/F)+D
(1)     36C : C043                       mov     R3, R1          R1=(A*A-B*B)/F+C
(1)     36E : C801 02A8                  mov     R1, @vA         A=(A*A-B*B)/F+C
(1)     372 : 0202 0032                  li      R2, F
(1)     376 : 06A0 0464                  bl      @udiv16         R1=A/F
(1)     37A : C801 02AE                  mov     R1, @vP         P=A/F
(1)     37E : C001                       mov     R1, R0
(1)     380 : 01C1                       mpys    R1              R1=P*P
(1)     382 : C0C1                       mov     R1, R3          R3=P*P
(1)     384 : C060 02AA                  mov     @vB, R1
(1)     388 : 0202 0032                  li      R2, F
(1)     38C : 06A0 0464                  bl      @udiv16         R1=B/F
(1)     390 : C801 02B0                  mov     R1, @vQ         Q=B/F
(1)     394 : C001                       mov     R1, R0
(1)     396 : 01C1                       mpys                    R1=Q*Q
(1)     398 : A043                       a       R3, R1          R1=P*P+Q*Q
(1)     39A : C801 02B2                  mov     R1, @vT         T=P*P+Q*Q
(1)     39E :
(1)     39E :                            * blsk    R10, putspace
(1)     39E :                            * mov     @vI, R1
(1)     39E :                            * li      R0, hibyte('I')
(1)     39E :                            * blsk    R10, print
(1)     39E :                            * mov     @vA, R1
(1)     39E :                            * li      R0, hibyte('A')
(1)     39E :                            * blsk    R10, print
(1)     39E :                            * mov     @vB, R1
(1)     39E :                            * li      R0, hibyte('B')
(1)     39E :                            * blsk    R10, print
(1)     39E :                            * mov     @vP, R1
(1)     39E :                            * li      R0, hibyte('P')
(1)     39E :                            * blsk    R10, print
(1)     39E :                            * mov     @vQ, R1
(1)     39E :                            * li      R0, hibyte('Q')
(1)     39E :                            * blsk    R10, print
(1)     39E :                            * mov     @vT, R1
(1)     39E :                            * li      R0, hibyte('T')
(1)     39E :                            * blsk    R10, print
(1)     39E :                            * blsk    R10, newline
(1)     39E :
(1)     39E : C020 02B2                  mov     @vT, R0
(1)     3A2 : 0280 0004                  ci      R0, 4
(1)     3A6 : 150C                       jgt     print_i         if 4<P*P+Q*Q
(1)     3A8 : 05A0 02B8                  inc     @vI             I+=1
(1)     3AC : C020 02B8                  mov     @vI, R0
(1)     3B0 : 0280 0010                  ci      R0, 16
(1)     3B4 : 1402                       jhe     print_space
(1)     3B6 : 0460 0302                  b       @loop_i         if I<16
(1)     3BA :                    print_space:
(1)     3BA : 0200 0020                  li      R0, ' '
(1)     3BE : 100A                       jmp     print_char
(1)     3C0 :                    print_i:
(1)     3C0 : C020 02B8                  mov     @vI, R0
(1)     3C4 : 0280 000A                  ci      R0, 10
(1)     3C8 : 1403                       jhe     print_i2       if I>=10
(1)     3CA : 0220 0030                  ai      R0, '0'
(1)     3CE : 1002                       jmp     print_char
(1)     3D0 :                    print_i2:
(1)     3D0 : 0220 0037                  ai      R0, 'A'-10
(1)     3D4 :                    print_char:
(1)     3D4 : 06C0                       swpb    R0
(1)     3D6 : 00BA 026C                  blsk    R10, putchar
(1)     3DA :
(1)     3DA :                            * mov     R0, R2
(1)     3DA :                            * li      R0, hibyte('@')
(1)     3DA :                            * blsk    R10, putchar
(1)     3DA :                            * li      R0, hibyte('=')
(1)     3DA :                            * blsk    R10, putchar
(1)     3DA :                            * mov     R2, R0
(1)     3DA :                            * blsk    R10, putchar
(1)     3DA :                            * blsk    R10, newline
(1)     3DA :
(1)     3DA : 00BA 023E                  blsk    R10, getchar
(1)     3DE : 1703                       jnc     next_x
(1)     3E0 : E000                       soc     R0, R0
(1)     3E2 : 1601                       jne     next_x
(1)     3E4 : 2FCF                       xop     R15,15          halt to system
(1)     3E6 :                    next_x:
(1)     3E6 : 05A0 02B6                  inc     @vX             X+=1
(1)     3EA : C020 02B6                  mov     @vX, R0
(1)     3EE : 0280 001E                  ci      R0, 30
(1)     3F2 : 1302                       jeq     next_y
(1)     3F4 : 0460 02CA                  b       @loop_x         if X<30
(1)     3F8 :                    next_y:
(1)     3F8 : 00BA 0256                  blsk    R10, newline
(1)     3FC : 05A0 02B4                  inc     @vY             Y+=1
(1)     400 : C020 02B4                  mov     @vY, R0
(1)     404 : 0280 000D                  ci      R0, 13
(1)     408 : 1302                       jeq     mandelbrot_end
(1)     40A : 0460 02C2                  b       @loop_y         if Y<13
(1)     40E :                    mandelbrot_end:
(1)     40E : 017A                       bind    *R10+
        410 :                            include "arith.inc"
(1)     410 :                    *** -*- mode: asm; mode: flyspell-prog* -*-
(1)     410 :                            *** Print signed 16-bit integer as decimal
(1)     410 :                            *** @param R0 value
(1)     410 :                    print_int16:
(1)     410 : 064A                       dect    R10
(1)     412 : C680                       mov     R0, *R10        Push R0
(1)     414 : 1313                       jeq     print_int16_zero
(1)     416 : 1506                       jgt     print_uint16
(1)     418 : 0200 2D00                  li      R0, hibyte('-')
(1)     41C : 00BA 026C                  blsk    R10, putchar
(1)     420 : C01A                       mov     *R10, R0        Restore R0
(1)     422 : 0500                       neg     R0
(1)     424 :                    print_uint16:
(1)     424 : 064A                       dect    R10
(1)     426 : C681                       mov     R1, *R10        Push R1
(1)     428 : 064A                       dect    R10
(1)     42A : C682                       mov     R2, *R10        Push R2
(1)     42C : 0202 000A                  li      R2, 10
(1)     430 : 00BA 0446                  blsk    R10, print_uint16_loop
(1)     434 : C0BA                       mov     *R10+, R2       Pop R2
(1)     436 : C07A                       mov     *R10+, R1       Pop R1
(1)     438 :                    print_int16_return:
(1)     438 : C03A                       mov     *R10+, R0       Pop R0
(1)     43A : 017A                       bind    *R10+
(1)     43C :                    print_int16_zero:
(1)     43C : 0200 3000                  li      R0, hibyte('0')
(1)     440 : 00BA 026C                  blsk    R10, putchar
(1)     444 : 10F9                       jmp     print_int16_return
(1)     446 :
(1)     446 :                    print_uint16_loop:
(1)     446 : C040                       mov     R0, R1
(1)     448 : 130C                       jeq     print_uint16_return
(1)     44A : 04C0                       clr     R0
(1)     44C : 3C02                       div     R2, R0          R0:R1/R2 ; R0=quotient R1=reminder
(1)     44E : 064A                       dect    R10
(1)     450 : C681                       mov     R1, *R10        Push reminder
(1)     452 : 00BA 0446                  blsk    R10, print_uint16_loop
(1)     456 : C03A                       mov     *R10+, R0       Pop reminder
(1)     458 : 06C0                       swpb    R0
(1)     45A : 0220 3000                  ai      R0, hibyte('0')
(1)     45E : 00BA 026C                  blsk    R10, putchar
(1)     462 :                    print_uint16_return:
(1)     462 : 017A                       bind    *R10+           Pop return address
(1)     464 :
(1)     464 :                            *** Unsigned Divide
(1)     464 :                            *** R1 / |R2| = R1
(1)     464 :                            *** @clobber R2
(1)     464 :                    udiv16:
(1)     464 : 0281 0000                  ci      R1, 0
(1)     468 : 1104                       jlt     udiv16_negative R1 < 0
(1)     46A : 04C0                       clr     R0              Sign extend
(1)     46C : 3C02                       div     R2, R0          R0:R1/R2=R0..R1
(1)     46E : C040                       mov     R0, R1
(1)     470 : 045B                       rt
(1)     472 :                    udiv16_negative:
(1)     472 : 0700                       seto    R0              Sign extend
(1)     474 : 0182                       divs    R2              R0:R1/R2=R0...R1
(1)     476 : C040                       mov     R0, R1
(1)     478 : 045B                       rt
(1)     47A :
(1)     47A :                            *** Divide
(1)     47A :                            *** R1 / R2 = R1 ... R0
(1)     47A :                            *** @clobber R2
(1)     47A :                    div16:
(1)     47A : 0700                       seto    R0
(1)     47C : 0281 0000                  ci      R1, 0
(1)     480 : 1101                       jlt     div16_calc
(1)     482 : 04C0                       clr     R0
(1)     484 :                    div16_calc:
(1)     484 : 0182                       divs    R2              R0:R1/R2=R0...R1
(1)     486 : C081                       mov     R1, R2
(1)     488 : C040                       mov     R0, R1
(1)     48A : C002                       mov     R2, R0
(1)     48C : 045B                       rt
        48E :                            include "queue.inc"
(1)     48E :                    *** -*- mode: asm; mode: flying-spell; -*-
(1)     48E :                    *** [queue] queue structure
(1)     48E : =0                 queue_len:      equ     0       ; queue length
(1)     48E : =2                 queue_size:     equ     2       ; buffer size
(1)     48E : =4                 queue_put:      equ     4       ; queue put index
(1)     48E : =6                 queue_get:      equ     6       ; queue get index
(1)     48E : =8                 queue_buf:      equ     8       ; buffer start offset
(1)     48E :
(1)     48E :                    *** [queue] Initialize queue
(1)     48E :                    *** @param R9 queue work space pointer
(1)     48E :                    *** @param R0 queue work space size
(1)     48E :                    *** @clobber R0 R1 R9
(1)     48E :                    queue_init:
(1)     48E : 04F9                       clr     *R9+            clear queue_len
(1)     490 : 0220 FFF8                  ai      R0, -queue_buf
(1)     494 : CE40                       mov     R0, *R9+        set queue_size
(1)     496 : 04F9                       clr     *R9+            clear queue_put
(1)     498 : 04F9                       clr     *R9+            clear queue_get
(1)     49A : 04C1                       clr     R1
(1)     49C :                    queue_init_loop:
(1)     49C : DE41                       movb    R1, *R9+
(1)     49E : 0600                       dec     R0
(1)     4A0 : 16FD                       jne     queue_init_loop
(1)     4A2 : 045B                       rt
(1)     4A4 :
(1)     4A4 :                    *** [queue] Add an element to queue
(1)     4A4 :                    *** @param R9 queue work space pointer
(1)     4A4 :                    *** @param R0 an element
(1)     4A4 :                    *** @return CC.C 0 if queue is full
(1)     4A4 :                    *** @clobber R1
(1)     4A4 :                    queue_add:
(1)     4A4 : 8A59 0002                  c       *R9, @queue_size(R9)    check queue_len
(1)     4A8 : 1A02                       jl      queue_add_element
(1)     4AA : 04C1                       clr     R1                      to clear ST.C
(1)     4AC : 1010                       jmp     queue_add_exit
(1)     4AE :                    queue_add_element:
(1)     4AE : C049                       mov     R9, R1
(1)     4B0 : A069 0004                  a       @queue_put(R9), R1
(1)     4B4 : D840 0008                  movb    R0, @queue_buf(R1)
(1)     4B8 : 0599                       inc     *R9                     update queue_len
(1)     4BA : C069 0004                  mov     @queue_put(R9), R1
(1)     4BE : 0581                       inc     R1
(1)     4C0 : 8A41 0002                  c       R1, @queue_size(R9)
(1)     4C4 : 1101                       jlt     queue_add_return
(1)     4C6 : 04C1                       clr     R1
(1)     4C8 :                    queue_add_return:
(1)     4C8 : CA41 0004                  mov     R1, @queue_put(R9)
(1)     4CC : 0701                       seto    R1                      to set ST.C
(1)     4CE :                    queue_add_exit:
(1)     4CE : 0911                       srl     R1, 1                   set/clear ST.C
(1)     4D0 : 045B                       rt
(1)     4D2 :
(1)     4D2 :                    *** [queue] Remove an element from queue
(1)     4D2 :                    *** @param R9 queue work space pointer
(1)     4D2 :                    *** @return R0 an element
(1)     4D2 :                    *** @return CC.C 0 if queue is empty
(1)     4D2 :                    *** @clobber R1
(1)     4D2 :                    queue_remove:
(1)     4D2 : C059                       mov     *R9, R1                 check queue_len
(1)     4D4 : 1311                       jeq     queue_remove_exit       to clear ST.C
(1)     4D6 : C049                       mov     R9, R1
(1)     4D8 : A069 0006                  a       @queue_get(R9), R1
(1)     4DC : 04C0                       clr     R0                      clear low byte
(1)     4DE : D021 0008                  movb    @queue_buf(R1), R0
(1)     4E2 : 0619                       dec     *R9                     update queue_len
(1)     4E4 : C069 0006                  mov     @queue_get(R9), R1
(1)     4E8 : 0581                       inc     R1
(1)     4EA : 8A41 0002                  c       R1, @queue_size(R9)
(1)     4EE : 1101                       jlt     queue_remove_return
(1)     4F0 : 04C1                       clr     R1
(1)     4F2 :                    queue_remove_return:
(1)     4F2 : CA41 0006                  mov     R1, @queue_get(R9)
(1)     4F6 : 0701                       seto    R1                      to set ST.C
(1)     4F8 :                    queue_remove_exit:
(1)     4F8 : 0911                       srl     R1, 1                   set/clear ST.C
(1)     4FA : 045B                       rt
        4FC :
        4FC :                    int15_isr:
        4FC : D020 0080                  movb    @ACIA_status, R0
        500 : 0240 0100                  andi    R0, hibyte(RDRF_bm)
        504 : 1306                       jeq     int15_isr_send  lo(R0) is cleared
        506 : D020 0082                  movb    @ACIA_data, R0
        50A : 0209 2000                  li      R9, rx_queue
        50E : 06A0 04A4                  bl      @queue_add
        512 :                    int15_isr_send:
        512 : D020 0080                  movb    @ACIA_status, R0
        516 : 0240 0200                  andi    R0, hibyte(TDRE_bm)
        51A : 1307                       jeq     int15_isr_exit
        51C : 0209 2080                  li      R9, tx_queue
        520 : 06A0 04D2                  bl      @queue_remove
        524 : 1703                       jnc     int15_isr_send_empty
        526 : D800 0082                  movb    R0, @ACIA_data
        52A :                    int15_isr_exit:
        52A : 0380                       rtwp
        52C :                    int15_isr_send_empty:
        52C :                            * Disable Tx interrupt
        52C : 0201 2000                  li      R1, hibyte(TCB_EI_gc)
        530 : 5801 0080                  szcb    R1, @ACIA_control       Disable Tx interrupt
        534 : 0380                       rtwp
