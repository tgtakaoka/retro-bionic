          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     1804A
          0 :                            option  "smart-branch", "on"
          0 :                            include "cdp1802.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; CDP1802 register alias
(1)       0 : =0                 R0:     equ     0
(1)       0 : =1                 R1:     equ     1
(1)       0 : =2                 R2:     equ     2
(1)       0 : =3                 R3:     equ     3
(1)       0 : =4                 R4:     equ     4
(1)       0 : =5                 R5:     equ     5
(1)       0 : =6                 R6:     equ     6
(1)       0 : =7                 R7:     equ     7
(1)       0 : =8                 R8:     equ     8
(1)       0 : =9                 R9:     equ     9
(1)       0 : =A                 R10:    equ     10
(1)       0 : =B                 R11:    equ     11
(1)       0 : =C                 R12:    equ     12
(1)       0 : =D                 R13:    equ     13
(1)       0 : =E                 R14:    equ     14
(1)       0 : =F                 R15:    equ     15
(1)       0 :
(1)       0 :                    ;;; Transfer locations
(1)       0 : =0                 ORG_RESET:      equ     0000H   ; Reset transfer location
          0 :
          0 :                            org     ORG_RESET
          0 : 71                         dis                     ; disable interrupt
          1 : 00                         dc      X'00'           ; X:P=0:0
          2 : 30 04                      br      scrt_init
          4 :                            include "scrt.inc"
(1)       4 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       4 :
(1)       4 :                    ;;; Standard Call and Return Technique
(1)       4 :                    ;;; R0: DMA pointer
(1)       4 :                    ;;; R1: Program counter for Interrupt routine
(1)       4 :                    ;;; R2: Stack pointer
(1)       4 :                    ;;; R3: Program counter
(1)       4 :                    ;;; R4: Link register, pointer to the return location and arguments
(1)       4 :                    ;;;     passed by the calling program
(1)       4 :
(1)       4 :                    ;;; Call subroutine
(1)       4 :                    ;;;   SCAL R4, subroutine
(1)       4 :                    ;;;   DC   arguments...
(1)       4 :                    ;;; Subroutine return
(1)       4 :                    ;;;   SRET R4
(1)       4 :                    ;;; Return from interrupt
(1)       4 :                    ;;;   SEP R1
(1)       4 :
(1)       4 :                    ;;; Initialize for SCRT, P=0
(1)       4 :                    ;;; @param P!=3
(1)       4 :                    ;;; @param stack top address of stack
(1)       4 :                    ;;; @param main start address of main routine
(1)       4 :                    ;;; @return P=3
(1)       4 :                    ;;; @return R1=scrt_isr
(1)       4 :                    ;;; @return R2=stack
(1)       4 :                    ;;; @return R3=main
(1)       4 :                    ;;; @clobber D, R15
(1)       4 :                    scrt_init:
(1)       4 : 68 C3 00 09                rldi    R3, scrt_start
(1)       8 : D3                         sep     R3              ; P=3
(1)       9 :                    scrt_start:
(1)       9 : 68 C1 00 1E                rldi    R1, scrt_isr    ; setup interrupt
(1)       D : E2                         sex     R2
(1)       E : 68 C2 0F FF                rldi    R2, stack       ; setup stack
(1)      12 : C0 10 00                   br      main            ; goto main with P=3
(1)      15 :
(1)      15 :                    ;;; Interrupt exit entry P=1
(1)      15 :                    ;;;  (Come here by SEP R1)
(1)      15 :                    scrt_isr_exit:
(1)      15 : 60                         irx
(1)      16 : 68 63                      rlxa    R3              ; pop program counter R3
(1)      18 : 68 6F                      rlxa    R15             ; pop scratch pad register R15
(1)      1A : 72                         ldxa                    ; pop DF into D:MSB
(1)      1B : FE                         shl                     ; restore DF
(1)      1C : 72                         ldxa                    ; pop D
(1)      1D : 70                         ret                     ; restore X,P IE=1
(1)      1E :                            ;; R1 points scrt_isr
(1)      1E :                    ;;; CDP1802 interrupt entry, X=2, P=1, IE=0
(1)      1E :                    ;;; @unchanged D, DF, X, P, R3, R15
(1)      1E :                    scrt_isr:
(1)      1E :                            ;; R2[0] must be preserved because it may be in the pop process
(1)      1E : 22                         dec     R2
(1)      1F : 78                         sav                     ; push X,P
(1)      20 : 22                         dec     R2
(1)      21 : 73                         stxd                    ; push D
(1)      22 : 76                         shrc                    ; MSB of D=DF
(1)      23 : 73                         stxd                    ; push DF
(1)      24 : 68 AF                      rsxd    R15             ; push scratch pad register R15
(1)      26 : 68 A3                      rsxd    R3              ; push program counter R3
(1)      28 : 68 C3 10 6A                rldi    R3, isr
(1)      2C : D3                         sep     R3              ; call interrupt service routine with P=3
(1)      2D : 30 15                      br      scrt_isr_exit   ; return from isr by SEP R1
         2F :
         2F :                    ;;; MC6850 Asynchronous Communication Interface Adapter
         2F : =4                 ACIA:   equ     4
         2F :                            include "mc6850.inc"
(1)      2F :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)      2F :
(1)      2F :                    ;;; MC6850
(1)      2F :                    ;;; Asynchronous Communication Interface Adapter
(1)      2F :
(1)      2F :                    ;;; Control register
(1)      2F : =4                 ACIA_control:   equ     ACIA+0
(1)      2F :                            ;; Counter Divider Select Bits
(1)      2F : =3                 CDS_gm:         equ     11b    ; Group mask
(1)      2F : =0                 CDS_DIV1_gc:    equ     00000000B ; /1
(1)      2F : =1                 CDS_DIV16_gc:   equ     00000001B ; /16
(1)      2F : =2                 CDS_DIV64_gc:   equ     00000010B ; /64
(1)      2F : =3                 CDS_RESET_gc:   equ     00000011B ; Master Reset
(1)      2F :                            ;; Word Select Bits
(1)      2F : =1C                WSB_gm:         equ     00011100B ; Group mask
(1)      2F : =0                 WSB_7E2_gc:     equ     00000000B ; 7 Bits + Even Parity + 2 Stop Bits
(1)      2F : =4                 WSB_7O2_gc:     equ     00000100B ; 7 bits + Odd Parity  + 2 Stop Bits
(1)      2F : =8                 WSB_7E1_gc:     equ     00001000B ; 7 bits + Even Parity + 1 Stop Bits
(1)      2F : =C                 WSB_7O1_gc:     equ     00001100B ; 7 bits + Odd Parity  + 1 Stop Bits
(1)      2F : =10                WSB_8N2_gc:     equ     00010000B ; 8 bits + No Parity   + 2 Stop Bits
(1)      2F : =14                WSB_8N1_gc:     equ     00010100B ; 8 bits + No Parity   + 1 Stop Bits
(1)      2F : =18                WSB_8E1_gc:     equ     00011000B ; 8 bits + Even Parity + 1 Stop Bits
(1)      2F : =1C                WSB_8O1_gc:     equ     00011100B ; 8 bits + Odd Parity  + 1 Stop Bits
(1)      2F :                            ;; Transmit Control Bits
(1)      2F : =60                TCB_gm:         equ     01100000B ; Group mask
(1)      2F : =0                 TCB_DI_gc:      equ     00000000B ; RTS=Low,  Tx Interrupt Disabled
(1)      2F : =20                TCB_EI_gc:      equ     00100000B ; RTS=Low,  Tx Interrupt Enabled
(1)      2F : =40                TCB_RTS_gc:     equ     01000000B ; RTS=High, Tx Interrupt Disabled
(1)      2F : =60                TCB_BREAK_gc:   equ     01100000B ; RTS=Low,  Tx Interrupt Disabled
(1)      2F :                                                      ; Transmit Break Level
(1)      2F : =80                RIEB_bm:        equ     10000000B ; Receive Interrupt Enable Bit mask
(1)      2F :
(1)      2F :                    ;;; Status register
(1)      2F : =4                 ACIA_status:    equ     ACIA+0
(1)      2F : =1                 RDRF_bm:        equ     00000001B ; Receive Data Register Full
(1)      2F : =2                 TDRE_bm:        equ     00000010B ; Transmit Data Register Empty
(1)      2F : =4                 DCDF_bm:        equ     00000100B ; Data Carrier Detect Flag
(1)      2F : =8                 CTSF_bm:        equ     00001000B ; Clear To Send Flag
(1)      2F : =10                FERR_bm:        equ     00010000B ; Frame Error Flag
(1)      2F : =20                OVRN_bm:        equ     00100000B ; Receiver Overrun Flag
(1)      2F : =40                PERR_bm:        equ     01000000B ; Parity Error Flag
(1)      2F : =80                IRQF_bm:        equ     10000000B ; Interrupt Request Flag
(1)      2F :
(1)      2F :                    ;;; Data register
(1)      2F : =5                 ACIA_data:      equ     ACIA+1          ; Data register
         2F :
       2000 :                            org     X'2000'
       2000 :
       2000 : =80                rx_queue_size:  equ     128
       2000 : =80                tx_queue_size:  equ     128
       2000 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
       2000 : =B4                RX_INT_TX_INT:  equ     WSB_8N1_gc|RIEB_bm|TCB_EI_gc
       2000 :
       2000 :                    rx_queue:
       2080 :                            org     *+rx_queue_size
       2080 :                    tx_queue:
       2100 :                            org     *+tx_queue_size
       2100 :
       2100 : =FFF               stack:  equ     X'1000'-1
       2100 :
       1000 :                            org     X'1000'
       1000 :                    main:
       1000 : 68 84 10 AE                scal    R4, queue_init   ; call queue_init
       1004 : 20 00                      dc      A(rx_queue)
       1006 : 80                         dc      rx_queue_size
       1007 : 68 84 10 AE                scal    R4, queue_init   ; call queue_init
       100B : 20 80                      dc      A(tx_queue)
       100D : 80                         dc      tx_queue_size
       100E :                            ;; initialize ACIA
       100E : 68 C8 10 1B                rldi    R8,ACIA_config
       1012 : E8                         sex     R8              ; R8 for out
       1013 : 64                         out     ACIA_control    ; Master reset
       1014 : 64                         out     ACIA_control    ; Set mode
       1015 : E3                         sex     R3
       1016 : 70                         ret
       1017 : 33                         dc      X'33'           ; enable interrupt
       1018 : E2                         sex     R2
       1019 : 30 1D                      br      loop
       101B :
       101B :                    ACIA_config:
       101B : 03                         dc      CDS_RESET_gc    ; Master reset
       101C : 94                         dc      RX_INT_TX_NO
       101D :
       101D :                    loop:
       101D : 68 84 12 CB                scal    R4, mandelbrot
       1021 : 68 84 10 5B                scal    R4, newline
       1025 : 30 1D                      br      loop
       1027 :
       1027 :                    ;;; Get character
       1027 :                    ;;; @return R7.0 char
       1027 :                    ;;; @return A 0 if no char received
       1027 :                    getchar:
       1027 : E3                         sex     R3
       1028 : 71                         dis                     ; disable interrupt
       1029 : 33                         dc      X'33'
       102A : E2                         sex     R2
       102B : 68 84 11 06                scal    R4, queue_remove
       102F : 20 00                      dc      A(rx_queue)
       1031 : E3                         sex     R3
       1032 : 70                         ret                     ; enable interrupt
       1033 : 33                         dc      X'33'
       1034 : E2                         sex     R2
       1035 : 68 94                      sret    R4
       1037 :
       1037 :                    ;;; Put character
       1037 :                    ;;; @param D char
       1037 :                    ;;; @unchanged D
       1037 :                    ;;; @clobber R15
       1037 :                    putchar:
       1037 : 73                         stxd                    ; save D
       1038 : AF                         plo     R15             ; save D to scratch pad
       1039 : 87                         glo     R7              ; save R7.0
       103A : 73                         stxd
       103B : 8F                         glo     R15             ; restore D
       103C : A7                         plo     R7              ; R7.0=char
       103D :                    putchar_loop:
       103D : E3                         sex     R3
       103E : 71                         dis                     ; disable interrupt
       103F : 33                         dc      X'33'
       1040 : E2                         sex     R2
       1041 : 68 84 10 CE                scal    R4, queue_add
       1045 : 20 80                      dc      A(tx_queue)
       1047 : E3                         sex     R3
       1048 : 70                         ret                     ; enable interrupt
       1049 : 33                         dc      X'33'
       104A : E2                         sex     R2
       104B : 32 3D                      bz      putchar_loop    ; retry if queue is full
       104D : 68 CF 10 5A                rldi    R15, putchar_txint
       1051 : EF                         sex     R15             ; R15 for out
       1052 : 64                         out     ACIA_control
       1053 :                    putchar_exit:
       1053 : E2                         sex     R2
       1054 : 60                         irx
       1055 : 72                         ldxa                    ; restore R7.0
       1056 : A7                         plo     R7
       1057 : F0                         ldx                     ; restore D
       1058 : 68 94                      sret    R4
       105A :                    putchar_txint:
       105A : B4                         dc      RX_INT_TX_INT
       105B :
       105B :                    ;;; Print out newline
       105B :                    ;;; @clobber D R15.0
       105B :                    newline:
       105B : F8 0D                      ldi     X'0D'
       105D : 68 84 10 37                scal    R4, putchar
       1061 : F8 0A                      ldi     X'0A'
       1063 : 30 37                      br      putchar
       1065 :
       1065 :                    ;;; Print out space
       1065 :                    ;;; @clobber D R15.0
       1065 :                    putspace:
       1065 : F8 20                      ldi     T' '
       1067 : 30 37                      br      putchar
       1069 :
       1069 :                    ;;; From scrt_isr, X=2, P=3
       1069 :                    isr_char:
       1069 : 00                         dc      0
       106A :                    isr:
       106A : 88                         glo     R8              ; save R8
       106B : 73                         stxd
       106C : 98                         ghi     R8
       106D : 73                         stxd
       106E : 87                         glo     R7              ; save R7
       106F : 73                         stxd
       1070 : 97                         ghi     R7
       1071 : 73                         stxd
       1072 :                            ;;
       1072 : 68 C8 10 69                rldi    R8, isr_char
       1076 : E8                         sex     R8              ; R8 for inp
       1077 : 6C                         inp     ACIA_status
       1078 : FA 80                      ani     IRQF_bm
       107A : 32 A3                      bz      isr_exit
       107C : 6C                         inp     ACIA_status
       107D : FA 01                      ani     RDRF_bm
       107F : 32 8A                      bz      isr_send        ; no data is received
       1081 : 6D                         inp     ACIA_data
       1082 : A7                         plo     R7
       1083 : E2                         sex     R2
       1084 : 68 84 10 CE                scal    R4, queue_add
       1088 : 20 00                      dc      A(rx_queue)
       108A :                    isr_send:
       108A : E8                         sex     R8              ; R8 for inp
       108B : 6C                         inp     ACIA_status
       108C : FA 02                      ani     TDRE_bm
       108E : 32 A3                      bz      isr_exit
       1090 : E2                         sex     R2
       1091 : 68 84 11 06                scal    R4, queue_remove
       1095 : 20 80                      dc      A(tx_queue)
       1097 : E8                         sex     R8              ; R8 for out
       1098 : 32 9F                      bz      isr_send_empty
       109A : 87                         glo     R7
       109B : 58                         str     R8              ; send char
       109C : 65                         out     ACIA_data
       109D : 30 A3                      br      isr_exit
       109F :                    isr_send_empty:
       109F : F8 94                      ldi     RX_INT_TX_NO    ; disable Tx interrupt
       10A1 : 58                         str     R8
       10A2 : 64                         out     ACIA_control
       10A3 :                    isr_exit:
       10A3 : E2                         sex     R2
       10A4 : 60                         irx
       10A5 : 72                         ldxa                    ; restore R7
       10A6 : B7                         phi     R7
       10A7 : 72                         ldxa
       10A8 : A7                         plo     R7
       10A9 : 72                         ldxa                    ; restore R8
       10AA : B8                         phi     R8
       10AB : F0                         ldx
       10AC : A8                         plo     R8
       10AD : D1                         sep     R1              ; return to scrt_isr
       10AE :
       10AE :                            include "queue.inc"
(1)    10AE :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    10AE :                    ;;; [queue] queue structure
(1)    10AE : =0                 queue_len:      equ     0       ; queue length
(1)    10AE : =1                 queue_size:     equ     1       ; buffer size
(1)    10AE : =2                 queue_put:      equ     2       ; queue put index
(1)    10AE : =3                 queue_get:      equ     3       ; queue get index
(1)    10AE : =4                 queue_buf:      equ     4       ; buffer start offset
(1)    10AE :
(1)    10AE :                    ;;; [queue] Initialize queue
(1)    10AE :                    ;;; @param R4+0 queue work space pointer
(1)    10AE :                    ;;; @param R4+2 queue work space size
(1)    10AE :                    ;;; @clobber D, R15
(1)    10AE :                    queue_init:
(1)    10AE : 68 AE                      rsxd    R14             ; save R14
(1)    10B0 : E4                         sex     R4
(1)    10B1 : 68 6F                      rlxa    R15             ; R15=queue space pointer
(1)    10B3 : F8 00                      ldi     0
(1)    10B5 : 5F                         str     R15             ; clear queue_len
(1)    10B6 : 1F                         inc     R15
(1)    10B7 : 44                         lda     R4              ; queue space size
(1)    10B8 : FF 04                      smi     queue_buf       ; calculate queue size
(1)    10BA : 5F                         str     R15             ; store queue_size
(1)    10BB : FC 02                      adi     2               ; for queue_put and queue_get
(1)    10BD : AE                         plo     R14             ; R14.0: byte counter
(1)    10BE : F8 00                      ldi     0
(1)    10C0 : BE                         phi     R14
(1)    10C1 :                    queue_init_clear:
(1)    10C1 : 1F                         inc     R15
(1)    10C2 : 5F                         str     R15             ; clear memory
(1)    10C3 : 68 2E 10 C1                dbnz    R14, queue_init_clear
(1)    10C7 : E2                         sex     R2
(1)    10C8 : 60                         irx
(1)    10C9 : 68 6E                      rlxa    R14             ; restore R14
(1)    10CB : 22                         dec     R2
(1)    10CC : 68 94                      sret    R4
(1)    10CE :
(1)    10CE :                    ;;; [queue] Add an element to queue
(1)    10CE :                    ;;; @param R4+0 queue work space pointer
(1)    10CE :                    ;;; @param R7.0 an element
(1)    10CE :                    ;;; @return D 0 if queue is full
(1)    10CE :                    queue_add:
(1)    10CE : 68 AE                      rsxd    R14             ; save R14
(1)    10D0 : E4                         sex     R4
(1)    10D1 : 68 6F                      rlxa    R15             ; R15=queue space pointer
(1)    10D3 : EF                         sex     R15
(1)    10D4 : 72                         ldxa                    ; load queue_len
(1)    10D5 : F3                         xor                     ; queue_len ^ queue_size
(1)    10D6 : 32 FD                      bz      queue_add_return ; branch if D=0
(1)    10D8 : 2F                         dec     R15
(1)    10D9 : 8F                         glo     R15
(1)    10DA : FC 04                      adi     queue_buf
(1)    10DC : AE                         plo     R14
(1)    10DD : 9F                         ghi     R15
(1)    10DE : 7C 00                      adci    0
(1)    10E0 : BE                         phi     R14             ; R14=&queue_buf[0]
(1)    10E1 : 0F                         ldn     R15
(1)    10E2 : FC 01                      adi     1
(1)    10E4 : 5F                         str     R15             ; queue_len++
(1)    10E5 : 8E                         glo     R14
(1)    10E6 : 1F                         inc     R15
(1)    10E7 : 1F                         inc     R15
(1)    10E8 : EF                         sex     R15
(1)    10E9 : F4                         add                     ; add queue_put
(1)    10EA : AE                         plo     R14
(1)    10EB : 9E                         ghi     R14
(1)    10EC : 7C 00                      adci    0
(1)    10EE : BE                         phi     R14             ; R14=&queue_buf[queue_put]
(1)    10EF : 87                         glo     R7              ; R7.0=an element
(1)    10F0 : 5E                         str     R14             ; store an element
(1)    10F1 : 0F                         ldn     R15             ; load queue_put
(1)    10F2 : FC 01                      adi     1
(1)    10F4 : 5F                         str     R15             ; update queue_put
(1)    10F5 : 2F                         dec     R15
(1)    10F6 : F3                         xor                      ; queue_put ^ queue_size
(1)    10F7 : 3A FD                      bnz     queue_add_return ; branch if D!=0
(1)    10F9 : 1F                         inc     R15
(1)    10FA : 5F                         str     R15             ; queue_put=0
(1)    10FB : F8 01                      ldi     1
(1)    10FD :                    queue_add_return:
(1)    10FD : AF                         plo     R15             ; return flag
(1)    10FE : E2                         sex     R2
(1)    10FF : 60                         irx
(1)    1100 : 68 6E                      rlxa    R14             ; restore R14
(1)    1102 : 22                         dec     R2
(1)    1103 : 8F                         glo     R15
(1)    1104 : 68 94                      sret    R4
(1)    1106 :
(1)    1106 :                    ;;; [queue] Remove an element from queue
(1)    1106 :                    ;;; @param R4+0 queue work space pointer
(1)    1106 :                    ;;; @return R7.0 an element
(1)    1106 :                    ;;; @return D 0 if queue is empty
(1)    1106 :                    ;;; @clobber R15
(1)    1106 :                    queue_remove:
(1)    1106 : 68 AE                      rsxd    R14             ; save R14
(1)    1108 : E4                         sex     R4
(1)    1109 : 68 6F                      rlxa    R15                 ; R15=queue space pointer
(1)    110B : 0F                         ldn     R15                 ; load queue_len
(1)    110C : 32 34                      bz      queue_remove_return ; branch if D=0
(1)    110E : FF 01                      smi     1
(1)    1110 : 5F                         str     R15             ; queue_len--
(1)    1111 : 8F                         glo     R15
(1)    1112 : FC 04                      adi     queue_buf
(1)    1114 : AE                         plo     R14
(1)    1115 : 9F                         ghi     R15
(1)    1116 : 7C 00                      adci    0
(1)    1118 : BE                         phi     R14             ; R14=&queue_buf[0]
(1)    1119 : 8E                         glo     R14
(1)    111A : 1F                         inc     R15
(1)    111B : 1F                         inc     R15
(1)    111C : 1F                         inc     R15
(1)    111D : EF                         sex     R15
(1)    111E : F4                         add                     ; add queue_get
(1)    111F : AE                         plo     R14
(1)    1120 : 9E                         ghi     R14
(1)    1121 : 7C 00                      adci    0
(1)    1123 : BE                         phi     R14             ; R14=&queue_buf[queue_get]
(1)    1124 : 0E                         ldn     R14             ; load an alement
(1)    1125 : A7                         plo     R7              ; R7.0=an element
(1)    1126 : 0F                         ldn     R15             ; load queue_get
(1)    1127 : FC 01                      adi     1
(1)    1129 : 5F                         str     R15             ; update queue_get
(1)    112A : 2F                         dec     R15
(1)    112B : 2F                         dec     R15
(1)    112C : F3                         xor                     ; queue_get ^ queue_size
(1)    112D : 3A 34                      bnz     queue_remove_return ; brnach if D!=0
(1)    112F : 1F                         inc     R15
(1)    1130 : 1F                         inc     R15
(1)    1131 : 5F                         str     R15             ; queue_get=0
(1)    1132 : F8 01                      ldi     1
(1)    1134 :                    queue_remove_return:
(1)    1134 : AF                         plo     R15             ; return flag
(1)    1135 : E2                         sex     R2
(1)    1136 : 60                         irx
(1)    1137 : 68 6E                      rlxa    R14             ; restore R14
(1)    1139 : 22                         dec     R2
(1)    113A : 8F                         glo     R15             ; return flag
(1)    113B : 68 94                      sret    R4
       113D :                            include "arith.inc"
(1)    113D :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    113D :                            cpu     1804A
(1)    113D :
(1)    113D :                    ;;; Print unsigned 16-bit integer as decimal
(1)    113D :                    ;;; @param R7 value
(1)    113D :                    ;;; @clobber D R7 R8 R15
(1)    113D :                    print_uint16:
(1)    113D : 97                         ghi     R7
(1)    113E : 3A 43                      bnz     print_uint16_loop
(1)    1140 : 87                         glo     R7
(1)    1141 : 32 5D                      bz      print_uint16_zero
(1)    1143 :                    print_uint16_loop:
(1)    1143 : 97                         ghi     R7
(1)    1144 : 3A 4B                      bnz     print_uint16_digit
(1)    1146 : 87                         glo     R7
(1)    1147 : 3A 4B                      bnz     print_uint16_digit
(1)    1149 : 68 94                      sret    R4
(1)    114B :                    print_uint16_digit:
(1)    114B : F8 00                      ldi     0
(1)    114D : B8                         phi     R8
(1)    114E : F8 0A                      ldi     10
(1)    1150 : A8                         plo     R8              ; divisor=10
(1)    1151 : 68 84 12 1E                scal    R4, udiv16
(1)    1155 : 88                         glo     R8
(1)    1156 : 73                         stxd                    ; push remainder
(1)    1157 : 68 84 11 43                scal    R4, print_uint16_loop
(1)    115B : 12                         inc     R2
(1)    115C : 02                         ldn     R2              ; pop remainder
(1)    115D :                    print_uint16_zero:
(1)    115D : FC 30                      adi     T'0'
(1)    115F : C0 10 37                   br      putchar
(1)    1162 :
(1)    1162 :                    ;;; Print signed 16-bit integer as decimal
(1)    1162 :                    ;;; @param R7 value
(1)    1162 :                    ;;; @clobber D R15
(1)    1162 :                    print_int16:
(1)    1162 : 68 A8                      rsxd    R8              ; save R8
(1)    1164 : 68 A7                      rsxd    R7              ; save R7
(1)    1166 : 97                         ghi     R7
(1)    1167 : FA 80                      ani     X'80'
(1)    1169 : 32 7A                      bz      print_int16_print
(1)    116B : F8 2D                      ldi     T'-'
(1)    116D : 68 84 10 37                scal    R4, putchar      ; print '-'
(1)    1171 : 97                         ghi     R7
(1)    1172 : FB FF                      xri     X'FF'
(1)    1174 : B7                         phi     R7
(1)    1175 : 87                         glo     R7
(1)    1176 : FB FF                      xri     X'FF'
(1)    1178 : A7                         plo     R7
(1)    1179 : 17                         inc     R7              ; negate value
(1)    117A :                    print_int16_print:
(1)    117A : 68 84 11 3D                scal    R4, print_uint16
(1)    117E : 60                         irx
(1)    117F : 68 67                      rlxa    R7              ; restore R7
(1)    1181 : 68 68                      rlxa    R8              ; restore R8
(1)    1183 : 22                         dec     R2
(1)    1184 : 68 94                      sret    R4
(1)    1186 :
(1)    1186 :                    ;;; Store R7 to variable
(1)    1186 :                    ;;;   SCAL R4, store_R7
(1)    1186 :                    ;;;   DC   A(variable)
(1)    1186 :                    ;;; @clobber D R15
(1)    1186 :                    store_R7:
(1)    1186 : E4                         sex     R4
(1)    1187 : 68 6F                      rlxa    R15             ; R15=&valiable
(1)    1189 : EF                         sex     R15
(1)    118A : 60                         irx
(1)    118B : 68 A7                      rsxd    R7
(1)    118D : E2                         sex     R2
(1)    118E : 68 94                      sret    R4
(1)    1190 :
(1)    1190 :                    ;;; Load variable to R7
(1)    1190 :                    ;;;   SCAL R4, load_R7
(1)    1190 :                    ;;;   DC   A(variable)
(1)    1190 :                    ;;; @return R7 variable
(1)    1190 :                    ;;; @clobber R15
(1)    1190 :                    load_R7:
(1)    1190 : E4                         sex     R4
(1)    1191 : 68 67                      rlxa    R7              ; R7=&variable
(1)    1193 : E7                         sex     R7
(1)    1194 : 68 67                      rlxa    R7
(1)    1196 : E2                         sex     R2
(1)    1197 : 68 94                      sret    R4
(1)    1199 :
(1)    1199 :                    ;;; Load variable to R8
(1)    1199 :                    ;;;   SCAL R4, load_R8
(1)    1199 :                    ;;;   DC   A(variable)
(1)    1199 :                    ;;; @clobber R15
(1)    1199 :                    load_R8:
(1)    1199 : E4                         sex     R4
(1)    119A : 68 68                      rlxa    R8              ; R8=&variable
(1)    119C : E8                         sex     R8
(1)    119D : 68 68                      rlxa    R8
(1)    119F : E2                         sex     R2
(1)    11A0 : 68 94                      sret    R4
(1)    11A2 :
(1)    11A2 :                    ;;; Signed addition: summand += addend
(1)    11A2 :                    ;;; @param R7 summand
(1)    11A2 :                    ;;; @param R8 addend
(1)    11A2 :                    ;;; @return R7 summand + addend
(1)    11A2 :                    ;;;   SCAL R4, add16
(1)    11A2 :                    ;;; @clobber D
(1)    11A2 :                    add16:
(1)    11A2 : 88                         glo     R8
(1)    11A3 : 52                         str     R2
(1)    11A4 : 87                         glo     R7
(1)    11A5 : F4                         add
(1)    11A6 : A7                         plo     R7
(1)    11A7 : 98                         ghi     R8
(1)    11A8 : 52                         str     R2
(1)    11A9 : 97                         ghi     R7
(1)    11AA : 74                         adc
(1)    11AB : B7                         phi     R7
(1)    11AC : 68 94                      sret    R4
(1)    11AE :
(1)    11AE :                    ;;; Singed subtraction: minuend -= subtrahend
(1)    11AE :                    ;;;   SCAL R4, sub16
(1)    11AE :                    ;;; @param R7 minuend
(1)    11AE :                    ;;; @param R8 subtrahend
(1)    11AE :                    ;;; @return R7 minuend - subtrahend
(1)    11AE :                    ;;; @clobber D
(1)    11AE :                    sub16:
(1)    11AE : 88                         glo     R8
(1)    11AF : 52                         str     R2
(1)    11B0 : 87                         glo     R7
(1)    11B1 : F7                         sm
(1)    11B2 : A7                         plo     R7
(1)    11B3 : 98                         ghi     R8
(1)    11B4 : 52                         str     R2
(1)    11B5 : 97                         ghi     R7
(1)    11B6 : 77                         smb
(1)    11B7 : B7                         phi     R7
(1)    11B8 : 68 94                      sret    R4
(1)    11BA :
(1)    11BA :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)    11BA :                    ;;; @param R7 multiplicand
(1)    11BA :                    ;;; @param R8 multiplier
(1)    11BA :                    ;;; @return R7 result
(1)    11BA :                    ;;; @clobber D R7 R8 R15
(1)    11BA :                    umul16:
(1)    11BA : F8 00                      ldi     0
(1)    11BC : BF                         phi     R15
(1)    11BD : AF                         plo     R15             ; R15=result
(1)    11BE : 30 DB                      br      umul16_check
(1)    11C0 :                    umul16_loop:
(1)    11C0 : 88                         glo     R8
(1)    11C1 : FA 01                      ani     1
(1)    11C3 : 32 CF                      bz      umul16_sr       ; lsb(multiplier)==0
(1)    11C5 : 87                         glo     R7
(1)    11C6 : 52                         str     R2              ; stack top=multiplicand.0
(1)    11C7 : 8F                         glo     R15
(1)    11C8 : F4                         add
(1)    11C9 : AF                         plo     R15
(1)    11CA : 97                         ghi     R7
(1)    11CB : 52                         str     R2              ; stack top=multiplicand.1
(1)    11CC : 9F                         ghi     R15
(1)    11CD : 74                         adc
(1)    11CE : BF                         phi     R15             ; result += multiplicand
(1)    11CF :                    umul16_sr:
(1)    11CF : 98                         ghi     R8
(1)    11D0 : F6                         shr
(1)    11D1 : B8                         phi     R8
(1)    11D2 : 88                         glo     R8
(1)    11D3 : 76                         shrc
(1)    11D4 : A8                         plo     R8              ; multiplier >>= 1
(1)    11D5 : 87                         glo     R7
(1)    11D6 : FE                         shl
(1)    11D7 : A7                         plo     R7
(1)    11D8 : 97                         ghi     R7
(1)    11D9 : 7E                         shlc
(1)    11DA : B7                         phi     R7              ; multiplicand <<= 1
(1)    11DB :                    umul16_check:
(1)    11DB : 98                         ghi     R8
(1)    11DC : 3A C0                      bnz     umul16_loop     ; while multiplier != 0
(1)    11DE : 88                         glo     R8
(1)    11DF : 3A C0                      bnz     umul16_loop     ; while multiplier != 0
(1)    11E1 : 9F                         ghi     R15
(1)    11E2 : B7                         phi     R7
(1)    11E3 : 8F                         glo     R15
(1)    11E4 : A7                         plo     R7              ; R7=result
(1)    11E5 : 68 94                      sret    R4
(1)    11E7 :
(1)    11E7 :                    ;;; Signed multiplication: multiplicand *= multiplier
(1)    11E7 :                    ;;; @param R7 multiplicand
(1)    11E7 :                    ;;; @param R8 multiplier
(1)    11E7 :                    ;;; @return R7 multiplicand * multiplier
(1)    11E7 :                    ;;;   SCAL R4, mul16
(1)    11E7 :                    ;;; @clobber R8 R15
(1)    11E7 :                    mul16:
(1)    11E7 : 98                         ghi     R8
(1)    11E8 : 52                         str     R2
(1)    11E9 : 97                         ghi     R7
(1)    11EA : F3                         xor
(1)    11EB : 73                         stxd                    ; push sign
(1)    11EC : 98                         ghi     R8
(1)    11ED : FA 80                      ani     X'80'
(1)    11EF : 32 FA                      bz      mul16_multiplicand
(1)    11F1 : 98                         ghi     R8
(1)    11F2 : FB FF                      xri     X'FF'
(1)    11F4 : B8                         phi     R8
(1)    11F5 : 88                         glo     R8
(1)    11F6 : FB FF                      xri     X'FF'
(1)    11F8 : A8                         plo     R8
(1)    11F9 : 18                         inc     R8              ; negate multiplier
(1)    11FA :                    mul16_multiplicand:
(1)    11FA : 97                         ghi     R7
(1)    11FB : FA 80                      ani     X'80'
(1)    11FD : C2 12 09                   bz      mul16_multiply
(1)    1200 : 97                         ghi     R7
(1)    1201 : FB FF                      xri     X'FF'
(1)    1203 : B7                         phi     R7
(1)    1204 : 87                         glo     R7
(1)    1205 : FB FF                      xri     X'FF'
(1)    1207 : A7                         plo     R7
(1)    1208 : 17                         inc     R7              ; negate multiplicand
(1)    1209 :                    mul16_multiply:
(1)    1209 : 68 84 11 BA                scal    R4, umul16
(1)    120D : 60                         irx
(1)    120E : F0                         ldx                     ; sign
(1)    120F : FA 80                      ani     X'80'
(1)    1211 : 32 1C                      bz      mul16_return
(1)    1213 : 97                         ghi     R7
(1)    1214 : FB FF                      xri     X'FF'
(1)    1216 : B7                         phi     R7
(1)    1217 : 87                         glo     R7
(1)    1218 : FB FF                      xri     X'FF'
(1)    121A : A7                         plo     R7
(1)    121B : 17                         inc     R7              ; negate result
(1)    121C :                    mul16_return:
(1)    121C : 68 94                      sret    R4
(1)    121E :
(1)    121E :                    ;;; Unsigned division: dividend / divisor = quotient ... remainder
(1)    121E :                    ;;; @praram R7 dividend
(1)    121E :                    ;;; @praram R8 divisor
(1)    121E :                    ;;; @return R7 quotient
(1)    121E :                    ;;; @return R8 remainder
(1)    121E :                    ;;; @clobber R7 R8 R15
(1)    121E :                    udiv16:
(1)    121E : 98                         ghi     R8
(1)    121F : 3A 26                      bnz     udiv16_calc
(1)    1221 : 88                         glo     R8
(1)    1222 : 3A 26                      bnz     udiv16_calc
(1)    1224 : 68 94                      sret    R4
(1)    1226 :                    udiv16_calc:
(1)    1226 : 68 A9                      rsxd    R9              ; save R9
(1)    1228 : F8 01                      ldi     1
(1)    122A : AF                         plo     R15             ; R15.0=bits
(1)    122B : 30 34                      br      udiv16_prep
(1)    122D :                    udiv16_prep_loop:
(1)    122D : 88                         glo     R8
(1)    122E : FE                         shl
(1)    122F : A8                         plo     R8
(1)    1230 : 98                         ghi     R8
(1)    1231 : 7E                         shlc
(1)    1232 : B8                         phi     R8              ; divisor <<= 1
(1)    1233 : 1F                         inc     R15             ; ++bits
(1)    1234 :                    udiv16_prep:
(1)    1234 : 98                         ghi     R8
(1)    1235 : FA 80                      ani     X'80'
(1)    1237 : 32 2D                      bz      udiv16_prep_loop ; while msb(divisor) == 0
(1)    1239 : 97                         ghi     R7
(1)    123A : B9                         phi     R9
(1)    123B : 87                         glo     R7
(1)    123C : A9                         plo     R9              ; R9=dividend
(1)    123D : F8 00                      ldi     0
(1)    123F : B7                         phi     R7
(1)    1240 : A7                         plo     R7              ; R7=quotient
(1)    1241 : 30 4F                      br      udiv16_enter_loop
(1)    1243 :                    udiv16_loop:
(1)    1243 : 98                         ghi     R8
(1)    1244 : F6                         shr
(1)    1245 : B8                         phi     R8
(1)    1246 : 88                         glo     R8
(1)    1247 : 76                         shrc
(1)    1248 : A8                         plo     R8              ; divisor >>= 1
(1)    1249 : 87                         glo     R7
(1)    124A : FE                         shl
(1)    124B : A7                         plo     R7
(1)    124C : 97                         ghi     R7
(1)    124D : 7E                         shlc
(1)    124E : B7                         phi     R7              ; quotient <<= 1
(1)    124F :                    udiv16_enter_loop:
(1)    124F : 88                         glo     R8
(1)    1250 : 52                         str     R2
(1)    1251 : 89                         glo     R9
(1)    1252 : F7                         sm
(1)    1253 : A9                         plo     R9
(1)    1254 : 98                         ghi     R8
(1)    1255 : 52                         str     R2
(1)    1256 : 99                         ghi     R9
(1)    1257 : 77                         smb
(1)    1258 : B9                         phi     R9              ; dividend-=divisor
(1)    1259 : 3B 5E                      bm      udiv16_readd    ; branch if dividend < 0
(1)    125B : 17                         inc     R7              ; quotient += 1
(1)    125C : 30 68                      br      udiv16_next
(1)    125E :                    udiv16_readd:
(1)    125E : 88                         glo     R8
(1)    125F : 52                         str     R2
(1)    1260 : 89                         glo     R9
(1)    1261 : F4                         add
(1)    1262 : A9                         plo     R9
(1)    1263 : 98                         ghi     R8
(1)    1264 : 52                         str     R2
(1)    1265 : 99                         ghi     R9
(1)    1266 : 74                         adc
(1)    1267 : B9                         phi     R9              ; dividend+=divisor
(1)    1268 :                    udiv16_next:
(1)    1268 : 2F                         dec     R15
(1)    1269 : 8F                         glo     R15
(1)    126A : 3A 43                      bnz     udiv16_loop     ; while bits != 0
(1)    126C : 99                         ghi     R9
(1)    126D : B8                         phi     R8
(1)    126E : 89                         glo     R9
(1)    126F : A8                         plo     R8              ; R8=remainder
(1)    1270 : 60                         irx
(1)    1271 : 68 69                      rlxa    R9              ; restore R9
(1)    1273 : 22                         dec     R2
(1)    1274 : 68 94                      sret    R4
(1)    1276 :
(1)    1276 :                    ;;; Signed division: dividend / divisor = quotient ... remainder
(1)    1276 :                    ;;; @param R7 dividend
(1)    1276 :                    ;;; @param R8 divisor
(1)    1276 :                    ;;; @return R7 quotient
(1)    1276 :                    ;;; @return R8 remainder
(1)    1276 :                    ;;;   SCAL R4, duvsi2
(1)    1276 :                    ;;;   SEP R5
(1)    1276 :                    ;;;   DC  A(div16)
(1)    1276 :                    ;;; @clobber R15
(1)    1276 :                    div16:
(1)    1276 : 98                         ghi     R8
(1)    1277 : 52                         str     R2
(1)    1278 : 97                         ghi     R7
(1)    1279 : F3                         xor
(1)    127A : 73                         stxd                    ; push sign
(1)    127B : 98                         ghi     R8
(1)    127C : FA 80                      ani     X'80'
(1)    127E : 32 89                      bz      div16_dividend
(1)    1280 : 98                         ghi     R8
(1)    1281 : FB FF                      xri     X'FF'
(1)    1283 : B8                         phi     R8
(1)    1284 : 88                         glo     R8
(1)    1285 : FB FF                      xri     X'FF'
(1)    1287 : A8                         plo     R8
(1)    1288 : 18                         inc     R8              ; negate divisor
(1)    1289 :                    div16_dividend:
(1)    1289 : 97                         ghi     R7              ; R7=dividend
(1)    128A : FA 80                      ani     X'80'
(1)    128C : 32 97                      bz      div16_divide
(1)    128E : 97                         ghi     R7
(1)    128F : FB FF                      xri     X'FF'
(1)    1291 : B7                         phi     R7
(1)    1292 : 87                         glo     R7
(1)    1293 : FB FF                      xri     X'FF'
(1)    1295 : A7                         plo     R7
(1)    1296 : 17                         inc     R7              ; negate dividend
(1)    1297 :                    div16_divide:
(1)    1297 : 68 84 12 1E                scal    R4, udiv16
(1)    129B : 60                         irx
(1)    129C : F0                         ldx                     ; pop sign
(1)    129D : FA 80                      ani     X'80'
(1)    129F : 32 AA                      bz      div16_return
(1)    12A1 : 97                         ghi     R7
(1)    12A2 : FB FF                      xri     X'FF'
(1)    12A4 : B7                         phi     R7
(1)    12A5 : 87                         glo     R7
(1)    12A6 : FB FF                      xri     X'FF'
(1)    12A8 : A7                         plo     R7
(1)    12A9 : 17                         inc     R7              ; negate quotient
(1)    12AA :                    div16_return:
(1)    12AA : 68 94                      sret    R4
       12AC :                            include "mandelbrot.inc"
(1)    12AC :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    12AC :                    ;;; Mandelbrot variables
(1)    12AC : =32                cF:     equ     50
(1)    12AC : 00 00              vC:     dc      A(0)
(1)    12AE : 00 00              vD:     dc      A(0)
(1)    12B0 : 00 00              vA:     dc      A(0)
(1)    12B2 : 00 00              vB:     dc      A(0)
(1)    12B4 : 00 00              vP:     dc      A(0)
(1)    12B6 : 00 00              vQ:     dc      A(0)
(1)    12B8 : 00 00              vS:     dc      A(0)
(1)    12BA : =A                 rT      =       R10
(1)    12BA : =E                 rTMP    =       R14
(1)    12BA : =B                 rY      =       R11
(1)    12BA : =C                 rX      =       R12
(1)    12BA : =D                 rI      =       R13
(1)    12BA :
(1)    12BA :                    ;;; Print variable: "D=variable "
(1)    12BA :                    ;;; @param D variable letter
(1)    12BA :                    ;;; @param R7 variable
(1)    12BA :                    ;;;   SCAL R4, print
(1)    12BA :                    ;;; @clobber R7 R15
(1)    12BA :                    print:
(1)    12BA : 68 84 10 37                scal    R4, putchar     ; print variable letter
(1)    12BE : F8 3D                      ldi     T'='
(1)    12C0 : 68 84 10 37                scal    R4, putchar     ; '='
(1)    12C4 : 68 84 11 62                scal    R4, print_int16
(1)    12C8 : C0 10 65                   br      putspace
(1)    12CB :
(1)    12CB :                    mandelbrot:
(1)    12CB : 68 CB FF F4                rldi    rY, -12         ; Y=-12
(1)    12CF :                    loop_y:
(1)    12CF : 68 CC FF CF                rldi    rX, -49         ; X=-49
(1)    12D3 :                    loop_x:
(1)    12D3 : 9C                         ghi     rX
(1)    12D4 : B7                         phi     R7
(1)    12D5 : 8C                         glo     rX
(1)    12D6 : A7                         plo     R7              ; R7=X
(1)    12D7 : 68 C8 00 E5                rldi    R8, 229
(1)    12DB : 68 84 11 E7                scal    R4, mul16
(1)    12DF : 68 C8 00 64                rldi    R8, 100
(1)    12E3 : 68 84 12 76                scal    R4, div16
(1)    12E7 : 68 84 11 86                scal    R4, store_R7
(1)    12EB : 12 AC                      dc      A(vC)           ; C=X*229/100
(1)    12ED : 68 84 11 86                scal    R4, store_R7
(1)    12F1 : 12 B0                      dc      A(vA)           ; A=C
(1)    12F3 : 9B                         ghi     rY
(1)    12F4 : B7                         phi     R7
(1)    12F5 : 8B                         glo     rY
(1)    12F6 : A7                         plo     R7              ; R7=Y
(1)    12F7 : 68 C8 01 A0                rldi    R8, 416
(1)    12FB : 68 84 11 E7                scal    R4, mul16
(1)    12FF : 68 C8 00 64                rldi    R8, 100
(1)    1303 : 68 84 12 76                scal    R4, div16
(1)    1307 : 68 84 11 86                scal    R4, store_R7
(1)    130B : 12 AE                      dc      A(vD)           ; D=Y*416/100
(1)    130D : 68 84 11 86                scal    R4, store_R7
(1)    1311 : 12 B2                      dc      A(vB)           ; B=D
(1)    1313 : 68 CD 00 00                rldi    rI, 0           ; I=0
(1)    1317 :
(1)    1317 :                            ;; ghi     rY
(1)    1317 :                            ;; phi     R7
(1)    1317 :                            ;; glo     rY
(1)    1317 :                            ;; plo     R7              ; R7=Y
(1)    1317 :                            ;; ldi     T'Y'
(1)    1317 :                            ;; scal    R4, print
(1)    1317 :                            ;; ghi     rX
(1)    1317 :                            ;; phi     R7
(1)    1317 :                            ;; glo     rX
(1)    1317 :                            ;; plo     R7              ; R7=X
(1)    1317 :                            ;; ldi     T'X'
(1)    1317 :                            ;; scal    R4, print
(1)    1317 :                            ;; scal    R4, load_R7
(1)    1317 :                            ;; dc      A(vC)
(1)    1317 :                            ;; ldi     T'C'
(1)    1317 :                            ;; scal    R4, print
(1)    1317 :                            ;; scal    R4, load_R7
(1)    1317 :                            ;; dc      A(vD)
(1)    1317 :                            ;; ldi     T'D'
(1)    1317 :                            ;; scal    R4, print
(1)    1317 :                            ;; scal    R4, newline
(1)    1317 :
(1)    1317 :                    loop_i:
(1)    1317 : 68 84 11 90                scal    R4, load_R7
(1)    131B : 12 B2                      dc      A(vB)
(1)    131D : 68 C8 00 32                rldi    R8, cF
(1)    1321 : 68 84 12 76                scal    R4, div16
(1)    1325 : 68 84 11 86                scal    R4, store_R7
(1)    1329 : 12 B6                      dc      A(vQ)           ; Q=B/F
(1)    132B : 68 C8 FF CE                rldi    R8, -cF
(1)    132F : 68 84 11 E7                scal    R4, mul16       ; -Q*F
(1)    1333 : 68 84 11 99                scal    R4, load_R8
(1)    1337 : 12 B2                      dc      A(vB)
(1)    1339 : 68 84 11 A2                scal    R4, add16       ; B-Q*F
(1)    133D : 68 84 11 86                scal    R4, store_R7
(1)    1341 : 12 B8                      dc      A(vS)           ; S=B-Q*F
(1)    1343 : 68 84 11 90                scal    R4, load_R7
(1)    1347 : 12 B2                      dc      A(vB)
(1)    1349 : 97                         ghi     R7
(1)    134A : B8                         phi     R8
(1)    134B : 87                         glo     R7
(1)    134C : A8                         plo     R8
(1)    134D : 68 84 11 E7                scal    R4, mul16       ; B*B
(1)    1351 : 68 A7                      rsxd    R7              ; push B*B
(1)    1353 : 68 84 11 90                scal    R4, load_R7
(1)    1357 : 12 B0                      dc      A(vA)
(1)    1359 : 97                         ghi     R7
(1)    135A : B8                         phi     R8
(1)    135B : 87                         glo     R7
(1)    135C : A8                         plo     R8
(1)    135D : 68 84 11 E7                scal    R4, mul16       ; A*A
(1)    1361 : 60                         irx
(1)    1362 : 68 68                      rlxa    R8              ; pop B*B
(1)    1364 : 22                         dec     R2
(1)    1365 : 68 84 11 AE                scal    R4, sub16       ; A*A-B*B
(1)    1369 : 68 C8 00 32                rldi    R8, cF
(1)    136D : 68 84 12 76                scal    R4, div16       ; (A*A-B*B)/F
(1)    1371 : 68 84 11 99                scal    R4, load_R8
(1)    1375 : 12 AC                      dc      A(vC)
(1)    1377 : 68 84 11 A2                scal    R4, add16       ; (A*A-B*B)/F+C
(1)    137B : 97                         ghi     R7
(1)    137C : BE                         phi     rTMP
(1)    137D : 87                         glo     R7
(1)    137E : AE                         plo     rTMP            ; tmp=(A*A-B*B)/F+C
(1)    137F : 68 84 11 90                scal    R4, load_R7
(1)    1383 : 12 B0                      dc      A(vA)
(1)    1385 : 68 84 11 99                scal    R4, load_R8
(1)    1389 : 12 B8                      dc      A(vS)
(1)    138B : 68 84 11 E7                scal    R4, mul16       ; A*S
(1)    138F : 68 C8 00 32                rldi    R8, cF
(1)    1393 : 68 84 12 76                scal    R4, div16       ; A*S/F
(1)    1397 : 68 A7                      rsxd    R7              ; push A*S/F
(1)    1399 : 68 84 11 90                scal    R4, load_R7
(1)    139D : 12 B0                      dc      A(vA)
(1)    139F : 68 84 11 99                scal    R4, load_R8
(1)    13A3 : 12 B6                      dc      A(vQ)
(1)    13A5 : 68 84 11 E7                scal    R4, mul16       ; A*Q
(1)    13A9 : 60                         irx
(1)    13AA : 68 68                      rlxa    R8              ; pop A*S/F
(1)    13AC : 22                         dec     R2
(1)    13AD : 68 84 11 A2                scal    R4, add16       ; A*Q+A*S/F
(1)    13B1 : 87                         glo     R7
(1)    13B2 : FE                         shl
(1)    13B3 : A7                         plo     R7
(1)    13B4 : 97                         ghi     R7
(1)    13B5 : 7E                         shlc
(1)    13B6 : B7                         phi     R7              ; 2*(A*Q+A*S/F)
(1)    13B7 : 68 84 11 99                scal    R4, load_R8
(1)    13BB : 12 AE                      dc      A(vD)
(1)    13BD : 68 84 11 A2                scal    R4, add16       ; 2*(A*Q+A*S/F)+D
(1)    13C1 : 68 84 11 86                scal    R4, store_R7
(1)    13C5 : 12 B2                      dc      A(vB)           ; B=2*(A*Q+A*S/F)+D
(1)    13C7 : 9E                         ghi     rTMP
(1)    13C8 : B7                         phi     R7
(1)    13C9 : 8E                         glo     rTMP
(1)    13CA : A7                         plo     R7
(1)    13CB : 68 84 11 86                scal    R4, store_R7
(1)    13CF : 12 B0                      dc      A(vA)           ; A=tmp
(1)    13D1 : 68 C8 00 32                rldi    R8, cF
(1)    13D5 : 68 84 12 76                scal    R4, div16       ; A/F
(1)    13D9 : 68 84 11 86                scal    R4, store_R7
(1)    13DD : 12 B4                      dc      A(vP)           ; P=A/F
(1)    13DF : 97                         ghi     R7
(1)    13E0 : B8                         phi     R8
(1)    13E1 : 87                         glo     R7
(1)    13E2 : A8                         plo     R8
(1)    13E3 : 68 84 11 E7                scal    R4, mul16       ; P*P
(1)    13E7 : 68 A7                      rsxd    R7              ; push P*P
(1)    13E9 : 68 84 11 90                scal    R4, load_R7
(1)    13ED : 12 B2                      dc      A(vB)
(1)    13EF : 68 C8 00 32                rldi    R8, cF
(1)    13F3 : 68 84 12 76                scal    R4, div16       ; B/F
(1)    13F7 : 68 84 11 86                scal    R4, store_R7
(1)    13FB : 12 B6                      dc      A(vQ)           ; Q=B/F
(1)    13FD : 97                         ghi     R7
(1)    13FE : B8                         phi     R8
(1)    13FF : 87                         glo     R7
(1)    1400 : A8                         plo     R8
(1)    1401 : 68 84 11 E7                scal    R4, mul16       ; Q*Q
(1)    1405 : 60                         irx
(1)    1406 : 68 68                      rlxa    R8              ; pop P*P
(1)    1408 : 22                         dec     R2
(1)    1409 : 68 84 11 A2                scal    R4, add16       ; P*P+Q*Q
(1)    140D : 97                         ghi     R7
(1)    140E : BA                         phi     rT
(1)    140F : 87                         glo     R7
(1)    1410 : AA                         plo     rT              ; T=P*P+Q*Q
(1)    1411 :
(1)    1411 :                            ;; scal    R4, putspace
(1)    1411 :                            ;; scal    R4, load_R7
(1)    1411 :                            ;; dc      A(vI)
(1)    1411 :                            ;; ldi     T'I'
(1)    1411 :                            ;; scal    R4, print
(1)    1411 :                            ;; scal    R4, load_R7
(1)    1411 :                            ;; dc      A(vA)
(1)    1411 :                            ;; ldi     T'A'
(1)    1411 :                            ;; scal    R4, print
(1)    1411 :                            ;; scal    R4, load_R7
(1)    1411 :                            ;; dc      A(vB)
(1)    1411 :                            ;; ldi     T'B'
(1)    1411 :                            ;; scal    R4, print
(1)    1411 :                            ;; scal    R4, load_R7
(1)    1411 :                            ;; dc      A(vP)
(1)    1411 :                            ;; ldi     T'P'
(1)    1411 :                            ;; scal    R4, print
(1)    1411 :                            ;; scal    R4, load_R7
(1)    1411 :                            ;; dc      A(vQ)
(1)    1411 :                            ;; ldi     T'Q'
(1)    1411 :                            ;; scal    R4, print
(1)    1411 :                            ;; ghi     rT
(1)    1411 :                            ;; phi     R7
(1)    1411 :                            ;; glo     rT
(1)    1411 :                            ;; plo     R7              ; R7=T
(1)    1411 :                            ;; ldi     T'T'
(1)    1411 :                            ;; scal    R4, newline
(1)    1411 :
(1)    1411 : 9A                         ghi     rT
(1)    1412 : 3A 24                      bnz     print_i
(1)    1414 : 8A                         glo     rT
(1)    1415 : FD 04                      sdi     4
(1)    1417 : 3B 24                      bm      print_i         ; if 4<T
(1)    1419 : 1D                         inc     rI              ; I+=1
(1)    141A : 8D                         glo     rI              ; A.0(I)
(1)    141B : FF 10                      smi     16
(1)    141D : CB 13 17                   bm      loop_i          ; if I<16
(1)    1420 : F8 20                      ldi     T' '
(1)    1422 : 30 2B                      br      print_char
(1)    1424 :                    print_i:
(1)    1424 : 8D                         glo     rI
(1)    1425 : 68 FC 90                   dadi    x'90'
(1)    1428 : 68 7C 40                   daci    x'40'
(1)    142B :                    print_char:
(1)    142B : 68 84 10 37                scal    R4, putchar
(1)    142F :
(1)    142F :                            ;; stxd                    ; save char
(1)    142F :                            ;; ldi     T'@'
(1)    142F :                            ;; scal    R4, putchar
(1)    142F :                            ;; ldi     T'='
(1)    142F :                            ;; scal    R4, putchar
(1)    142F :                            ;; inc     R2
(1)    142F :                            ;; ldn     R2              ; restore char
(1)    142F :                            ;; scal    R4, putchar
(1)    142F :                            ;; scal    R4, newline
(1)    142F :
(1)    142F : 68 84 10 27                scal    R4, getchar
(1)    1433 : 32 39                      bz      next_x
(1)    1435 : 87                         glo     R7
(1)    1436 : 3A 39                      bnz     next_x
(1)    1438 : 00                         idl                     ; break
(1)    1439 :                    next_x:
(1)    1439 : 1C                         inc     rX              ; X+=1
(1)    143A : 9C                         ghi     rX              ; A.1(X)
(1)    143B : CA 12 D3                   bnz     loop_x          ; if X<0
(1)    143E : 8C                         glo     rX              ; A.0(X)
(1)    143F : FF 1E                      smi     30
(1)    1441 : CB 12 D3                   bl      loop_x          ; if X<30
(1)    1444 : 68 84 10 5B                scal    R4, newline
(1)    1448 : 1B                         inc     rY              ; Y+=1
(1)    1449 : 9B                         ghi     rY              ; A.1(Y)
(1)    144A : CA 12 CF                   bnz     loop_y          ; if Y<0
(1)    144D : 8B                         glo     rY              ; A.0(Y)
(1)    144E : FF 0D                      smi     13
(1)    1450 : CB 12 CF                   bl      loop_y          ; if Y<13
(1)    1453 : 68 94                      sret    R4
       1455 :
       1455 :                            end
