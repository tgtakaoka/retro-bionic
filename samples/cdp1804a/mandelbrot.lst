          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     1804A
          0 :                            option  "smart-branch", "on"
          0 :                            include "cdp1802.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; CDP1802 register alias
(1)       0 : =0                 R0:     equ     0
(1)       0 : =1                 R1:     equ     1
(1)       0 : =2                 R2:     equ     2
(1)       0 : =3                 R3:     equ     3
(1)       0 : =4                 R4:     equ     4
(1)       0 : =5                 R5:     equ     5
(1)       0 : =6                 R6:     equ     6
(1)       0 : =7                 R7:     equ     7
(1)       0 : =8                 R8:     equ     8
(1)       0 : =9                 R9:     equ     9
(1)       0 : =A                 R10:    equ     10
(1)       0 : =B                 R11:    equ     11
(1)       0 : =C                 R12:    equ     12
(1)       0 : =D                 R13:    equ     13
(1)       0 : =E                 R14:    equ     14
(1)       0 : =F                 R15:    equ     15
(1)       0 :
(1)       0 :                    ;;; Transfer locations
(1)       0 : =0                 ORG_RESET:      equ     0000H   ; Reset transfer location
          0 :
          0 :                            org     ORG_RESET
          0 : 71                         dis                     ; disable interrupt
          1 : 00                         dc      X'00'           ; X:P=0:0
          2 : 30 04                      br      scrt_init
          4 :                            include "scrt.inc"
(1)       4 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       4 :
(1)       4 :                    ;;; Standard Call and Return Technique
(1)       4 :                    ;;; R0: DMA pointer
(1)       4 :                    ;;; R1: Program counter for Interrupt routine
(1)       4 :                    ;;; R2: Stack pointer
(1)       4 :                    ;;; R3: Program counter
(1)       4 :                    ;;; R4: Link register, pointer to the return location and arguments
(1)       4 :                    ;;;     passed by the calling program
(1)       4 :
(1)       4 :                    ;;; Call subroutine
(1)       4 :                    ;;;   SCAL R4, subroutine
(1)       4 :                    ;;;   DC   arguments...
(1)       4 :                    ;;; Subroutine return
(1)       4 :                    ;;;   SRET R4
(1)       4 :                    ;;; Return from interrupt
(1)       4 :                    ;;;   SEP R1
(1)       4 :
(1)       4 :                    ;;; Initialize for SCRT, P=0
(1)       4 :                    ;;; @param P!=3
(1)       4 :                    ;;; @param stack top address of stack
(1)       4 :                    ;;; @param main start address of main routine
(1)       4 :                    ;;; @return P=3
(1)       4 :                    ;;; @return R1=scrt_isr
(1)       4 :                    ;;; @return R2=stack
(1)       4 :                    ;;; @return R3=main
(1)       4 :                    ;;; @clobber D, R15
(1)       4 :                    scrt_init:
(1)       4 : 68 C3 00 09                rldi    R3, scrt_start
(1)       8 : D3                         sep     R3              ; P=3
(1)       9 :                    scrt_start:
(1)       9 : 68 C1 00 1E                rldi    R1, scrt_isr    ; setup interrupt
(1)       D : E2                         sex     R2
(1)       E : 68 C2 0F FF                rldi    R2, stack       ; setup stack
(1)      12 : C0 10 00                   br      main            ; goto main with P=3
(1)      15 :
(1)      15 :                    ;;; Interrupt exit entry P=1
(1)      15 :                    ;;;  (Come here by SEP R1)
(1)      15 :                    scrt_isr_exit:
(1)      15 : 60                         irx
(1)      16 : 68 63                      rlxa    R3              ; pop program counter R3
(1)      18 : 68 6F                      rlxa    R15             ; pop scratch pad register R15
(1)      1A : 72                         ldxa                    ; pop DF into D:MSB
(1)      1B : FE                         shl                     ; restore DF
(1)      1C : 72                         ldxa                    ; pop D
(1)      1D : 70                         ret                     ; restore X,P IE=1
(1)      1E :                            ;; R1 points scrt_isr
(1)      1E :                    ;;; CDP1802 interrupt entry, X=2, P=1, IE=0
(1)      1E :                    ;;; @unchanged D, DF, X, P, R3, R15
(1)      1E :                    scrt_isr:
(1)      1E :                            ;; R2[0] must be preserved because it may be in the pop process
(1)      1E : 22                         dec     R2
(1)      1F : 78                         sav                     ; push X,P
(1)      20 : 22                         dec     R2
(1)      21 : 73                         stxd                    ; push D
(1)      22 : 76                         shrc                    ; MSB of D=DF
(1)      23 : 73                         stxd                    ; push DF
(1)      24 : 68 AF                      rsxd    R15             ; push scratch pad register R15
(1)      26 : 68 A3                      rsxd    R3              ; push program counter R3
(1)      28 : 68 C3 10 69                rldi    R3, isr
(1)      2C : D3                         sep     R3              ; call interrupt service routine with P=3
(1)      2D : 30 15                      br      scrt_isr_exit   ; return from isr by SEP R1
         2F :
         2F :                    ;;; MC6850 Asynchronous Communication Interface Adapter
         2F : =DF00              ACIA:   equ     X'0DF00'
         2F :                            include "mc6850.inc"
(1)      2F :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)      2F :
(1)      2F :                    ;;; MC6850
(1)      2F :                    ;;; Asynchronous Communication Interface Adapter
(1)      2F :
(1)      2F :                    ;;; Control register
(1)      2F : =DF00              ACIA_control:   equ     ACIA+0
(1)      2F :                            ;; Counter Divider Select Bits
(1)      2F : =3                 CDS_gm:         equ     11b    ; Group mask
(1)      2F : =0                 CDS_DIV1_gc:    equ     00000000B ; /1
(1)      2F : =1                 CDS_DIV16_gc:   equ     00000001B ; /16
(1)      2F : =2                 CDS_DIV64_gc:   equ     00000010B ; /64
(1)      2F : =3                 CDS_RESET_gc:   equ     00000011B ; Master Reset
(1)      2F :                            ;; Word Select Bits
(1)      2F : =1C                WSB_gm:         equ     00011100B ; Group mask
(1)      2F : =0                 WSB_7E2_gc:     equ     00000000B ; 7 Bits + Even Parity + 2 Stop Bits
(1)      2F : =4                 WSB_7O2_gc:     equ     00000100B ; 7 bits + Odd Parity  + 2 Stop Bits
(1)      2F : =8                 WSB_7E1_gc:     equ     00001000B ; 7 bits + Even Parity + 1 Stop Bits
(1)      2F : =C                 WSB_7O1_gc:     equ     00001100B ; 7 bits + Odd Parity  + 1 Stop Bits
(1)      2F : =10                WSB_8N2_gc:     equ     00010000B ; 8 bits + No Parity   + 2 Stop Bits
(1)      2F : =14                WSB_8N1_gc:     equ     00010100B ; 8 bits + No Parity   + 1 Stop Bits
(1)      2F : =18                WSB_8E1_gc:     equ     00011000B ; 8 bits + Even Parity + 1 Stop Bits
(1)      2F : =1C                WSB_8O1_gc:     equ     00011100B ; 8 bits + Odd Parity  + 1 Stop Bits
(1)      2F :                            ;; Transmit Control Bits
(1)      2F : =60                TCB_gm:         equ     01100000B ; Group mask
(1)      2F : =0                 TCB_DI_gc:      equ     00000000B ; RTS=Low,  Tx Interrupt Disabled
(1)      2F : =20                TCB_EI_gc:      equ     00100000B ; RTS=Low,  Tx Interrupt Enabled
(1)      2F : =40                TCB_RTS_gc:     equ     01000000B ; RTS=High, Tx Interrupt Disabled
(1)      2F : =60                TCB_BREAK_gc:   equ     01100000B ; RTS=Low,  Tx Interrupt Disabled
(1)      2F :                                                      ; Transmit Break Level
(1)      2F : =80                RIEB_bm:        equ     10000000B ; Receive Interrupt Enable Bit mask
(1)      2F :
(1)      2F :                    ;;; Status register
(1)      2F : =DF00              ACIA_status:    equ     ACIA+0
(1)      2F : =1                 RDRF_bm:        equ     00000001B ; Receive Data Register Full
(1)      2F : =2                 TDRE_bm:        equ     00000010B ; Transmit Data Register Empty
(1)      2F : =4                 DCDF_bm:        equ     00000100B ; Data Carrier Detect Flag
(1)      2F : =8                 CTSF_bm:        equ     00001000B ; Clear To Send Flag
(1)      2F : =10                FERR_bm:        equ     00010000B ; Frame Error Flag
(1)      2F : =20                OVRN_bm:        equ     00100000B ; Receiver Overrun Flag
(1)      2F : =40                PERR_bm:        equ     01000000B ; Parity Error Flag
(1)      2F : =80                IRQF_bm:        equ     10000000B ; Interrupt Request Flag
(1)      2F :
(1)      2F :                    ;;; Data register
(1)      2F : =DF01              ACIA_data:      equ     ACIA+1          ; Data register
         2F :
       2000 :                            org     X'2000'
       2000 :
       2000 : =80                rx_queue_size:  equ     128
       2000 : =80                tx_queue_size:  equ     128
       2000 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
       2000 : =B4                RX_INT_TX_INT:  equ     WSB_8N1_gc|RIEB_bm|TCB_EI_gc
       2000 :
       2000 :                    rx_queue:
       2080 :                            org     *+rx_queue_size
       2080 :                    tx_queue:
       2100 :                            org     *+tx_queue_size
       2100 :
       2100 : =FFF               stack:  equ     X'1000'-1
       2100 :
       1000 :                            org     X'1000'
       1000 :                    main:
       1000 : 68 84 10 AB                scal    R4, queue_init   ; call queue_init
       1004 : 20 00                      dc      A(rx_queue)
       1006 : 80                         dc      rx_queue_size
       1007 : 68 84 10 AB                scal    R4, queue_init   ; call queue_init
       100B : 20 80                      dc      A(tx_queue)
       100D : 80                         dc      tx_queue_size
       100E :                            ;; initialize ACIA
       100E : 68 C8 DF 00                rldi    R8,ACIA
       1012 : F8 03                      ldi     CDS_RESET_gc    ; Master reset
       1014 : 58                         str     R8              ; ACIA_control
       1015 : F8 94                      ldi     RX_INT_TX_NO
       1017 : 58                         str     R8              ; ACIA_control
       1018 : E3                         sex     R3
       1019 : 70                         ret
       101A : 33                         dc      X'33'           ; enable interrupt
       101B : E2                         sex     R2
       101C :
       101C :                    loop:
       101C : 68 84 13 13                scal    R4, mandelbrot
       1020 : 68 84 10 5B                scal    R4, newline
       1024 : 30 1C                      br      loop
       1026 :
       1026 :                    ;;; Get character
       1026 :                    ;;; @return R7.0 char
       1026 :                    ;;; @return A 0 if no char received
       1026 :                    getchar:
       1026 : E3                         sex     R3
       1027 : 71                         dis                     ; disable interrupt
       1028 : 33                         dc      X'33'
       1029 : E2                         sex     R2
       102A : 68 84 11 03                scal    R4, queue_remove
       102E : 20 00                      dc      A(rx_queue)
       1030 : E3                         sex     R3
       1031 : 70                         ret                     ; enable interrupt
       1032 : 33                         dc      X'33'
       1033 : E2                         sex     R2
       1034 : 68 94                      sret    R4
       1036 :
       1036 :                    ;;; Put character
       1036 :                    ;;; @param D char
       1036 :                    ;;; @unchanged D
       1036 :                    ;;; @clobber R15
       1036 :                    putchar:
       1036 : 73                         stxd                    ; save D
       1037 : AF                         plo     R15             ; save D to scratch pad
       1038 : 87                         glo     R7              ; save R7.0
       1039 : 73                         stxd
       103A : 8F                         glo     R15             ; restore D
       103B : A7                         plo     R7              ; R7.0=char
       103C :                    putchar_loop:
       103C : E3                         sex     R3
       103D : 71                         dis                     ; disable interrupt
       103E : 33                         dc      X'33'
       103F : E2                         sex     R2
       1040 : 68 84 10 CB                scal    R4, queue_add
       1044 : 20 80                      dc      A(tx_queue)
       1046 : E3                         sex     R3
       1047 : 70                         ret                     ; enable interrupt
       1048 : 33                         dc      X'33'
       1049 : E2                         sex     R2
       104A : 32 3C                      bz      putchar_loop    ; retry if queue is full
       104C : F8 DF                      ldi     A.1(ACIA)
       104E : BF                         phi     R15
       104F : F8 00                      ldi     A.0(ACIA)
       1051 : AF                         plo     R15
       1052 : F8 B4                      ldi     RX_INT_TX_INT   ; enable Tx interrupt
       1054 : 5F                         str     R15             ; ACIA_C
       1055 :                    putchar_exit:
       1055 : 60                         irx
       1056 : 72                         ldxa                    ; restore R7.0
       1057 : A7                         plo     R7
       1058 : F0                         ldx                     ; restore D
       1059 : 68 94                      sret    R4
       105B :
       105B :                    ;;; Print out newline
       105B :                    ;;; @clobber D R15.0
       105B :                    newline:
       105B : F8 0D                      ldi     X'0D'
       105D : 68 84 10 36                scal    R4, putchar
       1061 : F8 0A                      ldi     X'0A'
       1063 : 30 36                      br      putchar
       1065 :
       1065 :                    ;;; Print out space
       1065 :                    ;;; @clobber D R15.0
       1065 :                    putspace:
       1065 : F8 20                      ldi     T' '
       1067 : 30 36                      br      putchar
       1069 :
       1069 :                    ;;; From scrt_isr, X=2, P=3
       1069 :                    isr:
       1069 : 88                         glo     R8              ; save R8
       106A : 73                         stxd
       106B : 98                         ghi     R8
       106C : 73                         stxd
       106D : 87                         glo     R7              ; save R7
       106E : 73                         stxd
       106F : 97                         ghi     R7
       1070 : 73                         stxd
       1071 :                            ;;
       1071 : F8 DF                      ldi     A.1(ACIA)
       1073 : B8                         phi     R8
       1074 : F8 00                      ldi     A.0(ACIA)
       1076 : A8                         plo     R8              ; R8=ACIA
       1077 : 08                         ldn     R8              ; ACIA_status
       1078 : FA 80                      ani     IRQF_bm
       107A : 32 A1                      bz      isr_exit
       107C : 08                         ldn     R8              ; ACIA_status
       107D : FA 01                      ani     RDRF_bm
       107F : 32 8B                      bz      isr_send        ; no data is received
       1081 : 18                         inc     R8
       1082 : 08                         ldn     R8              ; ACIA_data
       1083 : 28                         dec     R8
       1084 : A7                         plo     R7
       1085 : 68 84 10 CB                scal    R4, queue_add
       1089 : 20 00                      dc      A(rx_queue)
       108B :                    isr_send:
       108B : 08                         ldn     R8              ; ACIA_status
       108C : FA 02                      ani     TDRE_bm
       108E : 32 A1                      bz      isr_exit
       1090 : 68 84 11 03                scal    R4, queue_remove
       1094 : 20 80                      dc      A(tx_queue)
       1096 : 32 9E                      bz      isr_send_empty
       1098 : 87                         glo     R7
       1099 : 18                         inc     R8
       109A : 58                         str     R8              ; ACIA_D
       109B : 28                         dec     R8
       109C : 30 A1                      br      isr_exit
       109E :                    isr_send_empty:
       109E : F8 94                      ldi     RX_INT_TX_NO    ; disable Tx interrupt
       10A0 : 58                         str     R8              ; ACIA_C
       10A1 :                    isr_exit:
       10A1 : 60                         irx
       10A2 : 72                         ldxa                    ; restore R7
       10A3 : B7                         phi     R7
       10A4 : 72                         ldxa
       10A5 : A7                         plo     R7
       10A6 : 72                         ldxa                    ; restore R8
       10A7 : B8                         phi     R8
       10A8 : F0                         ldx
       10A9 : A8                         plo     R8
       10AA : D1                         sep     R1              ; return to scrt_isr
       10AB :
       10AB :                            include "queue.inc"
(1)    10AB :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    10AB :                    ;;; [queue] queue structure
(1)    10AB : =0                 queue_len:      equ     0       ; queue length
(1)    10AB : =1                 queue_size:     equ     1       ; buffer size
(1)    10AB : =2                 queue_put:      equ     2       ; queue put index
(1)    10AB : =3                 queue_get:      equ     3       ; queue get index
(1)    10AB : =4                 queue_buf:      equ     4       ; buffer start offset
(1)    10AB :
(1)    10AB :                    ;;; [queue] Initialize queue
(1)    10AB :                    ;;; @param R4+0 queue work space pointer
(1)    10AB :                    ;;; @param R4+2 queue work space size
(1)    10AB :                    ;;; @clobber D, R15
(1)    10AB :                    queue_init:
(1)    10AB : 68 AE                      rsxd    R14             ; save R14
(1)    10AD : E4                         sex     R4
(1)    10AE : 68 6F                      rlxa    R15             ; R15=queue space pointer
(1)    10B0 : F8 00                      ldi     0
(1)    10B2 : 5F                         str     R15             ; clear queue_len
(1)    10B3 : 1F                         inc     R15
(1)    10B4 : 44                         lda     R4              ; queue space size
(1)    10B5 : FF 04                      smi     queue_buf       ; calculate queue size
(1)    10B7 : 5F                         str     R15             ; store queue_size
(1)    10B8 : FC 02                      adi     2               ; for queue_put and queue_get
(1)    10BA : AE                         plo     R14             ; R14.0: byte counter
(1)    10BB : F8 00                      ldi     0
(1)    10BD : BE                         phi     R14
(1)    10BE :                    queue_init_clear:
(1)    10BE : 1F                         inc     R15
(1)    10BF : 5F                         str     R15             ; clear memory
(1)    10C0 : 68 2E 10 BE                dbnz    R14, queue_init_clear
(1)    10C4 : E2                         sex     R2
(1)    10C5 : 60                         irx
(1)    10C6 : 68 6E                      rlxa    R14             ; restore R14
(1)    10C8 : 22                         dec     R2
(1)    10C9 : 68 94                      sret    R4
(1)    10CB :
(1)    10CB :                    ;;; [queue] Add an element to queue
(1)    10CB :                    ;;; @param R4+0 queue work space pointer
(1)    10CB :                    ;;; @param R7.0 an element
(1)    10CB :                    ;;; @return D 0 if queue is full
(1)    10CB :                    queue_add:
(1)    10CB : 68 AE                      rsxd    R14             ; save R14
(1)    10CD : E4                         sex     R4
(1)    10CE : 68 6F                      rlxa    R15             ; R15=queue space pointer
(1)    10D0 : EF                         sex     R15
(1)    10D1 : 72                         ldxa                    ; load queue_len
(1)    10D2 : F3                         xor                     ; queue_len ^ queue_size
(1)    10D3 : 32 FA                      bz      queue_add_return ; branch if D=0
(1)    10D5 : 2F                         dec     R15
(1)    10D6 : 8F                         glo     R15
(1)    10D7 : FC 04                      adi     queue_buf
(1)    10D9 : AE                         plo     R14
(1)    10DA : 9F                         ghi     R15
(1)    10DB : 7C 00                      adci    0
(1)    10DD : BE                         phi     R14             ; R14=&queue_buf[0]
(1)    10DE : 0F                         ldn     R15
(1)    10DF : FC 01                      adi     1
(1)    10E1 : 5F                         str     R15             ; queue_len++
(1)    10E2 : 8E                         glo     R14
(1)    10E3 : 1F                         inc     R15
(1)    10E4 : 1F                         inc     R15
(1)    10E5 : EF                         sex     R15
(1)    10E6 : F4                         add                     ; add queue_put
(1)    10E7 : AE                         plo     R14
(1)    10E8 : 9E                         ghi     R14
(1)    10E9 : 7C 00                      adci    0
(1)    10EB : BE                         phi     R14             ; R14=&queue_buf[queue_put]
(1)    10EC : 87                         glo     R7              ; R7.0=an element
(1)    10ED : 5E                         str     R14             ; store an element
(1)    10EE : 0F                         ldn     R15             ; load queue_put
(1)    10EF : FC 01                      adi     1
(1)    10F1 : 5F                         str     R15             ; update queue_put
(1)    10F2 : 2F                         dec     R15
(1)    10F3 : F3                         xor                      ; queue_put ^ queue_size
(1)    10F4 : 3A FA                      bnz     queue_add_return ; branch if D!=0
(1)    10F6 : 1F                         inc     R15
(1)    10F7 : 5F                         str     R15             ; queue_put=0
(1)    10F8 : F8 01                      ldi     1
(1)    10FA :                    queue_add_return:
(1)    10FA : AF                         plo     R15             ; return flag
(1)    10FB : E2                         sex     R2
(1)    10FC : 60                         irx
(1)    10FD : 68 6E                      rlxa    R14             ; restore R14
(1)    10FF : 22                         dec     R2
(1)    1100 : 8F                         glo     R15
(1)    1101 : 68 94                      sret    R4
(1)    1103 :
(1)    1103 :                    ;;; [queue] Remove an element from queue
(1)    1103 :                    ;;; @param R4+0 queue work space pointer
(1)    1103 :                    ;;; @return R7.0 an element
(1)    1103 :                    ;;; @return D 0 if queue is empty
(1)    1103 :                    ;;; @clobber R15
(1)    1103 :                    queue_remove:
(1)    1103 : 68 AE                      rsxd    R14             ; save R14
(1)    1105 : E4                         sex     R4
(1)    1106 : 68 6F                      rlxa    R15                 ; R15=queue space pointer
(1)    1108 : 0F                         ldn     R15                 ; load queue_len
(1)    1109 : 32 31                      bz      queue_remove_return ; branch if D=0
(1)    110B : FF 01                      smi     1
(1)    110D : 5F                         str     R15             ; queue_len--
(1)    110E : 8F                         glo     R15
(1)    110F : FC 04                      adi     queue_buf
(1)    1111 : AE                         plo     R14
(1)    1112 : 9F                         ghi     R15
(1)    1113 : 7C 00                      adci    0
(1)    1115 : BE                         phi     R14             ; R14=&queue_buf[0]
(1)    1116 : 8E                         glo     R14
(1)    1117 : 1F                         inc     R15
(1)    1118 : 1F                         inc     R15
(1)    1119 : 1F                         inc     R15
(1)    111A : EF                         sex     R15
(1)    111B : F4                         add                     ; add queue_get
(1)    111C : AE                         plo     R14
(1)    111D : 9E                         ghi     R14
(1)    111E : 7C 00                      adci    0
(1)    1120 : BE                         phi     R14             ; R14=&queue_buf[queue_get]
(1)    1121 : 0E                         ldn     R14             ; load an alement
(1)    1122 : A7                         plo     R7              ; R7.0=an element
(1)    1123 : 0F                         ldn     R15             ; load queue_get
(1)    1124 : FC 01                      adi     1
(1)    1126 : 5F                         str     R15             ; update queue_get
(1)    1127 : 2F                         dec     R15
(1)    1128 : 2F                         dec     R15
(1)    1129 : F3                         xor                     ; queue_get ^ queue_size
(1)    112A : 3A 31                      bnz     queue_remove_return ; brnach if D!=0
(1)    112C : 1F                         inc     R15
(1)    112D : 1F                         inc     R15
(1)    112E : 5F                         str     R15             ; queue_get=0
(1)    112F : F8 01                      ldi     1
(1)    1131 :                    queue_remove_return:
(1)    1131 : AF                         plo     R15             ; return flag
(1)    1132 : E2                         sex     R2
(1)    1133 : 60                         irx
(1)    1134 : 68 6E                      rlxa    R14             ; restore R14
(1)    1136 : 22                         dec     R2
(1)    1137 : 8F                         glo     R15             ; return flag
(1)    1138 : 68 94                      sret    R4
       113A :                            include "arith.inc"
(1)    113A :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    113A :                            cpu     1804A
(1)    113A :
(1)    113A :                    ;;; Print unsigned 16-bit integer as decimal
(1)    113A :                    ;;; @param R7 value
(1)    113A :                    ;;; @clobber D R7 R8 R15
(1)    113A :                    print_uint16:
(1)    113A : 97                         ghi     R7
(1)    113B : 3A 40                      bnz     print_uint16_loop
(1)    113D : 87                         glo     R7
(1)    113E : 32 5A                      bz      print_uint16_zero
(1)    1140 :                    print_uint16_loop:
(1)    1140 : 97                         ghi     R7
(1)    1141 : 3A 48                      bnz     print_uint16_digit
(1)    1143 : 87                         glo     R7
(1)    1144 : 3A 48                      bnz     print_uint16_digit
(1)    1146 : 68 94                      sret    R4
(1)    1148 :                    print_uint16_digit:
(1)    1148 : F8 00                      ldi     0
(1)    114A : B8                         phi     R8
(1)    114B : F8 0A                      ldi     10
(1)    114D : A8                         plo     R8              ; divisor=10
(1)    114E : 68 84 12 5E                scal    R4, udiv16
(1)    1152 : 88                         glo     R8
(1)    1153 : 73                         stxd                    ; push reminder
(1)    1154 : 68 84 11 40                scal    R4, print_uint16_loop
(1)    1158 : 12                         inc     R2
(1)    1159 : 02                         ldn     R2              ; pop reminder
(1)    115A :                    print_uint16_zero:
(1)    115A : FC 30                      adi     T'0'
(1)    115C : C0 10 36                   br      putchar
(1)    115F :
(1)    115F :                    ;;; Print signed 16-bit integer as decimal
(1)    115F :                    ;;; @param R7 value
(1)    115F :                    ;;; @clobber D R15
(1)    115F :                    print_int16:
(1)    115F : 68 A8                      rsxd    R8              ; save R8
(1)    1161 : 68 A7                      rsxd    R7              ; save R7
(1)    1163 : 97                         ghi     R7
(1)    1164 : FA 80                      ani     X'80'
(1)    1166 : 32 77                      bz      print_int16_print
(1)    1168 : F8 2D                      ldi     T'-'
(1)    116A : 68 84 10 36                scal    R4, putchar      ; print '-'
(1)    116E : 97                         ghi     R7
(1)    116F : FB FF                      xri     X'FF'
(1)    1171 : B7                         phi     R7
(1)    1172 : 87                         glo     R7
(1)    1173 : FB FF                      xri     X'FF'
(1)    1175 : A7                         plo     R7
(1)    1176 : 17                         inc     R7              ; negate value
(1)    1177 :                    print_int16_print:
(1)    1177 : 68 84 11 3A                scal    R4, print_uint16
(1)    117B : 60                         irx
(1)    117C : 68 67                      rlxa    R7              ; restore R7
(1)    117E : 68 68                      rlxa    R8              ; restore R8
(1)    1180 : 22                         dec     R2
(1)    1181 : 68 94                      sret    R4
(1)    1183 :
(1)    1183 :                    ;;; Store R7 to variable
(1)    1183 :                    ;;;   SCAL R4, store_R7
(1)    1183 :                    ;;;   DC   A(variable)
(1)    1183 :                    ;;; @clobber D
(1)    1183 :                    store_R7:
(1)    1183 : 68 A8                      rsxd    R8              ; save R8
(1)    1185 : E4                         sex     R4
(1)    1186 : 68 68                      rlxa    R8              ; R8=&valiable
(1)    1188 : E8                         sex     R8
(1)    1189 : 60                         irx
(1)    118A : 68 A7                      rsxd    R7
(1)    118C : E2                         sex     R2
(1)    118D : 60                         irx
(1)    118E : 68 68                      rlxa    R8              ; restore R8
(1)    1190 : 22                         dec     R2
(1)    1191 : 68 94                      sret    R4
(1)    1193 :
(1)    1193 :                    ;;; Load variable to R7
(1)    1193 :                    ;;;   SCAL R4, load_R7
(1)    1193 :                    ;;;   DC   A(variable)
(1)    1193 :                    ;;; @return R7 variable
(1)    1193 :                    ;;; @clobber R15
(1)    1193 :                    load_R7:
(1)    1193 : E4                         sex     R4
(1)    1194 : 68 67                      rlxa    R7              ; R7=&variable
(1)    1196 : E7                         sex     R7
(1)    1197 : 68 67                      rlxa    R7
(1)    1199 : E2                         sex     R2
(1)    119A : 68 94                      sret    R4
(1)    119C :
(1)    119C :                    ;;; Load variable to R8
(1)    119C :                    ;;;   SCAL R4, load_R8
(1)    119C :                    ;;;   DC   A(variable)
(1)    119C :                    ;;; @clobber R15
(1)    119C :                    load_R8:
(1)    119C : E4                         sex     R4
(1)    119D : 68 68                      rlxa    R8              ; R8=&variable
(1)    119F : E8                         sex     R8
(1)    11A0 : 68 68                      rlxa    R8
(1)    11A2 : E2                         sex     R2
(1)    11A3 : 68 94                      sret    R4
(1)    11A5 :
(1)    11A5 :                    ;;; Increment variable
(1)    11A5 :                    ;;;   SCAL R4, inc16
(1)    11A5 :                    ;;;   DC   A(variable)
(1)    11A5 :                    ;;; @return R7 variable
(1)    11A5 :                    inc16:
(1)    11A5 : 68 A8                      rsxd    R8              ; save R8
(1)    11A7 : E4                         sex     R4
(1)    11A8 : 68 68                      rlxa    R8              ; R8=$variable
(1)    11AA : E8                         sex     R8
(1)    11AB : 68 67                      rlxa    R7              ; load R7
(1)    11AD : 17                         inc     R7
(1)    11AE : 28                         dec     R8
(1)    11AF : 68 A7                      rsxd    R7              ; save R7
(1)    11B1 : E2                         sex     R2
(1)    11B2 : 60                         irx
(1)    11B3 : 68 68                      rlxa    R8              ; restore R8
(1)    11B5 : 22                         dec     R2
(1)    11B6 : 68 94                      sret    R4
(1)    11B8 :
(1)    11B8 :                    ;;; Signed addition: summand += addend
(1)    11B8 :                    ;;; @param R7 summand
(1)    11B8 :                    ;;; @param R8 addend
(1)    11B8 :                    ;;; @return R7 summand + addend
(1)    11B8 :                    ;;;   SCAL R4, add16
(1)    11B8 :                    ;;; @clobber D
(1)    11B8 :                    add16:
(1)    11B8 : 88                         glo     R8
(1)    11B9 : 52                         str     R2
(1)    11BA : 87                         glo     R7
(1)    11BB : F4                         add
(1)    11BC : A7                         plo     R7
(1)    11BD : 98                         ghi     R8
(1)    11BE : 52                         str     R2
(1)    11BF : 97                         ghi     R7
(1)    11C0 : 74                         adc
(1)    11C1 : B7                         phi     R7
(1)    11C2 : 68 94                      sret    R4
(1)    11C4 :
(1)    11C4 :                    ;;; Singed subtraction: minuend -= subtrahend
(1)    11C4 :                    ;;;   SCAL R4, sub16
(1)    11C4 :                    ;;; @param R7 minuend
(1)    11C4 :                    ;;; @param R8 subtrahend
(1)    11C4 :                    ;;; @return R7 minuend - subtrahend
(1)    11C4 :                    ;;; @clobber D
(1)    11C4 :                    sub16:
(1)    11C4 : 88                         glo     R8
(1)    11C5 : 52                         str     R2
(1)    11C6 : 87                         glo     R7
(1)    11C7 : F7                         sm
(1)    11C8 : A7                         plo     R7
(1)    11C9 : 98                         ghi     R8
(1)    11CA : 52                         str     R2
(1)    11CB : 97                         ghi     R7
(1)    11CC : 77                         smb
(1)    11CD : B7                         phi     R7
(1)    11CE : 68 94                      sret    R4
(1)    11D0 :
(1)    11D0 :                    ;;; Signed comparison: minuend - subtrahend
(1)    11D0 :                    ;;; @param R7 minuend
(1)    11D0 :                    ;;; @param R8 subtrahend
(1)    11D0 :                    ;;; @return D=0 DF=1 (minuend==subtrahend); BZ
(1)    11D0 :                    ;;;         D=1 DF=1 (minuend>subtrahend);  BGE
(1)    11D0 :                    ;;;         D=1 DF=0 (minuend<subtrahend);  BL
(1)    11D0 :                    ;;; @clobber R7 R8
(1)    11D0 :                    ;;; result = minuend - subtrahend
(1)    11D0 :                    ;;; Z=(result.1 | result.0) == 0
(1)    11D0 :                    ;;; N=(result.1 & 0x80) != 0
(1)    11D0 :                    ;;; V=((minuend.1 ^ subtrahend.1) & (result.1 ^ minuend.1) & 0x80) != 0
(1)    11D0 :                    ;;; LT=N ^ V
(1)    11D0 :                    cmp16:
(1)    11D0 : 88                         glo     R8              ; D=subtrahend.0
(1)    11D1 : 52                         str     R2              ; stack top=subtrahend.0
(1)    11D2 : 87                         glo     R7              ; D=minuend.0
(1)    11D3 : F7                         sm                      ; D=minuend.0=subtrahend.0
(1)    11D4 : A7                         plo     R7              ; R7.0=result.0
(1)    11D5 : 98                         ghi     R8              ; D=subtrahend.1
(1)    11D6 : 52                         str     R2              ; stack top=subtrahend.1
(1)    11D7 : 97                         ghi     R7              ; D=minuend.1
(1)    11D8 : F3                         xor                     ; D=minuend.1^subtrahend.1
(1)    11D9 : A8                         plo     R8              ; R8.0=minuend.1^subtrahend.1
(1)    11DA : 97                         ghi     R7              ; D=minuend.1
(1)    11DB : 77                         smb                     ; D=minuend.1=subtrahend.1
(1)    11DC : B8                         phi     R8              ; R8.1=result.1
(1)    11DD : 3A E7                      bnz     cmp16_neq       ; branch if result.1!=0
(1)    11DF : 87                         glo     R7              ; D=result.0
(1)    11E0 : 3A E7                      bnz     cmp16_neq       ; branch if result.0!=-
(1)    11E2 : F8 01                      ldi     1
(1)    11E4 : F6                         shr
(1)    11E5 : 68 94                      sret    R4
(1)    11E7 :                    cmp16_neq:
(1)    11E7 : 98                         ghi     R8              ; D=result.1
(1)    11E8 : 52                         str     R2
(1)    11E9 : 97                         ghi     R7              ; D=minuend.1
(1)    11EA : F3                         xor                     ; D=result.1^minuend.1
(1)    11EB : 52                         str     R2              ; stack top=result.1^minuend.1
(1)    11EC : 88                         glo     R8              ; D=minuend.1^subtrahend.1
(1)    11ED : F2                         and                     ; D=(minuend.1^subtrahend.1)&(result.1^minuend.1)
(1)    11EE : 52                         str     R2              ; stack top=V
(1)    11EF : 98                         ghi     R8              ; D=result.1
(1)    11F0 : F3                         xor                     ; D=N^V
(1)    11F1 : FB 80                      xri     X'80'           ; D=~(N^V)
(1)    11F3 : FE                         shl                     ; DF=~(N^V)
(1)    11F4 : F8 01                      ldi     1
(1)    11F6 : 68 94                      sret    R4
(1)    11F8 :
(1)    11F8 :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)    11F8 :                    ;;; @param R7 multiplicand
(1)    11F8 :                    ;;; @param R8 multiplier
(1)    11F8 :                    ;;; @return R7 result
(1)    11F8 :                    ;;; @clobber D R7 R8 R15
(1)    11F8 :                    umul16:
(1)    11F8 : F8 00                      ldi     0
(1)    11FA : BF                         phi     R15
(1)    11FB : AF                         plo     R15             ; R15=result
(1)    11FC : C0 12 1A                   br      umul16_check
(1)    11FF :                    umul16_loop:
(1)    11FF : 88                         glo     R8
(1)    1200 : FA 01                      ani     1
(1)    1202 : 32 0E                      bz      umul16_sr       ; lsb(multiplier)==0
(1)    1204 : 87                         glo     R7
(1)    1205 : 52                         str     R2              ; stack top=multiplicand.0
(1)    1206 : 8F                         glo     R15
(1)    1207 : F4                         add
(1)    1208 : AF                         plo     R15
(1)    1209 : 97                         ghi     R7
(1)    120A : 52                         str     R2              ; stack top=multiplicand.1
(1)    120B : 9F                         ghi     R15
(1)    120C : 74                         adc
(1)    120D : BF                         phi     R15             ; result += multiplicand
(1)    120E :                    umul16_sr:
(1)    120E : 98                         ghi     R8
(1)    120F : F6                         shr
(1)    1210 : B8                         phi     R8
(1)    1211 : 88                         glo     R8
(1)    1212 : 76                         shrc
(1)    1213 : A8                         plo     R8              ; multiplier >>= 1
(1)    1214 : 87                         glo     R7
(1)    1215 : FE                         shl
(1)    1216 : A7                         plo     R7
(1)    1217 : 97                         ghi     R7
(1)    1218 : 7E                         shlc
(1)    1219 : B7                         phi     R7              ; multiplicand <<= 1
(1)    121A :                    umul16_check:
(1)    121A : 98                         ghi     R8
(1)    121B : CA 11 FF                   bnz     umul16_loop     ; while multiplier != 0
(1)    121E : 88                         glo     R8
(1)    121F : CA 11 FF                   bnz     umul16_loop     ; while multiplier != 0
(1)    1222 : 9F                         ghi     R15
(1)    1223 : B7                         phi     R7
(1)    1224 : 8F                         glo     R15
(1)    1225 : A7                         plo     R7              ; R7=result
(1)    1226 : 68 94                      sret    R4
(1)    1228 :
(1)    1228 :                    ;;; Signed multiplication: multiplicand *= multiplier
(1)    1228 :                    ;;; @param R7 multiplicand
(1)    1228 :                    ;;; @param R8 multiplier
(1)    1228 :                    ;;; @return R7 multiplicand * multiplier
(1)    1228 :                    ;;;   SCAL R4, mul16
(1)    1228 :                    ;;; @clobber R8 R15
(1)    1228 :                    mul16:
(1)    1228 : 98                         ghi     R8
(1)    1229 : 52                         str     R2
(1)    122A : 97                         ghi     R7
(1)    122B : F3                         xor
(1)    122C : 73                         stxd                    ; push sign
(1)    122D : 98                         ghi     R8
(1)    122E : FA 80                      ani     X'80'
(1)    1230 : 32 3B                      bz      mul16_multiplicand
(1)    1232 : 98                         ghi     R8
(1)    1233 : FB FF                      xri     X'FF'
(1)    1235 : B8                         phi     R8
(1)    1236 : 88                         glo     R8
(1)    1237 : FB FF                      xri     X'FF'
(1)    1239 : A8                         plo     R8
(1)    123A : 18                         inc     R8              ; negate multiplier
(1)    123B :                    mul16_multiplicand:
(1)    123B : 97                         ghi     R7
(1)    123C : FA 80                      ani     X'80'
(1)    123E : 32 49                      bz      mul16_multiply
(1)    1240 : 97                         ghi     R7
(1)    1241 : FB FF                      xri     X'FF'
(1)    1243 : B7                         phi     R7
(1)    1244 : 87                         glo     R7
(1)    1245 : FB FF                      xri     X'FF'
(1)    1247 : A7                         plo     R7
(1)    1248 : 17                         inc     R7              ; negate multiplicand
(1)    1249 :                    mul16_multiply:
(1)    1249 : 68 84 11 F8                scal    R4, umul16
(1)    124D : 60                         irx
(1)    124E : F0                         ldx                     ; sign
(1)    124F : FA 80                      ani     X'80'
(1)    1251 : 32 5C                      bz      mul16_return
(1)    1253 : 97                         ghi     R7
(1)    1254 : FB FF                      xri     X'FF'
(1)    1256 : B7                         phi     R7
(1)    1257 : 87                         glo     R7
(1)    1258 : FB FF                      xri     X'FF'
(1)    125A : A7                         plo     R7
(1)    125B : 17                         inc     R7              ; negate result
(1)    125C :                    mul16_return:
(1)    125C : 68 94                      sret    R4
(1)    125E :
(1)    125E :                    ;;; Unsigned division: dividend / divisor = quotient ... reminder
(1)    125E :                    ;;; @praram R7 dividend
(1)    125E :                    ;;; @praram R8 divisor
(1)    125E :                    ;;; @return R7 quotient
(1)    125E :                    ;;; @return R8 reminder
(1)    125E :                    ;;; @clobber R7 R8 R15
(1)    125E :                    udiv16:
(1)    125E : 98                         ghi     R8
(1)    125F : 3A 66                      bnz     udiv16_calc
(1)    1261 : 88                         glo     R8
(1)    1262 : 3A 66                      bnz     udiv16_calc
(1)    1264 : 68 94                      sret    R4
(1)    1266 :                    udiv16_calc:
(1)    1266 : 68 A9                      rsxd    R9              ; save R9
(1)    1268 : F8 01                      ldi     1
(1)    126A : AF                         plo     R15             ; R15.0=bits
(1)    126B : 30 74                      br      udiv16_prep
(1)    126D :                    udiv16_prep_loop:
(1)    126D : 88                         glo     R8
(1)    126E : FE                         shl
(1)    126F : A8                         plo     R8
(1)    1270 : 98                         ghi     R8
(1)    1271 : 7E                         shlc
(1)    1272 : B8                         phi     R8              ; divisor <<= 1
(1)    1273 : 1F                         inc     R15             ; ++bits
(1)    1274 :                    udiv16_prep:
(1)    1274 : 98                         ghi     R8
(1)    1275 : FA 80                      ani     X'80'
(1)    1277 : 32 6D                      bz      udiv16_prep_loop ; while msb(divisor) == 0
(1)    1279 : 97                         ghi     R7
(1)    127A : B9                         phi     R9
(1)    127B : 87                         glo     R7
(1)    127C : A9                         plo     R9              ; R9=dividend
(1)    127D : F8 00                      ldi     0
(1)    127F : B7                         phi     R7
(1)    1280 : A7                         plo     R7              ; R7=quotient
(1)    1281 : 30 8F                      br      udiv16_enter_loop
(1)    1283 :                    udiv16_loop:
(1)    1283 : 98                         ghi     R8
(1)    1284 : F6                         shr
(1)    1285 : B8                         phi     R8
(1)    1286 : 88                         glo     R8
(1)    1287 : 76                         shrc
(1)    1288 : A8                         plo     R8              ; divisor >>= 1
(1)    1289 : 87                         glo     R7
(1)    128A : FE                         shl
(1)    128B : A7                         plo     R7
(1)    128C : 97                         ghi     R7
(1)    128D : 7E                         shlc
(1)    128E : B7                         phi     R7              ; quotient <<= 1
(1)    128F :                    udiv16_enter_loop:
(1)    128F : 88                         glo     R8
(1)    1290 : 52                         str     R2
(1)    1291 : 89                         glo     R9
(1)    1292 : F7                         sm
(1)    1293 : A9                         plo     R9
(1)    1294 : 98                         ghi     R8
(1)    1295 : 52                         str     R2
(1)    1296 : 99                         ghi     R9
(1)    1297 : 77                         smb
(1)    1298 : B9                         phi     R9              ; dividend-=divisor
(1)    1299 : 3B 9E                      bm      udiv16_readd    ; branch if dividend < 0
(1)    129B : 17                         inc     R7              ; quotient += 1
(1)    129C : 30 A8                      br      udiv16_next
(1)    129E :                    udiv16_readd:
(1)    129E : 88                         glo     R8
(1)    129F : 52                         str     R2
(1)    12A0 : 89                         glo     R9
(1)    12A1 : F4                         add
(1)    12A2 : A9                         plo     R9
(1)    12A3 : 98                         ghi     R8
(1)    12A4 : 52                         str     R2
(1)    12A5 : 99                         ghi     R9
(1)    12A6 : 74                         adc
(1)    12A7 : B9                         phi     R9              ; dividend+=divisor
(1)    12A8 :                    udiv16_next:
(1)    12A8 : 2F                         dec     R15
(1)    12A9 : 8F                         glo     R15
(1)    12AA : 3A 83                      bnz     udiv16_loop     ; while bits != 0
(1)    12AC : 99                         ghi     R9
(1)    12AD : B8                         phi     R8
(1)    12AE : 89                         glo     R9
(1)    12AF : A8                         plo     R8              ; R8=reminder
(1)    12B0 : 60                         irx
(1)    12B1 : 68 69                      rlxa    R9              ; restore R9
(1)    12B3 : 22                         dec     R2
(1)    12B4 : 68 94                      sret    R4
(1)    12B6 :
(1)    12B6 :                    ;;; Signed division: dividend / divisor = quotient ... reminder
(1)    12B6 :                    ;;; @param R7 dividend
(1)    12B6 :                    ;;; @param R8 divisor
(1)    12B6 :                    ;;; @return R7 quotient
(1)    12B6 :                    ;;; @return R8 reminder
(1)    12B6 :                    ;;;   SCAL R4, duvsi2
(1)    12B6 :                    ;;;   SEP R5
(1)    12B6 :                    ;;;   DC  A(div16)
(1)    12B6 :                    ;;; @clobber R15
(1)    12B6 :                    div16:
(1)    12B6 : 98                         ghi     R8
(1)    12B7 : 52                         str     R2
(1)    12B8 : 97                         ghi     R7
(1)    12B9 : F3                         xor
(1)    12BA : 73                         stxd                    ; push sign
(1)    12BB : 98                         ghi     R8
(1)    12BC : FA 80                      ani     X'80'
(1)    12BE : 32 C9                      bz      div16_dividend
(1)    12C0 : 98                         ghi     R8
(1)    12C1 : FB FF                      xri     X'FF'
(1)    12C3 : B8                         phi     R8
(1)    12C4 : 88                         glo     R8
(1)    12C5 : FB FF                      xri     X'FF'
(1)    12C7 : A8                         plo     R8
(1)    12C8 : 18                         inc     R8              ; negate divisor
(1)    12C9 :                    div16_dividend:
(1)    12C9 : 97                         ghi     R7              ; R7=dividend
(1)    12CA : FA 80                      ani     X'80'
(1)    12CC : 32 D7                      bz      div16_divide
(1)    12CE : 97                         ghi     R7
(1)    12CF : FB FF                      xri     X'FF'
(1)    12D1 : B7                         phi     R7
(1)    12D2 : 87                         glo     R7
(1)    12D3 : FB FF                      xri     X'FF'
(1)    12D5 : A7                         plo     R7
(1)    12D6 : 17                         inc     R7              ; negate dividend
(1)    12D7 :                    div16_divide:
(1)    12D7 : 68 84 12 5E                scal    R4, udiv16
(1)    12DB : 60                         irx
(1)    12DC : F0                         ldx                     ; pop sign
(1)    12DD : FA 80                      ani     X'80'
(1)    12DF : 32 EA                      bz      div16_return
(1)    12E1 : 97                         ghi     R7
(1)    12E2 : FB FF                      xri     X'FF'
(1)    12E4 : B7                         phi     R7
(1)    12E5 : 87                         glo     R7
(1)    12E6 : FB FF                      xri     X'FF'
(1)    12E8 : A7                         plo     R7
(1)    12E9 : 17                         inc     R7              ; negate quotient
(1)    12EA :                    div16_return:
(1)    12EA : 68 94                      sret    R4
       12EC :                            include "mandelbrot.inc"
(1)    12EC :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    12EC :                    ;;; Mandelbrot variables
(1)    12EC : =32                Fv:     equ     50
(1)    12EC : 00 00              vC:     dc      A(0)
(1)    12EE : 00 00              vD:     dc      A(0)
(1)    12F0 : 00 00              vA:     dc      A(0)
(1)    12F2 : 00 00              vB:     dc      A(0)
(1)    12F4 : 00 00              vP:     dc      A(0)
(1)    12F6 : 00 00              vQ:     dc      A(0)
(1)    12F8 : 00 00              vS:     dc      A(0)
(1)    12FA : 00 00              vT:     dc      A(0)
(1)    12FC : 00 00              vY:     dc      A(0)
(1)    12FE : 00 00              vX:     dc      A(0)
(1)    1300 : 00 00              vI:     dc      A(0)
(1)    1302 :
(1)    1302 :                    ;;; Print variable: "D=variable "
(1)    1302 :                    ;;; @param D variable letter
(1)    1302 :                    ;;; @param R7 variable
(1)    1302 :                    ;;;   SCAL R4, print
(1)    1302 :                    ;;; @clobber R7 R15
(1)    1302 :                    print:
(1)    1302 : 68 84 10 36                scal    R4, putchar     ; print variable letter
(1)    1306 : F8 3D                      ldi     T'='
(1)    1308 : 68 84 10 36                scal    R4, putchar     ; '='
(1)    130C : 68 84 11 5F                scal    R4, print_int16
(1)    1310 : C0 10 65                   br      putspace
(1)    1313 :
(1)    1313 :                    mandelbrot:
(1)    1313 : 68 C7 FF F4                rldi    R7, -12
(1)    1317 : 68 84 11 83                scal    R4, store_R7
(1)    131B : 12 FC                      dc      A(vY)           ; Y=-12
(1)    131D :                    loop_y:
(1)    131D : 68 C7 FF CF                rldi    R7, -49
(1)    1321 : 68 84 11 83                scal    R4, store_R7
(1)    1325 : 12 FE                      dc      A(vX)           ; X=-49
(1)    1327 :                    loop_x:
(1)    1327 : 68 84 11 93                scal    R4, load_R7
(1)    132B : 12 FE                      dc      A(vX)
(1)    132D : 68 C8 00 E5                rldi    R8, 229
(1)    1331 : 68 84 12 28                scal    R4, mul16
(1)    1335 : 68 C8 00 64                rldi    R8, 100
(1)    1339 : 68 84 12 B6                scal    R4, div16
(1)    133D : 68 84 11 83                scal    R4, store_R7
(1)    1341 : 12 EC                      dc      A(vC)           ; C=X*229/100
(1)    1343 : 68 84 11 83                scal    R4, store_R7
(1)    1347 : 12 F0                      dc      A(vA)           ; A=C
(1)    1349 : 68 84 11 93                scal    R4, load_R7
(1)    134D : 12 FC                      dc      A(vY)
(1)    134F : 68 C8 01 A0                rldi    R8, 416
(1)    1353 : 68 84 12 28                scal    R4, mul16
(1)    1357 : 68 C8 00 64                rldi    R8, 100
(1)    135B : 68 84 12 B6                scal    R4, div16
(1)    135F : 68 84 11 83                scal    R4, store_R7
(1)    1363 : 12 EE                      dc      A(vD)           ; D=Y*416/100
(1)    1365 : 68 84 11 83                scal    R4, store_R7
(1)    1369 : 12 F2                      dc      A(vB)           ; B=D
(1)    136B : 68 C7 00 00                rldi    R7, 0
(1)    136F : 68 84 11 83                scal    R4, store_R7
(1)    1373 : 13 00                      dc      A(vI)           ; I=0
(1)    1375 :
(1)    1375 :                            ;; scal    R4, load_R7
(1)    1375 :                            ;; dc      A(vY)
(1)    1375 :                            ;; ldi     T'Y'
(1)    1375 :                            ;; scal    R4, print
(1)    1375 :                            ;; scal    R4, load_R7
(1)    1375 :                            ;; dc      A(vX)
(1)    1375 :                            ;; ldi     T'X'
(1)    1375 :                            ;; scal    R4, print
(1)    1375 :                            ;; scal    R4, load_R7
(1)    1375 :                            ;; dc      A(vC)
(1)    1375 :                            ;; ldi     T'C'
(1)    1375 :                            ;; scal    R4, print
(1)    1375 :                            ;; scal    R4, load_R7
(1)    1375 :                            ;; dc      A(vD)
(1)    1375 :                            ;; ldi     T'D'
(1)    1375 :                            ;; scal    R4, print
(1)    1375 :                            ;; scal    R4, newline
(1)    1375 :
(1)    1375 :                    loop_i:
(1)    1375 : 68 84 11 93                scal    R4, load_R7
(1)    1379 : 12 F2                      dc      A(vB)
(1)    137B : 68 C8 00 32                rldi    R8, Fv
(1)    137F : 68 84 12 B6                scal    R4, div16
(1)    1383 : 68 84 11 83                scal    R4, store_R7
(1)    1387 : 12 F6                      dc      A(vQ)           ; Q=B/F
(1)    1389 : 68 C8 00 32                rldi    R8, Fv
(1)    138D : 68 84 12 28                scal    R4, mul16
(1)    1391 : 97                         ghi     R7
(1)    1392 : B8                         phi     R8
(1)    1393 : 87                         glo     R7
(1)    1394 : A8                         plo     R8
(1)    1395 : 68 84 11 93                scal    R4, load_R7
(1)    1399 : 12 F2                      dc      A(vB)
(1)    139B : 68 84 11 C4                scal    R4, sub16
(1)    139F : 68 84 11 83                scal    R4, store_R7
(1)    13A3 : 12 F8                      dc      A(vS)           ; S=B-Q*F
(1)    13A5 : 68 84 11 93                scal    R4, load_R7
(1)    13A9 : 12 F2                      dc      A(vB)
(1)    13AB : 97                         ghi     R7
(1)    13AC : B8                         phi     R8
(1)    13AD : 87                         glo     R7
(1)    13AE : A8                         plo     R8
(1)    13AF : 68 84 12 28                scal    R4, mul16       ; B*B
(1)    13B3 : 68 A7                      rsxd    R7              ; push B*B
(1)    13B5 : 68 84 11 93                scal    R4, load_R7
(1)    13B9 : 12 F0                      dc      A(vA)
(1)    13BB : 97                         ghi     R7
(1)    13BC : B8                         phi     R8
(1)    13BD : 87                         glo     R7
(1)    13BE : A8                         plo     R8
(1)    13BF : 68 84 12 28                scal    R4, mul16       ; A*A
(1)    13C3 : 60                         irx
(1)    13C4 : 68 68                      rlxa    R8              ; pop B*B
(1)    13C6 : 22                         dec     R2
(1)    13C7 : 68 84 11 C4                scal    R4, sub16       ; A*A-B*B
(1)    13CB : 68 C8 00 32                rldi    R8, Fv
(1)    13CF : 68 84 12 B6                scal    R4, div16       ; (A*A-B*B)/F
(1)    13D3 : 68 84 11 9C                scal    R4, load_R8
(1)    13D7 : 12 EC                      dc      A(vC)
(1)    13D9 : 68 84 11 B8                scal    R4, add16       ; (A*A-B*B)/F+C
(1)    13DD : 68 84 11 83                scal    R4, store_R7    ; T=(A*A-B*B)/F+C
(1)    13E1 : 12 FA                      dc      A(vT)
(1)    13E3 : 68 84 11 93                scal    R4, load_R7
(1)    13E7 : 12 F0                      dc      A(vA)
(1)    13E9 : 68 84 11 9C                scal    R4, load_R8
(1)    13ED : 12 F8                      dc      A(vS)
(1)    13EF : 68 84 12 28                scal    R4, mul16       ; A*S
(1)    13F3 : 68 C8 00 32                rldi    R8, Fv
(1)    13F7 : 68 84 12 B6                scal    R4, div16       ; A*S/F
(1)    13FB : 68 A7                      rsxd    R7              ; push A*S/F
(1)    13FD : 68 84 11 93                scal    R4, load_R7
(1)    1401 : 12 F0                      dc      A(vA)
(1)    1403 : 68 84 11 9C                scal    R4, load_R8
(1)    1407 : 12 F6                      dc      A(vQ)
(1)    1409 : 68 84 12 28                scal    R4, mul16       ; A*Q
(1)    140D : 60                         irx
(1)    140E : 68 68                      rlxa    R8              ; pop A*S/F
(1)    1410 : 22                         dec     R2
(1)    1411 : 68 84 11 B8                scal    R4, add16       ; A*Q+A*S/F
(1)    1415 : 97                         ghi     R7
(1)    1416 : B8                         phi     R8
(1)    1417 : 87                         glo     R7
(1)    1418 : A8                         plo     R8
(1)    1419 : 68 84 11 B8                scal    R4, add16       ; 2*(A*Q+A*S/F)
(1)    141D : 68 84 11 9C                scal    R4, load_R8
(1)    1421 : 12 EE                      dc      A(vD)
(1)    1423 : 68 84 11 B8                scal    R4, add16       ; 2*(A*Q+A*S/F)+D
(1)    1427 : 68 84 11 83                scal    R4, store_R7
(1)    142B : 12 F2                      dc      A(vB)           ; B=2*(A*Q+A*S/F)+D
(1)    142D : 68 84 11 93                scal    R4, load_R7
(1)    1431 : 12 FA                      dc      A(vT)
(1)    1433 : 68 84 11 83                scal    R4, store_R7
(1)    1437 : 12 F0                      dc      A(vA)           ; A=T
(1)    1439 : 68 C8 00 32                rldi    R8, Fv
(1)    143D : 68 84 12 B6                scal    R4, div16
(1)    1441 : 68 84 11 83                scal    R4, store_R7
(1)    1445 : 12 F4                      dc      A(vP)           ; P=A/F
(1)    1447 : 97                         ghi     R7
(1)    1448 : B8                         phi     R8
(1)    1449 : 87                         glo     R7
(1)    144A : A8                         plo     R8
(1)    144B : 68 84 12 28                scal    R4, mul16
(1)    144F : 68 A7                      rsxd    R7              ; push P*P
(1)    1451 : 68 84 11 93                scal    R4, load_R7
(1)    1455 : 12 F2                      dc      A(vB)
(1)    1457 : 68 C8 00 32                rldi    R8, Fv
(1)    145B : 68 84 12 B6                scal    R4, div16
(1)    145F : 68 84 11 83                scal    R4, store_R7
(1)    1463 : 12 F6                      dc      A(vQ)           ; Q=B/F
(1)    1465 : 97                         ghi     R7
(1)    1466 : B8                         phi     R8
(1)    1467 : 87                         glo     R7
(1)    1468 : A8                         plo     R8
(1)    1469 : 68 84 12 28                scal    R4, mul16       ; Q*Q
(1)    146D : 60                         irx
(1)    146E : 68 68                      rlxa    R8              ; pop P*P
(1)    1470 : 22                         dec     R2
(1)    1471 : 68 84 11 B8                scal    R4, add16       ; P*P+Q*Q
(1)    1475 :
(1)    1475 :                            ;; rsxd    R7              ; push T
(1)    1475 :                            ;; scal    R4, putspace
(1)    1475 :                            ;; scal    R4, load_R7
(1)    1475 :                            ;; dc      A(vI)
(1)    1475 :                            ;; ldi     T'I'
(1)    1475 :                            ;; scal    R4, print
(1)    1475 :                            ;; scal    R4, load_R7
(1)    1475 :                            ;; dc      A(vA)
(1)    1475 :                            ;; ldi     T'A'
(1)    1475 :                            ;; scal    R4, print
(1)    1475 :                            ;; scal    R4, load_R7
(1)    1475 :                            ;; dc      A(vB)
(1)    1475 :                            ;; ldi     T'B'
(1)    1475 :                            ;; scal    R4, print
(1)    1475 :                            ;; scal    R4, load_R7
(1)    1475 :                            ;; dc      A(vP)
(1)    1475 :                            ;; ldi     T'P'
(1)    1475 :                            ;; scal    R4, print
(1)    1475 :                            ;; scal    R4, load_R7
(1)    1475 :                            ;; dc      A(vQ)
(1)    1475 :                            ;; ldi     T'Q'
(1)    1475 :                            ;; scal    R4, print
(1)    1475 :                            ;; scal    R4, newline
(1)    1475 :                            ;; irx
(1)    1475 :                            ;; rlxa    R7              ; pop T
(1)    1475 :                            ;; dec     R2
(1)    1475 :
(1)    1475 : 97                         ghi     R7
(1)    1476 : 3A 8E                      bnz     print_i
(1)    1478 : 87                         glo     R7
(1)    1479 : FD 04                      sdi     4
(1)    147B : 3B 8E                      bm      print_i         ; if 4<T
(1)    147D : 68 C7 13 01                rldi    R7, vI+1
(1)    1481 : 07                         ldn     R7
(1)    1482 : FC 01                      adi     1
(1)    1484 : 57                         str     R7              ; I+=1
(1)    1485 : FF 10                      smi     16
(1)    1487 : CB 13 75                   bm      loop_i          ; if I<16
(1)    148A : F8 20                      ldi     T' '
(1)    148C : 30 9B                      br      print_char
(1)    148E :                    print_i:
(1)    148E : 68 C7 13 01                rldi    R7, vI+1
(1)    1492 : 07                         ldn     R7
(1)    1493 : FF 0A                      smi     10
(1)    1495 : 3B 99                      bl      print_i2        ; if I<10
(1)    1497 : FC 07                      adi     T'A'-T'0'-10
(1)    1499 :                    print_i2:
(1)    1499 : FC 3A                      adi     T'0'+10
(1)    149B :                    print_char:
(1)    149B : 68 84 10 36                scal    R4, putchar
(1)    149F :
(1)    149F :                            ;; stxd                    ; save char
(1)    149F :                            ;; ldi     T'@'
(1)    149F :                            ;; scal    R4, putchar
(1)    149F :                            ;; ldi     T'='
(1)    149F :                            ;; scal    R4, putchar
(1)    149F :                            ;; inc     R2
(1)    149F :                            ;; ldn     R2              ; restore char
(1)    149F :                            ;; scal    R4, putchar
(1)    149F :                            ;; scal    R4, newline
(1)    149F :
(1)    149F : 68 84 10 26                scal    R4, getchar
(1)    14A3 : 32 A9                      bz      next_x
(1)    14A5 : 87                         glo     R7
(1)    14A6 : 3A A9                      bnz     next_x
(1)    14A8 : 00                         idl                     ; break
(1)    14A9 :                    next_x:
(1)    14A9 : 68 84 11 A5                scal    R4, inc16
(1)    14AD : 12 FE                      dc      A(vX)           ; X+=1
(1)    14AF : 97                         ghi     R7
(1)    14B0 : CA 13 27                   bnz     loop_x          ; if X<0
(1)    14B3 : 87                         glo     R7
(1)    14B4 : FF 1E                      smi     30
(1)    14B6 : CB 13 27                   bl      loop_x          ; if X<30
(1)    14B9 : 68 84 10 5B                scal    R4, newline
(1)    14BD : 68 84 11 A5                scal    R4, inc16
(1)    14C1 : 12 FC                      dc      A(vY)           ; Y+=1
(1)    14C3 : 97                         ghi     R7
(1)    14C4 : CA 13 1D                   bnz     loop_y          ; if Y<0
(1)    14C7 : 87                         glo     R7
(1)    14C8 : FF 0D                      smi     13
(1)    14CA : CB 13 1D                   bl      loop_y          ; if Y<13
(1)    14CD : 68 94                      sret    R4
       14CF :
       14CF :                            end
