          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     1804A
          0 :                            option  "smart-branch", "on"
          0 :                            include "cdp1802.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; CDP1802 register alias
(1)       0 : =0                 R0:     equ     0
(1)       0 : =1                 R1:     equ     1
(1)       0 : =2                 R2:     equ     2
(1)       0 : =3                 R3:     equ     3
(1)       0 : =4                 R4:     equ     4
(1)       0 : =5                 R5:     equ     5
(1)       0 : =6                 R6:     equ     6
(1)       0 : =7                 R7:     equ     7
(1)       0 : =8                 R8:     equ     8
(1)       0 : =9                 R9:     equ     9
(1)       0 : =A                 R10:    equ     10
(1)       0 : =B                 R11:    equ     11
(1)       0 : =C                 R12:    equ     12
(1)       0 : =D                 R13:    equ     13
(1)       0 : =E                 R14:    equ     14
(1)       0 : =F                 R15:    equ     15
(1)       0 :
(1)       0 :                    ;;; Transfer locations
(1)       0 : =0                 ORG_RESET:      equ     0000H   ; Reset transfer location
          0 :
          0 :                            org     ORG_RESET
          0 : 71                         dis                     ; disable interrupt
          1 : 00                         dc      X'00'           ; X:P=0:0
          2 : 30 04                      br      scrt_init
          4 :                            include "scrt.inc"
(1)       4 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       4 :
(1)       4 :                    ;;; Standard Call and Return Technique
(1)       4 :                    ;;; R0: DMA pointer
(1)       4 :                    ;;; R1: Program counter for Interrupt routine
(1)       4 :                    ;;; R2: Stack pointer
(1)       4 :                    ;;; R3: Program counter
(1)       4 :                    ;;; R4: Link register, pointer to the return location and arguments
(1)       4 :                    ;;;     passed by the calling program
(1)       4 :
(1)       4 :                    ;;; Call subroutine
(1)       4 :                    ;;;   SCAL R4, subroutine
(1)       4 :                    ;;;   DC   arguments...
(1)       4 :                    ;;; Subroutine return
(1)       4 :                    ;;;   SRET R4
(1)       4 :                    ;;; Return from interrupt
(1)       4 :                    ;;;   SEP R1
(1)       4 :
(1)       4 :                    ;;; Initialize for SCRT, P=0
(1)       4 :                    ;;; @param P!=3
(1)       4 :                    ;;; @param stack top address of stack
(1)       4 :                    ;;; @param main start address of main routine
(1)       4 :                    ;;; @return P=3
(1)       4 :                    ;;; @return R1=scrt_isr
(1)       4 :                    ;;; @return R2=stack
(1)       4 :                    ;;; @return R3=main
(1)       4 :                    ;;; @clobber D, R15
(1)       4 :                    scrt_init:
(1)       4 : 68 C3 00 09                rldi    R3, scrt_start
(1)       8 : D3                         sep     R3              ; P=3
(1)       9 :                    scrt_start:
(1)       9 : 68 C1 00 1E                rldi    R1, scrt_isr    ; setup interrupt
(1)       D : E2                         sex     R2
(1)       E : 68 C2 0F FF                rldi    R2, stack       ; setup stack
(1)      12 : C0 10 00                   br      main            ; goto main with P=3
(1)      15 :
(1)      15 :                    ;;; Interrupt exit entry P=1
(1)      15 :                    ;;;  (Come here by SEP R1)
(1)      15 :                    scrt_isr_exit:
(1)      15 : 60                         irx
(1)      16 : 68 63                      rlxa    R3              ; pop program counter R3
(1)      18 : 68 6F                      rlxa    R15             ; pop scratch pad register R15
(1)      1A : 72                         ldxa                    ; pop DF into D:MSB
(1)      1B : FE                         shl                     ; restore DF
(1)      1C : 72                         ldxa                    ; pop D
(1)      1D : 70                         ret                     ; restore X,P IE=1
(1)      1E :                            ;; R1 points scrt_isr
(1)      1E :                    ;;; CDP1802 interrupt entry, X=2, P=1, IE=0
(1)      1E :                    ;;; @unchanged D, DF, X, P, R3, R15
(1)      1E :                    scrt_isr:
(1)      1E :                            ;; R2[0] must be preserved because it may be in the pop process
(1)      1E : 22                         dec     R2
(1)      1F : 78                         sav                     ; push X,P
(1)      20 : 22                         dec     R2
(1)      21 : 73                         stxd                    ; push D
(1)      22 : 76                         shrc                    ; MSB of D=DF
(1)      23 : 73                         stxd                    ; push DF
(1)      24 : 68 AF                      rsxd    R15             ; push scratch pad register R15
(1)      26 : 68 A3                      rsxd    R3              ; push program counter R3
(1)      28 : 68 C3 10 0C                rldi    R3, isr
(1)      2C : D3                         sep     R3              ; call interrupt service routine with P=3
(1)      2D : 30 15                      br      scrt_isr_exit   ; return from isr by SEP R1
         2F :
         2F :                    ;;; MC6850 Asynchronous Communication Interface Adapter
         2F : =4                 ACIA:   equ     4
         2F :                            include "mc6850.inc"
(1)      2F :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)      2F :
(1)      2F :                    ;;; MC6850
(1)      2F :                    ;;; Asynchronous Communication Interface Adapter
(1)      2F :
(1)      2F :                    ;;; Control register
(1)      2F : =4                 ACIA_control:   equ     ACIA+0
(1)      2F :                            ;; Counter Divider Select Bits
(1)      2F : =3                 CDS_gm:         equ     11b    ; Group mask
(1)      2F : =0                 CDS_DIV1_gc:    equ     00000000B ; /1
(1)      2F : =1                 CDS_DIV16_gc:   equ     00000001B ; /16
(1)      2F : =2                 CDS_DIV64_gc:   equ     00000010B ; /64
(1)      2F : =3                 CDS_RESET_gc:   equ     00000011B ; Master Reset
(1)      2F :                            ;; Word Select Bits
(1)      2F : =1C                WSB_gm:         equ     00011100B ; Group mask
(1)      2F : =0                 WSB_7E2_gc:     equ     00000000B ; 7 Bits + Even Parity + 2 Stop Bits
(1)      2F : =4                 WSB_7O2_gc:     equ     00000100B ; 7 bits + Odd Parity  + 2 Stop Bits
(1)      2F : =8                 WSB_7E1_gc:     equ     00001000B ; 7 bits + Even Parity + 1 Stop Bits
(1)      2F : =C                 WSB_7O1_gc:     equ     00001100B ; 7 bits + Odd Parity  + 1 Stop Bits
(1)      2F : =10                WSB_8N2_gc:     equ     00010000B ; 8 bits + No Parity   + 2 Stop Bits
(1)      2F : =14                WSB_8N1_gc:     equ     00010100B ; 8 bits + No Parity   + 1 Stop Bits
(1)      2F : =18                WSB_8E1_gc:     equ     00011000B ; 8 bits + Even Parity + 1 Stop Bits
(1)      2F : =1C                WSB_8O1_gc:     equ     00011100B ; 8 bits + Odd Parity  + 1 Stop Bits
(1)      2F :                            ;; Transmit Control Bits
(1)      2F : =60                TCB_gm:         equ     01100000B ; Group mask
(1)      2F : =0                 TCB_DI_gc:      equ     00000000B ; RTS=Low,  Tx Interrupt Disabled
(1)      2F : =20                TCB_EI_gc:      equ     00100000B ; RTS=Low,  Tx Interrupt Enabled
(1)      2F : =40                TCB_RTS_gc:     equ     01000000B ; RTS=High, Tx Interrupt Disabled
(1)      2F : =60                TCB_BREAK_gc:   equ     01100000B ; RTS=Low,  Tx Interrupt Disabled
(1)      2F :                                                      ; Transmit Break Level
(1)      2F : =80                RIEB_bm:        equ     10000000B ; Receive Interrupt Enable Bit mask
(1)      2F :
(1)      2F :                    ;;; Status register
(1)      2F : =4                 ACIA_status:    equ     ACIA+0
(1)      2F : =1                 RDRF_bm:        equ     00000001B ; Receive Data Register Full
(1)      2F : =2                 TDRE_bm:        equ     00000010B ; Transmit Data Register Empty
(1)      2F : =4                 DCDF_bm:        equ     00000100B ; Data Carrier Detect Flag
(1)      2F : =8                 CTSF_bm:        equ     00001000B ; Clear To Send Flag
(1)      2F : =10                FERR_bm:        equ     00010000B ; Frame Error Flag
(1)      2F : =20                OVRN_bm:        equ     00100000B ; Receiver Overrun Flag
(1)      2F : =40                PERR_bm:        equ     01000000B ; Parity Error Flag
(1)      2F : =80                IRQF_bm:        equ     10000000B ; Interrupt Request Flag
(1)      2F :
(1)      2F :                    ;;; Data register
(1)      2F : =5                 ACIA_data:      equ     ACIA+1          ; Data register
         2F :
       1000 :                            org     X'1000'
       1000 : =FFF               stack:  equ     *-1
       1000 :                    main:
       1000 : 68 C8 10 0D                rldi    R8, ACIA_config
       1004 : E8                         sex     R8
       1005 : 64                         out     ACIA_control   ; Master reset
       1006 : 64                         out     ACIA_control   ; Set mode
       1007 : E2                         sex     R2
       1008 : 68 84 10 BD                scal    R4, arith       ; call arith
       100C :                    isr:
       100C : 00                         idl
       100D :
       100D :                    ACIA_config:
       100D : 03                         dc      CDS_RESET_gc    ; Master reset
       100E : 14                         dc      WSB_8N1_gc      ; 8 bits + No Parity + 1 Stop Bits
       100F :                                                    ; Transmit, Receive interrupts disabled
       100F :                    ;;; Print out char
       100F :                    ;;; @param D char
       100F :                    ;;; @clobber R15.0
       100F :                    putchar_char:
       100F : 00                         dc      0
       1010 :                    putchar:
       1010 : AF                         plo     R15             ; save D to R15.0
       1011 : E2                         sex     R2
       1012 : 68 A8                      rsxd    R8              ; save R8
       1014 : 68 C8 10 0F                rldi    R8, putchar_char
       1018 : E8                         sex     R8              ; R8 for inp/out
       1019 :                    putchar_loop:
       1019 : 6C                         inp     ACIA_status
       101A : FA 02                      ani     TDRE_bm
       101C : 32 19                      bz      putchar_loop
       101E : 8F                         glo     R15             ; restore D
       101F : 58                         str     R8              ; send char
       1020 : 65                         out     ACIA_data
       1021 : E2                         sex     R2
       1022 : 60                         irx
       1023 : 68 68                      rlxa    R8              ; restore R8
       1025 : 22                         dec     R2
       1026 : 68 94                      sret    R4
       1028 :
       1028 :                    ;;; Print out newline
       1028 :                    ;;; @clobber D R15.0
       1028 :                    newline:
       1028 : F8 0D                      ldi     X'0D'
       102A : 68 84 10 10                scal    R4, putchar
       102E : F8 0A                      ldi     X'0A'
       1030 : 30 10                      br      putchar
       1032 :
       1032 :                    ;;; Print out space
       1032 :                    ;;; @clobber D R15.0
       1032 :                    putspace:
       1032 : F8 20                      ldi     T' '
       1034 : 30 10                      br      putchar
       1036 :
       1036 :                    ;;; Signed comparison: minuend - subtrahend
       1036 :                    ;;; @param R7 minuend
       1036 :                    ;;; @param R8 subtrahend
       1036 :                    ;;; @return D=0 DF=1 (minuend==subtrahend); BZ
       1036 :                    ;;;         D=1 DF=1 (minuend>subtrahend);  BGE
       1036 :                    ;;;         D=1 DF=0 (minuend<subtrahend);  BL
       1036 :                    ;;; @clobber R7 R8
       1036 :                    ;;; result = minuend - subtrahend
       1036 :                    ;;; Z=(result.1 | result.0) == 0
       1036 :                    ;;; N=(result.1 & 0x80) != 0
       1036 :                    ;;; V=((minuend.1 ^ subtrahend.1) & (result.1 ^ minuend.1) & 0x80) != 0
       1036 :                    ;;; LT=N ^ V
       1036 :                    cmp16:
       1036 : 88                         glo     R8              ; D=subtrahend.0
       1037 : 52                         str     R2              ; stack top=subtrahend.0
       1038 : 87                         glo     R7              ; D=minuend.0
       1039 : F7                         sm                      ; D=minuend.0=subtrahend.0
       103A : A7                         plo     R7              ; R7.0=result.0
       103B : 98                         ghi     R8              ; D=subtrahend.1
       103C : 52                         str     R2              ; stack top=subtrahend.1
       103D : 97                         ghi     R7              ; D=minuend.1
       103E : F3                         xor                     ; D=minuend.1^subtrahend.1
       103F : A8                         plo     R8              ; R8.0=minuend.1^subtrahend.1
       1040 : 97                         ghi     R7              ; D=minuend.1
       1041 : 77                         smb                     ; D=minuend.1=subtrahend.1
       1042 : B8                         phi     R8              ; R8.1=result.1
       1043 : 3A 4D                      bnz     cmp16_neq       ; branch if result.1!=0
       1045 : 87                         glo     R7              ; D=result.0
       1046 : 3A 4D                      bnz     cmp16_neq       ; branch if result.0!=-
       1048 : F8 01                      ldi     1
       104A : F6                         shr
       104B : 68 94                      sret    R4
       104D :                    cmp16_neq:
       104D : 98                         ghi     R8              ; D=result.1
       104E : 52                         str     R2
       104F : 97                         ghi     R7              ; D=minuend.1
       1050 : F3                         xor                     ; D=result.1^minuend.1
       1051 : 52                         str     R2              ; stack top=result.1^minuend.1
       1052 : 88                         glo     R8              ; D=minuend.1^subtrahend.1
       1053 : F2                         and                     ; D=(minuend.1^subtrahend.1)&(result.1^minuend.1)
       1054 : 52                         str     R2              ; stack top=V
       1055 : 98                         ghi     R8              ; D=result.1
       1056 : F3                         xor                     ; D=N^V
       1057 : FB 80                      xri     X'80'           ; D=~(N^V)
       1059 : FE                         shl                     ; DF=~(N^V)
       105A : F8 01                      ldi     1
       105C : 68 94                      sret    R4
       105E :
       105E :                    ;;; Print out expression "operand1 operator operand2"
       105E :                    ;;; @param R7 operand1
       105E :                    ;;; @param R8 operand2
       105E :                    ;;; @param D operator
       105E :                    ;;; @clobber D R15
       105E :                    expr:
       105E : 68 A7                      rsxd    R7              ; save R7
       1060 : 73                         stxd                    ; save operator
       1061 : 68 84 13 0F                scal    R4, print_int16 ; print R7
       1065 : 68 84 10 32                scal    R4, putspace
       1069 : 12                         inc     R2
       106A : 02                         ldn     R2              ; restore operator
       106B : 68 84 10 10                scal    R4, putchar     ; print operator
       106F : 68 84 10 32                scal    R4, putspace
       1073 : 98                         ghi     R8
       1074 : B7                         phi     R7
       1075 : 88                         glo     R8
       1076 : A7                         plo     R7
       1077 : 68 84 13 0F                scal    R4, print_int16 ; print R8
       107B : 60                         irx
       107C : 68 67                      rlxa    R7              ; restore R7
       107E : 22                         dec     R2
       107F : 68 94                      sret    R4
       1081 :
       1081 :                    ;;; Print out answer " = result\n"
       1081 :                    ;;; @params R7 result
       1081 :                    ;;; @clobber D R7 R15
       1081 :                    answer:
       1081 : 68 84 10 32                scal    R4, putspace
       1085 : F8 3D                      ldi     T'='
       1087 : 68 84 10 10                scal    R4, putchar
       108B : 68 84 10 32                scal    R4, putspace
       108F : 68 84 13 0F                scal    R4, print_int16
       1093 : 30 28                      br      newline
       1095 :
       1095 :                    ;;; Compare 2 integers and print out "operand1 <=> operand2\n"
       1095 :                    ;;; @param R7 operand1
       1095 :                    ;;; @param R8 operand2
       1095 :                    ;;; @clobber R15
       1095 :                    comp:
       1095 : 68 A7                      rsxd    R7              ; save R7
       1097 : 68 A8                      rsxd    R8              ; save R8
       1099 : 68 84 10 36                scal    R4, cmp16
       109D : 3B AF                      bl      comp_lt
       109F : 32 AB                      bz      comp_eq
       10A1 : 33 A7                      bge     comp_gt
       10A3 : F8 3F                      ldi     T'?'
       10A5 : 30 B1                      br      comp_out
       10A7 :                    comp_gt:
       10A7 : F8 3E                      ldi     T'>'
       10A9 : 30 B1                      br      comp_out
       10AB :                    comp_eq:
       10AB : F8 3D                      ldi     T'='
       10AD : 30 B1                      br      comp_out
       10AF :                    comp_lt:
       10AF : F8 3C                      ldi     T'<'
       10B1 :                    comp_out:
       10B1 : 60                         irx
       10B2 : 68 68                      rlxa    R8              ; restore R8
       10B4 : 68 67                      rlxa    R7              ; restore R7
       10B6 : 22                         dec     R2
       10B7 : 68 84 10 5E                scal    R4, expr
       10BB : 30 28                      br      newline
       10BD :
       10BD :                    arith:
       10BD : 68 C7 00 00                rldi    R7, 0
       10C1 : 68 C8 92 A0                rldi    R8, -28000
       10C5 : F8 2D                      ldi     T'-'
       10C7 : 68 84 10 5E                scal    R4, expr
       10CB : 68 84 13 5B                scal    R4, sub16
       10CF : 68 84 10 81                scal    R4, answer      ; 28000
       10D3 :
       10D3 : 68 C7 00 00                rldi    R7, 0
       10D7 : 68 C8 6D 60                rldi    R8, 28000
       10DB : F8 2D                      ldi     T'-'
       10DD : 68 84 10 5E                scal    R4, expr
       10E1 : 68 84 13 5B                scal    R4, sub16
       10E5 : 68 84 10 81                scal    R4, answer      ; -28000
       10E9 :
       10E9 : 68 C7 46 50                rldi    R7, 18000
       10ED : 68 C8 6D 60                rldi    R8, 28000
       10F1 : F8 2B                      ldi     T'+'
       10F3 : 68 84 10 5E                scal    R4, expr
       10F7 : 68 84 13 4F                scal    R4, add16
       10FB : 68 84 10 81                scal    R4, answer      ; -19536
       10FF :
       10FF : 68 C7 46 50                rldi    R7, 18000
       1103 : 68 C8 B9 B0                rldi    R8, -18000
       1107 : F8 2B                      ldi     T'+'
       1109 : 68 84 10 5E                scal    R4, expr
       110D : 68 84 13 4F                scal    R4, add16
       1111 : 68 84 10 81                scal    R4, answer      ; 0
       1115 :
       1115 : 68 C7 B9 B0                rldi    R7, -18000
       1119 : 68 C8 B9 B0                rldi    R8, -18000
       111D : F8 2B                      ldi     T'+'
       111F : 68 84 10 5E                scal    R4, expr
       1123 : 68 84 13 4F                scal    R4, add16
       1127 : 68 84 10 81                scal    R4, answer      ; 29536
       112B :
       112B : 68 C7 46 50                rldi    R7, 18000
       112F : 68 C8 92 A0                rldi    R8, -28000
       1133 : F8 2D                      ldi     T'-'
       1135 : 68 84 10 5E                scal    R4, expr
       1139 : 68 84 13 5B                scal    R4, sub16
       113D : 68 84 10 81                scal    R4, answer      ; -19536
       1141 :
       1141 : 68 C7 46 50                rldi    R7, 18000
       1145 : 68 C8 B9 B0                rldi    R8, -18000
       1149 : F8 2D                      ldi     T'-'
       114B : 68 84 10 5E                scal    R4, expr
       114F : 68 84 13 5B                scal    R4, sub16
       1153 : 68 84 10 81                scal    R4, answer      ; 29536
       1157 :
       1157 : 68 C7 92 A0                rldi    R7, -28000
       115B : 68 C8 B9 B0                rldi    R8, -18000
       115F : F8 2D                      ldi     T'-'
       1161 : 68 84 10 5E                scal    R4, expr
       1165 : 68 84 13 5B                scal    R4, sub16
       1169 : 68 84 10 81                scal    R4, answer      ; -10000
       116D :
       116D : 68 C7 00 64                rldi    R7, 100
       1171 : 68 C8 01 2C                rldi    R8, 300
       1175 : F8 2A                      ldi     T'*'
       1177 : 68 84 10 5E                scal    R4, expr
       117B : 68 84 13 94                scal    R4, mul16
       117F : 68 84 10 81                scal    R4, answer      ; 30000
       1183 :
       1183 : 68 C7 00 C8                rldi    R7, 200
       1187 : 68 C8 FF 9C                rldi    R8, -100
       118B : F8 2A                      ldi     T'*'
       118D : 68 84 10 5E                scal    R4, expr
       1191 : 68 84 13 94                scal    R4, mul16
       1195 : 68 84 10 81                scal    R4, answer      ; -20000
       1199 :
       1199 : 68 C7 01 2C                rldi    R7, 300
       119D : 68 C8 FF 38                rldi    R8, -200
       11A1 : F8 2A                      ldi     T'*'
       11A3 : 68 84 10 5E                scal    R4, expr
       11A7 : 68 84 13 94                scal    R4, mul16
       11AB : 68 84 10 81                scal    R4, answer      ; 5536
       11AF :
       11AF : 68 C7 FF 9C                rldi    R7, -100
       11B3 : 68 C8 01 2C                rldi    R8, 300
       11B7 : F8 2A                      ldi     T'*'
       11B9 : 68 84 10 5E                scal    R4, expr
       11BD : 68 84 13 94                scal    R4, mul16
       11C1 : 68 84 10 81                scal    R4, answer      ; -30000
       11C5 :
       11C5 : 68 C7 FF 38                rldi    R7, -200
       11C9 : 68 C8 FF 9C                rldi    R8, -100
       11CD : F8 2A                      ldi     T'*'
       11CF : 68 84 10 5E                scal    R4, expr
       11D3 : 68 84 13 94                scal    R4, mul16
       11D7 : 68 84 10 81                scal    R4, answer      ; 20000
       11DB :
       11DB : 68 C7 75 30                rldi    R7, 30000
       11DF : 68 C8 00 64                rldi    R8, 100
       11E3 : F8 2F                      ldi     T'/'
       11E5 : 68 84 10 5E                scal    R4, expr
       11E9 : 68 84 14 23                scal    R4, div16
       11ED : 68 84 10 81                scal    R4, answer      ; 30
       11F1 :
       11F1 : 68 C7 FF 38                rldi    R7, -200
       11F5 : 68 C8 00 64                rldi    R8, 100
       11F9 : F8 2F                      ldi     T'/'
       11FB : 68 84 10 5E                scal    R4, expr
       11FF : 68 84 14 23                scal    R4, div16
       1203 : 68 84 10 81                scal    R4, answer      ; -2
       1207 :
       1207 : 68 C7 8A D0                rldi    R7, -30000
       120B : 68 C8 FF 38                rldi    R8, -200
       120F : F8 2F                      ldi     T'/'
       1211 : 68 84 10 5E                scal    R4, expr
       1215 : 68 84 14 23                scal    R4, div16
       1219 : 68 84 10 81                scal    R4, answer      ; 150
       121D :
       121D : 68 C7 8A D0                rldi    R7, -30000
       1221 : 68 C8 00 4E                rldi    R8, 78
       1225 : F8 2F                      ldi     T'/'
       1227 : 68 84 10 5E                scal    R4, expr
       122B : 68 84 14 23                scal    R4, div16
       122F : 68 84 10 81                scal    R4, answer      ; -384
       1233 :
       1233 : 68 C7 13 88                rldi    R7, 5000
       1237 : 68 C8 0F A0                rldi    R8, 4000
       123B : 68 84 10 95                scal    R4, comp
       123F :
       123F : 68 C7 13 88                rldi    R7, 5000
       1243 : 68 C8 13 88                rldi    R8, 5000
       1247 : 68 84 10 95                scal    R4, comp
       124B :
       124B : 68 C7 0F A0                rldi    R7, 4000
       124F : 68 C8 13 88                rldi    R8, 5000
       1253 : 68 84 10 95                scal    R4, comp
       1257 :
       1257 : 68 C7 EC 78                rldi    R7, -5000
       125B : 68 C8 F0 60                rldi    R8, -4000
       125F : 68 84 10 95                scal    R4, comp
       1263 :
       1263 : 68 C7 EC 78                rldi    R7, -5000
       1267 : 68 C8 EC 78                rldi    R8, -5000
       126B : 68 84 10 95                scal    R4, comp
       126F :
       126F : 68 C7 F0 60                rldi    R7, -4000
       1273 : 68 C8 EC 78                rldi    R8, -5000
       1277 : 68 84 10 95                scal    R4, comp
       127B :
       127B : 68 C7 7F BC                rldi    R7, 32700
       127F : 68 C8 7F 58                rldi    R8, 32600
       1283 : 68 84 10 95                scal    R4, comp
       1287 :
       1287 : 68 C7 7F BC                rldi    R7, 32700
       128B : 68 C8 7F BC                rldi    R8, 32700
       128F : 68 84 10 95                scal    R4, comp
       1293 :
       1293 : 68 C7 7F 58                rldi    R7, 32600
       1297 : 68 C8 7F BC                rldi    R8, 32700
       129B : 68 84 10 95                scal    R4, comp
       129F :
       129F : 68 C7 80 44                rldi    R7, -32700
       12A3 : 68 C8 80 A8                rldi    R8, -32600
       12A7 : 68 84 10 95                scal    R4, comp
       12AB :
       12AB : 68 C7 80 44                rldi    R7, -32700
       12AF : 68 C8 80 44                rldi    R8, -32700
       12B3 : 68 84 10 95                scal    R4, comp
       12B7 :
       12B7 : 68 C7 80 A8                rldi    R7, -32600
       12BB : 68 C8 80 44                rldi    R8, -32700
       12BF : 68 84 10 95                scal    R4, comp
       12C3 :
       12C3 : 68 C7 46 50                rldi    R7, 18000
       12C7 : 68 C8 92 A0                rldi    R8, -28000
       12CB : 68 84 10 95                scal    R4, comp
       12CF :
       12CF : 68 C7 92 A0                rldi    R7, -28000
       12D3 : 68 C8 92 A0                rldi    R8, -28000
       12D7 : 68 84 10 95                scal    R4, comp
       12DB :
       12DB : 68 C7 92 A0                rldi    R7, -28000
       12DF : 68 C8 46 50                rldi    R8, 18000
       12E3 : 68 84 10 95                scal    R4, comp
       12E7 :
       12E7 : 68 94                      sret    R4
       12E9 :
       12E9 :                            include "arith.inc"
(1)    12E9 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    12E9 :                            cpu     1804A
(1)    12E9 :
(1)    12E9 :                    ;;; Print unsigned 16-bit integer as decimal
(1)    12E9 :                    ;;; @param R7 value
(1)    12E9 :                    ;;; @clobber D R7 R8 R15
(1)    12E9 :                    print_uint16:
(1)    12E9 : 97                         ghi     R7
(1)    12EA : 3A F0                      bnz     print_uint16_loop
(1)    12EC : 87                         glo     R7
(1)    12ED : C2 13 0A                   bz      print_uint16_zero
(1)    12F0 :                    print_uint16_loop:
(1)    12F0 : 97                         ghi     R7
(1)    12F1 : 3A F8                      bnz     print_uint16_digit
(1)    12F3 : 87                         glo     R7
(1)    12F4 : 3A F8                      bnz     print_uint16_digit
(1)    12F6 : 68 94                      sret    R4
(1)    12F8 :                    print_uint16_digit:
(1)    12F8 : F8 00                      ldi     0
(1)    12FA : B8                         phi     R8
(1)    12FB : F8 0A                      ldi     10
(1)    12FD : A8                         plo     R8              ; divisor=10
(1)    12FE : 68 84 13 CA                scal    R4, udiv16
(1)    1302 : 88                         glo     R8
(1)    1303 : 73                         stxd                    ; push remainder
(1)    1304 : 68 84 12 F0                scal    R4, print_uint16_loop
(1)    1308 : 12                         inc     R2
(1)    1309 : 02                         ldn     R2              ; pop remainder
(1)    130A :                    print_uint16_zero:
(1)    130A : FC 30                      adi     T'0'
(1)    130C : C0 10 10                   br      putchar
(1)    130F :
(1)    130F :                    ;;; Print signed 16-bit integer as decimal
(1)    130F :                    ;;; @param R7 value
(1)    130F :                    ;;; @clobber D R15
(1)    130F :                    print_int16:
(1)    130F : 68 A8                      rsxd    R8              ; save R8
(1)    1311 : 68 A7                      rsxd    R7              ; save R7
(1)    1313 : 97                         ghi     R7
(1)    1314 : FA 80                      ani     X'80'
(1)    1316 : 32 27                      bz      print_int16_print
(1)    1318 : F8 2D                      ldi     T'-'
(1)    131A : 68 84 10 10                scal    R4, putchar      ; print '-'
(1)    131E : 97                         ghi     R7
(1)    131F : FB FF                      xri     X'FF'
(1)    1321 : B7                         phi     R7
(1)    1322 : 87                         glo     R7
(1)    1323 : FB FF                      xri     X'FF'
(1)    1325 : A7                         plo     R7
(1)    1326 : 17                         inc     R7              ; negate value
(1)    1327 :                    print_int16_print:
(1)    1327 : 68 84 12 E9                scal    R4, print_uint16
(1)    132B : 60                         irx
(1)    132C : 68 67                      rlxa    R7              ; restore R7
(1)    132E : 68 68                      rlxa    R8              ; restore R8
(1)    1330 : 22                         dec     R2
(1)    1331 : 68 94                      sret    R4
(1)    1333 :
(1)    1333 :                    ;;; Store R7 to variable
(1)    1333 :                    ;;;   SCAL R4, store_R7
(1)    1333 :                    ;;;   DC   A(variable)
(1)    1333 :                    ;;; @clobber D R15
(1)    1333 :                    store_R7:
(1)    1333 : E4                         sex     R4
(1)    1334 : 68 6F                      rlxa    R15             ; R15=&valiable
(1)    1336 : EF                         sex     R15
(1)    1337 : 60                         irx
(1)    1338 : 68 A7                      rsxd    R7
(1)    133A : E2                         sex     R2
(1)    133B : 68 94                      sret    R4
(1)    133D :
(1)    133D :                    ;;; Load variable to R7
(1)    133D :                    ;;;   SCAL R4, load_R7
(1)    133D :                    ;;;   DC   A(variable)
(1)    133D :                    ;;; @return R7 variable
(1)    133D :                    ;;; @clobber R15
(1)    133D :                    load_R7:
(1)    133D : E4                         sex     R4
(1)    133E : 68 67                      rlxa    R7              ; R7=&variable
(1)    1340 : E7                         sex     R7
(1)    1341 : 68 67                      rlxa    R7
(1)    1343 : E2                         sex     R2
(1)    1344 : 68 94                      sret    R4
(1)    1346 :
(1)    1346 :                    ;;; Load variable to R8
(1)    1346 :                    ;;;   SCAL R4, load_R8
(1)    1346 :                    ;;;   DC   A(variable)
(1)    1346 :                    ;;; @clobber R15
(1)    1346 :                    load_R8:
(1)    1346 : E4                         sex     R4
(1)    1347 : 68 68                      rlxa    R8              ; R8=&variable
(1)    1349 : E8                         sex     R8
(1)    134A : 68 68                      rlxa    R8
(1)    134C : E2                         sex     R2
(1)    134D : 68 94                      sret    R4
(1)    134F :
(1)    134F :                    ;;; Signed addition: summand += addend
(1)    134F :                    ;;; @param R7 summand
(1)    134F :                    ;;; @param R8 addend
(1)    134F :                    ;;; @return R7 summand + addend
(1)    134F :                    ;;;   SCAL R4, add16
(1)    134F :                    ;;; @clobber D
(1)    134F :                    add16:
(1)    134F : 88                         glo     R8
(1)    1350 : 52                         str     R2
(1)    1351 : 87                         glo     R7
(1)    1352 : F4                         add
(1)    1353 : A7                         plo     R7
(1)    1354 : 98                         ghi     R8
(1)    1355 : 52                         str     R2
(1)    1356 : 97                         ghi     R7
(1)    1357 : 74                         adc
(1)    1358 : B7                         phi     R7
(1)    1359 : 68 94                      sret    R4
(1)    135B :
(1)    135B :                    ;;; Singed subtraction: minuend -= subtrahend
(1)    135B :                    ;;;   SCAL R4, sub16
(1)    135B :                    ;;; @param R7 minuend
(1)    135B :                    ;;; @param R8 subtrahend
(1)    135B :                    ;;; @return R7 minuend - subtrahend
(1)    135B :                    ;;; @clobber D
(1)    135B :                    sub16:
(1)    135B : 88                         glo     R8
(1)    135C : 52                         str     R2
(1)    135D : 87                         glo     R7
(1)    135E : F7                         sm
(1)    135F : A7                         plo     R7
(1)    1360 : 98                         ghi     R8
(1)    1361 : 52                         str     R2
(1)    1362 : 97                         ghi     R7
(1)    1363 : 77                         smb
(1)    1364 : B7                         phi     R7
(1)    1365 : 68 94                      sret    R4
(1)    1367 :
(1)    1367 :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)    1367 :                    ;;; @param R7 multiplicand
(1)    1367 :                    ;;; @param R8 multiplier
(1)    1367 :                    ;;; @return R7 result
(1)    1367 :                    ;;; @clobber D R7 R8 R15
(1)    1367 :                    umul16:
(1)    1367 : F8 00                      ldi     0
(1)    1369 : BF                         phi     R15
(1)    136A : AF                         plo     R15             ; R15=result
(1)    136B : 30 88                      br      umul16_check
(1)    136D :                    umul16_loop:
(1)    136D : 88                         glo     R8
(1)    136E : FA 01                      ani     1
(1)    1370 : 32 7C                      bz      umul16_sr       ; lsb(multiplier)==0
(1)    1372 : 87                         glo     R7
(1)    1373 : 52                         str     R2              ; stack top=multiplicand.0
(1)    1374 : 8F                         glo     R15
(1)    1375 : F4                         add
(1)    1376 : AF                         plo     R15
(1)    1377 : 97                         ghi     R7
(1)    1378 : 52                         str     R2              ; stack top=multiplicand.1
(1)    1379 : 9F                         ghi     R15
(1)    137A : 74                         adc
(1)    137B : BF                         phi     R15             ; result += multiplicand
(1)    137C :                    umul16_sr:
(1)    137C : 98                         ghi     R8
(1)    137D : F6                         shr
(1)    137E : B8                         phi     R8
(1)    137F : 88                         glo     R8
(1)    1380 : 76                         shrc
(1)    1381 : A8                         plo     R8              ; multiplier >>= 1
(1)    1382 : 87                         glo     R7
(1)    1383 : FE                         shl
(1)    1384 : A7                         plo     R7
(1)    1385 : 97                         ghi     R7
(1)    1386 : 7E                         shlc
(1)    1387 : B7                         phi     R7              ; multiplicand <<= 1
(1)    1388 :                    umul16_check:
(1)    1388 : 98                         ghi     R8
(1)    1389 : 3A 6D                      bnz     umul16_loop     ; while multiplier != 0
(1)    138B : 88                         glo     R8
(1)    138C : 3A 6D                      bnz     umul16_loop     ; while multiplier != 0
(1)    138E : 9F                         ghi     R15
(1)    138F : B7                         phi     R7
(1)    1390 : 8F                         glo     R15
(1)    1391 : A7                         plo     R7              ; R7=result
(1)    1392 : 68 94                      sret    R4
(1)    1394 :
(1)    1394 :                    ;;; Signed multiplication: multiplicand *= multiplier
(1)    1394 :                    ;;; @param R7 multiplicand
(1)    1394 :                    ;;; @param R8 multiplier
(1)    1394 :                    ;;; @return R7 multiplicand * multiplier
(1)    1394 :                    ;;;   SCAL R4, mul16
(1)    1394 :                    ;;; @clobber R8 R15
(1)    1394 :                    mul16:
(1)    1394 : 98                         ghi     R8
(1)    1395 : 52                         str     R2
(1)    1396 : 97                         ghi     R7
(1)    1397 : F3                         xor
(1)    1398 : 73                         stxd                    ; push sign
(1)    1399 : 98                         ghi     R8
(1)    139A : FA 80                      ani     X'80'
(1)    139C : 32 A7                      bz      mul16_multiplicand
(1)    139E : 98                         ghi     R8
(1)    139F : FB FF                      xri     X'FF'
(1)    13A1 : B8                         phi     R8
(1)    13A2 : 88                         glo     R8
(1)    13A3 : FB FF                      xri     X'FF'
(1)    13A5 : A8                         plo     R8
(1)    13A6 : 18                         inc     R8              ; negate multiplier
(1)    13A7 :                    mul16_multiplicand:
(1)    13A7 : 97                         ghi     R7
(1)    13A8 : FA 80                      ani     X'80'
(1)    13AA : 32 B5                      bz      mul16_multiply
(1)    13AC : 97                         ghi     R7
(1)    13AD : FB FF                      xri     X'FF'
(1)    13AF : B7                         phi     R7
(1)    13B0 : 87                         glo     R7
(1)    13B1 : FB FF                      xri     X'FF'
(1)    13B3 : A7                         plo     R7
(1)    13B4 : 17                         inc     R7              ; negate multiplicand
(1)    13B5 :                    mul16_multiply:
(1)    13B5 : 68 84 13 67                scal    R4, umul16
(1)    13B9 : 60                         irx
(1)    13BA : F0                         ldx                     ; sign
(1)    13BB : FA 80                      ani     X'80'
(1)    13BD : 32 C8                      bz      mul16_return
(1)    13BF : 97                         ghi     R7
(1)    13C0 : FB FF                      xri     X'FF'
(1)    13C2 : B7                         phi     R7
(1)    13C3 : 87                         glo     R7
(1)    13C4 : FB FF                      xri     X'FF'
(1)    13C6 : A7                         plo     R7
(1)    13C7 : 17                         inc     R7              ; negate result
(1)    13C8 :                    mul16_return:
(1)    13C8 : 68 94                      sret    R4
(1)    13CA :
(1)    13CA :                    ;;; Unsigned division: dividend / divisor = quotient ... remainder
(1)    13CA :                    ;;; @praram R7 dividend
(1)    13CA :                    ;;; @praram R8 divisor
(1)    13CA :                    ;;; @return R7 quotient
(1)    13CA :                    ;;; @return R8 remainder
(1)    13CA :                    ;;; @clobber R7 R8 R15
(1)    13CA :                    udiv16:
(1)    13CA : 98                         ghi     R8
(1)    13CB : 3A D2                      bnz     udiv16_calc
(1)    13CD : 88                         glo     R8
(1)    13CE : 3A D2                      bnz     udiv16_calc
(1)    13D0 : 68 94                      sret    R4
(1)    13D2 :                    udiv16_calc:
(1)    13D2 : 68 A9                      rsxd    R9              ; save R9
(1)    13D4 : F8 01                      ldi     1
(1)    13D6 : AF                         plo     R15             ; R15.0=bits
(1)    13D7 : 30 E0                      br      udiv16_prep
(1)    13D9 :                    udiv16_prep_loop:
(1)    13D9 : 88                         glo     R8
(1)    13DA : FE                         shl
(1)    13DB : A8                         plo     R8
(1)    13DC : 98                         ghi     R8
(1)    13DD : 7E                         shlc
(1)    13DE : B8                         phi     R8              ; divisor <<= 1
(1)    13DF : 1F                         inc     R15             ; ++bits
(1)    13E0 :                    udiv16_prep:
(1)    13E0 : 98                         ghi     R8
(1)    13E1 : FA 80                      ani     X'80'
(1)    13E3 : 32 D9                      bz      udiv16_prep_loop ; while msb(divisor) == 0
(1)    13E5 : 97                         ghi     R7
(1)    13E6 : B9                         phi     R9
(1)    13E7 : 87                         glo     R7
(1)    13E8 : A9                         plo     R9              ; R9=dividend
(1)    13E9 : F8 00                      ldi     0
(1)    13EB : B7                         phi     R7
(1)    13EC : A7                         plo     R7              ; R7=quotient
(1)    13ED : 30 FB                      br      udiv16_enter_loop
(1)    13EF :                    udiv16_loop:
(1)    13EF : 98                         ghi     R8
(1)    13F0 : F6                         shr
(1)    13F1 : B8                         phi     R8
(1)    13F2 : 88                         glo     R8
(1)    13F3 : 76                         shrc
(1)    13F4 : A8                         plo     R8              ; divisor >>= 1
(1)    13F5 : 87                         glo     R7
(1)    13F6 : FE                         shl
(1)    13F7 : A7                         plo     R7
(1)    13F8 : 97                         ghi     R7
(1)    13F9 : 7E                         shlc
(1)    13FA : B7                         phi     R7              ; quotient <<= 1
(1)    13FB :                    udiv16_enter_loop:
(1)    13FB : 88                         glo     R8
(1)    13FC : 52                         str     R2
(1)    13FD : 89                         glo     R9
(1)    13FE : F7                         sm
(1)    13FF : A9                         plo     R9
(1)    1400 : 98                         ghi     R8
(1)    1401 : 52                         str     R2
(1)    1402 : 99                         ghi     R9
(1)    1403 : 77                         smb
(1)    1404 : B9                         phi     R9              ; dividend-=divisor
(1)    1405 : 3B 0A                      bm      udiv16_readd    ; branch if dividend < 0
(1)    1407 : 17                         inc     R7              ; quotient += 1
(1)    1408 : 30 14                      br      udiv16_next
(1)    140A :                    udiv16_readd:
(1)    140A : 88                         glo     R8
(1)    140B : 52                         str     R2
(1)    140C : 89                         glo     R9
(1)    140D : F4                         add
(1)    140E : A9                         plo     R9
(1)    140F : 98                         ghi     R8
(1)    1410 : 52                         str     R2
(1)    1411 : 99                         ghi     R9
(1)    1412 : 74                         adc
(1)    1413 : B9                         phi     R9              ; dividend+=divisor
(1)    1414 :                    udiv16_next:
(1)    1414 : 2F                         dec     R15
(1)    1415 : 8F                         glo     R15
(1)    1416 : CA 13 EF                   bnz     udiv16_loop     ; while bits != 0
(1)    1419 : 99                         ghi     R9
(1)    141A : B8                         phi     R8
(1)    141B : 89                         glo     R9
(1)    141C : A8                         plo     R8              ; R8=remainder
(1)    141D : 60                         irx
(1)    141E : 68 69                      rlxa    R9              ; restore R9
(1)    1420 : 22                         dec     R2
(1)    1421 : 68 94                      sret    R4
(1)    1423 :
(1)    1423 :                    ;;; Signed division: dividend / divisor = quotient ... remainder
(1)    1423 :                    ;;; @param R7 dividend
(1)    1423 :                    ;;; @param R8 divisor
(1)    1423 :                    ;;; @return R7 quotient
(1)    1423 :                    ;;; @return R8 remainder
(1)    1423 :                    ;;;   SCAL R4, duvsi2
(1)    1423 :                    ;;;   SEP R5
(1)    1423 :                    ;;;   DC  A(div16)
(1)    1423 :                    ;;; @clobber R15
(1)    1423 :                    div16:
(1)    1423 : 98                         ghi     R8
(1)    1424 : 52                         str     R2
(1)    1425 : 97                         ghi     R7
(1)    1426 : F3                         xor
(1)    1427 : 73                         stxd                    ; push sign
(1)    1428 : 98                         ghi     R8
(1)    1429 : FA 80                      ani     X'80'
(1)    142B : 32 36                      bz      div16_dividend
(1)    142D : 98                         ghi     R8
(1)    142E : FB FF                      xri     X'FF'
(1)    1430 : B8                         phi     R8
(1)    1431 : 88                         glo     R8
(1)    1432 : FB FF                      xri     X'FF'
(1)    1434 : A8                         plo     R8
(1)    1435 : 18                         inc     R8              ; negate divisor
(1)    1436 :                    div16_dividend:
(1)    1436 : 97                         ghi     R7              ; R7=dividend
(1)    1437 : FA 80                      ani     X'80'
(1)    1439 : 32 44                      bz      div16_divide
(1)    143B : 97                         ghi     R7
(1)    143C : FB FF                      xri     X'FF'
(1)    143E : B7                         phi     R7
(1)    143F : 87                         glo     R7
(1)    1440 : FB FF                      xri     X'FF'
(1)    1442 : A7                         plo     R7
(1)    1443 : 17                         inc     R7              ; negate dividend
(1)    1444 :                    div16_divide:
(1)    1444 : 68 84 13 CA                scal    R4, udiv16
(1)    1448 : 60                         irx
(1)    1449 : F0                         ldx                     ; pop sign
(1)    144A : FA 80                      ani     X'80'
(1)    144C : 32 57                      bz      div16_return
(1)    144E : 97                         ghi     R7
(1)    144F : FB FF                      xri     X'FF'
(1)    1451 : B7                         phi     R7
(1)    1452 : 87                         glo     R7
(1)    1453 : FB FF                      xri     X'FF'
(1)    1455 : A7                         plo     R7
(1)    1456 : 17                         inc     R7              ; negate quotient
(1)    1457 :                    div16_return:
(1)    1457 : 68 94                      sret    R4
       1459 :
       1459 :                            end
