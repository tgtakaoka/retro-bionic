          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            include "im6100.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            cpu     6100
(1)       0 :                            include "pdp8.inc"
(2)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :                    /// Origin
(2)       0 : =0                 PC_INTR         =       0000    // PC saved on interrupt
(2)       0 : =1                 ORG_INTR        =       0001    // Interrupt origin
(2)       0 : =7777              ORG_RESET       =       7777    // Reset origin
(2)       0 : =10                AUTO_INDEX      =       0010    // Auto pre-increment pointers
(2)       0 : =20                PAGE0           =       0020
(2)       0 :                    /// FLAGS; RTF, GTF
(2)       0 : =4000              FLAGS_LINK      =       4000    // Link flag
(2)       0 : =200               FLAGS_IEFF      =       0200    // Interrupt enable flip-flop
(1)       0 :                    /// FLAGS; RTF, GTF
(1)       0 : =1000              FLAGS_INTREQ    =       1000    // INTREQ line
          0 :                    /// MC6850 Asynchronous Communication Interface Adapter
          0 : =7                 ACIA    = 07
          0 :                            include "mc6850.inc"
(1)       0 :                    /// -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    /// MC6850
(1)       0 :                    /// Asynchronous Communication Interface Adapter
(1)       0 : =0                 ACIA_status     = 0
(1)       0 : =4                 ACIA_control    = 4
(1)       0 : =1                 ACIA_receive    = 1
(1)       0 : =5                 ACIA_transmit   = 5
(1)       0 :                    //  Counter Divider Select Bits
(1)       0 : =3                 CDS_gm          =       011B    / Group mask
(1)       0 : =0                 CDS_DIV1_gc     =       000B    / /1
(1)       0 : =1                 CDS_DIV16_gc    =       001B    / /16
(1)       0 : =2                 CDS_DIV64_gc    =       010B    / /64
(1)       0 : =3                 CDS_RESET_gc    =       011B    / Master Reset
(1)       0 :                    //  Word Select Bits
(1)       0 : =34                WSB_gm          =       011100B / Group mask
(1)       0 : =0                 WSB_7E2_gc      =       000000B / 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc      =       000100B / 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =10                WSB_7E1_gc      =       001000B / 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =14                WSB_7O1_gc      =       001100B / 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =20                WSB_8N2_gc      =       010000B / 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =24                WSB_8N1_gc      =       010100B / 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =30                WSB_8E1_gc      =       011000B / 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =34                WSB_8O1_gc      =       011100B / 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                    //  Transmit Control Bits
(1)       0 : =140               TCB_gm          =     01100000B / Group mask
(1)       0 : =0                 TCB_DI_gc       =     00000000B / RTS=Low,  Tx Interrupt Disabled
(1)       0 : =40                TCB_EI_gc       =     00100000B / RTS=Low,  Tx Interrupt Enabled
(1)       0 : =100               TCB_RTS_gc      =     01000000B / RTS=High, Tx Interrupt Disabled
(1)       0 : =140               TCB_BREAK_gc    =     01100000B / RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                    / Transmit Break Level
(1)       0 : =200               RIEB_bm         =     10000000B / Receive Interrupt Enable Bit mask
(1)       0 :                    /// Status register
(1)       0 : =1                 RDRF_bm         =     00000001B / Receive Data Register Full
(1)       0 : =2                 TDRE_bm         =     00000010B / Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm         =     00000100B / Data Carrier Detect Flag
(1)       0 : =10                CTSF_bm         =     00001000B / Clear To Send Flag
(1)       0 : =20                FERR_bm         =     00010000B / Frame Error Flag
(1)       0 : =40                OVRN_bm         =     00100000B / Receiver Overrun Flag
(1)       0 : =100               PERR_bm         =     01000000B / Parity Error Flag
(1)       0 : =200               IRQF_bm         =     10000000B / Interrupt Request Flag
          0 :
       7776 :                            *ORG_RESET-1
       7776 : 0200                       initialize
       7777 : 5776                       jmp     I .-1
      10000 :
         20 :                            *PAGE0
         20 : 0232               I_putchar,      putchar
         21 : 0212               I_putspace,     putspace
         22 : 0220               I_newline,      newline
         23 : 1200               I_add24,        add24
         24 : 1216               I_sub24,        sub24
         25 : 1444               I_neg24,        neg24
         26 : 1601               I_mul24,        mul24
         27 : 1645               I_div24,        div24
         30 : 1400               I_umul24,       umul24
         31 : 1464               I_udiv16,       udiv16
         32 : 1237               I_print_int24,  print_int24
         33 : 0400               I_set_VAVB,     set_VAVB
         34 : 1072               I_expr,         expr
         35 : 1121               I_answer,       answer
         36 : 1133               I_comp,         comp
         37 :
         37 : 0000               arith_ptr,      0       / arithmetic routine work
         40 :                    R0,                     / 24-bit arithmetic accumulator
         40 : 0000               R0L,            0
         41 : 0000               R0H,            0
         42 :                    R1,                     / 24-bit arithmetic operand 1
         42 : 0000               R1L,            0
         43 : 0000               R1H,            0
         44 :                    R2,                     / 24-bit arithmetic operand 2
         44 : 0000               R2L,            0
         45 : 0000               R2H,            0
         46 :
         46 :                    VA,
         46 : 0000               VAL,            0
         47 : 0000               VAH,            0
         50 :                    VB,
         50 : 0000               VBL,            0
         51 : 0000               VBH,            0
         52 :
        200 :                            page    1
        200 :                    initialize,
        200 :                            // Initialize ACIA
        200 : 7200                       cla
        201 : 1210                       tad     ACIA_config
        202 : 6074                       iot     ACIA ACIA_control
        203 : 1211                       tad     RX_NO_TX_NO
        204 : 6074                       iot     ACIA ACIA_control
        205 : 4607                       jms     I I_arith
        206 : 7402                       hlt
        207 : 0421               I_arith,        arith
        210 :
        210 : 0003               ACIA_config,    CDS_RESET_gc
        211 : 0024               RX_NO_TX_NO,    WSB_8N1_gc
        212 :
        212 :                    /// Print space
        212 :                    /// @clobber AC
        212 : 0000               putspace,       .-.
        213 : 7200                       cla
        214 : 1217                       tad     char_space
        215 : 4232                       jms     putchar
        216 : 5612                       jmp     I putspace
        217 : 0040               char_space,     040             / char ' '
        220 :
        220 :                    /// Print new line
        220 :                    /// @clobber AC
        220 : 0000               newline,        .-.
        221 : 7200                       cla
        222 : 1230                       tad     char_CR
        223 : 4232                       jms     putchar
        224 : 7200                       cla
        225 : 1231                       tad     char_LF
        226 : 4232                       jms     putchar
        227 : 5620                       jmp I   newline
        230 : 0015               char_CR,        015             / Carriage return
        231 : 0012               char_LF,        012             / Line feed
        232 :
        232 :                    /// Print character
        232 :                    /// @param AC character
        232 : 0000               putchar,        .-.
        233 : 3245                       dca     putchar_char    / Save character
        234 :                    putchar_loop,
        234 : 6070                       iot     ACIA ACIA_status
        235 : 0246                       and     bit_transmit
        236 : 7450                       sna                     / Skip if AC != 0
        237 : 5234                       jmp     putchar_loop    / AC=0
        240 : 7200                       cla
        241 : 1245                       tad     putchar_char    / Restore character
        242 : 6075                       iot     ACIA ACIA_transmit
        243 : 1245                       tad     putchar_char    / Restore character
        244 : 5632                       jmp     I putchar
        245 : 0000               putchar_char,   0
        246 : 0002               bit_transmit,   TDRE_bm
        247 :
        247 :                            decimal
        247 :                    lo,     function val,val & 07777B
        247 :                    hi,     function val,(val >> 12) & 07777B
        247 :
        400 :                            page
        400 :
        400 :                    /// Set 2 24-bit values to VA and VB
        400 :                    /// @param (PC+1:PC+2) value for VA
        400 :                    /// @param (PC+3:PC+4) value for VB
        400 :                    /// @return AC=0
        400 : 0000               set_VAVB,       .-.
        401 : 7200                       cla
        402 : 1600                       tad     I set_VAVB      / AC=low(value)
        403 : 2200                       isz     set_VAVB
        404 : 3046                       dca     VAL             / low(VA)
        405 : 1600                       tad     I set_VAVB      / AC=high(value)
        406 : 2200                       isz     set_VAVB
        407 : 3047                       dca     VAH             / high(VA)
        410 : 1600                       tad     I set_VAVB      / AC=low(value)
        411 : 2200                       isz     set_VAVB
        412 : 3050                       dca     VBL             / low(VB)
        413 : 1600                       tad     I set_VAVB      / AC=high(value)
        414 : 2200                       isz     set_VAVB
        415 : 3051                       dca     VBH             / high(VB)
        416 : 5600                       jmp     I set_VAVB      / return, AC=0
        417 :
        417 : 0053               char_add,      2BH              / char '+'
        420 :
        420 :                    arith_end,
        420 : 5621                       jmp     I arith
        421 : 0000               arith,          .-.
        422 : 4433                       jms     I I_set_VAVB
        423 : 3120                       lo(18000)
        424 : 0004                       hi(18000)
        425 : 6540                       lo(28000)
        426 : 0006                       hi(28000)
        427 : 1217                       tad     char_add
        430 : 4434                       jms     I I_expr
        431 : 4423                       jms     I I_add24
        432 : 0050                       VB
        433 : 4435                       jms     I I_answer      / 46000
        434 :
        434 : 4433                       jms     I I_set_VAVB
        435 : 3120                       lo(18000)
        436 : 0004                       hi(18000)
        437 : 4660                       lo(-18000)
        440 : 7773                       hi(-18000)
        441 : 1217                       tad     char_add
        442 : 4434                       jms     I I_expr
        443 : 4423                       jms     I I_add24
        444 : 0050                       VB
        445 : 4435                       jms     I I_answer      / 0
        446 :
        446 : 4433                       jms     I I_set_VAVB
        447 : 4660                       lo(-18000)
        450 : 7773                       hi(-18000)
        451 : 4660                       lo(-18000)
        452 : 7773                       hi(-18000)
        453 : 1217                       tad     char_add
        454 : 4434                       jms     I I_expr
        455 : 4423                       jms     I I_add24
        456 : 0050                       VB
        457 : 4435                       jms     I I_answer      / -36000
        460 :
        460 : 5262                       jmp     .+2
        461 : 0055               char_sub,     2DH               / char '-'
        462 :
        462 : 4433                       jms     I I_set_VAVB
        463 : 4660                       lo(-18000)
        464 : 7773                       hi(-18000)
        465 : 1240                       lo(-28000)
        466 : 7771                       hi(-28000)
        467 : 1261                       tad     char_sub
        470 : 4434                       jms     I I_expr
        471 : 4424                       jms     I I_sub24
        472 : 0050                       VB
        473 : 4435                       jms     I I_answer      / 10000
        474 :
        474 : 4433                       jms     I I_set_VAVB
        475 : 3120                       lo(18000)
        476 : 0004                       hi(18000)
        477 : 4660                       lo(-18000)
        500 : 7773                       hi(-18000)
        501 : 1261                       tad     char_sub
        502 : 4434                       jms     I I_expr
        503 : 4424                       jms     I I_sub24
        504 : 0050                       VB
        505 : 4435                       jms     I I_answer      / 36000
        506 :
        506 : 4433                       jms     I I_set_VAVB
        507 : 1240                       lo(-28000)
        510 : 7771                       hi(-28000)
        511 : 4660                       lo(-18000)
        512 : 7773                       hi(-18000)
        513 : 1261                       tad     char_sub
        514 : 4434                       jms     I I_expr
        515 : 4424                       jms     I I_sub24
        516 : 0050                       VB
        517 : 4435                       jms     I I_answer      / -10000
        520 :
        520 : 5721                       jmp     I I_arith_mul
        521 : 0601               I_arith_mul,    arith_mul
        522 :
        600 :                            page
        600 : 0052               char_mul,     2AH               / char '*'
        601 :
        601 :                    arith_mul,
        601 : 4433                       jms     I I_set_VAVB
        602 : 0144                       lo(100)
        603 : 0000                       hi(100)
        604 : 0454                       lo(300)
        605 : 0000                       hi(300)
        606 : 1200                       tad     char_mul
        607 : 4434                       jms     I I_expr
        610 : 4426                       jms     I I_mul24
        611 : 0050                       VB
        612 : 4435                       jms     I I_answer      / 30000
        613 :
        613 : 4433                       jms     I I_set_VAVB
        614 : 0310                       lo(200)
        615 : 0000                       hi(200)
        616 : 0454                       lo(300)
        617 : 0000                       hi(300)
        620 : 1200                       tad     char_mul
        621 : 4434                       jms     I I_expr
        622 : 4426                       jms     I I_mul24
        623 : 0050                       VB
        624 : 4435                       jms     I I_answer      / 60000
        625 :
        625 : 4433                       jms     I I_set_VAVB
        626 : 0454                       lo(300)
        627 : 0000                       hi(300)
        630 : 7470                       lo(-200)
        631 : 7777                       hi(-200)
        632 : 1200                       tad     char_mul
        633 : 4434                       jms     I I_expr
        634 : 4426                       jms     I I_mul24
        635 : 0050                       VB
        636 : 4435                       jms     I I_answer      / -60000
        637 :
        637 : 4433                       jms     I I_set_VAVB
        640 : 0144                       lo(100)
        641 : 0000                       hi(100)
        642 : 7324                       lo(-300)
        643 : 7777                       hi(-300)
        644 : 1200                       tad     char_mul
        645 : 4434                       jms     I I_expr
        646 : 4426                       jms     I I_mul24
        647 : 0050                       VB
        650 : 4435                       jms     I I_answer      / -30000
        651 :
        651 : 4433                       jms     I I_set_VAVB
        652 : 7470                       lo(-200)
        653 : 7777                       hi(-200)
        654 : 7634                       lo(-100)
        655 : 7777                       hi(-100)
        656 : 1200                       tad     char_mul
        657 : 4434                       jms     I I_expr
        660 : 4426                       jms     I I_mul24
        661 : 0050                       VB
        662 : 4435                       jms     I I_answer      / 20000
        663 :
        663 : 5265                       jmp     .+2
        664 : 0057               char_div,     2FH               / char '/'
        665 :
        665 : 4433                       jms     I I_set_VAVB
        666 : 2460                       lo(30000)
        667 : 0007                       hi(30000)
        670 : 0144                       lo(100)
        671 : 0000                       hi(100)
        672 : 1264                       tad     char_div
        673 : 4434                       jms     I I_expr
        674 : 4427                       jms     I I_div24
        675 : 0050                       VB
        676 : 4435                       jms     I I_answer      / 300
        677 :
        677 : 4433                       jms     I I_set_VAVB
        700 : 7470                       lo(-200)
        701 : 7777                       hi(-200)
        702 : 0144                       lo(100)
        703 : 0000                       hi(100)
        704 : 1264                       tad     char_div
        705 : 4434                       jms     I I_expr
        706 : 4427                       jms     I I_div24
        707 : 0050                       VB
        710 : 4435                       jms     I I_answer      / -2
        711 :
        711 : 4433                       jms     I I_set_VAVB
        712 : 5320                       lo(-30000)
        713 : 7770                       hi(-30000)
        714 : 7470                       lo(-200)
        715 : 7777                       hi(-200)
        716 : 1264                       tad     char_div
        717 : 4434                       jms     I I_expr
        720 : 4427                       jms     I I_div24
        721 : 0050                       VB
        722 : 4435                       jms     I I_answer      / 150
        723 :
        723 : 4433                       jms     I I_set_VAVB
        724 : 5320                       lo(-30000)
        725 : 7770                       hi(-30000)
        726 : 0116                       lo(78)
        727 : 0000                       hi(78)
        730 : 1264                       tad     char_div
        731 : 4434                       jms     I I_expr
        732 : 4427                       jms     I I_div24
        733 : 0050                       VB
        734 : 4435                       jms     I I_answer      / -384
        735 :
        735 : 7402                       hlt                     /  @@@@@@@@
        736 :
        736 : 4433                       jms     I I_set_VAVB
        737 : 1610                       lo(5000)
        740 : 0001                       hi(5000)
        741 : 7640                       lo(4000)
        742 : 0000                       hi(4000)
        743 : 4436                       jms     I I_comp
        744 :
        744 : 4433                       jms     I I_set_VAVB
        745 : 1610                       lo(5000)
        746 : 0001                       hi(5000)
        747 : 1610                       lo(5000)
        750 : 0001                       hi(5000)
        751 : 4436                       jms     I I_comp
        752 :
        752 : 4433                       jms     I I_set_VAVB
        753 : 7640                       lo(4000)
        754 : 0000                       hi(4000)
        755 : 1610                       lo(5000)
        756 : 0001                       hi(5000)
        757 : 4436                       jms     I I_comp
        760 :
        760 : 4433                       jms     I I_set_VAVB
        761 : 6170                       lo(-5000)
        762 : 7776                       hi(-5000)
        763 : 0140                       lo(-4000)
        764 : 7777                       hi(-4000)
        765 : 4436                       jms     I I_comp
        766 :
        766 : 4433                       jms     I I_set_VAVB
        767 : 6170                       lo(-5000)
        770 : 7776                       hi(-5000)
        771 : 6170                       lo(-5000)
        772 : 7776                       hi(-5000)
        773 : 4436                       jms     I I_comp
        774 :
        774 : 4433                       jms     I I_set_VAVB
        775 : 0140                       lo(-4000)
        776 : 7777                       hi(-4000)
        777 : 6170                       lo(-5000)
       1000 : 7776                       hi(-5000)
       1001 : 4436                       jms     I I_comp
       1002 :
       1002 : 4433                       jms     I I_set_VAVB
       1003 : 7674                       lo(32700)
       1004 : 0007                       hi(32700)
       1005 : 7530                       lo(32600)
       1006 : 0007                       hi(32600)
       1007 : 4436                       jms     I I_comp
       1010 :
       1010 : 4433                       jms     I I_set_VAVB
       1011 : 7674                       lo(32700)
       1012 : 0007                       hi(32700)
       1013 : 7674                       lo(32700)
       1014 : 0007                       hi(32700)
       1015 : 4436                       jms     I I_comp
       1016 :
       1016 : 4433                       jms     I I_set_VAVB
       1017 : 7530                       lo(32600)
       1020 : 0007                       hi(32600)
       1021 : 7674                       lo(32700)
       1022 : 0007                       hi(32700)
       1023 : 4436                       jms     I I_comp
       1024 :
       1024 : 4433                       jms     I I_set_VAVB
       1025 : 0104                       lo(-32700)
       1026 : 7770                       hi(-32700)
       1027 : 0250                       lo(-32600)
       1030 : 7770                       hi(-32600)
       1031 : 4436                       jms     I I_comp
       1032 :
       1032 : 4433                       jms     I I_set_VAVB
       1033 : 0104                       lo(-32700)
       1034 : 7770                       hi(-32700)
       1035 : 0104                       lo(-32700)
       1036 : 7770                       hi(-32700)
       1037 : 4436                       jms     I I_comp
       1040 :
       1040 : 4433                       jms     I I_set_VAVB
       1041 : 0250                       lo(-32600)
       1042 : 7770                       hi(-32600)
       1043 : 0104                       lo(-32700)
       1044 : 7770                       hi(-32700)
       1045 : 4436                       jms     I I_comp
       1046 :
       1046 : 4433                       jms     I I_set_VAVB
       1047 : 3120                       lo(18000)
       1050 : 0004                       hi(18000)
       1051 : 1240                       lo(-28000)
       1052 : 7771                       hi(-28000)
       1053 : 4436                       jms     I I_comp
       1054 :
       1054 : 4433                       jms     I I_set_VAVB
       1055 : 1240                       lo(-28000)
       1056 : 7771                       hi(-28000)
       1057 : 1240                       lo(-28000)
       1060 : 7771                       hi(-28000)
       1061 : 4436                       jms     I I_comp
       1062 :
       1062 : 4433                       jms     I I_set_VAVB
       1063 : 1240                       lo(-28000)
       1064 : 7771                       hi(-28000)
       1065 : 3120                       lo(18000)
       1066 : 0004                       hi(18000)
       1067 : 4436                       jms     I I_comp
       1070 :
       1070 : 5671                       jmp     I I_arith_end
       1071 : 0420               I_arith_end,    arith_end
       1072 :
       1072 :                    /// Print expression; "A op B"
       1072 :                    /// @param VA value of A
       1072 :                    /// @param VB value of B
       1072 :                    /// @param AC op character
       1072 :                    /// @return R0 VA
       1072 :                    /// @return AC=0
       1072 :                    /// @clobber R0 R1 R2
       1072 : 0000               expr,           .-.
       1073 : 3321                       dca     expr_op         / save op
       1074 : 1046                       tad     VAL
       1075 : 3040                       dca     R0L
       1076 : 1047                       tad     VAH
       1077 : 3041                       dca     R0H
       1100 : 4432                       jms     I I_print_int24 / print VA
       1101 : 4421                       jms     I I_putspace    / print ' '
       1102 : 7200                       cla
       1103 : 1321                       tad     expr_op         / restore op
       1104 : 4420                       jms     I I_putchar     / print 'op'
       1105 : 4421                       jms     I I_putspace    / print ' '
       1106 : 7200                       cla
       1107 : 1050                       tad     VBL
       1110 : 3040                       dca     R0L
       1111 : 1051                       tad     VBH
       1112 : 3041                       dca     R0H
       1113 : 4432                       jms     I I_print_int24 / print VB
       1114 : 1046                       tad     VAL
       1115 : 3040                       dca     R0L
       1116 : 1047                       tad     VAH
       1117 : 3041                       dca     R0H
       1120 : 5672                       jmp     I expr          / return, AC=0
       1121 :                    expr_op,
       1121 :
       1121 :                    /// Print answer; " = C\n"
       1121 :                    /// @param R0 value of C
       1121 :                    /// @clobber R0 R1 R2 AC
       1121 : 0000               answer,         .-.
       1122 : 4421                       jms     I I_putspace    / print ' '
       1123 : 7200                       cla
       1124 : 1332                       tad     char_equal
       1125 : 4420                       jms     I I_putchar     / print '='
       1126 : 4421                       jms     I I_putspace    / print ' '
       1127 : 4432                       jms     I I_print_int24 / print R0
       1130 : 4422                       jms     I I_newline     / print '\n'
       1131 : 5721                       jmp     I answer        / return
       1132 : 0075               char_equal,     3DH             / char '='
       1133 :
       1133 :                    /// Print comparison; "A rel B\n"
       1133 :                    /// @param VA value of A
       1133 :                    /// @param VB value of B
       1133 : 0000               comp,           .-.
       1134 : 7200                       cla
       1135 : 1046                       tad     VAL
       1136 : 3040                       dca     R0L
       1137 : 1047                       tad     VAH
       1140 : 3041                       dca     R0H
       1141 : 4424                       jms     I I_sub24       / R0=VA-VB, AC=0
       1142 : 0050                       VB
       1143 : 1041                       tad     R0H             / high(VA-VB)
       1144 : 7510                       spa                     / skip if R0>=0
       1145 : 5356                       jmp     comp_lt         / if VA<VB
       1146 : 7440                       sza                     / skip if high(VA-VB) == 0
       1147 : 5362                       jmp     comp_gt         / if VA>VB
       1150 : 1040                       tad     R0L             / low(VA-VB)
       1151 : 7440                       sza                     / skip if low(VA-VB) == 0
       1152 : 5362                       jmp     comp_gt
       1153 :                    comp_eq,
       1153 : 1332                       tad     char_equal,
       1154 : 5364                       jmp     comp_putchar
       1155 : 0074               char_lt,        3CH             / char '<'
       1156 :                    comp_lt,
       1156 : 7200                       cla
       1157 : 1355                       tad     char_lt
       1160 : 5364                       jmp     comp_putchar
       1161 : 0076               char_gt,        3EH             / char '>'
       1162 :                    comp_gt,
       1162 : 7200                       cla
       1163 : 1361                       tad     char_gt
       1164 :                    comp_putchar,
       1164 : 4420                       jms     I I_putchar     / print 'rel'
       1165 : 5733                       jmp     I comp          / return
       1166 :
       1200 :                            page
       1200 :
       1200 :                            include "arith.inc"
(1)    1200 :                    /// -*- mode: asm; mode: flyspell-prog; -*-
(1)    1200 :
(1)    1200 :                    /// 24-bit addition; summand += addend
(1)    1200 :                    /// @param R0 Signed 24-bit summand
(1)    1200 :                    /// @param (PC+1) Signed 24-bit addend address
(1)    1200 :                    /// @return AC=0
(1)    1200 : 0000               add24,          .-.
(1)    1201 : 7300                       cla cll                 / AC=0 L=0
(1)    1202 : 1600                       tad     I add24         / addend address
(1)    1203 : 2200                       isz     add24           / advance to return address
(1)    1204 : 3037                       dca     arith_ptr       / pointer to low(addend)
(1)    1205 : 1040                       tad     R0L             / AC=low(R0) L=0
(1)    1206 : 1437                       tad     I arith_ptr     / add low(addend)
(1)    1207 : 3040                       dca     R0L             / store low(R0)
(1)    1210 : 7004                       ral                     / AC=carry L=0
(1)    1211 : 1041                       tad     R0H             / AC=high(R0)+carry
(1)    1212 : 2037                       isz     arith_ptr       / advance to high(addend)
(1)    1213 : 1437                       tad     I arith_ptr     / add high(addend)
(1)    1214 : 3041                       dca     R0H             / store high(R0), AC=0
(1)    1215 : 5600                       jmp     I add24         / return
(1)    1216 :
(1)    1216 :                    /// 24-bit subtraction; minuend -= subtrahend
(1)    1216 :                    /// @param R0 Signed 24-bit minuend
(1)    1216 :                    /// @param (PC+1) Signed 24-bit subtrahend address
(1)    1216 :                    /// @return AC=0
(1)    1216 :                    /// @return L=0 if borrow
(1)    1216 : 0000               sub24,          .-.
(1)    1217 : 7200                       cla
(1)    1220 : 1616                       tad     I sub24         / subtrahend address
(1)    1221 : 2216                       isz     sub24           / advance to return address
(1)    1222 : 3037                       dca     arith_ptr       / pointer to low(subtrahend)
(1)    1223 : 1437                       tad     I arith_ptr     / AC=low(subtrahend)
(1)    1224 : 7161                       stl cia                 / negate to form 13-bit negative
(1)    1225 : 1040                       tad     R0L             / AC=low(R0)-low(subtrahend)
(1)    1226 : 3040                       dca     R0L             / L=0 if borrowed
(1)    1227 : 7004                       ral                     / propagate complemented borrow
(1)    1230 : 2037                       isz     arith_ptr       / advance to high(subtrahend)
(1)    1231 : 1437                       tad     I arith_ptr     / AC=high(subtrahend)
(1)    1232 : 7061                       cia cml                 / form 13-bit negative
(1)    1233 : 1041                       tad     R0H             / add high(R0)
(1)    1234 : 3041                       dca     R0H             / store high(R0), AC=0
(1)    1235 : 5616                       jmp     I sub24         / return
(1)    1236 :
(1)    1236 :                    /// Print signed 24-bit integer as decimal
(1)    1236 :                    /// @param R0 value
(1)    1236 :                    /// @return AC=0
(1)    1236 :                    /// @clobber R0 R1 R2
(1)    1236 : 0055               char_minus,     055             / '-'
(1)    1237 : 0000               print_int24,    .-.
(1)    1240 : 7200                       cla
(1)    1241 : 1041                       tad     R0H
(1)    1242 : 7700                       sma cla                 / Skip if R0 < 0, AC=0
(1)    1243 : 5250                       jmp     print_uint24
(1)    1244 : 1236                       tad     char_minus
(1)    1245 : 4420                       jms     I I_putchar     / print '-'
(1)    1246 : 4425                       jms     I I_neg24
(1)    1247 : 0040                       R0                      / negate R0
(1)    1250 :                    print_uint24,
(1)    1250 : 3706                       dca     I print_uint24_ptr      / *ptr++ = EOS
(1)    1251 : 2306                       isz     print_uint24_ptr
(1)    1252 :                    print_uint24_loop,              / AC=0
(1)    1252 : 1040                       tad     R0L
(1)    1253 : 3042                       dca     R1L
(1)    1254 : 1041                       tad     R0H
(1)    1255 : 3043                       dca     R1H             / R1 = R0 (dividend)
(1)    1256 : 1305                       tad     const_10
(1)    1257 : 3044                       dca     R2L
(1)    1260 : 3045                       dca     R2H             / R2 = 10 (divisor)
(1)    1261 : 4431                       jms     I I_udiv16      / R0=value/10, AC=0
(1)    1262 : 1042                       tad     R1L             / remainder
(1)    1263 : 1304                       tad     char_0          / '0'
(1)    1264 : 3706                       dca     I print_uint24_ptr      / store 'digit'
(1)    1265 : 2306                       isz     print_uint24_ptr        / advance ptr
(1)    1266 : 1040                       tad     R0L             / low(quotient)
(1)    1267 : 7640                       sza cla                 / Skip if low(quotient) == 0, AC=0
(1)    1270 : 5252                       jmp     print_uint24_loop       / while quotient != 0
(1)    1271 : 1041                       tad     R0H             / high(quotient)
(1)    1272 : 7640                       sza cla                 / Skip if high(quotient) == 0, AC=0
(1)    1273 : 5252                       jmp     print_uint24_loop       / while quotient != 0
(1)    1274 :                    print_uint24_print,
(1)    1274 : 7240                       sta                     / AC=-1
(1)    1275 : 1306                       tad     print_uint24_ptr        / --ptr
(1)    1276 : 3306                       dca     print_uint24_ptr
(1)    1277 : 1706                       tad     I print_uint24_ptr      / AC=*ptr
(1)    1300 : 7450                       sna                     / Skip if not EOS
(1)    1301 : 5637                       jmp     I print_int24   / return, AC=0, ptr=buf
(1)    1302 : 4420                       jms     I I_putchar     / print 'digit'
(1)    1303 : 5274                       jmp     print_uint24_print
(1)    1304 :
(1)    1304 : 0060               char_0,         060             / char '0'
(1)    1305 : 0012               const_10,       012             / const 10
(1)    1306 :                    print_uint24_ptr,
(1)    1306 : 1307                       print_uint24_buf        / string pointer
(1)    1307 :                    print_uint24_buf,               / buffer, UINT24_MAX=16777215
(1)    1322 :                            *(.+11)                 / 9 words (8 chars + EOS)
(1)    1322 :
(1)    1400 :                            page
(1)    1400 :
(1)    1400 :                    /// Unsigned 24-bit multiply; product = multiplicand * multiplier
(1)    1400 :                    /// @param R1 multiplicand
(1)    1400 :                    /// @param R2 multiplier
(1)    1400 :                    /// @return R0 product
(1)    1400 :                    /// @return AC=0
(1)    1400 :                    /// @clobber R1 R2
(1)    1400 : 0000               umul24,         .-.
(1)    1401 : 7200                       cla
(1)    1402 : 3040                       dca     R0L
(1)    1403 : 3041                       dca     R0H             / clear product
(1)    1404 : 5235                       jmp     umul24_check    / AC=0
(1)    1405 :                    umul24_loop,
(1)    1405 : 7300                       cla cll                 / AC=0 L=0
(1)    1406 : 1045                       tad     R2H
(1)    1407 : 7010                       rar
(1)    1410 : 3045                       dca     R2H
(1)    1411 : 1044                       tad     R2L
(1)    1412 : 7010                       rar
(1)    1413 : 3044                       dca     R2L             / multiplier >>= 1
(1)    1414 : 7420                       snl                     / Skip LSB=1
(1)    1415 : 5226                       jmp     umul24_next
(1)    1416 : 7300                       cla cll
(1)    1417 : 1042                       tad     R1L
(1)    1420 : 1040                       tad     R0L
(1)    1421 : 3040                       dca     R0L
(1)    1422 : 7004                       ral                     / AC=carry L=0
(1)    1423 : 1043                       tad     R1H
(1)    1424 : 1041                       tad     R0H
(1)    1425 : 3041                       dca     R0H             / product += multiplicand
(1)    1426 :                    umul24_next,
(1)    1426 : 7300                       cla cll                 / AC=0 L=0
(1)    1427 : 1042                       tad     R1L
(1)    1430 : 7004                       ral
(1)    1431 : 3042                       dca     R1L
(1)    1432 : 1043                       tad     R1H
(1)    1433 : 7004                       ral
(1)    1434 : 3043                       dca     R1H             / multiplicand <<= 1
(1)    1435 :                    umul24_check,
(1)    1435 : 1044                       tad     R2L             / low(multiplier)
(1)    1436 : 7640                       sza cla                 / Skip if low(multiplier) == 0, AC=0
(1)    1437 : 5205                       jmp     umul24_loop     / while until multiplier != 0
(1)    1440 : 1045                       tad     R2H             / high(multiplier)
(1)    1441 : 7640                       sza cla                 / Skip if high(multiplier) == 0, AC=0
(1)    1442 : 5205                       jmp     umul24_loop     / while until multiplier != 0
(1)    1443 : 5600                       jmp     I umul24        / return, AC=0
(1)    1444 :
(1)    1444 :                    /// Negate 24-bit; source = -source
(1)    1444 :                    /// @param (PC+1) source address
(1)    1444 :                    /// @return AC=0
(1)    1444 : 0000               neg24,          .-.
(1)    1445 : 7200                       cla
(1)    1446 : 1644                       tad     I neg24         / source address
(1)    1447 : 2244                       isz     neg24           / advance to return address
(1)    1450 : 3037                       dca     arith_ptr       / pointer to low(source)
(1)    1451 : 1437                       tad     I arith_ptr     / low(source)
(1)    1452 : 7141                       cia cll                 / negate AC, L=1 if AC=0
(1)    1453 : 3437                       dca     I arith_ptr     / store low(source)
(1)    1454 : 2037                       isz     arith_ptr
(1)    1455 : 1437                       tad     I arith_ptr     / AC=high(source)
(1)    1456 : 7040                       cma                     / ~AC
(1)    1457 : 7430                       szl                     / skip if L=0
(1)    1460 : 7001                       iac                     / AC += L
(1)    1461 : 3437                       dca     I arith_ptr     / store high(source), AC=0
(1)    1462 : 5644                       jmp     I neg24         / return
(1)    1463 :
(1)    1463 :                    // Unsigned 16-bit division; quotient = dividend / divisor ... remainder
(1)    1463 :                    // @param R1 Unsigned 16-bit dividend
(1)    1463 :                    // @param R2 Unsigned 16-bit divisor
(1)    1463 :                    // @return R0 quotient
(1)    1463 :                    // @return R1 remainder
(1)    1463 :                    // @return AC=0
(1)    1463 :                    // @clobber R2
(1)    1463 : 0000               udiv16_bits,    0
(1)    1464 : 0000               udiv16,         .-.
(1)    1465 : 7200                       cla
(1)    1466 : 3040                       dca     R0L
(1)    1467 : 3041                       dca     R0H             / quitient = 0
(1)    1470 : 1044                       tad     R2L
(1)    1471 : 7440                       sza                     / skip low(divisor) == 0
(1)    1472 : 5277                       jmp     udiv16_setup
(1)    1473 : 1045                       tad     R2H
(1)    1474 : 7440                       sza                     / skip high(divisor) == 0
(1)    1475 : 5277                       jmp     udiv16_setup
(1)    1476 : 5664                       jmp     I udiv16        / return as divide by zero, AC=0
(1)    1477 :                    udiv16_setup,
(1)    1477 : 7201                       cla iac                 / AC=1
(1)    1500 : 3263                       dca     udiv16_bits     / bits=1
(1)    1501 : 5312                       jmp     udiv16_prep     / AC=0
(1)    1502 :                    udiv16_prep_loop,
(1)    1502 : 7300                       cla cll                 / AC=0 L=0
(1)    1503 : 1044                       tad     R2L
(1)    1504 : 7004                       ral
(1)    1505 : 3044                       dca     R2L
(1)    1506 : 1045                       tad     R2H
(1)    1507 : 7004                       ral
(1)    1510 : 3045                       dca     R2H             / divisor <<= 1, AC=0
(1)    1511 : 2263                       isz     udiv16_bits     / bits++
(1)    1512 :                    udiv16_prep,
(1)    1512 : 1045                       tad     R2H
(1)    1513 : 7006                       rtl
(1)    1514 : 7006                       rtl                     / divisor<<=4
(1)    1515 : 7700                       sma cla                 / skip if msb(divisor)=1, AC=0
(1)    1516 : 5302                       jmp     udiv16_prep_loop        / while MSB(divisor)=0
(1)    1517 : 5337                       jmp     udiv16_enter_loop       / AC=0
(1)    1520 :                    udiv16_loop,
(1)    1520 : 3263                       dca     udiv16_bits
(1)    1521 : 7300                       cla cll                 / AC=0 L=0
(1)    1522 : 1045                       tad     R2H
(1)    1523 : 7010                       rar
(1)    1524 : 3045                       dca     R2H
(1)    1525 : 1044                       tad     R2L
(1)    1526 : 7010                       rar
(1)    1527 : 3044                       dca     R2L             / divisor >= 1
(1)    1530 : 7300                       cla cll                 / AC=0 L=0
(1)    1531 : 1040                       tad     R0L
(1)    1532 : 7004                       ral
(1)    1533 : 3040                       dca     R0L
(1)    1534 : 1041                       tad     R0H
(1)    1535 : 7004                       ral
(1)    1536 : 3041                       dca     R0H             / quotient <<= 1, LSB(quotient)=0
(1)    1537 :                    udiv16_enter_loop,
(1)    1537 : 1044                       tad     R2L             / low(divisor)
(1)    1540 : 7161                       stl cia                 / negate to form 13-bit negative
(1)    1541 : 1042                       tad     R1L             / low(dividend)
(1)    1542 : 3042                       dca     R1L             / dividend -= divisor
(1)    1543 : 7004                       ral                     / propagate complemented borrow
(1)    1544 : 1045                       tad     R2H             / high(divisor)
(1)    1545 : 7061                       cia cml                 / form 13-bit negative
(1)    1546 : 1043                       tad     R1H             / high(dividend)
(1)    1547 : 3043                       dca     R1H             / dividend -= divisor
(1)    1550 : 7430                       szl                     / skip if L=0 (no borrow)
(1)    1551 : 5354                       jmp     udiv16_readd    / if dividend < divisor
(1)    1552 : 2040                       isz     R0L             / LSB(quotient)=1
(1)    1553 : 5364                       jmp     udiv16_next
(1)    1554 :                    udiv16_readd,
(1)    1554 : 7300                       cla cll                 / AC=0 L=0
(1)    1555 : 1044                       tad     R2L             / low(divisor)
(1)    1556 : 1042                       tad     R1L             / low(dividend)
(1)    1557 : 3042                       dca     R1L             / dividend += divisor
(1)    1560 : 7004                       ral                     / AC=carry L=0
(1)    1561 : 1045                       tad     R2H             / high(divisor)
(1)    1562 : 1043                       tad     R1H             / high(dividend)
(1)    1563 : 3043                       dca     R1H             / dividend += divisor
(1)    1564 :                    udiv16_next,
(1)    1564 : 7240                       sta                     / AC=-1
(1)    1565 : 1263                       tad     udiv16_bits     / AC=bits-1
(1)    1566 : 7440                       sza                     / skip if bits == 0
(1)    1567 : 5320                       jmp     udiv16_loop     / while bits != 0
(1)    1570 : 5664                       jmp     I udiv16        / return, AC=0
       1571 :
       1600 :                            page
       1600 :
       1600 :                    /// Signed 24-bit multiply; R0 *= source
       1600 :                    /// @param R0 multiplicand
       1600 :                    /// @param (PC+1) multiplier source address
       1600 :                    /// @return R0 product
       1600 :                    /// @return AC=0
       1600 :                    /// @clobber R1 R2
       1600 : 0000               mul24_sign,     0
       1601 : 0000               mul24,          .-.
       1602 : 7200                       cla
       1603 : 3200                       dca     mul24_sign      / clear sign
       1604 : 1601                       tad     I mul24         / source address
       1605 : 2201                       isz     mul24           / advance to return address
       1606 : 3037                       dca     arith_ptr       / pointer to low(source)
       1607 : 1437                       tad     I arith_ptr     / low(source)
       1610 : 3044                       dca     R2L             / low(multiplier)
       1611 : 2037                       isz     arith_ptr       / advance to high(source)
       1612 : 1437                       tad     I arith_ptr     / high(source)
       1613 : 3045                       dca     R2H             / high(multiplier)
       1614 : 1045                       tad     R2H
       1615 : 7700                       sma cla                 / skip if multiplier<0, AC=0
       1616 : 5222                       jmp     mul24_multiplicand
       1617 : 2200                       isz     mul24_sign      / sign++
       1620 : 4425                       jms     I I_neg24       / negate multiplier
       1621 : 0044                       R2
       1622 :                    mul24_multiplicand,
       1622 : 1040                       tad     R0L
       1623 : 3042                       dca     R1L             / low(multiplicand)
       1624 : 1041                       tad     R0H
       1625 : 3043                       dca     R1H             / high(multiplicand)
       1626 : 1043                       tad     R1H
       1627 : 7500                       sma                     / skip if multiplicand<0
       1630 : 5234                       jmp     mul24_multiply
       1631 : 2200                       isz     mul24_sign      / sign++
       1632 : 4425                       jms     I I_neg24       / negate multiplicand
       1633 : 0042                       R1
       1634 :                    mul24_multiply,
       1634 : 4430                       jms     I I_umul24      / R0 = R1 * R2
       1635 : 1200                       tad     mul24_sign
       1636 : 7010                       rar                     / L=LSB(sign)
       1637 : 7620                       snl cla                 / Skip if L=1, AC=0
       1640 : 5243                       jmp     mul24_return
       1641 : 4425                       jms     I I_neg24
       1642 : 0040                       R0                      / negate product
       1643 :                    mul24_return,
       1643 : 5601                       jmp     I mul24         / return
       1644 :
       1644 :                    /// Signed 24-bit division; quotient = dividend / divisor ... remainder
       1644 :                    /// @param R0 dividend
       1644 :                    /// @param (PC+1) signed 24-bit divisor address
       1644 :                    /// @return R0 quotient
       1644 :                    /// @return R1 remainder
       1644 :                    /// @return AC=0
       1644 :                    /// @clobber R2
       1644 : 0000               div24_sign,     0
       1645 : 0000               div24,          .-.
       1646 : 7200                       cla
       1647 : 3244                       dca     div24_sign      / clear sign
       1650 : 1645                       tad     I div24
       1651 : 2245                       isz     div24
       1652 : 3037                       dca     arith_ptr
       1653 : 1437                       tad     I arith_ptr     / AC=divisor
       1654 : 7500                       sma                     / Skip if divisor < 0
       1655 : 5260                       jmp     div24_divisor_plus
       1656 : 2244                       isz     div24_sign      / sign++
       1657 : 7041                       cia                     / negate divisor
       1660 :                    div24_divisor_plus,
       1660 : 3044                       dca     R2L             / R2L=|divisor|
       1661 : 3045                       dca     R2H             / R2H=0
       1662 : 1040                       tad     R0L
       1663 : 3042                       dca     R1L             / R1=dividend
       1664 : 1041                       tad     R0H
       1665 : 3043                       dca     R1H
       1666 : 1043                       tad     R1H
       1667 : 7500                       sma                     / skip if R0H<0
       1670 : 5274                       jmp     div24_divide
       1671 : 2244                       isz     div24_sign      / sign++
       1672 : 4425                       jms     I I_neg24       / negate dividend
       1673 : 0042                       R1
       1674 :                    div24_divide,
       1674 : 4431                       jms     I I_udiv16      / R0 = R1 / R2 ... R1
       1675 : 1244                       tad     div24_sign
       1676 : 7010                       rar                     / L=LSB(sign)
       1677 : 7620                       snl cla                 / Skip if L=1, AC=0
       1700 : 5303                       jmp     div24_return
       1701 : 4425                       jms     I I_neg24
       1702 : 0040                       R0                      / negate R0, AC=0
       1703 :                    div24_return,
       1703 : 5645                       jmp     I div24         / return, AC=0
