          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            include "im6100.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                            cpu     6100
(1)       0 :                            include "pdp8.inc"
(2)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(2)       0 :                    /// Origin
(2)       0 : =0                 PC_INTR         =       0000    // PC saved on interrupt
(2)       0 : =1                 ORG_INTR        =       0001    // Interrupt origin
(2)       0 : =7777              ORG_RESET       =       7777    // Reset origin
(2)       0 : =10                AUTO_INDEX      =       0010    // Auto pre-increment pointers
(2)       0 : =20                PAGE0           =       0020
(2)       0 :                    /// FLAGS; RTF, GTF
(2)       0 : =4000              FLAGS_LINK      =       4000    // Link flag
(2)       0 : =200               FLAGS_IEFF      =       0200    // Interrupt enable flip-flop
(1)       0 :                    /// FLAGS; RTF, GTF
(1)       0 : =1000              FLAGS_INTREQ    =       1000    // INTREQ line
          0 :                    /// MC6850 Asynchronous Communication Interface Adapter
          0 : =7                 ACIA    = 07
          0 :                            include "mc6850.inc"
(1)       0 :                    /// -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    /// MC6850
(1)       0 :                    /// Asynchronous Communication Interface Adapter
(1)       0 : =0                 ACIA_status     = 0
(1)       0 : =4                 ACIA_control    = 4
(1)       0 : =1                 ACIA_receive    = 1
(1)       0 : =5                 ACIA_transmit   = 5
(1)       0 :                    //  Counter Divider Select Bits
(1)       0 : =3                 CDS_gm          =       011B    / Group mask
(1)       0 : =0                 CDS_DIV1_gc     =       000B    / /1
(1)       0 : =1                 CDS_DIV16_gc    =       001B    / /16
(1)       0 : =2                 CDS_DIV64_gc    =       010B    / /64
(1)       0 : =3                 CDS_RESET_gc    =       011B    / Master Reset
(1)       0 :                    //  Word Select Bits
(1)       0 : =34                WSB_gm          =       011100B / Group mask
(1)       0 : =0                 WSB_7E2_gc      =       000000B / 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc      =       000100B / 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =10                WSB_7E1_gc      =       001000B / 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =14                WSB_7O1_gc      =       001100B / 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =20                WSB_8N2_gc      =       010000B / 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =24                WSB_8N1_gc      =       010100B / 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =30                WSB_8E1_gc      =       011000B / 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =34                WSB_8O1_gc      =       011100B / 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                    //  Transmit Control Bits
(1)       0 : =140               TCB_gm          =     01100000B / Group mask
(1)       0 : =0                 TCB_DI_gc       =     00000000B / RTS=Low,  Tx Interrupt Disabled
(1)       0 : =40                TCB_EI_gc       =     00100000B / RTS=Low,  Tx Interrupt Enabled
(1)       0 : =100               TCB_RTS_gc      =     01000000B / RTS=High, Tx Interrupt Disabled
(1)       0 : =140               TCB_BREAK_gc    =     01100000B / RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                    / Transmit Break Level
(1)       0 : =200               RIEB_bm         =     10000000B / Receive Interrupt Enable Bit mask
(1)       0 :                    /// Status register
(1)       0 : =1                 RDRF_bm         =     00000001B / Receive Data Register Full
(1)       0 : =2                 TDRE_bm         =     00000010B / Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm         =     00000100B / Data Carrier Detect Flag
(1)       0 : =10                CTSF_bm         =     00001000B / Clear To Send Flag
(1)       0 : =20                FERR_bm         =     00010000B / Frame Error Flag
(1)       0 : =40                OVRN_bm         =     00100000B / Receiver Overrun Flag
(1)       0 : =100               PERR_bm         =     01000000B / Parity Error Flag
(1)       0 : =200               IRQF_bm         =     10000000B / Interrupt Request Flag
          0 :
       4000 :                            *4000
       4000 : =40                rx_queue_size = 40              / 32 words
       4000 :                    rx_queue,
       4040 :                            *.+rx_queue_size
       4040 : =40                tx_queue_size = 40              / 32 words
       4040 :                    tx_queue,
       4100 :                            *.+tx_queue_size
       4100 :
          1 :                            *ORG_INTR
          1 : 5402                       jmp     I .+1
          2 : 2004                       isr
          3 :
       7776 :                            *ORG_RESET-1
       7776 : 0200                       initialize
       7777 : 5776                       jmp     I .-1
      10000 :
         20 :                            *PAGE0
         20 : 0400               I_queue_init,   queue_init
         21 : 0424               I_queue_add,    queue_add
         22 : 0471               I_queue_remove, queue_remove
         23 : 0262               I_getchar,      getchar
         24 : 0243               I_putchar,      putchar
         25 : 0223               I_putspace,     putspace
         26 : 0231               I_newline,      newline
         27 : 1044               I_neg24,        neg24
         30 : 0600               I_add24,        add24
         31 : 0616               I_sub24,        sub24
         32 : 1200               I_dep12,        dep12
         33 : 1207               I_add12,        add12
         34 : 1227               I_sub12,        sub12
         35 : 1252               I_mul12,        mul12
         36 : 1310               I_divu12,       divu12
         37 : 1000               I_umul24,       umul24
         40 : 1064               I_udiv16,       udiv16
         41 : 0637               I_print_int24,  print_int24
         42 : 1664               I_debug,        debug
         43 :
         43 : 0000               arith_ptr,      0       / arithmetic routine work
         44 :                    R0,                     / 24-bit arithmetic accumulator
         44 : 0000               R0L,            0
         45 : 0000               R0H,            0
         46 :                    R1,                     / 24-bit arithmetic operand 1
         46 : 0000               R1L,            0
         47 : 0000               R1H,            0
         50 :                    R2,                     / 24-bit arithmetic operand 2
         50 : 0000               R2L,            0
         51 : 0000               R2H,            0
         52 :                    R3,                     / 24-bit arithmetic work
         52 : 0000               R3L,            0
         53 : 0000               R3H,            0
         54 :
         54 :                    /// Mandelbrot draw variables
         54 : 0000               vC,     0
         55 : 0000               vD,     0
         56 : 0000               vA,     0
         57 : 0000               vB,     0
         60 : 0000               vS,     0
         61 : 0000               vP,     0
         62 : 0000               vQ,     0
         63 : 0000               vT,     0
         64 : 0000               vY,     0
         65 : 0000               vX,     0
         66 : 0000               vI,     0
         67 :
         67 :                    /// Mandelbrot draw constants
         67 :                            decimal
         67 : 7764               const_m12,      -12
         70 : 7717               const_m49,      -49
         71 : 0345               const_229,      229
         72 : 0144               const_100,      100
         73 : 0640               const_416,      416
         74 : 0062               const_F,         50
         75 : 7773               const_m5,        -5
         76 : 7760               const_m16,      -16
         77 : 7766               const_m10,      -10
        100 : 7763               const_m13,      -13
        101 : 7742               const_m30,      -30
        102 :                            octal
        102 : 0101               char_A,         101     / char 'A'
        103 : 0060               char_zero,      060     / char '0'
        104 :
        200 :                            page    1
        200 :                    initialize,
        200 : 7200                       cla
        201 : 1217                       tad     rx_size
        202 : 4420                       jms     I I_queue_init
        203 : 4000                       rx_queue
        204 : 1220                       tad     tx_size
        205 : 4420                       jms     I I_queue_init
        206 : 4040                       tx_queue
        207 :                            // Initialize ACIA
        207 : 1221                       tad     ACIA_config
        210 : 6074                       iot     ACIA ACIA_control
        211 : 1222                       tad     RX_INT_TX_NO
        212 : 6074                       iot     ACIA ACIA_control
        213 :
        213 :                    loop,
        213 : 4616                       jms     I I_mandelbrot
        214 : 4426                       jms     I I_newline
        215 : 5213                       jmp     loop
        216 : 1337               I_mandelbrot,   mandelbrot
        217 :
        217 : 0040               rx_size,        rx_queue_size
        220 : 0040               tx_size,        tx_queue_size
        221 : 0003               ACIA_config,    CDS_RESET_gc
        222 : 0224               RX_INT_TX_NO,  WSB_8N1_gc|RIEB_bm
        223 :
        223 :                    /// Print space
        223 :                    /// @clobber AC
        223 : 0000               putspace,       .-.
        224 : 7200                       cla
        225 : 1230                       tad     char_space
        226 : 4424                       jms     I I_putchar
        227 : 5623                       jmp     I putspace
        230 : 0040               char_space,     040             / char ' '
        231 :
        231 :                    /// Print new line
        231 :                    /// @clobber AC
        231 : 0000               newline,        .-.
        232 : 7200                       cla
        233 : 1241                       tad     char_CR
        234 : 4424                       jms     I I_putchar
        235 : 7200                       cla
        236 : 1242                       tad     char_LF
        237 : 4424                       jms     I I_putchar
        240 : 5631                       jmp     I newline
        241 : 0015               char_CR,        015             / Carriage return
        242 : 0012               char_LF,        012             / Line feed
        243 :
        243 :                    /// Print character
        243 :                    /// @param AC character
        243 : 0000               putchar,        .-.
        244 : 3260                       dca     putchar_char    / Save character
        245 : 1260                       tad     putchar_char
        246 :                    putchar_loop,
        246 : 6002                       iof
        247 : 4421                       jms     I I_queue_add
        250 : 4040                       tx_queue
        251 : 6001                       ion                     / AC may be broken
        252 : 7620                       snl cla                 / Skip if L=1
        253 : 5246                       jmp     putchar_loop    / tx_queue is full
        254 : 1261                       tad     ENABLE_TX_INT   / Enable Tx interrupt
        255 : 6074                       iot     ACIA ACIA_control
        256 : 1260                       tad     putchar_char    / Restore character
        257 : 5643                       jmp     I putchar       / Return
        260 : 0000               putchar_char,   0
        261 : 0264               ENABLE_TX_INT,  WSB_8N1_gc|RIEB_bm|TCB_EI_gc
        262 :
        262 :                    /// Read character
        262 :                    /// @return AC character
        262 : 0000               getchar,        .-.
        263 : 6002                       iof                     / Disable interrupt
        264 : 4422                       jms     I I_queue_remove
        265 : 4000                       rx_queue
        266 : 3273                       dca     getchar_char    / save character
        267 : 6001                       ion                     / AC may be broken
        270 : 7200                       cla
        271 : 1273                       tad     getchar_char    / restore character
        272 : 5662                       jmp     I getchar       / Return
        273 :                    getchar_char,
        273 :
        273 :                            include "queue.inc"
(1)     273 :                    /// -*- mode: asm; mode: flyspell-prog; -*-
(1)     273 :
(1)     400 :                            page
(1)     400 :
(1)     400 :                    /// [queue] queue structure
(1)     400 :                    //queue_size      =       0       / negative buffer size
(1)     400 :                    //queue_len       =       1       / queue length
(1)     400 :                    //queue_put       =       2       / queue put index
(1)     400 :                    //queue_get       =       3       / queue get index
(1)     400 :                    //queue_buf       =       4       / buffer start offset
(1)     400 :
(1)     400 :                    /// [queue] Initialize queue
(1)     400 :                    /// @param (PC+1) queue work space pointer
(1)     400 :                    /// @param AC queue work space size
(1)     400 :                    /// @return AC=0
(1)     400 :                    /// @clobber AC
(1)     400 : 0000               queue_init, .-.                 / parameter address
(1)     401 : 1223                       tad     queue_work_size / subtract queue work space
(1)     402 : 7041                       cia                     / AC=-size
(1)     403 : 3264                       dca     queue_tmp       / queue_tmp = -size
(1)     404 : 1600                       tad     I queue_init    / load queue work space pointer
(1)     405 : 2200                       isz     queue_init      / point return address
(1)     406 : 3265                       dca     queue_ptr       / &queue_size
(1)     407 : 1264                       tad     queue_tmp       / AC=-size
(1)     410 : 3665                       dca     I queue_ptr     / queue_size = -size
(1)     411 : 2265                       isz     queue_ptr       / &queue_len
(1)     412 : 1264                       tad     queue_tmp       / -size
(1)     413 : 1223                       tad     queue_work_size / -queue work space
(1)     414 : 7001                       iac                     / offset queue_size
(1)     415 : 3264                       dca     queue_tmp       / counter
(1)     416 :                    queue_init_clear,
(1)     416 : 3665                       dca     I queue_ptr     / *queue_ptr = 0
(1)     417 : 2265                       isz     queue_ptr
(1)     420 : 2264                       isz     queue_tmp
(1)     421 : 5216                       jmp     queue_init_clear
(1)     422 : 5600                       jmp     I queue_init    / return, AC=0
(1)     423 : 7774               queue_work_size,        -4
(1)     424 :
(1)     424 :                    /// [queue] Add an element to queue
(1)     424 :                    /// @param (PC+1) queue work space pointer
(1)     424 :                    /// @param AC an element
(1)     424 :                    /// @return L 0 if queue is full
(1)     424 : 0000               queue_add, .-.                  / parameter/return address
(1)     425 : 3266                       dca     queue_element   / save element
(1)     426 : 1624                       tad     I queue_add     / load queue work space pointer
(1)     427 : 2224                       isz     queue_add       / point to return address
(1)     430 : 3265                       dca     queue_ptr       / &queue_size
(1)     431 : 1665                       tad     I queue_ptr     / AC=-queue_size
(1)     432 : 3264                       dca     queue_tmp       / queue_tmp = -queue_size
(1)     433 : 1264                       tad     queue_tmp       / AC=-queue_size
(1)     434 : 2265                       isz     queue_ptr       / &queue_len
(1)     435 : 1665                       tad     I queue_ptr     / AC=queue_len-queue_size
(1)     436 : 7500                       sma                     / skip if queue_len < queue_size
(1)     437 : 5261                       jmp     queue_add_full
(1)     440 : 2665                       isz     I queue_ptr     / queue_len++
(1)     441 : 2265                       isz     queue_ptr       / &queue_put
(1)     442 : 7200                       cla
(1)     443 : 1665                       tad     I queue_ptr     / AC=queue_put
(1)     444 : 7001                       iac                     / offset queue_put
(1)     445 : 7001                       iac                     / offset queue_get
(1)     446 : 1265                       tad     queue_ptr       / AC=&queue_buf[queue_put]
(1)     447 : 3267                       dca     queue_buf
(1)     450 : 1266                       tad     queue_element   / AC=restore element
(1)     451 : 3667                       dca     I queue_buf     / queue_buf[queue_put]=queue_element
(1)     452 : 2665                       isz     I queue_ptr     / queue_put++
(1)     453 : 1665                       tad     I queue_ptr     / AC=queue_put
(1)     454 : 1264                       tad     queue_tmp       / AC=queue_put-queue_size
(1)     455 : 7700                       sma cla                 / skip if queue_put < queue_size, AC=0
(1)     456 : 3665                       dca     I queue_ptr     / queue_put = 0
(1)     457 : 7320                       stl cla                 / L=1, AC=0
(1)     460 : 7410                       skp
(1)     461 :                    queue_add_full,
(1)     461 : 7300                       cll cla                 / L=0, AC=0
(1)     462 : 1266                       tad     queue_element   / restore
(1)     463 : 5624                       jmp     I queue_add     / return
(1)     464 :
(1)     464 : 0000               queue_tmp,      0
(1)     465 : 0000               queue_ptr,      0               / pointer to queue work space
(1)     466 : 0000               queue_element,  0
(1)     467 : 0000               queue_buf,      0               / pointer to element
(1)     470 : 7777               queue_minus1,   -1              / const -1
(1)     471 :
(1)     471 :                    /// [queue] Remove an element from queue
(1)     471 :                    /// @param (PC+1) queue work space pointer
(1)     471 :                    /// @return AC an element, 0 if empty
(1)     471 :                    /// @return L 0 if queue is empty
(1)     471 : 0000               queue_remove, .-.               / parameter/return address
(1)     472 : 7200                       cla
(1)     473 : 1671                       tad     I queue_remove  / load queue work space pointer
(1)     474 : 2271                       isz     queue_remove    / point to return address
(1)     475 : 3265                       dca     queue_ptr       / &queue_size
(1)     476 : 1665                       tad     I queue_ptr     / -queue_size
(1)     477 : 3264                       dca     queue_tmp       / queue_tmp = -queue_size
(1)     500 : 2265                       isz     queue_ptr       / &queue_len
(1)     501 : 1665                       tad     I queue_ptr     / AC=queue_len
(1)     502 : 7450                       sna                     / skip if queue_len != 0
(1)     503 : 5326                       jmp     queue_remove_empty
(1)     504 : 1270                       tad     queue_minus1    / AC=queue_len-1
(1)     505 : 3665                       dca     I queue_ptr     / queue_len--
(1)     506 : 2265                       isz     queue_ptr       / &queue_put
(1)     507 : 2265                       isz     queue_ptr       / &queue_get
(1)     510 : 1665                       tad     I queue_ptr     / AC=queue_get
(1)     511 : 7001                       iac                     / offset queue_get
(1)     512 : 1265                       tad     queue_ptr       / AC=&queue_buf[queue_get]
(1)     513 : 3267                       dca     queue_buf
(1)     514 : 1667                       tad     I queue_buf     / AC=queue_buf[queue_get]
(1)     515 : 3266                       dca     queue_element   / save element
(1)     516 : 2665                       isz     I queue_ptr     / queue_get
(1)     517 : 1665                       tad     I queue_ptr     / AC=queue_get
(1)     520 : 1264                       tad     queue_tmp       / AC=queue_get-queue_size
(1)     521 : 7700                       sma cla                 / skip if queue_get < queue_size, AC=0
(1)     522 : 3665                       dca     I queue_ptr     / queue_get = 0
(1)     523 : 7320                       stl cla                 / L=1 AC=0
(1)     524 : 1266                       tad     queue_element   / restore element
(1)     525 : 5671                       jmp     I queue_remove  / return
(1)     526 :                    queue_remove_empty,
(1)     526 : 7300                       cll cla                 / L=0 AC=0
(1)     527 : 5671                       jmp     I queue_remove  / return
        530 :
        600 :                            page
        600 :                            include "arith.inc"
(1)     600 :                    /// -*- mode: asm; mode: flyspell-prog; -*-
(1)     600 :
(1)     600 :                    /// 24-bit addition; summand += addend
(1)     600 :                    /// @param R0 Signed 24-bit summand
(1)     600 :                    /// @param (PC+1) Signed 24-bit addend address
(1)     600 :                    /// @return AC=0
(1)     600 : 0000               add24,          .-.
(1)     601 : 7300                       cla cll                 / AC=0 L=0
(1)     602 : 1600                       tad     I add24         / addend address
(1)     603 : 2200                       isz     add24           / advance to return address
(1)     604 : 3043                       dca     arith_ptr       / pointer to low(addend)
(1)     605 : 1044                       tad     R0L             / AC=low(R0) L=0
(1)     606 : 1443                       tad     I arith_ptr     / add low(addend)
(1)     607 : 3044                       dca     R0L             / store low(R0)
(1)     610 : 7004                       ral                     / AC=carry L=0
(1)     611 : 1045                       tad     R0H             / AC=high(R0)+carry
(1)     612 : 2043                       isz     arith_ptr       / advance to high(addend)
(1)     613 : 1443                       tad     I arith_ptr     / add high(addend)
(1)     614 : 3045                       dca     R0H             / store high(R0), AC=0
(1)     615 : 5600                       jmp     I add24         / return
(1)     616 :
(1)     616 :                    /// 24-bit subtraction; minuend -= subtrahend
(1)     616 :                    /// @param R0 Signed 24-bit minuend
(1)     616 :                    /// @param (PC+1) Signed 24-bit subtrahend address
(1)     616 :                    /// @return AC=0
(1)     616 :                    /// @return L=0 if borrow
(1)     616 : 0000               sub24,          .-.
(1)     617 : 7200                       cla
(1)     620 : 1616                       tad     I sub24         / subtrahend address
(1)     621 : 2216                       isz     sub24           / advance to return address
(1)     622 : 3043                       dca     arith_ptr       / pointer to low(subtrahend)
(1)     623 : 1443                       tad     I arith_ptr     / AC=low(subtrahend)
(1)     624 : 7161                       stl cia                 / negate to form 13-bit negative
(1)     625 : 1044                       tad     R0L             / AC=low(R0)-low(subtrahend)
(1)     626 : 3044                       dca     R0L             / L=0 if borrowed
(1)     627 : 7004                       ral                     / propagate complemented borrow
(1)     630 : 2043                       isz     arith_ptr       / advance to high(subtrahend)
(1)     631 : 1443                       tad     I arith_ptr     / AC=high(subtrahend)
(1)     632 : 7061                       cia cml                 / form 13-bit negative
(1)     633 : 1045                       tad     R0H             / add high(R0)
(1)     634 : 3045                       dca     R0H             / store high(R0), AC=0
(1)     635 : 5616                       jmp     I sub24         / return
(1)     636 :
(1)     636 :                    /// Print signed 24-bit integer as decimal
(1)     636 :                    /// @param R0 value
(1)     636 :                    /// @return AC=0
(1)     636 :                    /// @clobber R0 R1 R2
(1)     636 : 0055               char_minus,     055             / '-'
(1)     637 : 0000               print_int24,    .-.
(1)     640 : 7200                       cla
(1)     641 : 1045                       tad     R0H
(1)     642 : 7700                       sma cla                 / Skip if R0 < 0, AC=0
(1)     643 : 5250                       jmp     print_uint24
(1)     644 : 1236                       tad     char_minus
(1)     645 : 4424                       jms     I I_putchar     / print '-'
(1)     646 : 4427                       jms     I I_neg24
(1)     647 : 0044                       R0                      / negate R0
(1)     650 :                    print_uint24,
(1)     650 : 3706                       dca     I print_uint24_ptr      / *ptr++ = EOS
(1)     651 : 2306                       isz     print_uint24_ptr
(1)     652 :                    print_uint24_loop,              / AC=0
(1)     652 : 1044                       tad     R0L
(1)     653 : 3046                       dca     R1L
(1)     654 : 1045                       tad     R0H
(1)     655 : 3047                       dca     R1H             / R1 = R0 (dividend)
(1)     656 : 1305                       tad     const_10
(1)     657 : 3050                       dca     R2L
(1)     660 : 3051                       dca     R2H             / R2 = 10 (divisor)
(1)     661 : 4440                       jms     I I_udiv16      / R0=value/10, AC=0
(1)     662 : 1046                       tad     R1L             / remainder
(1)     663 : 1304                       tad     char_0          / '0'
(1)     664 : 3706                       dca     I print_uint24_ptr      / store 'digit'
(1)     665 : 2306                       isz     print_uint24_ptr        / advance ptr
(1)     666 : 1044                       tad     R0L             / low(quotient)
(1)     667 : 7640                       sza cla                 / Skip if low(quotient) == 0, AC=0
(1)     670 : 5252                       jmp     print_uint24_loop       / while quotient != 0
(1)     671 : 1045                       tad     R0H             / high(quotient)
(1)     672 : 7640                       sza cla                 / Skip if high(quotient) == 0, AC=0
(1)     673 : 5252                       jmp     print_uint24_loop       / while quotient != 0
(1)     674 :                    print_uint24_print,
(1)     674 : 7240                       sta                     / AC=-1
(1)     675 : 1306                       tad     print_uint24_ptr        / --ptr
(1)     676 : 3306                       dca     print_uint24_ptr
(1)     677 : 1706                       tad     I print_uint24_ptr      / AC=*ptr
(1)     700 : 7450                       sna                     / Skip if not EOS
(1)     701 : 5637                       jmp     I print_int24   / return, AC=0, ptr=buf
(1)     702 : 4424                       jms     I I_putchar     / print 'digit'
(1)     703 : 5274                       jmp     print_uint24_print
(1)     704 :
(1)     704 : 0060               char_0,         060             / char '0'
(1)     705 : 0012               const_10,       012             / const 10
(1)     706 :                    print_uint24_ptr,
(1)     706 : 0707                       print_uint24_buf        / string pointer
(1)     707 :                    print_uint24_buf,               / buffer, UINT24_MAX=16777215
(1)     720 :                            *(.+11)                 / 9 words (8 chars + EOS)
(1)     720 :
(1)    1000 :                            page
(1)    1000 :
(1)    1000 :                    /// Unsigned 24-bit multiply; product = multiplicand * multiplier
(1)    1000 :                    /// @param R1 multiplicand
(1)    1000 :                    /// @param R2 multiplier
(1)    1000 :                    /// @return R0 product
(1)    1000 :                    /// @return AC=0
(1)    1000 :                    /// @clobber R1 R2
(1)    1000 : 0000               umul24,         .-.
(1)    1001 : 7200                       cla
(1)    1002 : 3044                       dca     R0L
(1)    1003 : 3045                       dca     R0H             / clear product
(1)    1004 : 5235                       jmp     umul24_check    / AC=0
(1)    1005 :                    umul24_loop,
(1)    1005 : 7300                       cla cll                 / AC=0 L=0
(1)    1006 : 1051                       tad     R2H
(1)    1007 : 7010                       rar
(1)    1010 : 3051                       dca     R2H
(1)    1011 : 1050                       tad     R2L
(1)    1012 : 7010                       rar
(1)    1013 : 3050                       dca     R2L             / multiplier >>= 1
(1)    1014 : 7420                       snl                     / Skip LSB=1
(1)    1015 : 5226                       jmp     umul24_next
(1)    1016 : 7300                       cla cll
(1)    1017 : 1046                       tad     R1L
(1)    1020 : 1044                       tad     R0L
(1)    1021 : 3044                       dca     R0L
(1)    1022 : 7004                       ral                     / AC=carry L=0
(1)    1023 : 1047                       tad     R1H
(1)    1024 : 1045                       tad     R0H
(1)    1025 : 3045                       dca     R0H             / product += multiplicand
(1)    1026 :                    umul24_next,
(1)    1026 : 7300                       cla cll                 / AC=0 L=0
(1)    1027 : 1046                       tad     R1L
(1)    1030 : 7004                       ral
(1)    1031 : 3046                       dca     R1L
(1)    1032 : 1047                       tad     R1H
(1)    1033 : 7004                       ral
(1)    1034 : 3047                       dca     R1H             / multiplicand <<= 1
(1)    1035 :                    umul24_check,
(1)    1035 : 1050                       tad     R2L             / low(multiplier)
(1)    1036 : 7640                       sza cla                 / Skip if low(multiplier) == 0, AC=0
(1)    1037 : 5205                       jmp     umul24_loop     / while until multiplier != 0
(1)    1040 : 1051                       tad     R2H             / high(multiplier)
(1)    1041 : 7640                       sza cla                 / Skip if high(multiplier) == 0, AC=0
(1)    1042 : 5205                       jmp     umul24_loop     / while until multiplier != 0
(1)    1043 : 5600                       jmp     I umul24        / return, AC=0
(1)    1044 :
(1)    1044 :                    /// Negate 24-bit; source = -source
(1)    1044 :                    /// @param (PC+1) source address
(1)    1044 :                    /// @return AC=0
(1)    1044 : 0000               neg24,          .-.
(1)    1045 : 7200                       cla
(1)    1046 : 1644                       tad     I neg24         / source address
(1)    1047 : 2244                       isz     neg24           / advance to return address
(1)    1050 : 3043                       dca     arith_ptr       / pointer to low(source)
(1)    1051 : 1443                       tad     I arith_ptr     / low(source)
(1)    1052 : 7141                       cia cll                 / negate AC, L=1 if AC=0
(1)    1053 : 3443                       dca     I arith_ptr     / store low(source)
(1)    1054 : 2043                       isz     arith_ptr
(1)    1055 : 1443                       tad     I arith_ptr     / AC=high(source)
(1)    1056 : 7040                       cma                     / ~AC
(1)    1057 : 7430                       szl                     / skip if L=0
(1)    1060 : 7001                       iac                     / AC += L
(1)    1061 : 3443                       dca     I arith_ptr     / store high(source), AC=0
(1)    1062 : 5644                       jmp     I neg24         / return
(1)    1063 :
(1)    1063 :                    // Unsigned 16-bit division; quotient = dividend / divisor ... remainder
(1)    1063 :                    // @param R1 Unsigned 16-bit dividend
(1)    1063 :                    // @param R2 Unsigned 16-bit divisor
(1)    1063 :                    // @return R0 quotient
(1)    1063 :                    // @return R1 remainder
(1)    1063 :                    // @return AC=0
(1)    1063 :                    // @clobber R2
(1)    1063 : 0000               udiv16_bits,    0
(1)    1064 : 0000               udiv16,         .-.
(1)    1065 : 7200                       cla
(1)    1066 : 3044                       dca     R0L
(1)    1067 : 3045                       dca     R0H             / quitient = 0
(1)    1070 : 1050                       tad     R2L
(1)    1071 : 7440                       sza                     / skip low(divisor) == 0
(1)    1072 : 5277                       jmp     udiv16_setup
(1)    1073 : 1051                       tad     R2H
(1)    1074 : 7440                       sza                     / skip high(divisor) == 0
(1)    1075 : 5277                       jmp     udiv16_setup
(1)    1076 : 5664                       jmp     I udiv16        / return as divide by zero, AC=0
(1)    1077 :                    udiv16_setup,
(1)    1077 : 7201                       cla iac                 / AC=1
(1)    1100 : 3263                       dca     udiv16_bits     / bits=1
(1)    1101 : 5312                       jmp     udiv16_prep     / AC=0
(1)    1102 :                    udiv16_prep_loop,
(1)    1102 : 7300                       cla cll                 / AC=0 L=0
(1)    1103 : 1050                       tad     R2L
(1)    1104 : 7004                       ral
(1)    1105 : 3050                       dca     R2L
(1)    1106 : 1051                       tad     R2H
(1)    1107 : 7004                       ral
(1)    1110 : 3051                       dca     R2H             / divisor <<= 1, AC=0
(1)    1111 : 2263                       isz     udiv16_bits     / bits++
(1)    1112 :                    udiv16_prep,
(1)    1112 : 1051                       tad     R2H
(1)    1113 : 7006                       rtl
(1)    1114 : 7006                       rtl                     / divisor<<=4
(1)    1115 : 7700                       sma cla                 / skip if msb(divisor)=1, AC=0
(1)    1116 : 5302                       jmp     udiv16_prep_loop        / while MSB(divisor)=0
(1)    1117 : 5337                       jmp     udiv16_enter_loop       / AC=0
(1)    1120 :                    udiv16_loop,
(1)    1120 : 3263                       dca     udiv16_bits
(1)    1121 : 7300                       cla cll                 / AC=0 L=0
(1)    1122 : 1051                       tad     R2H
(1)    1123 : 7010                       rar
(1)    1124 : 3051                       dca     R2H
(1)    1125 : 1050                       tad     R2L
(1)    1126 : 7010                       rar
(1)    1127 : 3050                       dca     R2L             / divisor >= 1
(1)    1130 : 7300                       cla cll                 / AC=0 L=0
(1)    1131 : 1044                       tad     R0L
(1)    1132 : 7004                       ral
(1)    1133 : 3044                       dca     R0L
(1)    1134 : 1045                       tad     R0H
(1)    1135 : 7004                       ral
(1)    1136 : 3045                       dca     R0H             / quotient <<= 1, LSB(quotient)=0
(1)    1137 :                    udiv16_enter_loop,
(1)    1137 : 1050                       tad     R2L             / low(divisor)
(1)    1140 : 7161                       stl cia                 / negate to form 13-bit negative
(1)    1141 : 1046                       tad     R1L             / low(dividend)
(1)    1142 : 3046                       dca     R1L             / dividend -= divisor
(1)    1143 : 7004                       ral                     / propagate complemented borrow
(1)    1144 : 1051                       tad     R2H             / high(divisor)
(1)    1145 : 7061                       cia cml                 / form 13-bit negative
(1)    1146 : 1047                       tad     R1H             / high(dividend)
(1)    1147 : 3047                       dca     R1H             / dividend -= divisor
(1)    1150 : 7430                       szl                     / skip if L=0 (no borrow)
(1)    1151 : 5354                       jmp     udiv16_readd    / if dividend < divisor
(1)    1152 : 2044                       isz     R0L             / LSB(quotient)=1
(1)    1153 : 5364                       jmp     udiv16_next
(1)    1154 :                    udiv16_readd,
(1)    1154 : 7300                       cla cll                 / AC=0 L=0
(1)    1155 : 1050                       tad     R2L             / low(divisor)
(1)    1156 : 1046                       tad     R1L             / low(dividend)
(1)    1157 : 3046                       dca     R1L             / dividend += divisor
(1)    1160 : 7004                       ral                     / AC=carry L=0
(1)    1161 : 1051                       tad     R2H             / high(divisor)
(1)    1162 : 1047                       tad     R1H             / high(dividend)
(1)    1163 : 3047                       dca     R1H             / dividend += divisor
(1)    1164 :                    udiv16_next,
(1)    1164 : 7240                       sta                     / AC=-1
(1)    1165 : 1263                       tad     udiv16_bits     / AC=bits-1
(1)    1166 : 7440                       sza                     / skip if bits == 0
(1)    1167 : 5320                       jmp     udiv16_loop     / while bits != 0
(1)    1170 : 5664                       jmp     I udiv16        / return, AC=0
       1171 :
       1200 :                            page
       1200 :                            include "mandelbrot.inc"
(1)    1200 :                    /// -*- mode: asm; mode: flyspell-prog* -*-
(1)    1200 :
(1)    1200 :                    /// Deposit 12-bit data to R0 with sign extend
(1)    1200 :                    /// @param AC 12-bit data
(1)    1200 :                    /// @return R0 24-bit sign extended value
(1)    1200 :                    /// @return AC=0
(1)    1200 : 0000               dep12,          .-.
(1)    1201 : 3044                       dca     R0L             / store low(R0)
(1)    1202 : 1044                       tad     R0L
(1)    1203 : 7710                       spa cla                 / Skip if R0L >= 0, AC=0
(1)    1204 : 7240                       sta                     / AC=-1
(1)    1205 : 3045                       dca     R0H             / store high(R0)
(1)    1206 : 5600                       jmp     I dep12         / return, AC=0
(1)    1207 :
(1)    1207 :                    /// 12-bit/24-bit addition; summand += addend
(1)    1207 :                    /// @param R0 Signed 24-bit summand
(1)    1207 :                    /// @param AC Signed 12-bit addend
(1)    1207 :                    /// @return R0
(1)    1207 :                    /// @return AC=0
(1)    1207 :                    /// @clobber R1
(1)    1207 : 0000               add12,          .-.
(1)    1210 : 3046                       dca     R1L             / low(addend)
(1)    1211 : 3047                       dca     R1H             / high(addend)
(1)    1212 : 1046                       tad     R1L
(1)    1213 : 7700                       sma cla                 / Skip if addend < 0, AC=0
(1)    1214 : 5217                       jmp     add12_add
(1)    1215 : 7240                       sta                     / AC=-1
(1)    1216 : 3047                       dca     R1H             / sign extended addend
(1)    1217 :                    add12_add,
(1)    1217 : 1046                       tad     R1L
(1)    1220 : 1044                       tad     R0L
(1)    1221 : 3044                       dca     R0L
(1)    1222 : 7004                       ral
(1)    1223 : 1047                       tad     R1H
(1)    1224 : 1045                       tad     R0H
(1)    1225 : 3045                       dca     R0H
(1)    1226 : 5607                       jmp     I add12         / return
(1)    1227 :
(1)    1227 :                    /// 12-bit/24-bit subtraction; minuend -= subtrahend
(1)    1227 :                    /// @param R0 Signed 24-bit minuend
(1)    1227 :                    /// @param AC Signed 12-bit minuend
(1)    1227 :                    /// @return AC=0
(1)    1227 :                    /// @return L=0 if borrow
(1)    1227 :                    /// @clobber R1
(1)    1227 : 0000               sub12,          .-.
(1)    1230 : 3046                       dca     R1L             / low(subtrahend)
(1)    1231 : 3047                       dca     R1H             / high(subtrahend)
(1)    1232 : 1047                       tad     R1H
(1)    1233 : 7700                       sma cla                 / Skip if subtrahend < 0, AC=0
(1)    1234 : 5237                       jmp     sub12_sub
(1)    1235 : 7240                       sta
(1)    1236 : 3047                       dca     R1H             / sign extended subtrahend
(1)    1237 :                    sub12_sub,
(1)    1237 : 1046                       tad     R1L             / AC=low(subtrahend)
(1)    1240 : 7161                       stl cia                 / negate to form 13-bit negative
(1)    1241 : 1044                       tad     R0L             / AC=low(R0)-low(subtrahend)
(1)    1242 : 3044                       dca     R0L             / L=0 if borrowed
(1)    1243 : 7004                       ral                     / propagate complemented borrow
(1)    1244 : 1046                       tad     R1L             / AC=high(subtrahend)
(1)    1245 : 7061                       cia cml                 / form 13-bit negative
(1)    1246 : 1045                       tad     R0H             / add high(R0)
(1)    1247 : 3045                       dca     R0H             / store high(R0), AC=0
(1)    1250 : 5627                       jmp     I sub12         / return
(1)    1251 :
(1)    1251 :                    /// Signed 12-bit multiply; R0 *= multiplier
(1)    1251 :                    /// @param R0 multiplicand
(1)    1251 :                    /// @param AC multiplier
(1)    1251 :                    /// @return R0 product
(1)    1251 :                    /// @return AC=0
(1)    1251 :                    /// @clobber R1 R2
(1)    1251 : 0000               mul12_sign,     0
(1)    1252 : 0000               mul12,          .-.
(1)    1253 : 3050                       dca     R2L             / low(multiplier)
(1)    1254 : 3051                       dca     R2H             / high(multiplier)
(1)    1255 : 3251                       dca     mul12_sign      / clear sign
(1)    1256 : 1050                       tad     R2L
(1)    1257 : 7500                       sma                     / skip if multiplier<0
(1)    1260 : 5264                       jmp     mul12_multiplicand
(1)    1261 : 7041                       cia                     / negate low(multiplier)
(1)    1262 : 3050                       dca     R2L
(1)    1263 : 2251                       isz     mul12_sign      / sign++
(1)    1264 :                    mul12_multiplicand,
(1)    1264 : 7200                       cla
(1)    1265 : 1044                       tad     R0L
(1)    1266 : 3046                       dca     R1L             / low(multiplicand)
(1)    1267 : 1045                       tad     R0H
(1)    1270 : 3047                       dca     R1H             / high(multiplicand)
(1)    1271 : 1047                       tad     R1H
(1)    1272 : 7500                       sma                     / skip if multiplicand<0
(1)    1273 : 5277                       jmp     mul12_multiply
(1)    1274 : 2251                       isz     mul12_sign      / sign++
(1)    1275 : 4427                       jms     I I_neg24       / negate multiplicand
(1)    1276 : 0046                       R1
(1)    1277 :                    mul12_multiply,
(1)    1277 : 4437                       jms     I I_umul24      / R0 = R1 * R2
(1)    1300 : 1251                       tad     mul12_sign
(1)    1301 : 7010                       rar                     / L=LSB(sign)
(1)    1302 : 7620                       snl cla                 / Skip if L=1, AC=0
(1)    1303 : 5306                       jmp     mul12_return
(1)    1304 : 4427                       jms     I I_neg24
(1)    1305 : 0044                       R0                      / negate product
(1)    1306 :                    mul12_return,
(1)    1306 : 5652                       jmp     I mul12         / return
(1)    1307 :
(1)    1307 :                    /// Signed 24-bit/Unsigned 12-bit division; quotient = dividend / divisor ... remainder
(1)    1307 :                    /// @param R0 dividend
(1)    1307 :                    /// @param AC unsigned 12-bit divisor address
(1)    1307 :                    /// @return R0 quotient
(1)    1307 :                    /// @return R1 remainder
(1)    1307 :                    /// @return AC=0
(1)    1307 :                    /// @clobber R2
(1)    1307 : 0000               divu12_sign,    0
(1)    1310 : 0000               divu12,         .-.
(1)    1311 : 3050                       dca     R2L             / low(divisor)
(1)    1312 : 3051                       dca     R2H             / high(divisor)
(1)    1313 : 3307                       dca     divu12_sign     / clear sign
(1)    1314 : 1044                       tad     R0L
(1)    1315 : 3046                       dca     R1L             / R1=dividend
(1)    1316 : 1045                       tad     R0H
(1)    1317 : 3047                       dca     R1H
(1)    1320 : 1047                       tad     R1H
(1)    1321 : 7500                       sma                     / skip if dividend<0
(1)    1322 : 5326                       jmp     divu12_divide
(1)    1323 : 2307                       isz     divu12_sign     / sign++
(1)    1324 : 4427                       jms     I I_neg24       / negate dividend
(1)    1325 : 0046                       R1
(1)    1326 :                    divu12_divide,
(1)    1326 : 4440                       jms     I I_udiv16      / R0 = R1 / R2 ... R1
(1)    1327 : 1307                       tad     divu12_sign
(1)    1330 : 7010                       rar                     / L=LSB(sign)
(1)    1331 : 7620                       snl cla                 / Skip if L=1, AC=0
(1)    1332 : 5335                       jmp     divu12_return
(1)    1333 : 4427                       jms     I I_neg24
(1)    1334 : 0044                       R0                      / negate R0, AC=0
(1)    1335 :                    divu12_return,
(1)    1335 : 5710                       jmp     I divu12        / return, AC=0
(1)    1336 :
(1)    1336 :                    /// Mandelbrot draw variables
(1)    1336 :                    mandelbrot_end,
(1)    1336 : 5737                       jmp     I mandelbrot
(1)    1337 : 0000               mandelbrot,     .-.
(1)    1340 : 7200                       cla
(1)    1341 : 1067                       tad     const_m12
(1)    1342 : 3064                       dca     vY              / Y=-12
(1)    1343 :                    loop_y,
(1)    1343 : 7200                       cla
(1)    1344 : 1070                       tad     const_m49
(1)    1345 : 3065                       dca     vX              / X=-49
(1)    1346 :                    loop_x,
(1)    1346 : 7200                       cla
(1)    1347 : 1065                       tad     vX
(1)    1350 : 4432                       jms     I I_dep12       / R0=X
(1)    1351 : 1071                       tad     const_229
(1)    1352 : 4435                       jms     I I_mul12       / R0=X*229
(1)    1353 : 1072                       tad     const_100
(1)    1354 : 4436                       jms     I I_divu12      / R0=X*229/100
(1)    1355 : 1044                       tad     R0
(1)    1356 : 3054                       dca     vC              / C=X*229/100
(1)    1357 : 1044                       tad     R0
(1)    1360 : 3056                       dca     vA              / A=C
(1)    1361 : 1064                       tad     vY
(1)    1362 : 4432                       jms     I I_dep12       / R0=Y
(1)    1363 : 1073                       tad     const_416
(1)    1364 : 4435                       jms     I I_mul12       / R0=Y*416
(1)    1365 : 1072                       tad     const_100
(1)    1366 : 4436                       jms     I I_divu12      / R0=Y*416/100
(1)    1367 : 1044                       tad     R0
(1)    1370 : 3055                       dca     vD              / D=Y*416/100
(1)    1371 : 1044                       tad     R0
(1)    1372 : 3057                       dca     vB              / B=D
(1)    1373 : 3066                       dca     vI              / I=0
(1)    1374 :
(1)    1374 :                    //        tad     vY
(1)    1374 :                    //        jms     I I_debug
(1)    1374 :                    //        131                     / char 'Y'
(1)    1374 :                    //        tad     vX
(1)    1374 :                    //        jms     I I_debug
(1)    1374 :                    //        130                     / char 'X'
(1)    1374 :                    //        tad     vC
(1)    1374 :                    //        jms     I I_debug
(1)    1374 :                    //        103                     / char 'C'
(1)    1374 :                    //        tad     vD
(1)    1374 :                    //        jms     I I_debug
(1)    1374 :                    //        104                     / char 'D'
(1)    1374 :                    //        jms     I I_newline
(1)    1374 :
(1)    1374 :                    loop_i,
(1)    1374 : 7200                       cla
(1)    1375 : 1057                       tad     vB
(1)    1376 : 4432                       jms     I I_dep12       / R0=B
(1)    1377 : 1074                       tad     const_F
(1)    1400 : 4436                       jms     I I_divu12      / R0=B/F
(1)    1401 : 1044                       tad     R0
(1)    1402 : 3062                       dca     vQ              / Q=B/F
(1)    1403 : 1062                       tad     vQ
(1)    1404 : 7041                       cia                     / AC=-Q
(1)    1405 : 4432                       jms     I I_dep12       / R0=-Q
(1)    1406 : 1074                       tad     const_F
(1)    1407 : 4435                       jms     I I_mul12       / R0=-Q*F
(1)    1410 : 1057                       tad     vB
(1)    1411 : 4433                       jms     I I_add12       / R0=B-Q*F
(1)    1412 : 1044                       tad     R0
(1)    1413 : 3060                       dca     vS              / S=B-Q*F
(1)    1414 : 1057                       tad     vB
(1)    1415 : 4432                       jms     I I_dep12       / R0=B
(1)    1416 : 1057                       tad     vB
(1)    1417 : 4435                       jms     I I_mul12       / R0=B*B
(1)    1420 : 1044                       tad     R0L
(1)    1421 : 3052                       dca     R3L
(1)    1422 : 1045                       tad     R0H
(1)    1423 : 3053                       dca     R3H             / R3=B*B
(1)    1424 : 1056                       tad     vA
(1)    1425 : 4432                       jms     I I_dep12       / R0=A
(1)    1426 : 1056                       tad     vA
(1)    1427 : 4435                       jms     I I_mul12       / R0=A*A
(1)    1430 : 4431                       jms     I I_sub24       / R0=A*A-B*B, needs 24-bit
(1)    1431 : 0052                       R3
(1)    1432 : 1074                       tad     const_F
(1)    1433 : 4436                       jms     I I_divu12      / R0=(A*A-B*B)/F, 12-bit is enough
(1)    1434 : 1054                       tad     vC
(1)    1435 : 4433                       jms     I I_add12       / R0=(A*A-B*B)/F+C
(1)    1436 : 1044                       tad     R0
(1)    1437 : 3052                       dca     R3L             / TMP=(A*A-B*B)/F+C, 12-bit is enough
(1)    1440 : 1056                       tad     vA
(1)    1441 : 4432                       jms     I I_dep12       / R0=A
(1)    1442 : 1062                       tad     vQ
(1)    1443 : 4435                       jms     I I_mul12       / R0=A*Q
(1)    1444 : 1044                       tad     R0
(1)    1445 : 3063                       dca     vT              / T=A*Q
(1)    1446 : 1056                       tad     vA
(1)    1447 : 4432                       jms     I I_dep12       / R0=A
(1)    1450 : 1060                       tad     vS
(1)    1451 : 4435                       jms     I I_mul12       / R0=A*S
(1)    1452 : 1074                       tad     const_F
(1)    1453 : 4436                       jms     I I_divu12      / R0=A*S/F
(1)    1454 : 1063                       tad     vT
(1)    1455 : 4433                       jms     I I_add12       / R0=A*Q+A*S/F
(1)    1456 : 1044                       tad     R0
(1)    1457 : 3063                       dca     vT              / T=A*Q+A*S/F
(1)    1460 : 1063                       tad     vT
(1)    1461 : 1063                       tad     vT              / AC=2*(A*Q+A*S/F)
(1)    1462 : 1055                       tad     vD              / AC=2*(A*Q+A*S/F)+D
(1)    1463 : 3057                       dca     vB              / B=2*(A*Q+A*S/F)+D
(1)    1464 : 1052                       tad     R3L             / AC=(A*A-B*B)/F+C
(1)    1465 : 3056                       dca     vA              / A=(A*A-B*B)/F+C
(1)    1466 : 1056                       tad     vA
(1)    1467 : 4432                       jms     I I_dep12       / R0=A
(1)    1470 : 1074                       tad     const_F
(1)    1471 : 4436                       jms     I I_divu12      / R0=A/F
(1)    1472 : 1044                       tad     R0
(1)    1473 : 3061                       dca     vP              / P=A/F
(1)    1474 : 1061                       tad     vP
(1)    1475 : 4435                       jms     I I_mul12       / R0=P*P
(1)    1476 : 1044                       tad     R0
(1)    1477 : 3063                       dca     vT              / T=P*P
(1)    1500 : 1057                       tad     vB
(1)    1501 : 4432                       jms     I I_dep12       / R0=B
(1)    1502 : 1074                       tad     const_F
(1)    1503 : 4436                       jms     I I_divu12      / R0=B/F
(1)    1504 : 1044                       tad     R0
(1)    1505 : 3062                       dca     vQ              / Q=B/F
(1)    1506 : 1062                       tad     vQ
(1)    1507 : 4435                       jms     I I_mul12       / R0=Q*Q
(1)    1510 : 1044                       tad     R0
(1)    1511 : 1063                       tad     vT              / R0=P*P+Q*Q
(1)    1512 : 3063                       dca     vT              / T=P*P+Q*Q
(1)    1513 :
(1)    1513 :                    //        jms     I I_putspace
(1)    1513 :                    //        cla
(1)    1513 :                    //        tad     vI
(1)    1513 :                    //        jms     I I_debug
(1)    1513 :                    //        111                     / char 'I'
(1)    1513 :                    //        tad     vA
(1)    1513 :                    //        jms     I I_debug
(1)    1513 :                    //        101                     / char 'A'
(1)    1513 :                    //        tad     vB
(1)    1513 :                    //        jms     I I_debug
(1)    1513 :                    //        102                     / char 'B'
(1)    1513 :                    //        tad     vP
(1)    1513 :                    //        jms     I I_debug
(1)    1513 :                    //        120                     / char 'P'
(1)    1513 :                    //        tad     vQ
(1)    1513 :                    //        jms     I I_debug
(1)    1513 :                    //        121                     / char 'Q'
(1)    1513 :                    //        tad     vT
(1)    1513 :                    //        jms     I I_debug
(1)    1513 :                    //        124                     / char 'T'
(1)    1513 :                    //        jms     I I_newline
(1)    1513 :                    //        cla
(1)    1513 :
(1)    1513 : 5714                       jmp     I I_debug_t
(1)    1514 : 1600               I_debug_t,      debug_t
(1)    1600 :                            page
(1)    1600 :                    debug_t,
(1)    1600 : 1063                       tad     vT
(1)    1601 : 1075                       tad     const_m5        / T-5
(1)    1602 : 7700                       sma cla                 / skip if T-5<0
(1)    1603 : 5216                       jmp     print_i         / if 4<T (T>=5)
(1)    1604 : 1066                       tad     vI
(1)    1605 : 7001                       iac
(1)    1606 : 3066                       dca     vI              / I+=1
(1)    1607 : 1066                       tad     vI
(1)    1610 : 1076                       tad     const_m16       / I-16
(1)    1611 : 7710                       spa cla                 / skip if I-16>=0
(1)    1612 : 5615                       jmp     I I_loop_i      / if I<16
(1)    1613 : 4425                       jms     I I_putspace    / print ' '
(1)    1614 : 5231                       jmp     check_break
(1)    1615 :
(1)    1615 : 1374               I_loop_i,       loop_i
(1)    1616 :
(1)    1616 :                    print_i,
(1)    1616 : 7200                       cla
(1)    1617 : 1066                       tad     vI
(1)    1620 : 1077                       tad     const_m10       / I-10
(1)    1621 : 7510                       spa                     / if I>=10
(1)    1622 : 5225                       jmp     print_dec       / if I<10
(1)    1623 : 1102                       tad     char_A          / I-10+'A'
(1)    1624 : 5230                       jmp     print_char
(1)    1625 :                    print_dec,
(1)    1625 : 7200                       cla
(1)    1626 : 1066                       tad     vI
(1)    1627 : 1103                       tad     char_zero       / '0'
(1)    1630 :                    print_char,
(1)    1630 : 4424                       jms     I I_putchar
(1)    1631 :
(1)    1631 :                    //        dca     R1L             / save character
(1)    1631 :                    //        tad     char_atmark
(1)    1631 :                    //        jms     I I_putchar     / print '@'
(1)    1631 :                    //        cla
(1)    1631 :                    //        tad     char_equal
(1)    1631 :                    //        jms     I I_putchar     / print '='
(1)    1631 :                    //        cla
(1)    1631 :                    //        tad     R1L             / restore character
(1)    1631 :                    //        jms     I I_putchar     / print character
(1)    1631 :                    //        jms     I I_newline
(1)    1631 :                    //        jmp     check_break
(1)    1631 :                    //char_atmark,    40H             / char '@'
(1)    1631 :                    //char_equal,     3DH             / char '='
(1)    1631 :
(1)    1631 :                    check_break,
(1)    1631 : 4423                       jms     I I_getchar
(1)    1632 : 7420                       snl                     / Skip if L=1
(1)    1633 : 5240                       jmp     next_x
(1)    1634 : 7440                       sza                     / Skip if AC=0
(1)    1635 : 5240                       jmp     next_x
(1)    1636 : 7402                       hlt                     / halt to system
(1)    1637 :
(1)    1637 : 1346               I_loop_x,               loop_x
(1)    1640 :                    next_x,
(1)    1640 : 7200                       cla
(1)    1641 : 1065                       tad     vX
(1)    1642 : 7001                       iac
(1)    1643 : 3065                       dca     vX              / X+=1
(1)    1644 : 1065                       tad     vX
(1)    1645 : 1101                       tad     const_m30       / X-30
(1)    1646 : 7510                       spa                     / Skip if X-30>=0
(1)    1647 : 5637                       jmp     I I_loop_x      / if X<30
(1)    1650 :                    next_y,
(1)    1650 : 4426                       jms     I I_newline
(1)    1651 : 7200                       cla
(1)    1652 : 1064                       tad     vY
(1)    1653 : 7001                       iac
(1)    1654 : 3064                       dca     vY              / Y+=1
(1)    1655 : 1064                       tad     vY
(1)    1656 : 1100                       tad     const_m13       / Y-13
(1)    1657 : 7510                       spa                     / Skip if Y-13>=0
(1)    1660 : 5661                       jmp     I I_loop_y      / if Y<13
(1)    1661 : 1343               I_loop_y,               loop_y
(1)    1662 : 5663                       jmp     I I_mandelbrot_end
(1)    1663 : 1336               I_mandelbrot_end,       mandelbrot_end
(1)    1664 :
(1)    1664 :                    /// Print variable: "name=R0 "
(1)    1664 :                    /// @param AC variable
(1)    1664 :                    /// @param (PC+1) variable name
(1)    1664 :                    /// @return AC=0
(1)    1664 :                    /// @clobber AC R0 R1 R2
(1)    1664 : 0000               debug,          .-.
(1)    1665 : 4432                       jms     I I_dep12       / R0=variable
(1)    1666 : 1664                       tad     I debug         / AC=name
(1)    1667 : 2264                       isz     debug           / advance to return address
(1)    1670 : 4424                       jms     I I_putchar     / print 'name'
(1)    1671 : 7200                       cla
(1)    1672 : 1300                       tad     char_equal      / char '='
(1)    1673 : 4424                       jms     I I_putchar     / print '='
(1)    1674 : 4441                       jms     I I_print_int24 / print variable
(1)    1675 : 4425                       jms     I I_putspace    / print ' '
(1)    1676 : 7200                       cla                     / AC=0
(1)    1677 : 5664                       jmp     I debug         / return
(1)    1700 : 0075               char_equal,     075             / char '='
       1701 :
       2000 :                            page
       2000 :                    /// Interrupt service routine
       2000 : 0001               bit_receive,    RDRF_bm
       2001 : 0002               bit_transmit,   TDRE_bm
       2002 : 0000               isr_AC,         0
       2003 : 0000               isr_FLAGS,      0
       2004 :                    isr,
       2004 : 3202                       dca     isr_AC
       2005 : 6004                       gtf
       2006 : 3203                       dca     isr_FLAGS
       2007 : 6070                       iot     ACIA ACIA_status
       2010 : 0200                       and     bit_receive
       2011 : 7650                       sna cla                 / Skip if received data exists
       2012 : 5216                       jmp     isr_send
       2013 : 6071                       iot     ACIA ACIA_receive
       2014 : 4421                       jms     I I_queue_add
       2015 : 4000                       rx_queue
       2016 :                    isr_send,
       2016 : 7200                       cla
       2017 : 6070                       iot     ACIA ACIA_status
       2020 : 0201                       and     bit_transmit
       2021 : 7650                       sna cla                 / Skip if transmitter is ready
       2022 : 5230                       jmp     isr_exit
       2023 : 4422                       jms     I I_queue_remove
       2024 : 4040                       tx_queue
       2025 : 7420                       snl                     / Skip if L=1
       2026 : 5236                       jmp     isr_send_empty  / L=0 AC=0
       2027 : 6075                       iot     ACIA ACIA_transmit
       2030 :                    isr_exit,
       2030 : 1203                       tad     isr_FLAGS
       2031 : 6005                       rtf                     / Restore FLAGS
       2032 : 7200                       cla
       2033 : 1202                       tad     isr_AC          / Restore AC
       2034 : 5400                       jmp     I PC_INTR       / Return
       2035 : 0224               DISABLE_TX_NO,   WSB_8N1_gc|RIEB_bm
       2036 :                    isr_send_empty,
       2036 : 1235                       tad     DISABLE_TX_NO
       2037 : 6074                       iot     ACIA ACIA_control
       2040 : 5230                       jmp     isr_exit
