          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            include "tms370.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; TMS370
(1)       0 :                            cpu     tms370
(1)       0 :                    ;;; Status Register
(1)       0 : =80                ST_C:   equ  10000000B          ; set to 1 if carry occurred
(1)       0 : =40                ST_N:   equ  01000000B          ; set to 1 if result is negative
(1)       0 : =20                ST_Z:   equ  00100000B          ; set to 1 if result is zero
(1)       0 : =10                ST_V:   equ  00010000B          ; set to 1 if result is overflow
(1)       0 : =8                 ST_IE2: equ  00001000B          ; if 1, level 2 interrupt is enabled
(1)       0 : =4                 ST_IE1: equ  00000100B          ; if 1, level 1 interrupt is enabled
(1)       0 :                    ;;; Vector
(1)       0 : =7FF8              VEC_INT3:       equ     7FF8H   ; #INT2 interrupt
(1)       0 : =7FFA              VEC_INT2:       equ     7FFAH   ; #INT2 interrupt
(1)       0 : =7FFC              VEC_INT1:       equ     7FFCH   ; #INT1 interrupt
(1)       0 : =7FFE              VEC_RESET:      equ     7FFEH   ; #RESET vector
(1)       0 :                    ;;; Trap Vector
(1)       0 : =7FDE              VEC_TRAP0:      equ     7FDEH
(1)       0 : =7FDC              VEC_TRAP1:      equ     7FDCH
(1)       0 : =7FDA              VEC_TRAP2:      equ     7FDAH
(1)       0 : =7FD8              VEC_TRAP3:      equ     7FD8H
(1)       0 : =7FD6              VEC_TRAP4:      equ     7FD6H
(1)       0 : =7FD4              VEC_TRAP5:      equ     7FD4H
(1)       0 : =7FD2              VEC_TRAP6:      equ     7FD2H
(1)       0 : =7FD0              VEC_TRAP7:      equ     7FD0H
(1)       0 : =7FCE              VEC_TRAP8:      equ     7FCEH
(1)       0 : =7FCC              VEC_TRAP9:      equ     7FCCH
(1)       0 : =7FCA              VEC_TRAP10:     equ     7FCAH
(1)       0 : =7FC8              VEC_TRAP11:     equ     7FC8H
(1)       0 : =7FC6              VEC_TRAP12:     equ     7FC6H
(1)       0 : =7FC4              VEC_TRAP13:     equ     7FC4H
(1)       0 : =7FC2              VEC_TRAP14:     equ     7FC2H
(1)       0 : =7FC0              VEC_TRAP15:     equ     7FC0H
(1)       0 :                    ;;; System Control and Configuration Registers
(1)       0 : =1010              SCCR0:          equ     1010H
(1)       0 : =1011              SCCR1:          equ     1011H
(1)       0 : =1012              SCCR2:          equ     1012H
(1)       0 : =1017              INT1:           equ     1017H
(1)       0 : =1018              INT2:           equ     1018H
(1)       0 : =1019              INT3:           equ     1019H
(1)       0 : =80                INT_FLAG:       equ     10000000B ; INTx Flag
(1)       0 : =4                 INT_POLALITY:   equ     00000100B ; INTx Polarity 1:rising 0:falling
(1)       0 : =2                 INT_PRIORITY:   equ     00000010B ; INTx Priority 1:level2 0:level1
(1)       0 : =1                 INT_ENABLE:     equ     00000001B ; INTx Enable 1:enable 0:disable
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =10F0              ACIA:   equ     10F0H
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 : =10F0              ACIA_control:   equ     ACIA+0
(1)       0 : =10F0              ACIA_status:    equ     ACIA+0
(1)       0 : =10F1              ACIA_data:      equ     ACIA+1
(1)       0 :                            ;;  Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     11B             ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     00000000B       ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     00000001B       ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     00000010B       ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     00000011B       ; Master Reset
(1)       0 :                            ;;  Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     00011100B       ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     00000000B       ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     00000100B       ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     00001000B       ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     00001100B       ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     00010000B       ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     00010100B       ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     00011000B       ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     00011100B       ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;;  Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     01100000B       ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     00000000B       ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     00100000B       ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     01000000B       ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     01100000B       ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                    ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     10000000B       ; Receive Interrupt Enable Bit mask
(1)       0 :                    ;;; Status register
(1)       0 : =1                 RDRF_bm:        equ     00000001B       ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     00000010B       ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     00000100B       ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     00001000B       ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     00010000B       ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     00100000B       ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     01000000B       ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     10000000B       ; Interrupt Request Flag
          0 :
          0 :                    ;;; Internal register file
          0 : =5                 Rd:     equ     5       ; R4:R5
          0 : =7                 Rs:     equ     7       ; R6:R7
          0 : =9                 vA:     equ     9       ; R8:R9
          0 : =B                 vB:     equ     11      ; R10:R11
          0 :
         C0 :                            org     0C0H
         C0 : =BF                stack:  equ     $-1      ; TMS370's SP is pre-increment/post-decrement
         C0 :
       7FFE :                            org     VEC_RESET
       7FFE : 20 00                      .word   initialize
       8000 :
       7FC0 :                            org     VEC_TRAP15
       7FC0 : 7F C0                      .word   VEC_TRAP15
       7FC2 :
       2000 :                            org     2000H
       2000 :                    initialize:
       2000 : 52 BF                      mov     #stack, B
       2002 : FD                         ldsp
       2003 : F7 03 F0                   mov     #CDS_RESET_gc, ACIA_control     ; Master reset
       2006 : F7 14 F0                   mov     #WSB_8N1_gc, ACIA_control       ; 8 bits + No Parity + 1 Stop Bits
       2009 :                                                    ; Transmit, Receive interrupts disabled
       2009 :
       2009 : 8E 20 70                   call    arith
       200C : F6                         idle
       200D :
       200D :                    ;;; Print out char
       200D :                    ;;; @param A char
       200D :                    ;;; @clobber A
       200D :                    putspace:
       200D : 22 20                      mov     #' ', A
       200F : 00 07                      jmp     putchar
       2011 :                    newline:
       2011 : 22 0D                      mov     #00DH, A
       2013 : 8E 20 18                   call    putchar
       2016 : 22 0A                      mov     #00AH, A
       2018 :                    putchar:
       2018 : A7 02 F0 FC                btjz    #TDRE_bm, ACIA_status, putchar
       201C : 21 F1                      mov     A, ACIA_data
       201E : F9                         rts
       201F :
       201F :                    ;;; Print "v1 op v2"
       201F :                    ;;; @param vA v1
       201F :                    ;;; @param vB v2
       201F :                    ;;; @param A op letter
       201F :                    ;;; @clobber Rd Rs
       201F :                    expr:
       201F : B8                         push    A
       2020 : 98 09 05                   movw    vA, Rd
       2023 : 8E 22 33                   call    print_int16    print v1
       2026 : 8E 20 0D                   call    putspace
       2029 : B9                         pop     A
       202A : 8E 20 18                   call    putchar        print op
       202D : 8E 20 0D                   call    putspace
       2030 : 98 0B 05                   movw    vB, Rd
       2033 : 8E 22 33                   call    print_int16    print v2
       2036 : 98 09 05                   movw    vA, Rd
       2039 : 98 0B 07                   movw    vB, Rs
       203C : F9                         rts
       203D :
       203D :                    ;;; Print " = v\n"
       203D :                    ;;; @param Rd v
       203D :                    ;;; @clobber Rd Rs
       203D :                    answer:
       203D : 8E 20 0D                   call    putspace
       2040 : 22 3D                      mov     #'=', A
       2042 : 8E 20 18                   call    putchar
       2045 : 8E 20 0D                   call    putspace
       2048 : 8E 22 33                   call    print_int16    print v
       204B : 00 C4                      jmp     newline
       204D :
       204D :                    ;;; Print "v1 rel v2"
       204D :                    ;;; @param R8:vA v1
       204D :                    ;;; @param R10:vB v2
       204D :                    ;;; @clobber Rd Rs
       204D :                    comp:
       204D : 98 09 05                   movw    vA, Rd
       2050 : 98 0B 07                   movw    vB, Rs
       2053 : 8E 22 73                   call    cmp16
       2056 : B0                         tst     A
       2057 : 02 0C                      jeq     comp_eq
       2059 : 09 0E                      jl      comp_lt
       205B : 0E 04                      jg      comp_gt         
       205D : 22 3F                      mov     #'?', A
       205F : 00 0A                      jmp     comp_out
       2061 :                    comp_gt:
       2061 : 22 3E                      mov     #'>', A
       2063 : 00 06                      jmp     comp_out
       2065 :                    comp_eq:
       2065 : 22 3D                      mov     #'=', A
       2067 : 00 02                      jmp     comp_out
       2069 :                    comp_lt:
       2069 : 22 3C                      mov     #'<', A
       206B :                    comp_out:
       206B : 8E 20 1F                   call    expr
       206E : 00 A1                      jmp     newline
       2070 :
       2070 :                    arith:
       2070 : 88 46 50 09                movw    #18000, vA
       2074 : 88 6D 60 0B                movw    #28000, vB
       2078 : 22 2B                      mov     #'+', A
       207A : 8E 20 1F                   call    expr
       207D : 8E 22 65                   call    add16          ; Rd=Rd+Rs
       2080 : 8E 20 3D                   call    answer         ; -19536
       2083 :
       2083 : 88 46 50 09                movw    #18000, vA
       2087 : 88 B9 B0 0B                movw    #-18000, vB
       208B : 22 2B                      mov     #'+', A
       208D : 8E 20 1F                   call    expr
       2090 : 8E 22 65                   call    add16          ; Rd=Rd+Rs
       2093 : 8E 20 3D                   call    answer         ; 0
       2096 :
       2096 : 88 B9 B0 09                movw    #-18000, vA
       209A : 88 B9 B0 0B                movw    #-18000, vB
       209E : 22 2B                      mov     #'+', A
       20A0 : 8E 20 1F                   call    expr
       20A3 : 8E 22 65                   call    add16          ; Rd=Rd+Rs
       20A6 : 8E 20 3D                   call    answer         ; 29536
       20A9 :
       20A9 : 88 B9 B0 09                movw    #-18000, vA
       20AD : 88 92 A0 0B                movw    #-28000, vB
       20B1 : 22 2D                      mov     #'-', A
       20B3 : 8E 20 1F                   call    expr
       20B6 : 8E 22 6C                   call    sub16          ; Rd=Rd-Rs
       20B9 : 8E 20 3D                   call    answer         ; 10000
       20BC :
       20BC : 88 46 50 09                movw    #18000, vA
       20C0 : 88 B9 B0 0B                movw    #-18000, vB
       20C4 : 22 2D                      mov     #'-', A
       20C6 : 8E 20 1F                   call    expr
       20C9 : 8E 22 6C                   call    sub16          ; Rd=Rd-Rs
       20CC : 8E 20 3D                   call    answer         ; 29536
       20CF :
       20CF : 88 92 A0 09                movw    #-28000, vA
       20D3 : 88 B9 B0 0B                movw    #-18000, vB
       20D7 : 22 2D                      mov     #'-', A
       20D9 : 8E 20 1F                   call    expr
       20DC : 8E 22 6C                   call    sub16          ; Rd=Rd-Rs
       20DF : 8E 20 3D                   call    answer         ; -10000
       20E2 :
       20E2 : 88 00 64 09                movw    #100, vA
       20E6 : 88 01 2C 0B                movw    #300, vB
       20EA : 22 2A                      mov     #'*', A
       20EC : 8E 20 1F                   call    expr
       20EF : 8E 22 CC                   call    mul16          ; Rd=Rd*Rs
       20F2 : 8E 20 3D                   call    answer         ; 30000
       20F5 :
       20F5 : 88 00 C8 09                movw    #200, vA
       20F9 : 88 00 64 0B                movw    #100, vB
       20FD : 22 2A                      mov     #'*', A
       20FF : 8E 20 1F                   call    expr
       2102 : 8E 22 CC                   call    mul16          ; Rd=Rd*Rs
       2105 : 8E 20 3D                   call    answer         ; 20000
       2108 :
       2108 : 88 01 2C 09                movw    #300, vA
       210C : 88 FF 38 0B                movw    #-200, vB
       2110 : 22 2A                      mov     #'*', A
       2112 : 8E 20 1F                   call    expr
       2115 : 8E 22 CC                   call    mul16          ; Rd=Rd*Rs
       2118 : 8E 20 3D                   call    answer         ; 5536
       211B :
       211B : 88 00 64 09                movw    #100, vA
       211F : 88 FE D4 0B                movw    #-300, vB
       2123 : 22 2A                      mov     #'*', A
       2125 : 8E 20 1F                   call    expr
       2128 : 8E 22 CC                   call    mul16          ; Rd=Rd*Rs
       212B : 8E 20 3D                   call    answer         ; -30000
       212E :
       212E : 88 FF 38 09                movw    #-200, vA
       2132 : 88 FF 9C 0B                movw    #-100, vB
       2136 : 22 2A                      mov     #'*', A
       2138 : 8E 20 1F                   call    expr
       213B : 8E 22 CC                   call    mul16          ; Rd=Rd*Rs
       213E : 8E 20 3D                   call    answer         ; 20000
       2141 :
       2141 : 88 75 30 09                movw    #30000, vA
       2145 : 88 00 64 0B                movw    #100, vB
       2149 : 22 2F                      mov     #'/', A
       214B : 8E 20 1F                   call    expr
       214E : 8E 23 4C                   call    div16          ; Rd=Rd/Rs
       2151 : 8E 20 3D                   call    answer         ; 300
       2154 :
       2154 : 88 FF 38 09                movw    #-200, vA
       2158 : 88 00 64 0B                movw    #100, vB
       215C : 22 2F                      mov     #'/', A
       215E : 8E 20 1F                   call    expr
       2161 : 8E 23 4C                   call    div16          ; Rd=Rd/Rs
       2164 : 8E 20 3D                   call    answer         ; -2
       2167 :
       2167 : 88 8A D0 09                movw    #-30000, vA
       216B : 88 FF 38 0B                movw    #-200, vB
       216F : 22 2F                      mov     #'/', A
       2171 : 8E 20 1F                   call    expr
       2174 : 8E 23 4C                   call    div16          ; Rd=Rd/Rs
       2177 : 8E 20 3D                   call    answer         ; 150
       217A :
       217A : 88 8A D0 09                movw    #-30000, vA
       217E : 88 00 4E 0B                movw    #78, vB
       2182 : 22 2F                      mov     #'/', A
       2184 : 8E 20 1F                   call    expr
       2187 : 8E 23 4C                   call    div16          ; Rd=Rd/Rs
       218A : 8E 20 3D                   call    answer         ; -384
       218D :
       218D : 88 13 88 09                movw    #5000, vA
       2191 : 88 0F A0 0B                movw    #4000, vB
       2195 : 8E 20 4D                   call    comp
       2198 :
       2198 : 88 13 88 09                movw    #5000, vA
       219C : 88 13 88 0B                movw    #5000, vB
       21A0 : 8E 20 4D                   call    comp
       21A3 :
       21A3 : 88 0F A0 09                movw    #4000, vA
       21A7 : 88 13 88 0B                movw    #5000, vB
       21AB : 8E 20 4D                   call    comp
       21AE :
       21AE : 88 EC 78 09                movw    #-5000, vA
       21B2 : 88 F0 60 0B                movw    #-4000, vB
       21B6 : 8E 20 4D                   call    comp
       21B9 :
       21B9 : 88 EC 78 09                movw    #-5000, vA
       21BD : 88 EC 78 0B                movw    #-5000, vB
       21C1 : 8E 20 4D                   call    comp
       21C4 :
       21C4 : 88 F0 60 09                movw    #-4000, vA
       21C8 : 88 EC 78 0B                movw    #-5000, vB
       21CC : 8E 20 4D                   call    comp
       21CF :
       21CF : 88 7F BC 09                movw    #32700, vA
       21D3 : 88 7F 58 0B                movw    #32600, vB
       21D7 : 8E 20 4D                   call    comp
       21DA :
       21DA : 88 7F BC 09                movw    #32700, vA
       21DE : 88 7F BC 0B                movw    #32700, vB
       21E2 : 8E 20 4D                   call    comp
       21E5 :
       21E5 : 88 7F 58 09                movw    #32600, vA
       21E9 : 88 7F BC 0B                movw    #32700, vB
       21ED : 8E 20 4D                   call    comp
       21F0 :
       21F0 : 88 80 44 09                movw    #-32700, vA
       21F4 : 88 80 A8 0B                movw    #-32600, vB
       21F8 : 8E 20 4D                   call    comp
       21FB :
       21FB : 88 80 44 09                movw    #-32700, vA
       21FF : 88 80 44 0B                movw    #-32700, vB
       2203 : 8E 20 4D                   call    comp
       2206 :
       2206 : 88 80 A8 09                movw    #-32600, vA
       220A : 88 80 44 0B                movw    #-32700, vB
       220E : 8E 20 4D                   call    comp
       2211 :
       2211 : 88 46 50 09                movw    #18000, vA
       2215 : 88 92 A0 0B                movw    #-28000, vB
       2219 : 8E 20 4D                   call    comp
       221C :
       221C : 88 92 A0 09                movw    #-28000, vA
       2220 : 88 92 A0 0B                movw    #-28000, vB
       2224 : 8E 20 4D                   call    comp
       2227 :
       2227 : 88 92 A0 09                movw    #-28000, vA
       222B : 88 00 00 0B                movw    #!18000, vB
       222F : 8E 20 4D                   call    comp
       2232 : F9                         rts
       2233 :
       2233 :                            include "arith.inc"
(1)    2233 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)    2233 :
(1)    2233 :                    ;;; Print signed 16-bit integer as decimal
(1)    2233 :                    ;;; @param R4:R5 value
(1)    2233 :                    ;;; @clobber A R4:R5 R6:R7
(1)    2233 :                    print_int16:
(1)    2233 : 77 80 04 0F                btjz    #080H, R4, print_uint16
(1)    2237 : 22 2D                      mov     #'-', A
(1)    2239 : 8E 20 18                   call    putchar
(1)    223C : D4 04                      inv     R4
(1)    223E : D4 05                      inv     R5
(1)    2240 : D3 05                      inc     R5
(1)    2242 : 07 02                      jnc     print_uint16
(1)    2244 : D3 04                      inc     R4        ; negate R4:R5
(1)    2246 :                    ;;; Print unsigned 16-bit integer as decimal
(1)    2246 :                    ;;; @param R4:R5 value
(1)    2246 :                    ;;; @clobber A R4:R5 R6:R7
(1)    2246 :                    print_uint16:
(1)    2246 : 12 04                      mov     R4, A
(1)    2248 : 14 05                      or      R5, A
(1)    224A : 02 13                      jz      print_uint16_zero
(1)    224C :                    print_uint16_loop:
(1)    224C : 12 04                      mov     R4, A
(1)    224E : 14 05                      or      R5, A
(1)    2250 : 02 12                      jz      print_uint16_end ; branch if value == 0
(1)    2252 : 88 00 0A 07                movw    #10, R7          ; R6:R7=10
(1)    2256 : 8E 22 FE                   call    udiv16           ; R4:R5=value/10
(1)    2259 : D8 07                      push    R7               ; push reminder
(1)    225B : 8E 22 4C                   call    print_uint16_loop
(1)    225E : B9                         pop     A
(1)    225F :                    print_uint16_zero:
(1)    225F : 24 30                      or      #'0', A
(1)    2261 : 8C 20 18                   br      putchar
(1)    2264 :                    print_uint16_end:
(1)    2264 : F9                         rts
(1)    2265 :
(1)    2265 :                    ;;; Addition: R4:R5 += R6:R7
(1)    2265 :                    add16:
(1)    2265 : 48 07 05                   add     R7, R5
(1)    2268 : 49 06 04                   adc     R6, R4
(1)    226B : F9                         rts
(1)    226C :
(1)    226C :                    ;;; Subtraction: R4:R5 -= R6:R7
(1)    226C :                    sub16:
(1)    226C : 4A 07 05                   sub     R7, R5
(1)    226F : 4B 06 04                   sbb     R6, R4
(1)    2272 : F9                         rts
(1)    2273 :
(1)    2273 :                    ;;; Signed compare A=sign(minuend-subtrahend)
(1)    2273 :                    ;;; @param R4:R5 minuend
(1)    2273 :                    ;;; @param R6:R7 subtrahend
(1)    2273 :                    ;;; @return A=0  JEQ (minuend == subtrahend)
(1)    2273 :                    ;;;         A=1  JGT (minuend > subtrahend)
(1)    2273 :                    ;;;         A=-1 JLT (minuend < subtrahend)
(1)    2273 :                    ;;; @clobber A
(1)    2273 :                    cmp16:
(1)    2273 : D8 03                      push    R3
(1)    2275 : D8 02                      push    R2
(1)    2277 : 98 05 03                   movw    R5, R3          ; R2:R3=minuend
(1)    227A : 4A 07 03                   sub     R7, R3
(1)    227D : 4B 06 02                   sbb     R6, R2          ; R2:R3=minuend-subtrahend
(1)    2280 : 12 02                      mov     R2, A
(1)    2282 : 14 03                      or      R3, A
(1)    2284 : 02 16                      jeq     cmp16_end       ; return with A=0
(1)    2286 : 12 02                      mov     R2, A           ; A=hi(minuend-subtrahend)
(1)    2288 : 15 04                      xor     R4, A           ; A=hi((minuend-subtrahend)^minuend)
(1)    228A : D0 03                      mov     A, R3           ; R3=hi((minuend-subtrahend)^minuend)
(1)    228C : 12 04                      mov     R4, A           ; A=hi(minuend)
(1)    228E : 15 06                      xor     R6, A           ; A=hi(minuend^subtrahend)
(1)    2290 : 13 03                      and     R3, A           ; A=overflow flag
(1)    2292 : 15 02                      xor     R2, A           ; A=V^N
(1)    2294 : 01 04                      jn      cmp16_lt        ; branch if minuend < subtrahend
(1)    2296 :                    cmp16_gt:
(1)    2296 : 22 01                      mov     #1, A
(1)    2298 : 00 02                      jmp     cmp16_end
(1)    229A :                    cmp16_lt:
(1)    229A : 22 FF                      mov     #-1, A
(1)    229C :                    cmp16_end:
(1)    229C : D9 02                      pop     R2
(1)    229E : D9 03                      pop     R3
(1)    22A0 : B0                         tst     A
(1)    22A1 : F9                         rts
(1)    22A2 :
(1)    22A2 :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)    22A2 :                    ;;; @param R4:R5 multiplicand
(1)    22A2 :                    ;;; @param R6:R7 multiplier
(1)    22A2 :                    ;;; @return R4:R5 result
(1)    22A2 :                    ;;; @clobber A R4:R5 R6:R7
(1)    22A2 :                    umul16:
(1)    22A2 : D8 03                      push    R3
(1)    22A4 : D8 02                      push    R2
(1)    22A6 : 98 05 03                   movw    R5, R3          ; R2:R3=multiplicand
(1)    22A9 : 88 00 00 05                movw    #0, R5          ; R4:R5=result=0
(1)    22AD : 00 12                      jmp     umul16_check
(1)    22AF :                    umul16_loop:
(1)    22AF : B0                         clrc
(1)    22B0 : DD 06                      rrc     R6
(1)    22B2 : DD 07                      rrc     R7              ; multiplier >>= 1
(1)    22B4 : 07 06                      jnc     umul16_next     ; if lsb(multiplier) == 0
(1)    22B6 : 48 03 05                   add     R3, R5
(1)    22B9 : 49 02 04                   adc     R2, R4          ; result += multiplicand
(1)    22BC :                    umul16_next:
(1)    22BC : B0                         clrc
(1)    22BD : DF 03                      rlc     R3
(1)    22BF : DF 02                      rlc     R2              ; multiplicand <<= 1
(1)    22C1 :                    umul16_check:
(1)    22C1 : 12 06                      mov     R6, A
(1)    22C3 : 14 07                      or      R7, A
(1)    22C5 : 06 E8                      jnz     umul16_loop     ; while multiplier != 0
(1)    22C7 :                    umul16_end:
(1)    22C7 : D9 02                      pop     R2
(1)    22C9 : D9 03                      pop     R3
(1)    22CB : F9                         rts
(1)    22CC :
(1)    22CC :                    ;;; Multiply: result = multiplicand * multiplier
(1)    22CC :                    ;;; @param R4:R5 multiplicand
(1)    22CC :                    ;;; @param R6:R7 multiplier
(1)    22CC :                    ;;; @return R4:R5 result
(1)    22CC :                    ;;; @clobber A R6:R7
(1)    22CC :                    mul16:
(1)    22CC : 12 04                      mov     R4, A
(1)    22CE : 15 06                      xor     R6, A
(1)    22D0 : B8                         push    A               ; save hi(multiplicand^multiplier)
(1)    22D1 : 77 80 06 0A                btjz    #080H, R6, mul16_multiplicand
(1)    22D5 : D4 06                      inv     R6
(1)    22D7 : D4 07                      inv     R7
(1)    22D9 : D3 07                      inc     R7
(1)    22DB : 07 02                      jnc     mul16_multiplicand
(1)    22DD : D3 06                      inc     R6              ; negate multiplier
(1)    22DF :                    mul16_multiplicand:
(1)    22DF : 77 80 04 0A                btjz    #080H, R4, mul16_multiply
(1)    22E3 : D4 04                      inv     R4
(1)    22E5 : D4 05                      inv     R5
(1)    22E7 : D3 05                      inc     R5
(1)    22E9 : 07 02                      jnc     mul16_multiply
(1)    22EB : D3 04                      inc     R4              ; negate multiplicand
(1)    22ED :                    mul16_multiply:
(1)    22ED : 8E 22 A2                   call    umul16          ; R4:R5=result
(1)    22F0 : B9                         pop     A               ; A=(multiplicand^multiplier)
(1)    22F1 : 05 0A                      jpz     mul16_end
(1)    22F3 : D4 04                      inv     R4
(1)    22F5 : D4 05                      inv     R5
(1)    22F7 : D3 05                      inc     R5
(1)    22F9 : 07 02                      jnc     mul16_end
(1)    22FB : D3 04                      inc     R4              ; negate result
(1)    22FD :                    mul16_end:
(1)    22FD : F9                         rts
(1)    22FE :
(1)    22FE :                    ;;; Unsigned division: dividend / divisor = quotient ... reminder
(1)    22FE :                    ;;; @praram R4:R5 dividend
(1)    22FE :                    ;;; @praram R6:R7 divisor
(1)    22FE :                    ;;; @return R4:R5 quotient
(1)    22FE :                    ;;; @return R6:R7 reminder
(1)    22FE :                    ;;; @clobber A
(1)    22FE :                    udiv16:
(1)    22FE : 12 06                      mov     R6, A
(1)    2300 : 14 07                      or      R7, A
(1)    2302 : 02 47                      jz      udiv16_end      ; branch if divisor==0
(1)    2304 : D8 08                      push    R8
(1)    2306 : 72 01 08                   mov     #1, R8          ; R8=bits
(1)    2309 : 00 07                      jmp     udiv16_prep
(1)    230B :                    udiv16_prep_loop:
(1)    230B : B0                         clrc
(1)    230C : DF 07                      rlc     R7
(1)    230E : DF 06                      rlc     R6              ; divisor <<= 1
(1)    2310 : D3 08                      inc     R8              ; ++bits
(1)    2312 :                    udiv16_prep:
(1)    2312 : 77 80 06 F5                btjz    #080H, R6, udiv16_prep_loop ; while msb(divisor) == 0
(1)    2316 : D8 03                      push    R3
(1)    2318 : D8 02                      push    R2
(1)    231A : 88 00 00 03                movw    #0, R3          ; R2:R3=quotient=0
(1)    231E : 00 0A                      jmp     udiv16_enter_loop
(1)    2320 :                    udiv16_loop:
(1)    2320 : B0                         clrc
(1)    2321 : DD 06                      rrc     R6
(1)    2323 : DD 07                      rrc     R7              ; divisor >>= 1
(1)    2325 : B0                         clrc
(1)    2326 : DF 03                      rlc     R3
(1)    2328 : DF 02                      rlc     R2              ; quotient <<= 1
(1)    232A :                    udiv16_enter_loop:
(1)    232A : 4A 07 05                   sub     R7, R5
(1)    232D : 4B 06 04                   sbb     R6, R4          ; dividend -= divisor
(1)    2330 : 09 04                      jl      udiv16_readd
(1)    2332 : D3 03                      inc     R3              ; quotient |= 1
(1)    2334 : 00 06                      jmp     udiv16_next
(1)    2336 :                    udiv16_readd:
(1)    2336 : 48 07 05                   add     R7, R5
(1)    2339 : 49 06 04                   adc     R6, R4          ; dividend += divisor
(1)    233C :                    udiv16_next:
(1)    233C : DA 08 E1                   djnz    R8, udiv16_loop ; while bits-- != 0
(1)    233F : 98 05 07                   movw    R5, R7          ; R6:R7=reminder
(1)    2342 : 98 03 05                   movw    R3, R5          ; R4:R5=quotient
(1)    2345 : D9 02                      pop     R2
(1)    2347 : D9 03                      pop     R3
(1)    2349 : D9 08                      pop     R8
(1)    234B :                    udiv16_end:
(1)    234B : F9                         rts
(1)    234C :
(1)    234C :                    ;;; Division: dividend / divisor = quotient ... reminder
(1)    234C :                    ;;; @param R4:R5 dividend
(1)    234C :                    ;;; @param R6:R7 divisor
(1)    234C :                    ;;; @return R4:R5 quotient
(1)    234C :                    ;;; @return R6:R7 reminder
(1)    234C :                    ;;; @clobber A
(1)    234C :                    div16:
(1)    234C : 12 04                      mov     R4, A
(1)    234E : 15 06                      xor     R6, A
(1)    2350 : B8                         push    A               ; save hi(dividend^divisor)
(1)    2351 : 77 80 06 0A                btjz    #080H, R6, div16_dividend
(1)    2355 : D4 06                      inv     R6
(1)    2357 : D4 07                      inv     R7
(1)    2359 : D3 07                      inc     R7
(1)    235B : 07 02                      jnc     div16_dividend
(1)    235D : D3 06                      inc     R6              ; negate divisor
(1)    235F :                    div16_dividend:
(1)    235F : 77 80 04 0A                btjz    #080H, R4, div16_divide
(1)    2363 : D4 04                      inv     R4
(1)    2365 : D4 05                      inv     R5
(1)    2367 : D3 05                      inc     R5
(1)    2369 : 07 02                      jnc     div16_divide
(1)    236B : D3 04                      inc     R4
(1)    236D :                    div16_divide:
(1)    236D : 8E 22 FE                   call    udiv16          ; R4:R5=quotient
(1)    2370 : B9                         pop     A               ; A=(dividend^divisor)
(1)    2371 : 05 0A                      jpz     div16_end
(1)    2373 : D4 04                      inv     R4
(1)    2375 : D4 05                      inv     R5
(1)    2377 : D3 05                      inc     R5
(1)    2379 : 07 02                      jnc     div16_end
(1)    237B : D3 04                      inc     R4              ; negate quotient
(1)    237D :                    div16_end:
(1)    237D : F9                         rts
