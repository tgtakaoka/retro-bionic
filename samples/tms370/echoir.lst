          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            include "tms370.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; TMS370
(1)       0 :                            cpu     tms370
(1)       0 :                    ;;; Status Register
(1)       0 : =80                ST_C:   equ  10000000B          ; set to 1 if carry occurred
(1)       0 : =40                ST_N:   equ  01000000B          ; set to 1 if result is negative
(1)       0 : =20                ST_Z:   equ  00100000B          ; set to 1 if result is zero
(1)       0 : =10                ST_V:   equ  00010000B          ; set to 1 if result is overflow
(1)       0 : =8                 ST_IE2: equ  00001000B          ; if 1, level 2 interrupt is enabled
(1)       0 : =4                 ST_IE1: equ  00000100B          ; if 1, level 1 interrupt is enabled
(1)       0 :                    ;;; Vector
(1)       0 : =7FF8              VEC_INT3:       equ     7FF8H   ; #INT2 interrupt
(1)       0 : =7FFA              VEC_INT2:       equ     7FFAH   ; #INT2 interrupt
(1)       0 : =7FFC              VEC_INT1:       equ     7FFCH   ; #INT1 interrupt
(1)       0 : =7FFE              VEC_RESET:      equ     7FFEH   ; #RESET vector
(1)       0 :                    ;;; Trap Vector
(1)       0 : =7FDE              VEC_TRAP0:      equ     7FDEH
(1)       0 : =7FDC              VEC_TRAP1:      equ     7FDCH
(1)       0 : =7FDA              VEC_TRAP2:      equ     7FDAH
(1)       0 : =7FD8              VEC_TRAP3:      equ     7FD8H
(1)       0 : =7FD6              VEC_TRAP4:      equ     7FD6H
(1)       0 : =7FD4              VEC_TRAP5:      equ     7FD4H
(1)       0 : =7FD2              VEC_TRAP6:      equ     7FD2H
(1)       0 : =7FD0              VEC_TRAP7:      equ     7FD0H
(1)       0 : =7FCE              VEC_TRAP8:      equ     7FCEH
(1)       0 : =7FCC              VEC_TRAP9:      equ     7FCCH
(1)       0 : =7FCA              VEC_TRAP10:     equ     7FCAH
(1)       0 : =7FC8              VEC_TRAP11:     equ     7FC8H
(1)       0 : =7FC6              VEC_TRAP12:     equ     7FC6H
(1)       0 : =7FC4              VEC_TRAP13:     equ     7FC4H
(1)       0 : =7FC2              VEC_TRAP14:     equ     7FC2H
(1)       0 : =7FC0              VEC_TRAP15:     equ     7FC0H
(1)       0 :                    ;;; System Control and Configuration Registers
(1)       0 : =1010              SCCR0:          equ     1010H
(1)       0 : =1011              SCCR1:          equ     1011H
(1)       0 : =1012              SCCR2:          equ     1012H
(1)       0 : =1017              INT1:           equ     1017H
(1)       0 : =1018              INT2:           equ     1018H
(1)       0 : =1019              INT3:           equ     1019H
(1)       0 : =80                INT_FLAG:       equ     10000000B ; INTx Flag
(1)       0 : =4                 INT_POLALITY:   equ     00000100B ; INTx Polarity 1:rising 0:falling
(1)       0 : =2                 INT_PRIORITY:   equ     00000010B ; INTx Priority 1:level2 0:level1
(1)       0 : =1                 INT_ENABLE:     equ     00000001B ; INTx Enable 1:enable 0:disable
          0 :
          0 :                    ;;; MC6850 Asynchronous Communication Interface Adapter
          0 : =10F0              ACIA:   equ     10F0H
          0 :                            include "mc6850.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; MC6850
(1)       0 :                    ;;; Asynchronous Communication Interface Adapter
(1)       0 : =10F0              ACIA_control:   equ     ACIA+0
(1)       0 : =10F0              ACIA_status:    equ     ACIA+0
(1)       0 : =10F1              ACIA_data:      equ     ACIA+1
(1)       0 :                            ;;  Counter Divider Select Bits
(1)       0 : =3                 CDS_gm:         equ     11B             ; Group mask
(1)       0 : =0                 CDS_DIV1_gc:    equ     00000000B       ; /1
(1)       0 : =1                 CDS_DIV16_gc:   equ     00000001B       ; /16
(1)       0 : =2                 CDS_DIV64_gc:   equ     00000010B       ; /64
(1)       0 : =3                 CDS_RESET_gc:   equ     00000011B       ; Master Reset
(1)       0 :                            ;;  Word Select Bits
(1)       0 : =1C                WSB_gm:         equ     00011100B       ; Group mask
(1)       0 : =0                 WSB_7E2_gc:     equ     00000000B       ; 7 Bits + Even Parity + 2 Stop Bits
(1)       0 : =4                 WSB_7O2_gc:     equ     00000100B       ; 7 bits + Odd Parity  + 2 Stop Bits
(1)       0 : =8                 WSB_7E1_gc:     equ     00001000B       ; 7 bits + Even Parity + 1 Stop Bits
(1)       0 : =C                 WSB_7O1_gc:     equ     00001100B       ; 7 bits + Odd Parity  + 1 Stop Bits
(1)       0 : =10                WSB_8N2_gc:     equ     00010000B       ; 8 bits + No Parity   + 2 Stop Bits
(1)       0 : =14                WSB_8N1_gc:     equ     00010100B       ; 8 bits + No Parity   + 1 Stop Bits
(1)       0 : =18                WSB_8E1_gc:     equ     00011000B       ; 8 bits + Even Parity + 1 Stop Bits
(1)       0 : =1C                WSB_8O1_gc:     equ     00011100B       ; 8 bits + Odd Parity  + 1 Stop Bits
(1)       0 :                            ;;  Transmit Control Bits
(1)       0 : =60                TCB_gm:         equ     01100000B       ; Group mask
(1)       0 : =0                 TCB_DI_gc:      equ     00000000B       ; RTS=Low,  Tx Interrupt Disabled
(1)       0 : =20                TCB_EI_gc:      equ     00100000B       ; RTS=Low,  Tx Interrupt Enabled
(1)       0 : =40                TCB_RTS_gc:     equ     01000000B       ; RTS=High, Tx Interrupt Disabled
(1)       0 : =60                TCB_BREAK_gc:   equ     01100000B       ; RTS=Low,  Tx Interrupt Disabled
(1)       0 :                                                    ; Transmit Break Level
(1)       0 : =80                RIEB_bm:        equ     10000000B       ; Receive Interrupt Enable Bit mask
(1)       0 :                    ;;; Status register
(1)       0 : =1                 RDRF_bm:        equ     00000001B       ; Receive Data Register Full
(1)       0 : =2                 TDRE_bm:        equ     00000010B       ; Transmit Data Register Empty
(1)       0 : =4                 DCDF_bm:        equ     00000100B       ; Data Carrier Detect Flag
(1)       0 : =8                 CTSF_bm:        equ     00001000B       ; Clear To Send Flag
(1)       0 : =10                FERR_bm:        equ     00010000B       ; Frame Error Flag
(1)       0 : =20                OVRN_bm:        equ     00100000B       ; Receiver Overrun Flag
(1)       0 : =40                PERR_bm:        equ     01000000B       ; Parity Error Flag
(1)       0 : =80                IRQF_bm:        equ     10000000B       ; Interrupt Request Flag
          0 : =94                RX_INT_TX_NO:   equ     WSB_8N1_gc|RIEB_bm
          0 :
       3000 :                            org     3000H
       3000 : =80                rx_queue_size:  equ     128
       3000 :                    rx_queue:       .block  rx_queue_size
       3080 :
       3080 :                    ;;; Internal registers
         C0 :                            org     00C0H
         C0 : =BF                stack:  equ     $-1      ; TMS370's SP is pre-increment/post-decrement
         C0 :
       7FFA :                            org     VEC_INT2
       7FFA : 20 B6                      .word   isr_int2
       7FFC :
       7FFE :                            org     VEC_RESET
       7FFE : 20 00                      .word   initialize
       8000 :
       7FC0 :                            org     VEC_TRAP15
       7FC0 : 7F C0                      .word   VEC_TRAP15
       7FC2 :
       2000 :                            org     2000H
       2000 :                    initialize:
       2000 : 52 BF                      mov     #stack, B
       2002 : FD                         ldsp
       2003 : 88 30 00 03                movw    #rx_queue, R3
       2007 : 52 80                      mov     #rx_queue_size, B
       2009 : 8E 20 3E                   call    queue_init
       200C :                    ;;; initialize ACIA
       200C : F7 03 F0                   mov     #CDS_RESET_gc, ACIA_control ; Master reset
       200F : F7 94 F0                   mov     #RX_INT_TX_NO, ACIA_control
       2012 : F7 02 F2                   mov     #2, ACIA+2      ; #INT2 for Rx
       2015 : F7 01 18                   mov     #INT_ENABLE, INT2 ; enable #INT2
       2018 :
       2018 :                    loop:
       2018 : 88 30 00 03                movw    #rx_queue, R3
       201C : F0 00                      dint                    ; (clear all ST bits)
       201E : 8E 20 89                   call    queue_remove
       2021 : F0 0C                      eint
       2023 : 07 F3                      jnc     loop
       2025 : B0                         tst     A
       2026 : 02 0E                      jz      halt_to_system
       2028 : 8E 20 37                   call    putchar
       202B : 2D 0D                      cmp     #0DH, A
       202D : 06 E9                      jne     loop
       202F : 22 0A                      mov     #0AH, A
       2031 : 8E 20 37                   call    putchar
       2034 : 00 E2                      jmp     loop
       2036 :                    halt_to_system:
       2036 : E0                         trap    15
       2037 :
       2037 :                    putchar:
       2037 : A7 02 F0 FC                btjz    #TDRE_bm, ACIA_status, putchar
       203B : 21 F1                      mov     A, ACIA_data
       203D : F9                         rts
       203E :
       203E :                            include "queue.inc"
(1)    203E :
(1)    203E :                            ;;; [queue] queue structure
(1)    203E : =0                 queue_len:      equ     0       ; queue length
(1)    203E : =1                 queue_size:     equ     1       ; buffer size
(1)    203E : =2                 queue_put:      equ     2       ; queue put index
(1)    203E : =3                 queue_get:      equ     3       ; queue get index
(1)    203E : =4                 queue_buf:      equ     4       ; buffer start offset
(1)    203E :
(1)    203E :                    ;;; [queue] Initialize queue
(1)    203E :                    ;;; @param R2:R3 queue work space pointer
(1)    203E :                    ;;; @param B queue work space size
(1)    203E :                    ;;; @clobber A B R2:R3
(1)    203E :                    queue_init:
(1)    203E : B5                         clr     A
(1)    203F : 9B 03                      mov     A, @R3          ; queue_len
(1)    2041 : 62                         mov     B, A
(1)    2042 : 2A 04                      sub     #queue_buf, A
(1)    2044 : D3 03                      inc     R3
(1)    2046 : 9B 03                      mov     A, @R3          ; queue_size
(1)    2048 : 5A 02                      sub     #queue_put, B   ; offset queue_len and queue_size
(1)    204A : D3 03                      inc     R3              ; R2:R3=&queue_put
(1)    204C : B5                         clr     A
(1)    204D :                    queue_init_loop:
(1)    204D : 9B 03                      mov     A, @R3
(1)    204F : D3 03                      inc     R3
(1)    2051 : CA FA                      djnz    B, queue_init_loop
(1)    2053 : F9                         rts
(1)    2054 :
(1)    2054 :                    ;;; [queue] Add an element to queue
(1)    2054 :                    ;;; @param R2:R3 queue work space pointer
(1)    2054 :                    ;;; @param A an element
(1)    2054 :                    ;;; @return ST.C 0 if queue is full
(1)    2054 :                    ;;; @clobber R2:R3
(1)    2054 :                    queue_add:
(1)    2054 : B8                         push    A
(1)    2055 : 9A 03                      mov     @R3, A          ; A=queue_len
(1)    2057 : D3 03                      inc     R3              ; R2:R3=&queue_size
(1)    2059 : 9D 03                      cmp     @R3, A
(1)    205B : 09 02                      jl      queue_add_element
(1)    205D : B9                         pop     A               ; ST.C=0
(1)    205E : F9                         rts
(1)    205F :                    queue_add_element:
(1)    205F : B3                         inc     A
(1)    2060 : D2 03                      dec     R3
(1)    2062 : 9B 03                      mov     A, @R3          ; queue_len++
(1)    2064 : B9                         pop     A
(1)    2065 : 78 02 03                   add     #queue_put-queue_len, R3 ; R2:R3=&queue_put
(1)    2068 : D8 03                      push    R3
(1)    206A : B8                         push    A
(1)    206B : 9A 03                      mov     @R3, A          ; A=queue_put
(1)    206D : 28 02                      add     #queue_buf-queue_put, A
(1)    206F : 48 00 03                   add     A, R3           ; R2:R3=&queue[queue_put]
(1)    2072 : B9                         pop     A
(1)    2073 : 9B 03                      mov     A, @R3          ; store element
(1)    2075 : D9 03                      pop     R3              ; R2:R3=&queue_put
(1)    2077 : B8                         push    A
(1)    2078 : 9A 03                      mov     @R3, A
(1)    207A : B3                         inc     A
(1)    207B : D2 03                      dec     R3              ; R2:R3=&queue_size
(1)    207D : 9D 03                      cmp     @R3, A
(1)    207F : 09 01                      jl      queue_add_return
(1)    2081 : B5                         clr     A               ; wraparound
(1)    2082 :                    queue_add_return:
(1)    2082 : D3 03                      inc     R3              ; R2:R3=&queue_put
(1)    2084 : 9B 03                      mov     A, @R3          ; update queue_put
(1)    2086 : B9                         pop     A
(1)    2087 : F8                         setc                    ; ST.C=1
(1)    2088 : F9                         rts
(1)    2089 :
(1)    2089 :                    ;;; [queue] Remove an element from queue
(1)    2089 :                    ;;; @param R2:R3 queue work space pointer
(1)    2089 :                    ;;; @return A an element
(1)    2089 :                    ;;; @return ST.C 0 if queue is empty
(1)    2089 :                    queue_remove:
(1)    2089 : 9A 03                      mov     @R3, A          ; A=queue_len
(1)    208B : 06 02                      jnz     queue_remove_elem
(1)    208D : B0                         clrc
(1)    208E : F9                         rts
(1)    208F :                    queue_remove_elem:
(1)    208F : B2                         dec     A
(1)    2090 : 9B 03                      mov     A, @R3          ; queue_len--
(1)    2092 : 78 03 03                   add     #queue_get-queue_len, R3 ; R2:R3=&queue_get
(1)    2095 : D8 03                      push    R3
(1)    2097 : 9A 03                      mov     @R3, A          ; A=queue_get
(1)    2099 : 28 01                      add     #queue_buf-queue_get, A
(1)    209B : 48 00 03                   add     A, R3           ; R2:R3=&queue_buf[queue_get]
(1)    209E : 9A 03                      mov     @R3, A          ; remove element
(1)    20A0 : D9 03                      pop     R3              ; R2:R3=&queue_get
(1)    20A2 : B8                         push    A
(1)    20A3 : 9A 03                      mov     @R3, A
(1)    20A5 : B3                         inc     A
(1)    20A6 : 7A 02 03                   sub     #queue_get-queue_size, R3
(1)    20A9 : 9D 03                      cmp     @R3, A
(1)    20AB : 09 01                      jl      queue_remove_return
(1)    20AD : B5                         clr     A               ; wraparound
(1)    20AE :                    queue_remove_return:
(1)    20AE : 78 02 03                   add     #queue_get-queue_size, R3
(1)    20B1 : 9B 03                      mov     A, @R3          ; update queue_get
(1)    20B3 : B9                         pop     A
(1)    20B4 : F8                         setc
(1)    20B5 : F9                         rts
       20B6 :
       20B6 :                    isr_int2:
       20B6 : A3 7F 18                   and     #~INT_FLAG & 0FFH, INT2 ; clear INT2_FLAG
       20B9 : A7 80 F0 17                btjz    #IRQF_bm, ACIA_status, isr_int2_return
       20BD : A7 01 F0 13                btjz    #RDRF_bm, ACIA_status, isr_int2_return
       20C1 : B8                         push    A
       20C2 : 80 F1                      mov     ACIA_data, A
       20C4 : D8 02                      push    R2
       20C6 : D8 03                      push    R3
       20C8 : 88 30 00 03                movw    #rx_queue, R3
       20CC : 8E 20 54                   call    queue_add
       20CF : D9 03                      pop     R3
       20D1 : D9 02                      pop     R2
       20D3 : B9                         pop     A
       20D4 :                    isr_int2_return:
       20D4 : FA                         rti
