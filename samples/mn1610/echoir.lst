          0 :                    *** -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            include "mn1610.inc"
(1)       0 :                    *** -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    *** MN1610
(1)       0 :                            cpu     mn1610
(1)       0 :                    *** Status Register
(1)       0 : =0                 STR_E:          equ     0       Extension
(1)       0 : =2                 STR_OV:         equ     2       Overflow
(1)       0 : =5                 STR_IRQ0:       equ     5       IRQ0 Mask
(1)       0 : =6                 STR_IRQ1:       equ     6       IRQ1 Mask
(1)       0 : =7                 STR_IRQ2:       equ     7       IRQ2 Mask
(1)       0 :                    *** Interrupt vector and save area
(1)       0 : =0                 OPSW0:          equ     X'0000' IRQ0 old STR:IC
(1)       0 : =2                 OPSW1:          equ     X'0002' IRQ1 old STR:IC
(1)       0 : =4                 OPSW2:          equ     X'0004' IRQ2 old STR:IC
(1)       0 : =6                 OPSW3:          equ     X'0006'
(1)       0 : =100               NPSW0:          equ     X'0100' IRQ0 vector STR:IC
(1)       0 : =102               NPSW1:          equ     X'0102' IRQ1 vector STR:IC
(1)       0 : =104               NPSW2:          equ     X'0104' IRQ2 vector STR:IC
(1)       0 : =106               NPSW3:          equ     X'0106'
(1)       0 :                    *** Reset PSW (see debugger RegsMn1613::reset)
(1)       0 : =108               RESET_PSW:      equ     X'0108'
(1)       0 :                    *** Zero page
(1)       0 : =8                 ZERO_PAGE:      equ     X'0008'
(1)       0 :
(1)       0 :                    hi:     function        v, (v >> 8)
(1)       0 :                    lo:     function        v, (v & X'FF')
          0 :                    *** i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =80                USART:          equ     X'80'
          0 : =80                USARTD:         equ     USART+0 Data register
          0 : =81                USARTS:         equ     USART+1 Status register
          0 : =81                USARTC:         equ     USART+1 Control register
          0 : =82                USARTRV:        equ     USART+2 Receive interrupt vector (NPSWx)
          0 : =83                USARTTV:        equ     USART+3 Transmit interrupt vector (NPSWx)
          0 :                            include "i8251.inc"
(1)       0 :                    *** -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    *** i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     11000000B
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 << MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 << MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 << MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     00100000B
(1)       0 : =10                MODE_PARITY_bm: equ     00010000B
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     00001100B
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 << MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 << MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 << MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 << MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     00000011B
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 << MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ     (2 << MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ     (3 << MODE_BAUD_gp)
(1)       0 :                    *** Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     10000000B   Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     01000000B   Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     00100000B   Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     00010000B   Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     00001000B   Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     00000100B   Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     00000010B   Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     00000001B   Transmit enable
(1)       0 :                    *** Bit definition of status register
(1)       0 : =8                 ST_DSR_bp:      equ     8       Data Set Ready
(1)       0 : =9                 ST_BRK_bp:      equ     9       BREAK detected
(1)       0 : =A                 ST_FE_bp:       equ     10      Framing Error
(1)       0 : =B                 ST_OE_bp:       equ     11      Overrun Error
(1)       0 : =C                 ST_PE_bp:       equ     12      Parity Error
(1)       0 : =D                 ST_TxEMPTY_bp:  equ     13      Transmitter empty
(1)       0 : =E                 ST_RxRDY_bp:    equ     14      Receiver ready
(1)       0 : =F                 ST_TxRDY_bp:    equ     15      Transmitter ready
          0 :                    * Async 1stop 8data x16
          0 : =4E                ASYNC_MODE:     equ     MODE_STOP1_gc|MODE_LEN8_gc|MODE_BAUD_X16
          0 :                    * RTS/DTR, error reset, Rx enable, Tx enable
          0 : =37                RX_EN_TX_EN:    equ     CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm|CMD_TxEN_bm
          0 :
        108 :                            loc     RESET_PSW
        108 : 0000                       dc      X'0000'         STR: Disable interrupt
        109 : 0200                       dc      initialize      IC
        10A :
        102 :                            loc     NPSW1
        102 : 0000                       dc      X'0000'
        103 : 026A                       dc      irq1_isr
        104 :
       2000 :                            loc     X'2000'
       2000 : =80                rx_queue_size:  equ     128
       2000 :                    rx_queue:
       2000 :                            ds      rx_queue_size
       2080 :
        200 :                            loc     X'0200'
        200 : =1FF               stack:  equ     *-1
        200 :                    initialize:
        200 : 0D01                       mvi     SP, hi(stack)
        201 : 750D                       bswp    SP, SP
        202 : 0DFF                       mvi     SP, lo(stack)
        203 : 6000                       eor     R0, R0
        204 : 0880                       mvi     R0, rx_queue_size
        205 : 0B20                       mvi     X0, hi(rx_queue)
        206 : 730B                       bswp    X0, X0
        207 : 0B00                       mvi     X0, lo(rx_queue)
        208 : 8F2C                       bal     queue_init
        209 : 8F02                       bal     init_usart
        20A : CF12                       b       loop
        20B :
        20B :                    init_usart:
        20B :                            * Initialize USART
        20B : 6000                       eor     R0, R0          R0=0
        20C : 1081                       wt      R0, USARTC
        20D : 1081                       wt      R0, USARTC
        20E : 1081                       wt      R0, USARTC      Safest way to sync mode
        20F : 0840                       mvi     R0, CMD_IR_bm
        210 : 1081                       wt      R0, USARTC      Reset
        211 : 7808                       mv      R0, R0          delay
        212 : 7808                       mv      R0, R0          delay
        213 : 084E                       mvi     R0, ASYNC_MODE
        214 : 1081                       wt      R0, USARTC
        215 : 7808                       mv      R0, R0          delay
        216 : 7808                       mv      R0, R0          delay
        217 : 0837                       mvi     R0, RX_EN_TX_EN
        218 : 1081                       wt      R0, USARTC      Enable Rx/Tx
        219 : 0803                       mvi     R0, OPSW1+1     Use IRQ1 for Rx interrupt
        21A : 1082                       wt      R0, USARTRV
        21B : 2003                       ret
        21C :
        21C : 8F09               loop:   bal     getchar
        21D : 6058                       or      R0, R0, nz      Skip if R0!=0
        21E : 2000                       h                       Halt to system
        21F : 8F0E               echo:   bal     putchar
        220 : 090D                       mvi     R1, x'0D'       CR
        221 : 5041                       cb      R0, R1, e       Skip if R0=CR
        222 : CFFA                       b       loop
        223 : 080A                       mvi     R0, x'0A'       NL
        224 : CFFB                       b       echo
        225 :
        225 :                    getchar:
        225 : 0B20                       mvi     X0, hi(rx_queue)
        226 : 730B                       bswp    X0, X0
        227 : 0B00                       mvi     X0, lo(rx_queue)
        228 :                    getchar_wait:
        228 : 3606                       rbit    STR, STR_IRQ1           Disable IRQ1
        229 : 8F2C                       bal     queue_remove
        22A : 3E96                       sbit    STR, STR_IRQ1, enz      Enable IRQ1, skip if E=1
        22B : CFFD                       b       getchar_wait
        22C : 2003                       ret
        22D :
        22D :                    putchar:
        22D : 2001                       push    R0
        22E :                    putchar_wait:
        22E : 1881                       rd      R0, USARTS
        22F : 285F                       tbit    R0, ST_TxRDY_bp, nz     Skip if TxRDY=1
        230 : CFFE                       b       putchar_wait
        231 : 2002                       pop     R0
        232 : 1080                       wt      R0, USARTD
        233 : 2003                       ret
        234 :
        234 :                            include "queue.inc"
(1)     234 :                    *** -*- mode: asm; mode: flying-spell; -*-
(1)     234 :                    *** [queue] queue structure
(1)     234 : =0                 queue_len:      equ     0       ; queue length
(1)     234 : =1                 queue_size:     equ     1       ; buffer size
(1)     234 : =2                 queue_put:      equ     2       ; queue put index
(1)     234 : =3                 queue_get:      equ     3       ; queue get index
(1)     234 : =4                 queue_buf:      equ     4       ; buffer start offset
(1)     234 :
(1)     234 :                    *** [queue] Initialize queue
(1)     234 :                    *** @param X0 queue work space pointer
(1)     234 :                    *** @param R0 queue work space size
(1)     234 :                    *** @clobber R0
(1)     234 :                    queue_init:
(1)     234 : 2101                       push    R1
(1)     235 : 6101                       eor     R1, R1          clear R1
(1)     236 : A100                       st      R1, queue_len(X0)       clear queue_len
(1)     237 : 4004                       si      R0, queue_buf
(1)     238 : A001                       st      R0, queue_size(X0)      set queue_size
(1)     239 : A102                       st      R1, queue_put(X0)       clear queue_put
(1)     23A : A103                       st      R1, queue_get(X0)       clear queue_put
(1)     23B :                    queue_init_loop:
(1)     23B : A104                       st      R1, queue_buf(X0)
(1)     23C : 4B01                       ai      X0, 1
(1)     23D : 4041                       si      R0, 1, z
(1)     23E : CFFD                       b       queue_init_loop
(1)     23F : 2102                       pop     R1
(1)     240 : 2003                       ret
(1)     241 :
(1)     241 :                    *** [queue] Add an element to queue
(1)     241 :                    *** @param X0 queue work space pointer
(1)     241 :                    *** @param R0 an element
(1)     241 :                    *** @return ST.E 0 if queue is full
(1)     241 :                    queue_add:
(1)     241 : 2101                       push    R1
(1)     242 : 2201                       push    R2
(1)     243 : E100                       l       R1, queue_len(X0)
(1)     244 : E201                       l       R2, queue_size(X0)      R2=queue_size
(1)     245 : 51FA                       c       R1, R2, lm              skip if queue_len < queue_size
(1)     246 : CF0B                       b       queue_add_return
(1)     247 : E102                       l       R1, queue_put(X0)
(1)     248 : 5B09                       a       X0, R1                  X0=&queu_buf[queue_put]
(1)     249 : A004                       st      R0, queue_buf(X0)       store element
(1)     24A : 5B01                       s       X0, R1                  restore X0
(1)     24B : 4901                       ai      R1, 1                   queue_put+=1
(1)     24C : 51FA                       c       R1, R2, lm              skip if queue_len < queue_size
(1)     24D : 6101                       eor     R1, R1                  R1=0
(1)     24E : A102                       st      R1, queue_put(X0)       update queue_len
(1)     24F : E600                       ims     queue_len(X0)           queue_len+=1
(1)     250 : 3E10                       sbit    STR, STR_E, skp         ST.E=1, then skip
(1)     251 :                    queue_add_return:
(1)     251 : 3600                       rbit    STR, STR_E              ST_E=0
(1)     252 : 2202                       pop     R2
(1)     253 : 2102                       pop     R1
(1)     254 : 2003                       ret
(1)     255 :
(1)     255 :                    *** [queue] Remove an element from queue
(1)     255 :                    *** @param X0 queue work space pointer
(1)     255 :                    *** @return R0 an element
(1)     255 :                    *** @return ST.E 0 if queue is empty
(1)     255 :                    queue_remove:
(1)     255 : 2101                       push    R1
(1)     256 : E100                       l       R1, queue_len(X0)
(1)     257 : 6159                       or      R1, R1, nz              skip if queue_len != 0
(1)     258 : CF0F                       b       queue_remove_return
(1)     259 : E103                       l       R1, queue_get(X0)
(1)     25A : 5B09                       a       X0, R1                  X0=&queue_buf[queue_get]
(1)     25B : E004                       l       R0, queue_buf(X0)       remove element
(1)     25C : 5B01                       s       X0, R1                  restore X0
(1)     25D : 4901                       ai      R1, 1                   queue_get+=1
(1)     25E : 2201                       push    R2
(1)     25F : E201                       l       R2, queue_size(X0)      R2=queue_size
(1)     260 : 51FA                       c       R1, R2, lm              skip if queue_get
(1)     261 : 6101                       eor     R1, R1                  R1=0
(1)     262 : A103                       st      R1, queue_get(X0)       update queue_get
(1)     263 : 2202                       pop     R2
(1)     264 : A600                       dms     queue_len(X0)           queue_len-=1
(1)     265 : 7808                       mv      R0, R0                  nop
(1)     266 : 3E10                       sbit    STR, STR_E, skp         ST.E=1, then skip
(1)     267 :                    queue_remove_return:
(1)     267 : 3600                       rbit    STR, STR_E              ST.E=0
(1)     268 : 2102                       pop     R1
(1)     269 : 2003                       ret
        26A :
        26A :                    irq1_isr:
        26A : 2001                       push    R0
        26B : 2301                       push    X0
        26C : 1881                       rd      R0, USARTS
        26D : 285E                       tbit    R0, ST_RxRDY_bp, nz     Skip if RxRDY=1
        26E : CF06                       b       irq1_isr_exit
        26F : 1880                       rd      R0, USARTD              Receive character
        270 : 0B20                       mvi     X0, hi(rx_queue)
        271 : 730B                       bswp    X0, X0
        272 : 0B00                       mvi     X0, lo(rx_queue)
        273 : 8FCE                       bal     queue_add               Add to Rx queue
        274 :                    irq1_isr_exit:
        274 : 2302                       pop     X0
        275 : 2002                       pop     R0
        276 : 2005                       lpsw    1               Return from interrupt
