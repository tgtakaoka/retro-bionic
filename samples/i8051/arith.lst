          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     8051
          0 :                            include "i8051.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; i8051
(1)       0 :                    ;;; Interrupt origin
(1)       0 : =0                 ORG_RESET:      equ     000H    ; RESET
(1)       0 : =3                 ORG_IE0:        equ     003H    ; #INT0
(1)       0 : =B                 ORG_TF0:        equ     00BH    ; Timer 0 overflow
(1)       0 : =13                ORG_IE1:        equ     013H    ; #INT1
(1)       0 : =1B                ORG_TF1:        equ     01BH    ; Timer 1 overflow
(1)       0 : =23                ORG_RITI:       equ     023H    ; Receive & Transmit
(1)       0 :                    ;;; Register bank and internal memory
(1)       0 : =0                 BASE_BANK0:     equ     00H     ; Bank 0 R0-R7
(1)       0 : =8                 BASE_BANK1:     equ     08H     ; Bank 1 R0-R7
(1)       0 : =10                BASE_BANK2:     equ     10H     ; Bank 2 R0-R7
(1)       0 : =18                BASE_BANK3:     equ     18H     ; Bank 3 R0-R7
(1)       0 : =20                BASE_BIT:       equ     20H     ; Bit addressable memory
(1)       0 : =30                BASE_MEMORY:    equ     30H     ; general purpose memory
(1)       0 :                    ;;; Special function registers
(1)       0 : =E0                ACC:    equ     0E0H            ; Accumulator
(1)       0 : =F0                B:      equ     0F0H            ; B register
(1)       0 : =D0                PSW:    equ     0D0H            ; Program status word
(1)       0 : =81                SP:     equ     81H             ; Stack pointer
(1)       0 : =82                DPL:    equ     82H             ; DPTR low byte
(1)       0 : =83                DPH:    equ     83H             ; DPTR high byte
(1)       0 : =80                P0:     equ     80H             ; Port 0
(1)       0 : =90                P1:     equ     90H             ; Port 1
(1)       0 : =A0                P2:     equ     0A0H            ; Port 2
(1)       0 : =B0                P3:     equ     0B0H            ; Port 3
(1)       0 : =B8                IP:     equ     0B8H            ; Interrupt priority control
(1)       0 : =A8                IE:     equ     0A8H            ; Interrupt enable control
(1)       0 : =89                TMOD:   equ     89H             ; Timer/Counter mode control
(1)       0 : =88                TCON:   equ     88H             ; Timer/Counter control
(1)       0 : =8C                TH0:    equ     8CH             ; Timer/Counter 0 high byte
(1)       0 : =8A                TL0:    equ     8AH             ; Timer/Counter 0 low byte
(1)       0 : =8D                TH1:    equ     8DH             ; Timer/Counter 1 high byte
(1)       0 : =8B                TL1:    equ     8BH             ; Timer/Counter 1 low byte
(1)       0 : =98                SCON:   equ     98H             ; Serial control
(1)       0 : =99                SBUF:   equ     99H             ; Serial data buffer
(1)       0 : =87                PCON:   equ     87H             ; Power control
(1)       0 :                    ;;; PSW (0D0H) Program status word (bit addressable)
(1)       0 : =7                 CY:     equ     7              ; set to 1 if carry
(1)       0 : =6                 AC:     equ     6              ; set to 1 if auxillary carry
(1)       0 : =5                 F0:     equ     5              ; user flag 0
(1)       0 : =4                 RS1:    equ     4              ; register bank select
(1)       0 : =3                 RS0:    equ     3              ; register bank select
(1)       0 : =2                 OV:     equ     2              ; set to 1 if overflow
(1)       0 : =1                 F1:     equ     1              ; user flag 1
(1)       0 : =0                 P:      equ     0              ; parity bit
(1)       0 :                    ;;; IE (0A8H) Interrupt enable register
(1)       0 : =7                 EA:     equ     7               ; enable interrupt
(1)       0 : =4                 ES:     equ     4               ; Serial
(1)       0 : =3                 ET1:    equ     3               ; Timer 1 overflow
(1)       0 : =2                 EX1:    equ     2               ; #INT1
(1)       0 : =1                 ET0:    equ     1               ; Timer 0 overflow
(1)       0 : =0                 EX0:    equ     0               ; #INT0
(1)       0 :                    ;;; SCON (89H) Serial control (bit addressable)
(1)       0 : =7                 SM0:    equ     7               ; Serial mode SM[0:1:2]=010 8-bit UART
(1)       0 : =6                 SM1:    equ     6
(1)       0 : =5                 SM2:    equ     5
(1)       0 : =4                 REN:    equ     4               ; Enable reception
(1)       0 : =1                 TI:     equ     1               ; Transmit interrupt flag
(1)       0 : =0                 RI:     equ     0               ; Receive interrupt flag
(1)       0 :                    ;;; TCON (88H) Timer/Counter control register
(1)       0 : =7                 TF1:    equ     7               ; Timer 1 overflow flag
(1)       0 : =6                 TR1:    equ     6               ; Timer 1 run control
(1)       0 : =5                 TF0:    equ     5               ; Timer 0 overflow flag
(1)       0 : =4                 TR0:    equ     4               ; Timer 0 run control
(1)       0 :                    ;;; TMOD (89H) Timer/Counter mode control register
(1)       0 : =4                 T1MODE_gp:      equ     4       ; Timer 1 mode
(1)       0 : =0                 T0MODE_gp:      equ     0       ; Timer 0 mode
(1)       0 : =8                 TGATE:          equ     1000B
(1)       0 : =4                 TXPIN:          equ     0100B   ; Input from Tx pin
(1)       0 : =2                 T8MODE:         equ     0010B   ; 8-bit auto-reload timer/counter
(1)       0 :                    ;;; PCON (87H) Power control register
(1)       0 : =40                SMOD:   equ     1000000B        ; Double baudrate
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =FFF0              USART:  equ     0FFF0H
          0 : =FFF0              USARTD: equ     USART+0         ; Data register
          0 : =FFF1              USARTS: equ     USART+1         ; Status register
          0 : =FFF1              USARTC: equ     USART+1         ; Control register
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     11000000B
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 << MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 << MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 << MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     00100000B
(1)       0 : =10                MODE_PARITY_bm: equ     00010000B
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     00001100B
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 << MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 << MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 << MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 << MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     00000011B
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 << MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ (2 << MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ (3 << MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     10000000B   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     01000000B   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     00100000B   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     00010000B   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     00001000B   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     00000100B   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     00000010B   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     00000001B   ; Transmit enable
(1)       0 :
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     10000000B   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     01000000B   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     00100000B   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     00010000B   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     00001000B   ; Parity Error
(1)       0 : =4                 ST_TxEMPTY_bm:  equ     00000100B   ; Transmitter empty
(1)       0 : =2                 ST_RxRDY_bm:    equ     00000010B   ; Receiver ready
(1)       0 : =1                 ST_TxRDY_bm:    equ     00000001B   ; Transmitter ready
(1)       0 : =1                 ST_RxRDY_bp:    equ     1           ; Receiver ready
(1)       0 : =0                 ST_TxRDY_bp:    equ     0           ; Transmitter ready
          0 :                    ;;; Async 1stop 8data x16
          0 : =4E                ASYNC_MODE:     equ     MODE_STOP1_gc|MODE_LEN8_gc|MODE_BAUD_X16
          0 :                    ;;; RTS/DTR, error reset, Rx enable, Tx enable
          0 : =37                RX_EN_TX_EN:    equ     CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm|CMD_TxEN_bm
          0 :
          0 :                    ;;; External data memory
       2000 :                            org     2000H
       2000 :                    print_uint16_buf:
       2000 :                            ds      8
       2008 :
       2008 :                    ;;; Internal data memory
         30 :                            org     BASE_MEMORY
         30 :                    vA:     ds      2
         32 :                    vB:     ds      2
         34 : =34                stack:  equ     $
         34 :
          0 :                            org     ORG_RESET
          0 : 02 00 26                   ljmp    init
          3 :                            org     ORG_IE0
          3 : 02 00 26                   ljmp    init
          B :                            org     ORG_TF0
          B : 02 00 26                   ljmp    init
         13 :                            org     ORG_IE1
         13 : 02 00 26                   ljmp    init
         1B :                            org     ORG_TF1
         1B : 02 00 26                   ljmp    init
         23 :                            org     ORG_RITI
         23 : 02 00 26                   ljmp    init
         26 :
         26 :                    init:
         26 : 75 81 33                   mov     SP, #stack-1
         29 :                    init_uart:
         29 : 90 FF F1                   mov     DPTR, #USARTC
         2C : E4                         clr     A
         2D : F0                         movx    @DPTR, A
         2E : F0                         movx    @DPTR, A
         2F : F0                         movx    @DPTR, A        ; safest way to sync mode
         30 : 74 40                      mov     A, #CMD_IR_bm   ; reset
         32 : F0                         movx    @DPTR, A
         33 : 00                         nop
         34 : 00                         nop
         35 : 74 4E                      mov     A, #ASYNC_MODE
         37 : F0                         movx    @DPTR, A
         38 : 00                         nop
         39 : 00                         nop
         3A : 74 37                      mov     A, #RX_EN_TX_EN
         3C : F0                         movx    @DPTR, A
         3D :
         3D : 02 00 C8                   ljmp    arith
         40 :
         40 :                    ;;; Get character
         40 :                    ;;; @return A received character (PSW.C=1)
         40 :                    ;;; @return PSW.C=0 no character
         40 :                    getchar:
         40 : C0 83                      push    DPH
         42 : C0 82                      push    DPL
         44 : 90 FF F1                   mov     DPTR, #USARTS
         47 : E0                         movx    A, @DPTR
         48 : C3                         clr     C
         49 : 30 E1 04                   jnb     ACC.ST_RxRDY_bp, getchar_exit
         4C : 15 82                      dec     DPL
         4E : E0                         movx    A, @DPTR
         4F : D3                         setb    C
         50 :                    getchar_exit:
         50 : D0 82                      pop     DPL
         52 : D0 83                      pop     DPH
         54 : 22                         ret
         55 :
         55 :                    putspace:
         55 : 74 20                      mov     A, #' '
         57 :
         57 :                    ;;; Put character
         57 :                    ;;; @param A Sending character
         57 :                    ;;; @clobber A
         57 :                    putchar:
         57 : C0 83                      push    DPH
         59 : C0 82                      push    DPL             ; save DPTR
         5B : 90 FF F1                   mov     DPTR, #USARTS
         5E : C0 E0                      push    ACC             ; save character
         60 :                    putchar_loop:
         60 : E0                         movx    A, @DPTR
         61 : 30 E0 FC                   jnb     ACC.ST_TxRDY_bp, putchar_loop
         64 : D0 E0                      pop     ACC             ; restore character
         66 : 15 82                      dec     DPL
         68 : F0                         movx    @DPTR, A        ; send character
         69 : D0 82                      pop     DPL
         6B : D0 83                      pop     DPH             ; restore DPTR
         6D : 22                         ret
         6E :
         6E :                    ;;; Set v1/v2 to vA/vB
         6E :                    ;;; @param R3:R2 v1
         6E :                    ;;; @param R5:R4 v2
         6E :                    ;;; @return R2 &vA
         6E :                    ;;; @return R3 &vB
         6E :                    ;;; @clobber R0
         6E :                    set_vAvB:
         6E : C0 E0                      push    ACC             ; save A
         70 : 78 30                      mov     R0, #vA
         72 : EA                         mov     A, R2
         73 : F6                         mov     @R0, A
         74 : EB                         mov     A, R3
         75 : 08                         inc     R0
         76 : F6                         mov     @R0, A          ; vA=v1
         77 : EC                         mov     A, R4
         78 : 08                         inc     R0
         79 : F6                         mov     @R0, A
         7A : ED                         mov     A, R5
         7B : 08                         inc     R0
         7C : F6                         mov     @R0, A          ; vB=v2
         7D : D0 E0                      pop     ACC
         7F : 7A 30                      mov     R2, #vA
         81 : 7B 32                      mov     R3, #vB
         83 : 22                         ret
         84 :
         84 :                    ;;; Print "v1 op v2"
         84 :                    ;;; @param R3:R2 v1
         84 :                    ;;; @param R5:R4 v2
         84 :                    ;;; @param A op
         84 :                    ;;; @return R2 &vA
         84 :                    ;;; @return R3 &vB
         84 :                    ;;; @clobber A
         84 :                    expr:
         84 : 11 6E                      acall   set_vAvB
         86 :                    expr_out:
         86 : C0 E0                      push    ACC             ; save op
         88 : 78 30                      mov     R0, #vA
         8A : 51 51                      acall   print_int16     ; print v1
         8C : 11 55                      acall   putspace
         8E : D0 E0                      pop     ACC             ; restore op
         90 : 11 57                      acall   putchar         ; print op
         92 : 11 55                      acall   putspace
         94 : 78 32                      mov     R0, #vB
         96 : 51 51                      acall   print_int16
         98 : 7A 30                      mov     R2, #vA
         9A : 7B 32                      mov     R3, #vB
         9C : 22                         ret
         9D :
         9D :                    ;;; Print " = val\n"
         9D :                    ;;; @param vA val
         9D :                    ;;; @clobber A
         9D :                    answer:
         9D : 11 55                      acall   putspace
         9F : 74 3D                      mov     A, #'='
         A1 : 11 57                      acall   putchar
         A3 : 11 55                      acall   putspace
         A5 : 78 30                      mov     R0, #vA
         A7 : 51 51                      acall   print_int16
         A9 :                    newline:
         A9 : 74 0D                      mov     A, #0DH
         AB : 11 57                      acall   putchar
         AD : 74 0A                      mov     A, #0AH
         AF : 80 A6                      sjmp    putchar
         B1 :
         B1 :                    ;;; Print "v1 rel v2\n"
         B1 :                    ;;; @param R2:R3 v1
         B1 :                    ;;; @param R4:R5 v2
         B1 :                    comp:
         B1 : 11 6E                      acall   set_vAvB
         B3 : 51 D9                      acall   cmpsi2
         B5 : 60 09                      jz      comp_eq
         B7 : 20 E7 0A                   jb      ACC.7, comp_lt
         BA :                    comp_gt:
         BA : 74 3E                      mov     A, #'>'
         BC :                    comp_out:
         BC : 11 86                      acall   expr_out
         BE : 80 E9                      sjmp    newline
         C0 :                    comp_eq:
         C0 : 74 3D                      mov     A, #'='
         C2 : 80 F8                      sjmp    comp_out
         C4 :                    comp_lt:
         C4 : 74 3C                      mov     A, #'<'
         C6 : 80 F4                      sjmp    comp_out
         C8 :
         C8 :                    arith:
         C8 : 7A 00                      mov     R2, #LOW(0)
         CA : 7B 00                      mov     R3, #HIGH(0)
         CC : 7C A0                      mov     R4, #LOW(-28000)
         CE : 7D 92                      mov     R5, #HIGH(-28000)
         D0 : 74 2D                      mov     A, #'-'
         D2 : 11 84                      acall   expr
         D4 : 51 A4                      acall   negsi2
         D6 : 11 9D                      acall   answer          ; 28000
         D8 :
         D8 : 7A 00                      mov     R2, #LOW(0)
         DA : 7B 00                      mov     R3, #HIGH(0)
         DC : 7C 60                      mov     R4, #LOW(28000)
         DE : 7D 6D                      mov     R5, #HIGH(28000)
         E0 : 74 2D                      mov     A, #'-'
         E2 : 11 84                      acall   expr
         E4 : 51 A4                      acall   negsi2
         E6 : 11 9D                      acall   answer          ; -28000
         E8 :
         E8 : 7A 50                      mov     R2, #LOW(18000)
         EA : 7B 46                      mov     R3, #HIGH(18000)
         EC : 7C 60                      mov     R4, #LOW(28000)
         EE : 7D 6D                      mov     R5, #HIGH(28000)
         F0 : 74 2B                      mov     A, #'+'
         F2 : 11 84                      acall   expr
         F4 : 51 B8                      acall   addsi2
         F6 : 11 9D                      acall   answer          ; -19536
         F8 :
         F8 : 7A 50                      mov     R2, #LOW(18000)
         FA : 7B 46                      mov     R3, #HIGH(18000)
         FC : 7C B0                      mov     R4, #LOW(-18000)
         FE : 7D B9                      mov     R5, #HIGH(-18000)
        100 : 74 2B                      mov     A, #'+'
        102 : 11 84                      acall   expr
        104 : 51 B8                      acall   addsi2
        106 : 11 9D                      acall   answer          ; 0
        108 :
        108 : 7A A0                      mov     R2, #LOW(-28000)
        10A : 7B 92                      mov     R3, #HIGH(-28000)
        10C : 7C B0                      mov     R4, #LOW(-18000)
        10E : 7D B9                      mov     R5, #HIGH(-18000)
        110 : 74 2B                      mov     A, #'+'
        112 : 11 84                      acall   expr
        114 : 51 B8                      acall   addsi2
        116 : 11 9D                      acall   answer          ; 19536
        118 :
        118 : 7A B0                      mov     R2, #LOW(-18000)
        11A : 7B B9                      mov     R3, #HIGH(-18000)
        11C : 7C A0                      mov     R4, #LOW(-28000)
        11E : 7D 92                      mov     R5, #HIGH(-28000)
        120 : 74 2D                      mov     A, #'-'
        122 : 11 84                      acall   expr
        124 : 51 C8                      acall   subsi2
        126 : 11 9D                      acall   answer          ; 10000
        128 :
        128 : 7A 50                      mov     R2, #LOW(18000)
        12A : 7B 46                      mov     R3, #HIGH(18000)
        12C : 7C B0                      mov     R4, #LOW(-18000)
        12E : 7D B9                      mov     R5, #HIGH(-18000)
        130 : 74 2D                      mov     A, #'-'
        132 : 11 84                      acall   expr
        134 : 51 C8                      acall   subsi2
        136 : 11 9D                      acall   answer          ; -29536
        138 :
        138 : 7A A0                      mov     R2, #LOW(-28000)
        13A : 7B 92                      mov     R3, #HIGH(-28000)
        13C : 7C B0                      mov     R4, #LOW(-18000)
        13E : 7D B9                      mov     R5, #HIGH(-18000)
        140 : 74 2D                      mov     A, #'-'
        142 : 11 84                      acall   expr
        144 : 51 C8                      acall   subsi2
        146 : 11 9D                      acall   answer          ; -10000
        148 :
        148 : 7A 2C                      mov     R2, #LOW(300)
        14A : 7B 01                      mov     R3, #HIGH(300)
        14C : 7C 38                      mov     R4, #LOW(-200)
        14E : 7D FF                      mov     R5, #HIGH(-200)
        150 : 74 2A                      mov     A, #'*'
        152 : 11 84                      acall   expr
        154 : 71 1C                      acall   mulsi2
        156 : 11 9D                      acall   answer          ; 5536
        158 :
        158 : 7A 64                      mov     R2, #LOW(100)
        15A : 7B 00                      mov     R3, #HIGH(100)
        15C : 7C D4                      mov     R4, #LOW(-300)
        15E : 7D FE                      mov     R5, #HIGH(-300)
        160 : 74 2A                      mov     A, #'*'
        162 : 11 84                      acall   expr
        164 : 71 1C                      acall   mulsi2
        166 : 11 9D                      acall   answer          ; -30000
        168 :
        168 : 7A 38                      mov     R2, #LOW(-200)
        16A : 7B FF                      mov     R3, #HIGH(-200)
        16C : 7C 9C                      mov     R4, #LOW(-100)
        16E : 7D FF                      mov     R5, #HIGH(-100)
        170 : 74 2A                      mov     A, #'*'
        172 : 11 84                      acall   expr
        174 : 71 1C                      acall   mulsi2
        176 : 11 9D                      acall   answer          ; 20000
        178 :
        178 : 7A 38                      mov     R2, #LOW(-200)
        17A : 7B FF                      mov     R3, #HIGH(-200)
        17C : 7C 64                      mov     R4, #LOW(100)
        17E : 7D 00                      mov     R5, #HIGH(100)
        180 : 74 2F                      mov     A, #'/'
        182 : 11 84                      acall   expr
        184 : 71 A3                      acall   divsi2
        186 : 11 9D                      acall   answer          ; -2
        188 :
        188 : 7A 30                      mov     R2, #LOW(30000)
        18A : 7B 75                      mov     R3, #HIGH(30000)
        18C : 7C 64                      mov     R4, #LOW(100)
        18E : 7D 00                      mov     R5, #HIGH(100)
        190 : 74 2F                      mov     A, #'/'
        192 : 11 84                      acall   expr
        194 : 71 A3                      acall   divsi2
        196 : 11 9D                      acall   answer          ; 30
        198 :
        198 : 7A D0                      mov     R2, #LOW(-30000)
        19A : 7B 8A                      mov     R3, #HIGH(-30000)
        19C : 7C 38                      mov     R4, #LOW(-200)
        19E : 7D FF                      mov     R5, #HIGH(-200)
        1A0 : 74 2F                      mov     A, #'/'
        1A2 : 11 84                      acall   expr
        1A4 : 71 A3                      acall   divsi2
        1A6 : 11 9D                      acall   answer          ; 150
        1A8 :
        1A8 : 7A D0                      mov     R2, #LOW(-30000)
        1AA : 7B 8A                      mov     R3, #HIGH(-30000)
        1AC : 7C 4E                      mov     R4, #LOW(78)
        1AE : 7D 00                      mov     R5, #HIGH(78)
        1B0 : 74 2F                      mov     A, #'/'
        1B2 : 11 84                      acall   expr
        1B4 : 71 A3                      acall   divsi2
        1B6 : 11 9D                      acall   answer          ; -384
        1B8 :
        1B8 : 7A 88                      mov     R2, #LOW(5000)
        1BA : 7B 13                      mov     R3, #HIGH(5000)
        1BC : 7C A0                      mov     R4, #LOW(4000)
        1BE : 7D 0F                      mov     R5, #HIGH(4000)
        1C0 : 11 B1                      acall   comp
        1C2 :
        1C2 : 7A 88                      mov     R2, #LOW(5000)
        1C4 : 7B 13                      mov     R3, #HIGH(5000)
        1C6 : 7C 88                      mov     R4, #LOW(5000)
        1C8 : 7D 13                      mov     R5, #HIGH(5000)
        1CA : 11 B1                      acall   comp
        1CC :
        1CC : 7A A0                      mov     R2, #LOW(4000)
        1CE : 7B 0F                      mov     R3, #HIGH(4000)
        1D0 : 7C 88                      mov     R4, #LOW(5000)
        1D2 : 7D 13                      mov     R5, #HIGH(5000)
        1D4 : 11 B1                      acall   comp
        1D6 :
        1D6 : 7A 78                      mov     R2, #LOW(-5000)
        1D8 : 7B EC                      mov     R3, #HIGH(-5000)
        1DA : 7C 60                      mov     R4, #LOW(-4000)
        1DC : 7D F0                      mov     R5, #HIGH(-4000)
        1DE : 11 B1                      acall   comp
        1E0 :
        1E0 : 7A 78                      mov     R2, #LOW(-5000)
        1E2 : 7B EC                      mov     R3, #HIGH(-5000)
        1E4 : 7C 78                      mov     R4, #LOW(-5000)
        1E6 : 7D EC                      mov     R5, #HIGH(-5000)
        1E8 : 11 B1                      acall   comp
        1EA :
        1EA : 7A 60                      mov     R2, #LOW(-4000)
        1EC : 7B F0                      mov     R3, #HIGH(-4000)
        1EE : 7C 78                      mov     R4, #LOW(-5000)
        1F0 : 7D EC                      mov     R5, #HIGH(-5000)
        1F2 : 11 B1                      acall   comp
        1F4 :
        1F4 : 7A BC                      mov     R2, #LOW(32700)
        1F6 : 7B 7F                      mov     R3, #HIGH(32700)
        1F8 : 7C 58                      mov     R4, #LOW(32600)
        1FA : 7D 7F                      mov     R5, #HIGH(32600)
        1FC : 11 B1                      acall   comp
        1FE :
        1FE : 7A BC                      mov     R2, #LOW(32700)
        200 : 7B 7F                      mov     R3, #HIGH(32700)
        202 : 7C BC                      mov     R4, #LOW(32700)
        204 : 7D 7F                      mov     R5, #HIGH(32700)
        206 : 11 B1                      acall   comp
        208 :
        208 : 7A 58                      mov     R2, #LOW(32600)
        20A : 7B 7F                      mov     R3, #HIGH(32600)
        20C : 7C BC                      mov     R4, #LOW(32700)
        20E : 7D 7F                      mov     R5, #HIGH(32700)
        210 : 11 B1                      acall   comp
        212 :
        212 : 7A 44                      mov     R2, #LOW(-32700)
        214 : 7B 80                      mov     R3, #HIGH(-32700)
        216 : 7C A8                      mov     R4, #LOW(-32600)
        218 : 7D 80                      mov     R5, #HIGH(-32600)
        21A : 11 B1                      acall   comp
        21C :
        21C : 7A 44                      mov     R2, #LOW(-32700)
        21E : 7B 80                      mov     R3, #HIGH(-32700)
        220 : 7C 44                      mov     R4, #LOW(-32700)
        222 : 7D 80                      mov     R5, #HIGH(-32700)
        224 : 11 B1                      acall   comp
        226 :
        226 : 7A A8                      mov     R2, #LOW(-32600)
        228 : 7B 80                      mov     R3, #HIGH(-32600)
        22A : 7C 44                      mov     R4, #LOW(-32700)
        22C : 7D 80                      mov     R5, #HIGH(-32700)
        22E : 11 B1                      acall   comp
        230 :
        230 : 7A 50                      mov     R2, #LOW(18000)
        232 : 7B 46                      mov     R3, #HIGH(18000)
        234 : 7C B0                      mov     R4, #LOW(-18000)
        236 : 7D B9                      mov     R5, #HIGH(-18000)
        238 : 11 B1                      acall   comp
        23A :
        23A : 7A 50                      mov     R2, #LOW(18000)
        23C : 7B 46                      mov     R3, #HIGH(18000)
        23E : 7C 50                      mov     R4, #LOW(18000)
        240 : 7D 46                      mov     R5, #HIGH(18000)
        242 : 11 B1                      acall   comp
        244 :
        244 : 7A B0                      mov     R2, #LOW(-18000)
        246 : 7B B9                      mov     R3, #HIGH(-18000)
        248 : 7C 50                      mov     R4, #LOW(18000)
        24A : 7D 46                      mov     R5, #HIGH(18000)
        24C : 11 B1                      acall   comp
        24E :
        24E : 11 A9                      acall   newline
        250 : A5                         db      0A5H            ; halt to system
        251 :
        251 :                            include "arith.inc"
(1)     251 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)     251 :                            cpu     8051
(1)     251 :
(1)     251 :                    ;;; Print signed 16-bit integer as decimal
(1)     251 :                    ;;; @param R0 &value
(1)     251 :                    ;;; @clobber A
(1)     251 :                    print_int16:
(1)     251 : E8                         mov     A, R0
(1)     252 : C0 E0                      push    ACC             ; save R0
(1)     254 : E6                         mov     A, @R0
(1)     255 : CA                         xch     A, R2
(1)     256 : C0 E0                      push    ACC             ; save R2
(1)     258 : 08                         inc     R0
(1)     259 : E6                         mov     A, @R0
(1)     25A : CB                         xch     A, R3
(1)     25B : C0 E0                      push    ACC             ; save R3
(1)     25D : EB                         mov     A, R3
(1)     25E : 30 E7 06                   jnb     ACC.7, print_uint16
(1)     261 : 74 2D                      mov     A, #'-'
(1)     263 : 11 57                      acall   putchar         ; print '-'
(1)     265 : 51 8E                      acall   neg_R3R2        ; negate value
(1)     267 :                    ;;; Print unsigned 16-bit integer as decimal
(1)     267 :                    ;;; @param R2:R3: value
(1)     267 :                    ;;; @param print_uint16_buf external data memory
(1)     267 :                    ;;; @clobber A
(1)     267 :                    print_uint16:
(1)     267 : 90 20 00                   mov     DPTR, #print_uint16_buf
(1)     26A : E4                         clr     A
(1)     26B : F0                         movx    @DPTR, A        ; mark EOS
(1)     26C :                    print_uint16_loop:
(1)     26C : 7C 0A                      mov     R4, #LOW(10)
(1)     26E : 7D 00                      mov     R5, #HIGH(10)
(1)     270 : 71 52                      acall   udiv16
(1)     272 : EC                         mov     A, R4           ; lo(remainder)
(1)     273 : 24 30                      add     A, #'0'
(1)     275 : A3                         inc     DPTR
(1)     276 : F0                         movx    @DPTR, A        ; write to buffer
(1)     277 : EA                         mov     A, R2
(1)     278 : 4B                         orl     A, R3
(1)     279 : 70 F1                      jnz     print_uint16_loop ; until value == 0
(1)     27B :                    print_uint16_out:
(1)     27B : E0                         movx    A, @DPTR
(1)     27C : 60 06                      jz      print_uint16_end
(1)     27E : 11 57                      acall   putchar
(1)     280 : 15 82                      dec     DPL
(1)     282 : 80 F7                      sjmp    print_uint16_out
(1)     284 :                    print_uint16_end:
(1)     284 : D0 E0                      pop     ACC
(1)     286 : FB                         mov     R3, A           ; restore R3
(1)     287 : D0 06                      pop     AC
(1)     289 : FA                         mov     R2, A           ; restore R2
(1)     28A : D0 E0                      pop     ACC
(1)     28C : F8                         mov     R0, A           ; restore R0
(1)     28D : 22                         ret
(1)     28E :
(1)     28E :                    ;;; Negation; result = -result
(1)     28E :                    ;;; @param R3:R2 result
(1)     28E :                    ;;; @clobber A
(1)     28E :                    neg_R3R2:
(1)     28E : EA                         mov     A, R2
(1)     28F : F4                         cpl     A
(1)     290 : 24 01                      add     A, #1
(1)     292 : FA                         mov     R2, A
(1)     293 : EB                         mov     A, R3
(1)     294 : F4                         cpl     A
(1)     295 : 34 00                      addc    A, #0
(1)     297 : FB                         mov     R3, A
(1)     298 : 22                         ret
(1)     299 :
(1)     299 :                    ;;; Negation; result = -result
(1)     299 :                    ;;; @param R5:R4 result
(1)     299 :                    ;;; @clobber A
(1)     299 :                    neg_R5R4:
(1)     299 : EC                         mov     A, R4
(1)     29A : F4                         cpl     A
(1)     29B : 24 01                      add     A, #1
(1)     29D : FC                         mov     R4, A
(1)     29E : ED                         mov     A, R5
(1)     29F : F4                         cpl     A
(1)     2A0 : 34 00                      addc    A, #0
(1)     2A2 : FD                         mov     R5, A
(1)     2A3 : 22                         ret
(1)     2A4 :
(1)     2A4 :                    ;;; Negation; result = -value
(1)     2A4 :                    ;;; @param R2: &result
(1)     2A4 :                    ;;; @param R3: &value
(1)     2A4 :                    ;;; @clobber A R0 R2 R3
(1)     2A4 :                    negsi2:
(1)     2A4 : EB                         mov     A, R3
(1)     2A5 : F8                         mov     R0, A           ; R0=&value
(1)     2A6 : E6                         mov     A, @R0          ; A=lo(value)
(1)     2A7 : F4                         cpl     A
(1)     2A8 : 24 01                      add     A, #1
(1)     2AA : FB                         mov     R3, A           ; R3=lo(-value)
(1)     2AB : 08                         inc     R0
(1)     2AC : E6                         mov     A, @R0          ; A=hi(value)
(1)     2AD : F4                         cpl     A
(1)     2AE : 34 00                      addc    A, #0           ; A=hi(-value)
(1)     2B0 : CA                         xch     A, R2           ; R2=hi(-value)
(1)     2B1 : F8                         mov     R0, A           ; R0=&result
(1)     2B2 : EB                         mov     A, R3
(1)     2B3 : F6                         mov     @R0, A          ; store lo(-value)
(1)     2B4 : 08                         inc     R0
(1)     2B5 : EA                         mov     A, R2
(1)     2B6 : F6                         mov     @R0, A          ; store hi(-value)
(1)     2B7 : 22                         ret
(1)     2B8 :
(1)     2B8 :                    ;;; Signed addition: summand += addend
(1)     2B8 :                    ;;; @param R2: &summand
(1)     2B8 :                    ;;; @param R3: &addend
(1)     2B8 :                    ;;; @clobber A R2 R3
(1)     2B8 :                    addsi2:
(1)     2B8 : EB                         mov     A, R3
(1)     2B9 : F8                         mov     R0, A           ; R0=&addend
(1)     2BA : E6                         mov     A, @R0          ; A=lo(addend)
(1)     2BB : FB                         mov     R3, A           ; R3=lo(addend)
(1)     2BC : 08                         inc     R0
(1)     2BD : E6                         mov     A, @R0          ; A=hi(addend)
(1)     2BE : CA                         xch     A, R2           ; R2=hi(addend)
(1)     2BF : F8                         mov     R0, A           ; R0=&summand
(1)     2C0 : E6                         mov     A, @R0          ; A=lo(summand)
(1)     2C1 : 2B                         add     A, R3           ; A=lo(summand+addend)
(1)     2C2 : F6                         mov     @R0, A
(1)     2C3 : 08                         inc     R0
(1)     2C4 : E6                         mov     A, @R0          ; A=hi(summand)
(1)     2C5 : 3A                         addc    A, R2           ; A=hi(summand+addend)
(1)     2C6 : F6                         mov     @R0, A
(1)     2C7 : 22                         ret
(1)     2C8 :
(1)     2C8 :                    ;;; Singed subtraction: minuend -= subtrahend
(1)     2C8 :                    ;;; @param R2: &minuend
(1)     2C8 :                    ;;; @param R3: &subtrahend
(1)     2C8 :                    ;;; @clobber A R0 R2 R3
(1)     2C8 :                    subsi2:
(1)     2C8 : EB                         mov     A, R3
(1)     2C9 : F8                         mov     R0, A           ; R0=&subtrahend
(1)     2CA : E6                         mov     A, @R0          ; A=lo(subtrahend)
(1)     2CB : FB                         mov     R3, A           ; R3=lo(subtrahend)
(1)     2CC : 08                         inc     R0
(1)     2CD : E6                         mov     A, @R0          ; A=hi(subtrahend)
(1)     2CE : CA                         xch     A, R2           ; R2=hi(subtrahend)
(1)     2CF : F8                         mov     R0, A           ; R0=&minuend
(1)     2D0 : E6                         mov     A, @R0          ; A=lo(minuend)
(1)     2D1 : C3                         clr     C
(1)     2D2 : 9B                         subb    A, R3           ; A=lo(minuend-subtrahend)
(1)     2D3 : F6                         mov     @R0, A
(1)     2D4 : 08                         inc     R0
(1)     2D5 : E6                         mov     A, @R0          ; A=hi(minuend)
(1)     2D6 : 9A                         subb    A, R2           ; A=hi(minuend-subtrahend)
(1)     2D7 : F6                         mov     @R0, A
(1)     2D8 : 22                         ret
(1)     2D9 :
(1)     2D9 :                    ;;; Signed comparison: minuend - subtrahend
(1)     2D9 :                    ;;; @param R2: &minuend
(1)     2D9 :                    ;;; @param R3: &subtrahend
(1)     2D9 :                    ;;; @return A  0: minuend == subtrahend
(1)     2D9 :                    ;;;         A  1: minuend >  subtrahend
(1)     2D9 :                    ;;;         A -1: minuend <  subtrahend
(1)     2D9 :                    ;;; @clobber A R0 R2 R3
(1)     2D9 :                    cmpsi2:
(1)     2D9 : EB                         mov     A, R3
(1)     2DA : F8                         mov     R0, A           ; R0=&subtrahend
(1)     2DB : E6                         mov     A, @R0          ; A=lo(subtrahend)
(1)     2DC : FB                         mov     R3, A           ; R3=lo(subtrahend)
(1)     2DD : 08                         inc     R0
(1)     2DE : E6                         mov     A, @R0          ; A=hi(subtrahend)
(1)     2DF : C0 E0                      push    ACC             ; save hi(subtrahend)
(1)     2E1 : CA                         xch     A, R2           ; R2=hi(subtrahend)
(1)     2E2 : F8                         mov     R0, A           ; R0=&minuend
(1)     2E3 : E6                         mov     A, @R0          ; A=lo(minuend)
(1)     2E4 : C3                         clr     C
(1)     2E5 : 9B                         subb    A, R3
(1)     2E6 : FB                         mov     R3, A           ; A=lo(minuend-subtrahend)
(1)     2E7 : 08                         inc     R0
(1)     2E8 : E6                         mov     A, @R0          ; A=hi(minuend)
(1)     2E9 : 9A                         subb    A, R2
(1)     2EA : FA                         mov     R2, A           ; R2=hi(minuend-subtrahend)
(1)     2EB : 4B                         orl     A, R3
(1)     2EC : 60 15                      jz      cmpsi2_eq       ; branch if minuend-subtrahend==0
(1)     2EE : D0 E0                      pop     ACC             ; restore hi(subtrahend)
(1)     2F0 : 66                         xrl     A, @R0          ; A=hi(minuend^subtrahend)
(1)     2F1 : C0 E0                      push    ACC             ; save hi(minuend^subtrahend)
(1)     2F3 : EA                         mov     A, R2
(1)     2F4 : 66                         xrl     A, @R0
(1)     2F5 : FB                         mov     R3, A           ; R3=hi(minuend-subtrahend)^minuend
(1)     2F6 : D0 E0                      pop     ACC             ; restore hi(minuend^subtrahend)
(1)     2F8 : 5B                         anl     A, R3           ; overflow flag
(1)     2F9 : 6A                         xrl     A, R2
(1)     2FA : 20 E7 03                   jb      ACC.7, cmpsi2_lt
(1)     2FD :                    cmpsi2_gt:
(1)     2FD : 74 01                      mov     A, #1
(1)     2FF : 22                         ret
(1)     300 :                    cmpsi2_lt:
(1)     300 : 74 FF                      mov     A, #-1
(1)     302 : 22                         ret
(1)     303 :                    cmpsi2_eq:
(1)     303 : 15 81                      dec     SP              ; discard hi(subtrahend)
(1)     305 : 22                         ret
(1)     306 :
(1)     306 :                    ;;; Unsigned multiplication: result = multiplicand * multiplier
(1)     306 :                    ;;; @param R3:R2 multiplicand
(1)     306 :                    ;;; @param R5:R4 multiplier
(1)     306 :                    ;;; @return R3:R2 result
(1)     306 :                    ;;; @clobber A R2 R3 R6 R7
(1)     306 :                    umul16:
(1)     306 : EA                         mov     A, R2           ; A=lo(multiplicand)
(1)     307 : 8C F0                      mov     B, R4           ; B=lo(multiplier)
(1)     309 : A4                         mul     AB              ; B:A
(1)     30A : FE                         mov     R6, A
(1)     30B : AF F0                      mov     R7, B           ; R7:R6=result
(1)     30D : EA                         mov     A, R2           ; A=lo(multiplicand)
(1)     30E : 8D F0                      mov     B, R5           ; B=hi(multiplier)
(1)     310 : A4                         mul     AB
(1)     311 : 2F                         add     A, R7
(1)     312 : FF                         mov     R7, A           ; result+=lo(BA)
(1)     313 : EB                         mov     A, R3           ; A=hi(multiplicand)
(1)     314 : 8C F0                      mov     B, R4           ; B=lo(multiplier)
(1)     316 : A4                         mul     AB
(1)     317 : 2F                         add     A, R7
(1)     318 : FB                         mov     R3, A
(1)     319 : EE                         mov     A, R6
(1)     31A : FA                         mov     R2, A
(1)     31B : 22                         ret
(1)     31C :
(1)     31C :                    ;;; Signed multiplication: multiplicand *= multiplier
(1)     31C :                    ;;; @param R2: &multiplicand
(1)     31C :                    ;;; @param R3: &multiplier
(1)     31C :                    ;;; @clobber A R0 R2 R3 R4 R5 R6 R7
(1)     31C :                    mulsi2:
(1)     31C : EA                         mov     A, R2
(1)     31D : C0 E0                      push    ACC             ; save &multiplicand
(1)     31F : EB                         mov     A, R3
(1)     320 : C0 E0                      push    ACC             ; save &multiplier
(1)     322 : F8                         mov     R0, A           ; R0=&multiplier
(1)     323 : E6                         mov     A, @R0
(1)     324 : FC                         mov     R4, A
(1)     325 : 08                         inc     R0
(1)     326 : E6                         mov     A, @R0
(1)     327 : FD                         mov     R5, A           ; R5:R4=multiplier
(1)     328 : 30 E7 02                   jnb     ACC.7, mulsi2_multiplicand
(1)     32B : 51 99                      acall   neg_R5R4
(1)     32D :                    mulsi2_multiplicand:
(1)     32D : EA                         mov     A, R2
(1)     32E : F8                         mov     R0, A           ; R0=&multiplicand
(1)     32F : E6                         mov     A, @R0
(1)     330 : FA                         mov     R2, A
(1)     331 : 08                         inc     R0
(1)     332 : E6                         mov     A, @R0
(1)     333 : FB                         mov     R3, A
(1)     334 : 30 E7 02                   jnb     ACC.7, mulsi2_multiply
(1)     337 : 51 8E                      acall   neg_R3R2
(1)     339 :                    mulsi2_multiply:
(1)     339 : 71 06                      acall   umul16
(1)     33B : D0 E0                      pop     ACC
(1)     33D : F8                         mov     R0, A           ; R0=&multiplier
(1)     33E : 08                         inc     R0
(1)     33F : E6                         mov     A, @R0          ; A=hi(multiplier)
(1)     340 : FD                         mov     R5, A           ; R5=hi(multiplier)
(1)     341 : D0 E0                      pop     ACC
(1)     343 : F8                         mov     R0, A           ; R0=&multiplicand
(1)     344 : 08                         inc     R0
(1)     345 : E6                         mov     A, @R0          ; A=hi(multiplicand)
(1)     346 : 6D                         xrl     A, R5           ; A=hi(multiplicand^multiplier)
(1)     347 : 30 E7 02                   jnb     ACC.7, mulsi2_store
(1)     34A : 51 8E                      acall   neg_R3R2
(1)     34C :                    mulsi2_store:
(1)     34C : EB                         mov     A, R3
(1)     34D : F6                         mov     @R0, A
(1)     34E : 18                         dec     R0
(1)     34F : EA                         mov     A, R2
(1)     350 : F6                         mov     @R0, A
(1)     351 : 22                         ret
(1)     352 :
(1)     352 :                    ;;; Unsigned division: dividend / divisor = quotient ... remainder
(1)     352 :                    ;;; @praram R3:R2 dividend
(1)     352 :                    ;;; @praram R5:R4 divisor
(1)     352 :                    ;;; @return R3:R2 quotient
(1)     352 :                    ;;; @return R5:R4 remainder
(1)     352 :                    ;;; @clobber A R0 R1 R2 R3 R4 R5 R6 R7
(1)     352 :                    udiv16:
(1)     352 : ED                         mov     A, R5
(1)     353 : 70 0E                      jnz     udiv16_calc     ; branch if divisor >= 256
(1)     355 : 4C                         orl     A, R4
(1)     356 : 60 0A                      jz      udiv16_div0     ; B=divisor (<256)
(1)     358 : F5 F0                      mov     B, A
(1)     35A : EB                         mov     A, R3
(1)     35B : 70 06                      jnz     udiv16_calc     ; branch if dividend >= 256
(1)     35D : EA                         mov     A, R2           ; A=dividend (<256)
(1)     35E : 84                         div     AB              ; A=quotient B=remainder
(1)     35F : FA                         mov     R2, A
(1)     360 : AC F0                      mov     R4, B
(1)     362 :                    udiv16_div0:
(1)     362 : 22                         ret
(1)     363 :                    udiv16_calc:
(1)     363 : 79 01                      mov     R1, #1          ; R1=bits
(1)     365 : 80 08                      sjmp    udiv16_prep
(1)     367 :                    udiv16_prep_loop:
(1)     367 : C3                         clr     C
(1)     368 : EC                         mov     A, R4
(1)     369 : 33                         rlc     A
(1)     36A : FC                         mov     R4, A
(1)     36B : ED                         mov     A, R5
(1)     36C : 33                         rlc     A
(1)     36D : FD                         mov     R5, A           ; divisor <<= 1
(1)     36E : 09                         inc     R1              ; bits++
(1)     36F :                    udiv16_prep:
(1)     36F : ED                         mov     A, R5
(1)     370 : 30 E7 F4                   jnb     ACC.7, udiv16_prep_loop ; while msb(divisor) == 0
(1)     373 : E4                         clr     A
(1)     374 : FE                         mov     R6, A
(1)     375 : FF                         mov     R7, A           ; R7:R6=quotient
(1)     376 : 80 0E                      sjmp    udiv16_enter_loop
(1)     378 :                    udiv16_loop:
(1)     378 : C3                         clr     C
(1)     379 : ED                         mov     A, R5
(1)     37A : 13                         rrc     A
(1)     37B : FD                         mov     R5, A
(1)     37C : EC                         mov     A, R4
(1)     37D : 13                         rrc     A
(1)     37E : FC                         mov     R4, A           ; divisor >>= 1
(1)     37F : C3                         clr     C
(1)     380 : EE                         mov     A, R6
(1)     381 : 33                         rlc     A
(1)     382 : FE                         mov     R6, A
(1)     383 : EF                         mov     A, R7
(1)     384 : 33                         rlc     A
(1)     385 : FF                         mov     R7, A           ; quotient <<= 1
(1)     386 :                    udiv16_enter_loop:
(1)     386 : EA                         mov     A, R2
(1)     387 : C3                         clr     C
(1)     388 : 9C                         subb    A, R4
(1)     389 : FA                         mov     R2, A
(1)     38A : EB                         mov     A, R3
(1)     38B : 9D                         subb    A, R5
(1)     38C : FB                         mov     R3, A           ; divident -= divisor
(1)     38D : 40 03                      jc      udiv16_readd    ; branch if dividend < 0
(1)     38F : 0E                         inc     R6              ; quotient |= 1
(1)     390 : 80 06                      sjmp    udiv16_next
(1)     392 :                    udiv16_readd:
(1)     392 : EA                         mov     A, R2
(1)     393 : 2C                         add     A, R4
(1)     394 : FA                         mov     R2, A
(1)     395 : EB                         mov     A, R3
(1)     396 : 3D                         addc    A, R5
(1)     397 : FB                         mov     R3, A           ; dividend += divisor
(1)     398 :                    udiv16_next:
(1)     398 : D9 DE                      djnz    R1, udiv16_loop
(1)     39A : EA                         mov     A, R2
(1)     39B : FC                         mov     R4, A
(1)     39C : EB                         mov     A, R3
(1)     39D : FD                         mov     R5, A           ; store remainder
(1)     39E : EE                         mov     A, R6
(1)     39F : FA                         mov     R2, A
(1)     3A0 : EF                         mov     A, R7
(1)     3A1 : FB                         mov     R3, A           ; store quotient
(1)     3A2 : 22                         ret
(1)     3A3 :
(1)     3A3 :
(1)     3A3 :                    ;;; Signed division: dividend /= divisor
(1)     3A3 :                    ;;; @param R2: &dividend
(1)     3A3 :                    ;;; @param R3: &divisor
(1)     3A3 :                    ;;; @clobber A R0 R2 R3 R4 R5 R6 R7
(1)     3A3 :                    divsi2:
(1)     3A3 : EA                         mov     A, R2
(1)     3A4 : C0 E0                      push    ACC             ; save &dividend
(1)     3A6 : EB                         mov     A, R3
(1)     3A7 : C0 E0                      push    ACC             ; save &divisor
(1)     3A9 : F8                         mov     R0, A           ; R0=&divisor
(1)     3AA : E6                         mov     A, @R0
(1)     3AB : FC                         mov     R4, A
(1)     3AC : 08                         inc     R0
(1)     3AD : E6                         mov     A, @R0
(1)     3AE : FD                         mov     R5, A           ; R5:R4=divisor
(1)     3AF : 30 E7 02                   jnb     ACC.7, divsi2_dividend
(1)     3B2 : 51 99                      acall   neg_R5R4
(1)     3B4 :                    divsi2_dividend:
(1)     3B4 : EA                         mov     A, R2
(1)     3B5 : F8                         mov     R0, A           ; R0=&dividend
(1)     3B6 : E6                         mov     A, @R0
(1)     3B7 : FA                         mov     R2, A
(1)     3B8 : 08                         inc     R0
(1)     3B9 : E6                         mov     A, @R0
(1)     3BA : FB                         mov     R3, A
(1)     3BB : 30 E7 02                   jnb     ACC.7, divsi2_divide
(1)     3BE : 51 8E                      acall   neg_R3R2
(1)     3C0 :                    divsi2_divide:
(1)     3C0 : 71 52                      acall   udiv16
(1)     3C2 : D0 E0                      pop     ACC
(1)     3C4 : F8                         mov     R0, A           ; R0=&divisor
(1)     3C5 : 08                         inc     R0
(1)     3C6 : E6                         mov     A, @R0          ; A=hi(divisor)
(1)     3C7 : FD                         mov     R5, A           ; R5=hi(divisor)
(1)     3C8 : D0 E0                      pop     ACC
(1)     3CA : F8                         mov     R0, A           ; R0=&dividend
(1)     3CB : 08                         inc     R0
(1)     3CC : E6                         mov     A, @R0          ; A=hi(dividend)
(1)     3CD : 6D                         xrl     A, R5           ; A=hi(dividend^divisor)
(1)     3CE : 30 E7 02                   jnb     ACC.7, divsi2_store
(1)     3D1 : 51 8E                      acall   neg_R3R2
(1)     3D3 :                    divsi2_store:
(1)     3D3 : EB                         mov     A, R3
(1)     3D4 : F6                         mov     @R0, A
(1)     3D5 : 18                         dec     R0
(1)     3D6 : EA                         mov     A, R2
(1)     3D7 : F6                         mov     @R0, A
(1)     3D8 : 22                         ret
