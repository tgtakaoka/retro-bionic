          0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
          0 :                            cpu     8051
          0 :                            include "i8051.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :                    ;;; i8051
(1)       0 :                    ;;; Interrupt origin
(1)       0 : =0                 ORG_RESET:      equ     000H    ; RESET
(1)       0 : =3                 ORG_IE0:        equ     003H    ; #INT0
(1)       0 : =B                 ORG_TF0:        equ     00BH    ; Timer 0 overflow
(1)       0 : =13                ORG_IE1:        equ     013H    ; #INT1
(1)       0 : =1B                ORG_TF1:        equ     01BH    ; Timer 1 overflow
(1)       0 : =23                ORG_RITI:       equ     023H    ; Receive & Transmit
(1)       0 :                    ;;; Register bank and internal memory
(1)       0 : =0                 BASE_BANK0:     equ     00H     ; Bank 0 R0-R7
(1)       0 : =8                 BASE_BANK1:     equ     08H     ; Bank 1 R0-R7
(1)       0 : =10                BASE_BANK2:     equ     10H     ; Bank 2 R0-R7
(1)       0 : =18                BASE_BANK3:     equ     18H     ; Bank 3 R0-R7
(1)       0 : =20                BASE_BIT:       equ     20H     ; Bit addressable memory
(1)       0 : =30                BASE_MEMORY:    equ     30H     ; general purpose memory
(1)       0 :                    ;;; Special function registers
(1)       0 : =E0                ACC:    equ     0E0H            ; Accumulator
(1)       0 : =F0                B:      equ     0F0H            ; B register
(1)       0 : =D0                PSW:    equ     0D0H            ; Program status word
(1)       0 : =81                SP:     equ     81H             ; Stack pointer
(1)       0 : =82                DPL:    equ     82H             ; DPTR low byte
(1)       0 : =83                DPH:    equ     83H             ; DPTR high byte
(1)       0 : =80                P0:     equ     80H             ; Port 0
(1)       0 : =90                P1:     equ     90H             ; Port 1
(1)       0 : =A0                P2:     equ     0A0H            ; Port 2
(1)       0 : =B0                P3:     equ     0B0H            ; Port 3
(1)       0 : =B8                IP:     equ     0B8H            ; Interrupt priority control
(1)       0 : =A8                IE:     equ     0A8H            ; Interrupt enable control
(1)       0 : =89                TMOD:   equ     89H             ; Timer/Counter mode control
(1)       0 : =88                TCON:   equ     88H             ; Timer/Counter control
(1)       0 : =8C                TH0:    equ     8CH             ; Timer/Counter 0 high byte
(1)       0 : =8A                TL0:    equ     8AH             ; Timer/Counter 0 low byte
(1)       0 : =8D                TH1:    equ     8DH             ; Timer/Counter 1 high byte
(1)       0 : =8B                TL1:    equ     8BH             ; Timer/Counter 1 low byte
(1)       0 : =98                SCON:   equ     98H             ; Serial control
(1)       0 : =99                SBUF:   equ     99H             ; Serial data buffer
(1)       0 : =87                PCON:   equ     87H             ; Power control
(1)       0 :                    ;;; PSW (0D0H) Program status word (bit addressable)
(1)       0 : =7                 CY:     equ     7              ; set to 1 if carry
(1)       0 : =6                 AC:     equ     6              ; set to 1 if auxillary carry
(1)       0 : =5                 F0:     equ     5              ; user flag 0
(1)       0 : =4                 RS1:    equ     4              ; register bank select
(1)       0 : =3                 RS0:    equ     3              ; register bank select
(1)       0 : =2                 OV:     equ     2              ; set to 1 if overflow
(1)       0 : =1                 F1:     equ     1              ; user flag 1
(1)       0 : =0                 P:      equ     0              ; parity bit
(1)       0 :                    ;;; IE (0A8H) Interrupt enable register
(1)       0 : =7                 EA:     equ     7               ; enable interrupt
(1)       0 : =4                 ES:     equ     4               ; Serial
(1)       0 : =3                 ET1:    equ     3               ; Timer 1 overflow
(1)       0 : =2                 EX1:    equ     2               ; #INT1
(1)       0 : =1                 ET0:    equ     1               ; Timer 0 overflow
(1)       0 : =0                 EX0:    equ     0               ; #INT0
(1)       0 :                    ;;; SCON (89H) Serial control (bit addressable)
(1)       0 : =7                 SM0:    equ     7               ; Serial mode SM[0:1:2]=010 8-bit UART
(1)       0 : =6                 SM1:    equ     6
(1)       0 : =5                 SM2:    equ     5
(1)       0 : =4                 REN:    equ     4               ; Enable reception
(1)       0 : =1                 TI:     equ     1               ; Transmit interrupt flag
(1)       0 : =0                 RI:     equ     0               ; Receive interrupt flag
(1)       0 :                    ;;; TCON (88H) Timer/Counter control register
(1)       0 : =7                 TF1:    equ     7               ; Timer 1 overflow flag
(1)       0 : =6                 TR1:    equ     6               ; Timer 1 run control
(1)       0 : =5                 TF0:    equ     5               ; Timer 0 overflow flag
(1)       0 : =4                 TR0:    equ     4               ; Timer 0 run control
(1)       0 :                    ;;; TMOD (89H) Timer/Counter mode control register
(1)       0 : =4                 T1MODE_gp:      equ     4       ; Timer 1 mode
(1)       0 : =0                 T0MODE_gp:      equ     0       ; Timer 0 mode
(1)       0 : =8                 TGATE:          equ     1000B
(1)       0 : =4                 TXPIN:          equ     0100B   ; Input from Tx pin
(1)       0 : =2                 T8MODE:         equ     0010B   ; 8-bit auto-reload timer/counter
(1)       0 :                    ;;; PCON (87H) Power control register
(1)       0 : =40                SMOD:   equ     1000000B        ; Double baudrate
          0 :
          0 :                    ;;; i8251 Universal Synchronous/Asynchronous Receiver/Transmitter
          0 : =FFF0              USART:          equ     0FFF0H
          0 : =FFF0              USARTD:         equ     USART+0 ; Receive/Transmit data
          0 : =FFF1              USARTS:         equ     USART+1 ; Srtatus register
          0 : =FFF1              USARTC:         equ     USART+1 ; Control register
          0 : =FFF2              USARTRV:        equ     USART+2 ; Receive interrupt vector (ORG_*)
          0 : =FFF3              USARTTV:        equ     USART+3 ; Transmit interrupt vector (ORG_*)
          0 :                            include "i8251.inc"
(1)       0 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)       0 :
(1)       0 :                    ;;; i8251 USART device emulator.
(1)       0 : =6                 MODE_STOP_gp:   equ     6
(1)       0 : =C0                MODE_STOP_gm:   equ     11000000B
(1)       0 : =40                MODE_STOP1_gc:  equ     (1 << MODE_STOP_gp)
(1)       0 : =80                MODE_STOP15_gc: equ     (2 << MODE_STOP_gp)
(1)       0 : =C0                MODE_STOP2_gc:  equ     (3 << MODE_STOP_gp)
(1)       0 : =20                MODE_EVEN_bm:   equ     00100000B
(1)       0 : =10                MODE_PARITY_bm: equ     00010000B
(1)       0 : =2                 MODE_LEN_gp:    equ     2
(1)       0 : =C                 MODE_LEN_gm:    equ     00001100B
(1)       0 : =0                 MODE_LEN5_gc:   equ     (0 << MODE_LEN_gp)
(1)       0 : =4                 MODE_LEN6_gc:   equ     (1 << MODE_LEN_gp)
(1)       0 : =8                 MODE_LEN7_gc:   equ     (2 << MODE_LEN_gp)
(1)       0 : =C                 MODE_LEN8_gc:   equ     (3 << MODE_LEN_gp)
(1)       0 : =0                 MODE_BAUD_gp:   equ     0
(1)       0 : =3                 MODE_BAUD_gm:   equ     00000011B
(1)       0 : =1                 MODE_BAUD_X1:   equ     (1 << MODE_BAUD_gp)
(1)       0 : =2                 MODE_BAUD_X16:  equ (2 << MODE_BAUD_gp)
(1)       0 : =3                 MODE_BAUD_X64:  equ (3 << MODE_BAUD_gp)
(1)       0 :                    ;;; Bit Definition of command register
(1)       0 : =80                CMD_EH_bm:      equ     10000000B   ; Enter hunt mode
(1)       0 : =40                CMD_IR_bm:      equ     01000000B   ; Internal Reset
(1)       0 : =20                CMD_RTS_bm:     equ     00100000B   ; Request To Send
(1)       0 : =10                CMD_ER_bm:      equ     00010000B   ; Error Reset
(1)       0 : =8                 CMD_SBRK_bm:    equ     00001000B   ; Send Break
(1)       0 : =4                 CMD_RxEN_bm:    equ     00000100B   ; Receive Enable
(1)       0 : =2                 CMD_DTR_bm:     equ     00000010B   ; Data Terminal Ready
(1)       0 : =1                 CMD_TxEN_bm:    equ     00000001B   ; Transmit enable
(1)       0 :
(1)       0 :                    ;;; Bit definition of status register
(1)       0 : =80                ST_DSR_bm:      equ     10000000B   ; Data Set Ready
(1)       0 : =40                ST_BRK_bm:      equ     01000000B   ; BREAK detected
(1)       0 : =20                ST_FE_bm:       equ     00100000B   ; Framing Error
(1)       0 : =10                ST_OE_bm:       equ     00010000B   ; Iverrun Error
(1)       0 : =8                 ST_PE_bm:       equ     00001000B   ; Parity Error
(1)       0 : =4                 ST_TxEMPTY_bm:  equ     00000100B   ; Transmitter empty
(1)       0 : =2                 ST_RxRDY_bm:    equ     00000010B   ; Receiver ready
(1)       0 : =1                 ST_TxRDY_bm:    equ     00000001B   ; Transmitter ready
(1)       0 : =1                 ST_RxRDY_bp:    equ     1           ; Receiver ready
(1)       0 : =0                 ST_TxRDY_bp:    equ     0           ; Transmitter ready
          0 :                    ;;; Async 1stop 8data x16
          0 : =4E                ASYNC_MODE:     equ     MODE_STOP1_gc|MODE_LEN8_gc|MODE_BAUD_X16
          0 :                    ;;; RTS/DTR, error reset, Rx enable, Tx enable
          0 : =37                RX_EN_TX_EN:    equ     CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm|CMD_TxEN_bm
          0 : =36                RX_EN_TX_DIS:   equ     CMD_RTS_bm|CMD_DTR_bm|CMD_ER_bm|CMD_RxEN_bm
          0 :
          0 :                    ;;; External data memory
       2000 :                            org     2000H
       2000 : =80                rx_buffer_size: equ     128
       2000 :                    rx_buffer:      ds      rx_buffer_size
       2080 : =80                tx_buffer_size: equ     128
       2080 :                    tx_buffer:      ds      tx_buffer_size
       2100 :
       2100 :                    ;;; Internal data memory
         30 :                            org     BASE_MEMORY
         30 :                    rx_queue:       ds      queue_work_size
         36 :                    tx_queue:       ds      queue_work_size
         3C : =3C                stack:          equ     $
         3C :
          0 :                            org     ORG_RESET
          0 : 02 00 26                   ljmp    init
          3 :                            org     ORG_IE0
          3 : 02 01 4C                   ljmp    isr_intr_rx
          B :                            org     ORG_TF0
          B : 02 00 26                   ljmp    init
         13 :                            org     ORG_IE1
         13 : 02 01 6D                   ljmp    isr_intr_tx
         1B :                            org     ORG_TF1
         1B : 02 00 26                   ljmp    init
         23 :                            org     ORG_RITI
         23 : 02 00 26                   ljmp    init
         26 :
         26 :                    init:
         26 : 75 81 3B                   mov     SP, #stack-1
         29 : 78 30                      mov     R0, #rx_queue
         2B : 79 80                      mov     R1, #rx_buffer_size
         2D : 90 20 00                   mov     DPTR, #rx_buffer
         30 : 11 E5                      acall   queue_init
         32 : 78 36                      mov     R0, #tx_queue
         34 : 79 80                      mov     R1, #tx_buffer_size
         36 : 90 20 80                   mov     DPTR, #tx_buffer
         39 : 11 E5                      acall   queue_init
         3B :                    init_usart:
         3B : 90 FF F1                   mov     DPTR, #USARTC
         3E : E4                         clr     A
         3F : F0                         movx    @DPTR, A
         40 : F0                         movx    @DPTR, A
         41 : F0                         movx    @DPTR, A        ; safest way to sync mode
         42 : 74 40                      mov     a, #CMD_IR_bm
         44 : F0                         movx    @DPTR, A        ; reset
         45 : 00                         nop
         46 : 00                         nop
         47 : 74 4E                      mov     a, #ASYNC_MODE
         49 : F0                         movx    @DPTR, A
         4A : 00                         nop
         4B : 00                         nop
         4C : 74 37                      mov     a, #RX_EN_TX_EN
         4E : F0                         movx    @DPTR, A
         4F : A3                         inc     DPTR
         50 : 74 03                      mov     A, #ORG_IE0
         52 : F0                         movx    @DPTR, A        ; enable Rx interrupt using INT0
         53 : D2 A8                      setb    IE.EX0          ; enable INT0
         55 : 74 13                      mov     A, #ORG_IE1
         57 : A3                         inc     DPTR
         58 : F0                         movx    @DPTR, A        ; enable Tx interrupt using INT1
         59 : D2 AA                      setb    IE.EX1          ; enable INT1
         5B : D2 AF                      setb    IE.EA           ; enable interrupt
         5D :
         5D :                    receive_loop:
         5D : 11 B3                      acall   getchar
         5F : 50 FC                      jnc     receive_loop
         61 : 60 0F                      jz      halt_to_system
         63 : FB                         mov     R3, A           ; save letter
         64 : 11 CD                      acall   putchar         ; echo
         66 : 11 C3                      acall   putspace
         68 : 11 73                      acall   put_hex8        ; print in hex
         6A : 11 C3                      acall   putspace
         6C : 11 8C                      acall   put_bin8        ; print in binary
         6E : 11 C7                      acall   newline
         70 : 80 EB                      sjmp    receive_loop
         72 :                    halt_to_system:
         72 : A5                         db      0A5H
         73 :
         73 :                    ;;; Print uint8_t in hex
         73 :                    ;;; @param R3 uint8_t value to be printed in hex.
         73 :                    ;;; @clobber A
         73 :                    put_hex8:
         73 : 74 30                      mov     A, #'0'
         75 : 11 CD                      acall   putchar
         77 : 74 78                      mov     A, #'x'
         79 : 11 CD                      acall   putchar
         7B : EB                         mov     A, R3
         7C : C4                         swap    A
         7D : 11 80                      acall   put_hex4
         7F : EB                         mov     A, R3
         80 :                    put_hex4:
         80 : 54 0F                      anl     A, #0FH
         82 : 24 F6                      add     A, #-10
         84 : 50 02                      jnc     put_hex8_dec    ; A<10
         86 : 24 07                      add     A, #'A'-('0'+10)
         88 :                    put_hex8_dec:
         88 : 24 3A                      add     A, #'0'+10
         8A : 80 41                      sjmp    putchar
         8C :
         8C :                    ;;; Print uint8_t in binary
         8C :                    ;;; @param R3 uint8_t value to be printed in binary.
         8C :                    ;;; @clobber A R2
         8C :                    put_bin8:
         8C : 74 30                      mov     A, #'0'
         8E : 11 CD                      acall   putchar
         90 : 74 62                      mov     A, #'b'
         92 : 11 CD                      acall   putchar
         94 : EB                         mov     A, R3
         95 : C4                         swap    A
         96 : FA                         mov     R2, A
         97 : 11 9E                      acall   put_bin4
         99 : EB                         mov     A, R3
         9A : FA                         mov     R2, A
         9B : 11 9E                      acall   put_bin4
         9D : 22                         ret
         9E :                    put_bin4:
         9E : EA                         mov     A, R2
         9F : 03                         rr      A
         A0 : 03                         rr      A
         A1 : FA                         mov     R2, A
         A2 : 11 A8                      acall   put_bin2
         A4 : EA                         mov     A, R2
         A5 : 23                         rl      A
         A6 : 23                         rl      A
         A7 : FA                         mov     R2, A
         A8 :                    put_bin2:
         A8 : EA                         mov     A, R2
         A9 : 03                         rr      A
         AA : 11 AD                      acall   put_bin1
         AC : EA                         mov     A, R2
         AD :                    put_bin1:
         AD : 54 01                      anl     A, #1
         AF : 24 30                      add     A, #'0'
         B1 : 80 1A                      sjmp    putchar
         B3 :
         B3 :                    ;;; Get character
         B3 :                    ;;; @return A
         B3 :                    ;;; @return PSW.C 0 if no character
         B3 :                    ;;; @clobber DPTR
         B3 :                    getchar:
         B3 : E8                         mov     A, R0
         B4 : C0 E0                      push    ACC             ; save R0
         B6 : 78 30                      mov     R0, #rx_queue
         B8 : C2 AF                      clr     IE.EA
         BA : 31 25                      acall   queue_remove
         BC : D2 AF                      setb    IE.EA
         BE : C8                         xch     A, R0           ; R0=character
         BF : D0 E0                      pop     ACC
         C1 : C8                         xch     A, R0           ; restore R0
         C2 : 22                         ret
         C3 :
         C3 :                    ;;; Put space
         C3 :                    ;;; @clobber A
         C3 :                    putspace:
         C3 : 74 20                      mov     A, #' '
         C5 : 80 06                      sjmp    putchar
         C7 :
         C7 :                    ;;; Put newline
         C7 :                    ;;; @clobber A
         C7 :                    newline:
         C7 : 74 0D                      mov     A, #0DH
         C9 : 11 CD                      acall   putchar
         CB : 74 0A                      mov     A, #0AH
         CD :
         CD :                    ;;; Put character
         CD :                    ;;; @param A
         CD :                    ;;; @clobber DPTR A
         CD :                    putchar:
         CD : C8                         xch     A, R0           ; save character
         CE : C0 E0                      push    ACC             ; save R0
         D0 : E8                         mov     A, R0           ; restore character
         D1 :                    putchar_loop:
         D1 : 78 36                      mov     R0, #tx_queue
         D3 : C2 AF                      clr     IE.EA
         D5 : 11 FA                      acall   queue_add
         D7 : D2 AF                      setb    IE.EA
         D9 : 50 F6                      jnc     putchar_loop    ; branch if queue is full
         DB : 90 FF F1                   mov     DPTR, #USARTC
         DE : 74 37                      mov     A, #RX_EN_TX_EN ; enable Tx
         E0 : F0                         movx    @DPTR, A
         E1 : D0 E0                      pop     ACC
         E3 : F8                         mov     R0, A           ; restore R0
         E4 : 22                         ret
         E5 :
         E5 :                            include "queue.inc"
(1)      E5 :                    ;;; -*- mode: asm; mode: flyspell-prog; -*-
(1)      E5 :                    ;;; [queue] queue structure on internal data memory
(1)      E5 : =0                 queue_len:      equ     0       ; queue length
(1)      E5 : =1                 queue_size:     equ     1       ; buffer size
(1)      E5 : =2                 queue_put:      equ     2       ; queue put index
(1)      E5 : =3                 queue_get:      equ     3       ; queue get index
(1)      E5 : =4                 queue_buf_lo:   equ     4       ; lo(queue buffer) pointer to  external data memory
(1)      E5 : =5                 queue_buf_hi:   equ     5       ; hi(queue_buffer)
(1)      E5 : =6                 queue_work_size: equ    6       ; queue work size
(1)      E5 :
(1)      E5 :                    ;;; [queue] Initialize queue
(1)      E5 :                    ;;; @param R0 queue work space pointer
(1)      E5 :                    ;;; @param R1 queue buffer size
(1)      E5 :                    ;;; @param DPTR queue buffer pointer
(1)      E5 :                    ;;; @clobber DPTR R0 R1 A
(1)      E5 :                    queue_init:
(1)      E5 : E4                         clr     A
(1)      E6 : F6                         mov     @R0, A          ; clear queue_len
(1)      E7 : E9                         mov     A, R1
(1)      E8 : 08                         inc     R0
(1)      E9 : F6                         mov     @R0, A          ; save queue_size
(1)      EA : E4                         clr     A
(1)      EB : 08                         inc     R0
(1)      EC : F6                         mov     @R0, A          ; clear queue_put
(1)      ED : 08                         inc     R0
(1)      EE : F6                         mov     @R0, A          ; clear queue_get
(1)      EF : 08                         inc     R0
(1)      F0 : A6 82                      mov     @R0, DPL        ; lo(queue_buf)
(1)      F2 : 08                         inc     R0
(1)      F3 : A6 83                      mov     @R0, DPH        ; hi(queue_buf)
(1)      F5 :                    queue_init_loop:
(1)      F5 : F0                         movx    @DPTR, A
(1)      F6 : A3                         inc     DPTR
(1)      F7 : D9 FC                      djnz    R1, queue_init_loop
(1)      F9 : 22                         ret
(1)      FA :
(1)      FA :                    ;;; [queue] Add an element to queue
(1)      FA :                    ;;; @param R0 queue work space pointer
(1)      FA :                    ;;; @param A an element
(1)      FA :                    ;;; @return PSW.C 0 if queue is full
(1)      FA :                    ;;; @clobber DPTR R0 A
(1)      FA :                    queue_add:
(1)      FA : C0 E0                      push    ACC             ; save an element
(1)      FC : E6                         mov     A, @R0          ; A=queue_len
(1)      FD : 08                         inc     R0              ; R0=&queue_size
(1)      FE : 66                         xrl     A, @R0          ; queue_size
(1)      FF : 70 04                      jnz     queue_add_store ; branch if queue is not full
(1)     101 : D0 E0                      pop     ACC
(1)     103 : C3                         clr     C               ; PSW.C=0
(1)     104 : 22                         ret
(1)     105 :                    queue_add_store:
(1)     105 : 18                         dec     R0              ; R0=&queue_len
(1)     106 : 06                         inc     @R0             ; queue_len+=1
(1)     107 : 08                         inc     R0
(1)     108 : 08                         inc     R0
(1)     109 : E6                         mov     A, @R0          ; A=queue_put
(1)     10A : 08                         inc     R0
(1)     10B : 08                         inc     R0
(1)     10C : 26                         add     A, @R0          ; A=lo(queue_buf)+queue_put
(1)     10D : F5 82                      mov     DPL, A
(1)     10F : 08                         inc     R0
(1)     110 : E6                         mov     A, @R0          ; A=hi(queue_buf)
(1)     111 : 34 00                      addc    A, #0
(1)     113 : F5 83                      mov     DPH, A
(1)     115 : D0 E0                      pop     ACC             ; restore an element
(1)     117 : F0                         movx    @DPTR, A        ; add an element
(1)     118 : 18                         dec     R0
(1)     119 : 18                         dec     R0
(1)     11A : 18                         dec     R0
(1)     11B : 06                         inc     @R0             ; queue_put+=1
(1)     11C : E6                         mov     A, @R0          ; A=queue_put
(1)     11D : 18                         dec     R0
(1)     11E : 66                         xrl     A, @R0          ; queue_size
(1)     11F : 70 02                      jnz     queue_add_end   ; branch if queue_put != queue_size
(1)     121 : 08                         inc     R0
(1)     122 : F6                         mov     @R0, A          ; queue_put=0
(1)     123 :                    queue_add_end:
(1)     123 : D3                         setb    C
(1)     124 : 22                         ret
(1)     125 :
(1)     125 :                    ;;; [queue] Remove an element from queue
(1)     125 :                    ;;; @param R0 queue work space pointer
(1)     125 :                    ;;; @return A an element
(1)     125 :                    ;;; @return PSW.C 0 if queue is empty
(1)     125 :                    ;;; @clobber DPTR R0 A
(1)     125 :                    queue_remove:
(1)     125 : E6                         mov     A, @R0            ; queue_len
(1)     126 : 70 02                      jnz     queue_remove_elem ; queue_len > 0
(1)     128 : C3                         clr     C                 ; PSW.C=0
(1)     129 : 22                         ret
(1)     12A :                    queue_remove_elem:
(1)     12A : 16                         dec     @R0             ; queue_len-=1
(1)     12B : 08                         inc     R0
(1)     12C : 08                         inc     R0
(1)     12D : 08                         inc     R0
(1)     12E : E6                         mov     A, @R0          ; A=queue_get
(1)     12F : 08                         inc     R0
(1)     130 : 26                         add     A, @R0          ; A=lo(queue_buf)+queue_get
(1)     131 : F5 82                      mov     DPL, A
(1)     133 : 08                         inc     R0
(1)     134 : E6                         mov     A, @R0          ; A=hi(queue)
(1)     135 : 34 00                      addc    A, #0
(1)     137 : F5 83                      mov     DPH, A
(1)     139 : E0                         movx    A, @DPTR        ; read an element
(1)     13A : C0 E0                      push    ACC             ; save an element
(1)     13C : 18                         dec     R0
(1)     13D : 18                         dec     R0
(1)     13E : 06                         inc     @R0             ; queue_get+=1
(1)     13F : E6                         mov     A, @R0          ; A=queue_get
(1)     140 : 18                         dec     R0
(1)     141 : 18                         dec     R0
(1)     142 : 66                         xrl     A, @R0          ; queue_size
(1)     143 : 70 03                      jnz     queue_remove_end ; branch if queue_get != queue_size
(1)     145 : 08                         inc     R0
(1)     146 : 08                         inc     R0
(1)     147 : F6                         mov     @R0, A          ; queue_get=0
(1)     148 :                    queue_remove_end:
(1)     148 : D0 E0                      pop     ACC             ; restore an element
(1)     14A : D3                         setb    C
(1)     14B : 22                         ret
        14C :
        14C :                    isr_intr_rx:
        14C : C0 D0                      push    PSW
        14E : C2 D4                      clr     PSW.RS1
        150 : D2 D3                      setb    PSW.RS0         ; select BANK 1
        152 : A9 82                      mov     R1, DPL
        154 : AA 83                      mov     R2, DPH         ; save DPTR
        156 : FB                         mov     R3, A           ; save A
        157 : 90 FF F1                   mov     DPTR, #USARTS
        15A : E0                         movx    A, @DPTR
        15B : 30 E1 07                   jnb     ACC.ST_RxRDY_bp, isr_intr_exit
        15E : 15 82                      dec     DPL
        160 : E0                         movx    A, @DPTR
        161 : 78 30                      mov     R0, #rx_queue
        163 : 11 FA                      acall   queue_add
        165 :                    isr_intr_exit:
        165 : EB                         mov     A, R3           ; restore A
        166 : 8A 83                      mov     DPH, R2
        168 : 89 82                      mov     DPL, R1         ; restore DPTR
        16A : D0 D0                      pop     PSW
        16C : 32                         reti
        16D :
        16D :                    isr_intr_tx:
        16D : C0 D0                      push    PSW
        16F : C2 D4                      clr     PSW.RS1
        171 : D2 D3                      setb    PSW.RS0         ; select BANK 1
        173 : A9 82                      mov     R1, DPL
        175 : AA 83                      mov     R2, DPH         ; save DPTR
        177 : FB                         mov     R3, A           ; save A
        178 : 90 FF F1                   mov     DPTR, #USARTS
        17B : E0                         movx    A, @DPTR
        17C : 30 E0 E6                   jnb     ACC.ST_TxRDY_bp, isr_intr_exit
        17F : 78 36                      mov     R0, #tx_queue
        181 : 31 25                      acall   queue_remove
        183 : 50 06                      jnc     isr_intr_tx_empty
        185 : 90 FF F0                   mov     DPTR, #USARTD
        188 : F0                         movx    @DPTR, A        ; send character
        189 : 80 DA                      sjmp    isr_intr_exit
        18B :                    isr_intr_tx_empty:
        18B : 90 FF F1                   mov     DPTR, #USARTC
        18E : 74 36                      mov     A, #RX_EN_TX_DIS
        190 : F0                         movx    @DPTR, A        ; disable Tx
        191 : 80 D2                      sjmp    isr_intr_exit
        193 :
        193 :                            end
