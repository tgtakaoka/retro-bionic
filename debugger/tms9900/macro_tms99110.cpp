#include "macro_tms99110.h"

namespace debugger {
namespace tms99110 {

// clang-format off
constexpr uint16_t TMS99110_MACRO[] = {
    0x0BE0, 0x0BE0, 0x0BE0, 0x0B1C, 0x0B6E, 0x0B80, 0x0BE0, 0x0AF6,
    0x0BE0, 0x0BE0, 0xC138, 0x136D, 0x0224, 0x8000, 0x1002, 0xC138,
    0x1368, 0xC000, 0x1603, 0xC004, 0xC058, 0x1063, 0x04C6, 0xC158,
    0x04C2, 0xC0C0, 0xC1C4, 0x7000, 0x7104, 0x0A13, 0x1702, 0x06A0,
    0x0AE6, 0x0993, 0x0A17, 0x1704, 0x0544, 0x0505, 0x1701, 0x0584,
    0x0997, 0xC247, 0x6243, 0x1319, 0x0289, 0x0006, 0x110F, 0xC0C7,
    0x04C0, 0x04C1, 0x1012, 0xC085, 0x0AC2, 0x001C, 0x4104, 0x0587,
    0x81C3, 0x130B, 0x15F8, 0x06A0, 0x0AD4, 0x10FA, 0x0509, 0x0289,
    0x0006, 0x11F6, 0xC1C3, 0x04C4, 0x04C5, 0xC186, 0x1307, 0x002A,
    0x4004, 0x02CA, 0x024A, 0xE000, 0xE3CA, 0x0380, 0x002A, 0x4004,
    0x1325, 0x1504, 0x06A0, 0x0AE6, 0x0263, 0x0080, 0xD000, 0x1302,
    0x06A0, 0x0AD4, 0x0280, 0x000F, 0x1509, 0x24E0, 0x0BD6, 0x1378,
    0x0603, 0x001D, 0x4100, 0x09C2, 0xA042, 0x10F4, 0x06C3, 0xD003,
    0x1071, 0xC038, 0xC058, 0x1002, 0xCE00, 0xC601, 0x0242, 0x1800,
    0xE3C2, 0x1068, 0x0242, 0x1800, 0xE3C2, 0xC000, 0x135C, 0x0220,
    0x8000, 0x1060, 0xC138, 0x1357, 0x06A0, 0x0A4C, 0xA187, 0xFFC0,
    0xC085, 0x3881, 0xC205, 0x3A00, 0xC284, 0x3A81, 0x3804, 0x002A,
    0x420A, 0x1701, 0x0580, 0x002A, 0x4048, 0x1701, 0x0580, 0xD186,
    0x1607, 0xD001, 0x06C0, 0xD042, 0x06C1, 0x06C2, 0xC0C6, 0x10C2,
    0xCDC0, 0xCDC1, 0xCDC2, 0xC5C3, 0xE001, 0xE002, 0xE003, 0x1602,
    0x026F, 0x2000, 0x0380, 0xC138, 0x1319, 0x06A0, 0x0A4C, 0x6187,
    0x0040, 0x8100, 0x1107, 0x1502, 0x8141, 0x1A04, 0x0586, 0x25A0,
    0x0BD6, 0x130C, 0x001D, 0x4100, 0x001D, 0x4204, 0x3C04, 0x04C2,
    0x3C44, 0xC245, 0x0949, 0x04CA, 0x3E44, 0x1903, 0x026F, 0x1800,
    0x1019, 0x3A40, 0x04C8, 0x001D, 0x4108, 0x09CA, 0xA24A, 0x0029,
    0x4008, 0xC200, 0x09C8, 0x1302, 0x001C, 0x4100, 0x001C, 0x4100,
    0x06C6, 0xD006, 0x1007, 0x04C0, 0x04C1, 0x026F, 0x2000, 0x100B,
    0x026F, 0x0800, 0xC000, 0x1105, 0x1602, 0xC041, 0x13F6, 0x026F,
    0xC000, 0x026F, 0x8000, 0xC740, 0xCB41, 0x0002, 0x0380, 0x04C8,
    0x1001, 0x0708, 0x04C2, 0xC1C0, 0x13E6, 0xC180, 0x7000, 0x06C6,
    0x0246, 0x007F, 0x0226, 0xFFBF, 0x112D, 0x0506, 0x0226, 0x0009,
    0x0606, 0x1108, 0x001C, 0x4101, 0x0A41, 0x001C, 0x4100, 0x0240,
    0x0FFF, 0x10F6, 0xC100, 0xC208, 0x160D, 0xC002, 0xC1C7, 0x1501,
    0x0500, 0x0282, 0x8000, 0x1302, 0xC082, 0x11B0, 0xE101, 0x1314,
    0x04C1, 0x10AC, 0xC001, 0xC1C7, 0x1504, 0x0540, 0x0502, 0x1701,
    0x0580, 0x0281, 0x8000, 0x1302, 0xC041, 0x1102, 0xC104, 0x1304,
    0xC042, 0x10EF, 0x04C0, 0x04C2, 0xC042, 0x10B4, 0xC000, 0x13C4,
    0xC158, 0xC180, 0xC1C4, 0x7000, 0x7104, 0xC207, 0x2A06, 0x06C6,
    0x0246, 0x007F, 0x06C7, 0x0247, 0x007F, 0x04BB, 0xA1BB, 0x0286,
    0x007F, 0x15D7, 0x1B9D, 0x0A18, 0x1702, 0x0226, 0x0080, 0x045B,
    0xC018, 0xC040, 0x08F0, 0x026F, 0x1000, 0xC080, 0xE081, 0x13A4,
    0xC1C0, 0x0247, 0x8000, 0x1304, 0x0540, 0x0501, 0x1701, 0x0580,
    0x0206, 0x0048, 0xC000, 0x1604, 0xC001, 0x04C1, 0x0226, 0xFFFC,
    0xD000, 0x1603, 0x001D, 0x4200, 0x0646, 0xC080, 0x0242, 0xF000,
    0x1603, 0x001D, 0x4100, 0x0606, 0x06C6, 0x001C, 0x4200, 0xD006,
    0xE007, 0x10BB, 0xC081, 0x0AC2, 0x001C, 0x4100, 0x0583, 0x24E0,
    0x0BD6, 0x139F, 0x045B, 0x0540, 0x0541, 0x0502, 0x1703, 0x0581,
    0x1701, 0x0580, 0x045B, 0x2560, 0x0B18, 0x1672, 0x27E0, 0x0B1A,
    0x1303, 0x0300, 0x0000, 0x0380, 0x0283, 0xC000, 0x1303, 0x0283,
    0x6000, 0x1601, 0xC08E, 0x0384, 0xF83F, 0x0100, 0x0285, 0x0302,
    0x155F, 0x1301, 0x04C5, 0x024F, 0x07FF, 0xC0BE, 0x0206, 0x0004,
    0xC042, 0x0241, 0x003F, 0x0101, 0x1601, 0xA686, 0xC008, 0x0242,
    0x0FC0, 0x0102, 0x1B04, 0xC145, 0x1301, 0x0A16, 0xA646, 0xC085,
    0xC200, 0xC038, 0xC058, 0xC117, 0xC167, 0x0002, 0x0706, 0xC082,
    0x1604, 0x0224, 0x8000, 0x0460, 0x0830, 0x0460, 0x0900, 0x0285,
    0x0C3F, 0x1506, 0x2560, 0x0BD4, 0x161C, 0x0245, 0x0006, 0x1011,
    0xC2C5, 0x0245, 0x01FF, 0x0105, 0x1609, 0x024B, 0xFFC0, 0x028B,
    0x0C80, 0x1602, 0x05DA, 0x1002, 0xA6A0, 0x0B2E, 0x0855, 0x0225,
    0x0006, 0xC01D, 0xC06D, 0x0002, 0xC08F, 0x024F, 0x07FF, 0x0165,
    0x0BBE, 0xC1C5, 0x0917, 0x0287, 0x0607, 0x1612, 0x0380, 0x09CE,
    0x08E4, 0x09D2, 0x0A86, 0x081E, 0x0A80, 0x0814, 0x08F4, 0x0946,
    0x08D2, 0x08D8, 0x0039, 0x007F, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
    0xC1E0, 0x1000, 0x0287, 0xAAAA, 0x1602, 0x0460, 0x1002, 0x0382,
    0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
};
// clang-format on

template <typename T, uint_fast16_t SIZE>
inline auto nelem(const T (&array)[SIZE]) {
    return SIZE;
}

void MacroTms99110::load(tms99105::MemsTms99105 *mems) {
    for (uint_fast16_t i = 0; i < nelem(TMS99110_MACRO); i++) {
        const auto addr = 0x0800 + i * 2;
        mems->writeMacro(addr, TMS99110_MACRO[i]);
    }
}

}  // namespace tms99110
}  // namespace debugger

// Local Variables:
// mode: c++
// c-basic-offset: 4
// tab-width: 4
// End:
// vim: set ft=cpp et ts=4 sw=4:
